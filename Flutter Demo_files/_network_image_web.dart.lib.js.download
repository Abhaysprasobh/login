// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/_network_image_web.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/capabilities.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__painting___network_image_web_dart(dart_sdk, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__capabilities$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js_util = dart_sdk.js_util;
  const js_interop = dart_sdk.js_interop;
  const ui = dart_sdk.ui;
  const ui_web = dart_sdk.ui_web;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const capabilities = packages__flutter__src__foundation__capabilities$46dart.src__foundation__capabilities;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const binding = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const asset_bundle = packages__flutter__src__services__text_editing_delta$46dart.src__services__asset_bundle;
  var _network_image_web = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $forEach = dartx.forEach;
  var $asUint8List = dartx.asUint8List;
  var $lengthInBytes = dartx.lengthInBytes;
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $truncate = dartx.truncate;
  var $floor = dartx.floor;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    NetworkImage: () => (T$.NetworkImage = dart.constFn(dart_rti.findType("flutter__src__painting___network_image_web|NetworkImage")))(),
    NetworkImage$1: () => (T$.NetworkImage$1 = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|NetworkImage")))(),
    ImageChunkEvent: () => (T$.ImageChunkEvent = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageChunkEvent")))(),
    ImageProviderOfObject: () => (T$.ImageProviderOfObject = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ImageProvider<core|Object>")))(),
    DiagnosticsNode: () => (T$.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    XMLHttpRequest: () => (T$.XMLHttpRequest = dart.constFn(dart_rti.findType("_interceptors|JavaScriptObject")))(),
    String: () => (T$.String = dart.constFn(dart_rti.findType("core|String")))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart_rti.findType("~(core|String,core|String)")))(),
    void: () => (T$.void = dart.constFn(dart_rti.findType("~")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))(),
    EventToNull: () => (T$.EventToNull = dart.constFn(dart_rti.findType("core|Null(_interceptors|JavaScriptObject)")))(),
    JSObjectTovoid: () => (T$.JSObjectTovoid = dart.constFn(dart_rti.findType("~(_interceptors|JSObject)")))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart_rti.findType("core|Object?")))(),
    NativeByteBuffer: () => (T$.NativeByteBuffer = dart.constFn(dart_rti.findType("_native_typed_data|NativeByteBuffer")))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart_rti.findType("~(core|int,core|int)")))(),
    Codec: () => (T$.Codec = dart.constFn(dart_rti.findType("ui|Codec")))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(dart_rti.findType("async|Future<core|Null>")))(),
    ImageConfiguration: () => (T$.ImageConfiguration = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ImageConfiguration")))(),
    ImageCacheStatusN: () => (T$.ImageCacheStatusN = dart.constFn(dart_rti.findType("flutter__src__painting__image_cache|ImageCacheStatus?")))(),
    ObjectAndStackTraceNToFutureOfvoid: () => (T$.ObjectAndStackTraceNToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|Object,core|StackTrace?)")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    VoidToImageStreamCompleter: () => (T$.VoidToImageStreamCompleter = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleter()")))(),
    _AbstractImageStreamCompleter: () => (T$._AbstractImageStreamCompleter = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|_AbstractImageStreamCompleter")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ImageConfigurationToImageStream: () => (T$.ImageConfigurationToImageStream = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStream(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    __ToFutureOfImageCacheStatusN: () => (T$.__ToFutureOfImageCacheStatusN = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_cache|ImageCacheStatus?>({configuration!flutter__src__painting__image_provider|ImageConfiguration,handleError:~(core|Object,core|StackTrace?)?})")))(),
    ImageConfigurationAndImageStreamAndObjectN__Tovoid: () => (T$.ImageConfigurationAndImageStreamAndObjectN__Tovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_provider|ImageConfiguration,flutter__src__painting__image_stream|ImageStream,core|Object?,~(core|Object,core|StackTrace?))")))(),
    __ToFutureOfbool: () => (T$.__ToFutureOfbool = dart.constFn(dart_rti.findType("async|Future<core|bool>({cache:flutter__src__painting__image_cache|ImageCache?,configuration:flutter__src__painting__image_provider|ImageConfiguration})")))(),
    ObjectNAndFnToImageStreamCompleter: () => (T$.ObjectNAndFnToImageStreamCompleter = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleter(core|Object?,async|Future<ui|Codec>(ui|ImmutableBuffer{allowUpscaling:core|bool,cacheHeight:core|int?,cacheWidth:core|int?}))")))(),
    ObjectNAndFnToImageStreamCompleter$1: () => (T$.ObjectNAndFnToImageStreamCompleter$1 = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleter(core|Object?,async|Future<ui|Codec>(ui|ImmutableBuffer{getTargetSize:ui|TargetImageSize(core|int,core|int)?}))")))(),
    ImageConfigurationToFutureOfNetworkImage: () => (T$.ImageConfigurationToFutureOfNetworkImage = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting___network_image_web|NetworkImage>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    NetworkImageToFn: () => (T$.NetworkImageToFn = dart.constFn(dart_rti.findType("core|Iterable<flutter__src__foundation__diagnostics|DiagnosticsNode>()?(flutter__src__painting__image_provider|NetworkImage)")))(),
    NetworkImageAndFnAndStreamControllerOfImageChunkEventToFutureOfCodec: () => (T$.NetworkImageAndFnAndStreamControllerOfImageChunkEventToFutureOfCodec = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(flutter__src__painting___network_image_web|NetworkImage,async|Future<ui|Codec>(ui|ImmutableBuffer),async|StreamController<flutter__src__painting__image_stream|ImageChunkEvent>)")))(),
    double: () => (T$.double = dart.constFn(dart_rti.findType("core|double")))(),
    MapNOfString$String: () => (T$.MapNOfString$String = dart.constFn(dart_rti.findType("core|Map<core|String,core|String>?")))(),
    VoidToXMLHttpRequest: () => (T$.VoidToXMLHttpRequest = dart.constFn(dart_rti.findType("_interceptors|JavaScriptObject()")))(),
    __ToImageConfiguration: () => (T$.__ToImageConfiguration = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ImageConfiguration({bundle:flutter__src__services__asset_bundle|AssetBundle?,devicePixelRatio:core|double?,locale:ui|Locale?,platform:flutter__src__foundation__platform|TargetPlatform?,size:ui|Size?,textDirection:ui|TextDirection?})")))(),
    AssetBundleN: () => (T$.AssetBundleN = dart.constFn(dart_rti.findType("flutter__src__services__asset_bundle|AssetBundle?")))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    LocaleN: () => (T$.LocaleN = dart.constFn(dart_rti.findType("ui|Locale?")))(),
    TextDirectionN: () => (T$.TextDirectionN = dart.constFn(dart_rti.findType("ui|TextDirection?")))(),
    SizeN: () => (T$.SizeN = dart.constFn(dart_rti.findType("ui|Size?")))(),
    TargetPlatformN: () => (T$.TargetPlatformN = dart.constFn(dart_rti.findType("flutter__src__foundation__platform|TargetPlatform?")))(),
    AssetBundleImageKey: () => (T$.AssetBundleImageKey = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|AssetBundleImageKey")))(),
    AssetBundle: () => (T$.AssetBundle = dart.constFn(dart_rti.findType("flutter__src__services__asset_bundle|AssetBundle")))(),
    AssetBundleImageProvider: () => (T$.AssetBundleImageProvider = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|AssetBundleImageProvider")))(),
    FlutterError: () => (T$.FlutterError = dart.constFn(dart_rti.findType("flutter__src__foundation__assertions|FlutterError")))(),
    AssetBundleImageKey__ToFutureOfCodec: () => (T$.AssetBundleImageKey__ToFutureOfCodec = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(flutter__src__painting__image_provider|AssetBundleImageKey{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})")))(),
    ResizeImageKey: () => (T$.ResizeImageKey = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ResizeImageKey")))(),
    ResizeImagePolicy: () => (T$.ResizeImagePolicy = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ResizeImagePolicy")))(),
    intN: () => (T$.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfResizeImagePolicy: () => (T$.ListOfResizeImagePolicy = dart.constFn(dart_rti.findType("core|List<flutter__src__painting__image_provider|ResizeImagePolicy>")))(),
    ResizeImage: () => (T$.ResizeImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ResizeImage")))(),
    ImmutableBuffer__ToFutureOfCodec: () => (T$.ImmutableBuffer__ToFutureOfCodec = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(ui|ImmutableBuffer{allowUpscaling:core|bool?,cacheHeight:core|int?,cacheWidth:core|int?})")))(),
    intAndintToTargetImageSize: () => (T$.intAndintToTargetImageSize = dart.constFn(dart_rti.findType("ui|TargetImageSize(core|int,core|int)")))(),
    ImmutableBuffer__ToFutureOfCodec$1: () => (T$.ImmutableBuffer__ToFutureOfCodec$1 = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(ui|ImmutableBuffer{getTargetSize:ui|TargetImageSize(core|int,core|int)?})")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    ObjectAndStackTraceNTovoid: () => (T$.ObjectAndStackTraceNTovoid = dart.constFn(dart_rti.findType("~(core|Object,core|StackTrace?)")))(),
    Null: () => (T$.Null = dart.constFn(dart_rti.findType("core|Null")))(),
    ObjectToNull: () => (T$.ObjectToNull = dart.constFn(dart_rti.findType("core|Null(core|Object)")))(),
    intNAndintNAndImageProviderOfObjectToImageProviderOfObject: () => (T$.intNAndintNAndImageProviderOfObjectToImageProviderOfObject = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ImageProvider<core|Object>(core|int?,core|int?,flutter__src__painting__image_provider|ImageProvider<core|Object>)")))(),
    ImageStreamCompleterAndResizeImageKeyTovoid: () => (T$.ImageStreamCompleterAndResizeImageKeyTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageStreamCompleter,flutter__src__painting__image_provider|ResizeImageKey)")))(),
    ImageConfigurationToFutureOfResizeImageKey: () => (T$.ImageConfigurationToFutureOfResizeImageKey = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_provider|ResizeImageKey>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    String__ToNetworkImage: () => (T$.String__ToNetworkImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|NetworkImage(core|String{headers:core|Map<core|String,core|String>?,scale:core|double})")))(),
    FileImage: () => (T$.FileImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|FileImage")))(),
    File: () => (T$.File = dart.constFn(dart_rti.findType("io|File")))(),
    ImageConfigurationToFutureOfFileImage: () => (T$.ImageConfigurationToFutureOfFileImage = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_provider|FileImage>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    FileImage__ToFutureOfCodec: () => (T$.FileImage__ToFutureOfCodec = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(flutter__src__painting__image_provider|FileImage{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})")))(),
    MemoryImage: () => (T$.MemoryImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|MemoryImage")))(),
    ImageConfigurationToFutureOfMemoryImage: () => (T$.ImageConfigurationToFutureOfMemoryImage = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_provider|MemoryImage>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    MemoryImage__ToFutureOfCodec: () => (T$.MemoryImage__ToFutureOfCodec = dart.constFn(dart_rti.findType("async|Future<ui|Codec>(flutter__src__painting__image_provider|MemoryImage{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})")))(),
    Uint8List: () => (T$.Uint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List")))(),
    ExactAssetImage: () => (T$.ExactAssetImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|ExactAssetImage")))(),
    ImageConfigurationToFutureOfAssetBundleImageKey: () => (T$.ImageConfigurationToFutureOfAssetBundleImageKey = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_provider|AssetBundleImageKey>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    StringN: () => (T$.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    Uri: () => (T$.Uri = dart.constFn(dart_rti.findType("core|Uri")))()
  };
  var G = {
    SynchronousFutureOfNetworkImage: () => (G.SynchronousFutureOfNetworkImage = dart.constFn(synchronous_future.SynchronousFuture$(T$.NetworkImage())))(),
    StreamControllerOfImageChunkEvent: () => (G.StreamControllerOfImageChunkEvent = dart.constFn(async.StreamController$(T$.ImageChunkEvent())))(),
    DiagnosticsPropertyOfImageProviderOfObject: () => (G.DiagnosticsPropertyOfImageProviderOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ImageProviderOfObject())))(),
    DiagnosticsPropertyOfNetworkImage: () => (G.DiagnosticsPropertyOfNetworkImage = dart.constFn(diagnostics.DiagnosticsProperty$(T$.NetworkImage())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNode())))(),
    CompleterOfXMLHttpRequest: () => (G.CompleterOfXMLHttpRequest = dart.constFn(async.Completer$(T$.XMLHttpRequest())))(),
    DiagnosticsPropertyOfImageConfiguration: () => (G.DiagnosticsPropertyOfImageConfiguration = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ImageConfiguration())))(),
    CompleterOfImageCacheStatusN: () => (G.CompleterOfImageCacheStatusN = dart.constFn(async.Completer$(T$.ImageCacheStatusN())))(),
    DiagnosticsPropertyOfAssetBundleImageKey: () => (G.DiagnosticsPropertyOfAssetBundleImageKey = dart.constFn(diagnostics.DiagnosticsProperty$(T$.AssetBundleImageKey())))(),
    SynchronousFutureOfResizeImageKey: () => (G.SynchronousFutureOfResizeImageKey = dart.constFn(synchronous_future.SynchronousFuture$(T$.ResizeImageKey())))(),
    CompleterOfResizeImageKey: () => (G.CompleterOfResizeImageKey = dart.constFn(async.Completer$(T$.ResizeImageKey())))(),
    SynchronousFutureOfFileImage: () => (G.SynchronousFutureOfFileImage = dart.constFn(synchronous_future.SynchronousFuture$(T$.FileImage())))(),
    SynchronousFutureOfMemoryImage: () => (G.SynchronousFutureOfMemoryImage = dart.constFn(synchronous_future.SynchronousFuture$(T$.MemoryImage())))(),
    SynchronousFutureOfAssetBundleImageKey: () => (G.SynchronousFutureOfAssetBundleImageKey = dart.constFn(synchronous_future.SynchronousFuture$(T$.AssetBundleImageKey())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [ImageConfiguration_platform]: null,
        [ImageConfiguration_size]: null,
        [ImageConfiguration_textDirection]: null,
        [ImageConfiguration_locale]: null,
        [ImageConfiguration_devicePixelRatio]: null,
        [ImageConfiguration_bundle]: null
      }, image_provider.ImageConfiguration.prototype));
    },
    get C1() {
      return C[1] = dart.fn(_network_image_web._httpClient, T$.VoidToXMLHttpRequest());
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "exact",
        [_Enum_index]: 0
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "fit",
        [_Enum_index]: 1
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], T$.ResizeImagePolicy());
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/_network_image_web.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/image_provider.dart",
    "package:flutter/src/painting/image_provider.dart",
    "package:flutter/src/painting/_network_image_web.dart",
    "dart:core",
    "package:flutter/src/services/asset_bundle.dart",
    "dart:ui",
    "package:flutter/src/foundation/platform.dart",
    "dart:io",
    "dart:typed_data"
  ];
  var url$ = dart.privateName(_network_image_web, "NetworkImage.url");
  var scale$ = dart.privateName(_network_image_web, "NetworkImage.scale");
  var headers$ = dart.privateName(_network_image_web, "NetworkImage.headers");
  var _as = dart.privateName(dart_rti, "_as");
  var _loadAsync = dart.privateName(_network_image_web, "_loadAsync");
  var _imageStreamInformationCollector = dart.privateName(_network_image_web, "_imageStreamInformationCollector");
  var _is = dart.privateName(dart_rti, "_is");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _createErrorHandlerAndKey = dart.privateName(image_provider, "_createErrorHandlerAndKey");
  var ImageConfiguration_platform = dart.privateName(image_provider, "ImageConfiguration.platform");
  var ImageConfiguration_size = dart.privateName(image_provider, "ImageConfiguration.size");
  var ImageConfiguration_textDirection = dart.privateName(image_provider, "ImageConfiguration.textDirection");
  var ImageConfiguration_locale = dart.privateName(image_provider, "ImageConfiguration.locale");
  var ImageConfiguration_devicePixelRatio = dart.privateName(image_provider, "ImageConfiguration.devicePixelRatio");
  var ImageConfiguration_bundle = dart.privateName(image_provider, "ImageConfiguration.bundle");
  const _is_ImageProvider_default = Symbol('_is_ImageProvider_default');
  image_provider.ImageProvider$ = dart.generic(T => {
    var __t$ImageProviderOfT = () => (__t$ImageProviderOfT = dart.constFn(T[_eval]("flutter__src__painting__image_provider|ImageProvider<0>")))();
    var __t$TAndFnTovoid = () => (__t$TAndFnTovoid = dart.constFn(T[_eval]("~(0,~(core|Object,core|StackTrace?))")))();
    var __t$TNAndObjectAndStackTraceNToFutureOfvoid = () => (__t$TNAndObjectAndStackTraceNToFutureOfvoid = dart.constFn(T[_eval]("async|Future<~>(0?,core|Object,core|StackTrace?)")))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(T[_eval]("core|Null(0)")))();
    var __t$ImageConfigurationAndFnAndFnTovoid = () => (__t$ImageConfigurationAndFnAndFnTovoid = dart.constFn(T[_eval]("~(flutter__src__painting__image_provider|ImageConfiguration,~(0,~(core|Object,core|StackTrace?)),async|Future<~>(0?,core|Object,core|StackTrace?))")))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class ImageProvider extends core.Object {
      resolve(configuration) {
        let stream = this.createStream(configuration);
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, errorHandler) => {
          this.resolveStreamForKey(configuration, stream, key, errorHandler);
        }, __t$TAndFnTovoid()), dart.fn((key, exception, stack) => async.async(T$.void(), (function*() {
          yield async.awaitWithTypeCheck(T$.FutureOfNull(), null);
          let collector = null;
          if (!dart.fn(() => {
            collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (G.DiagnosticsPropertyOfImageConfiguration()).new("Image configuration", configuration), new (__t$DiagnosticsPropertyOfT()).new("Image key", key, {defaultValue: null})]), T$.VoidToListOfDiagnosticsNode());
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 371, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n            DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n          ];\r\n          return true;\r\n        }()");
          if (stream.completer == null) {
            stream.setCompleter(new image_provider._ErrorImageCompleter.new());
          }
          dart.nullCheck(stream.completer).reportError({exception: exception, stack: stack, context: new assertions.ErrorDescription.new("while resolving an image"), silent: true, informationCollector: collector});
        }).bind(this)), __t$TNAndObjectAndStackTraceNToFutureOfvoid()));
        return stream;
      }
      createStream(configuration) {
        return new image_stream.ImageStream.new();
      }
      obtainCacheStatus(opts) {
        let configuration = opts && 'configuration' in opts ? opts.configuration : null;
        let handleError = opts && 'handleError' in opts ? opts.handleError : null;
        let completer = G.CompleterOfImageCacheStatusN().new();
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, innerHandleError) => {
          completer.complete(binding.PaintingBinding.instance.imageCache.statusForKey(key));
        }, __t$TAndFnTovoid()), dart.fn((key, exception, stack) => async.async(T$.void(), (function*() {
          if (handleError != null) {
            handleError(exception, stack);
          } else {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (G.DiagnosticsPropertyOfImageConfiguration()).new("Image configuration", configuration), new (__t$DiagnosticsPropertyOfT()).new("Image key", key, {defaultValue: null})]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 428, 18, "() {\r\n            collector = () => <DiagnosticsNode>[\r\n              DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n              DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n              DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n            ];\r\n            return true;\r\n          }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("while checking the cache location of an image"), informationCollector: collector, exception: exception, stack: stack}));
            completer.complete();
          }
        }).bind(this)), __t$TNAndObjectAndStackTraceNToFutureOfvoid()));
        return completer.future;
      }
      [_createErrorHandlerAndKey](configuration, successCallback, errorCallback) {
        let obtainedKey = null;
        let didError = false;
        function handleError(exception, stack) {
          return async.async(T$.void(), function* handleError() {
            if (didError) {
              return;
            }
            if (!didError) {
              didError = true;
              errorCallback(obtainedKey, exception, stack);
            }
          });
        }
        dart.fn(handleError, T$.ObjectAndStackTraceNToFutureOfvoid());
        let key = null;
        try {
          key = this.obtainKey(configuration);
        } catch (t$36$35e) {
          let error = dart.getThrown(t$36$35e);
          let stackTrace = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](error)) {
            handleError(error, stackTrace);
            return;
          } else
            throw t$36$35e;
        }
        key.then(T$.void(), dart.fn(key => {
          obtainedKey = key;
          try {
            successCallback(key, handleError);
          } catch (t$36$35e) {
            let error = dart.getThrown(t$36$35e);
            let stackTrace = dart.stackTrace(t$36$35e);
            if (T$.Object()[_is](error)) {
              handleError(error, stackTrace);
            } else
              throw t$36$35e;
          }
        }, __t$TToNull())).catchError(handleError);
      }
      resolveStreamForKey(configuration, stream, key, handleError) {
        T[_as](key);
        if (stream.completer != null) {
          let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => dart.nullCheck(stream.completer), T$.VoidToImageStreamCompleter()), {onError: handleError});
          if (!(completer == stream.completer)) dart.assertFailed(null, I[1], 514, 14, "identical(completer, stream.completer)");
          return;
        }
        let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => {
          let result = this.loadImage(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecWithSize'));
          if (T$._AbstractImageStreamCompleter()[_is](result)) {
            result = this.loadBuffer(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecFromBuffer'));
          }
          return result;
        }, T$.VoidToImageStreamCompleter()), {onError: handleError});
        if (completer != null) {
          stream.setCompleter(completer);
        }
      }
      evict(opts) {
        let cache = opts && 'cache' in opts ? opts.cache : null;
        let configuration = opts && 'configuration' in opts ? opts.configuration : C[0] || CT.C0;
        return async.async(T$.bool(), (function* evict() {
          cache == null ? cache = binding.imageCache : null;
          let key = (yield this.obtainKey(configuration));
          return cache.evict(key);
        }).bind(this));
      }
      loadBuffer(key, decode) {
        T[_as](key);
        return new image_provider._AbstractImageStreamCompleter.new();
      }
      loadImage(key, decode) {
        T[_as](key);
        return new image_provider._AbstractImageStreamCompleter.new();
      }
      toString() {
        return object.objectRuntimeType(this, "ImageConfiguration") + "()";
      }
    }
    (ImageProvider.new = function() {
      this.$ti = this.$ti || __t$ImageProviderOfT();
      ;
    }).prototype = ImageProvider.prototype;
    dart.addTypeTests(ImageProvider);
    ImageProvider.prototype[_is_ImageProvider_default] = true;
    dart.addRtiResources(ImageProvider, ["flutter__src__painting__image_provider|ImageProvider"]);
    dart.addTypeCaches(ImageProvider);
    dart.setMethodSignature(ImageProvider, () => dart.global.Object.setPrototypeOf({
      resolve: T$.ImageConfigurationToImageStream(),
      createStream: T$.ImageConfigurationToImageStream(),
      obtainCacheStatus: T$.__ToFutureOfImageCacheStatusN(),
      [_createErrorHandlerAndKey]: __t$ImageConfigurationAndFnAndFnTovoid(),
      resolveStreamForKey: T$.ImageConfigurationAndImageStreamAndObjectN__Tovoid(),
      evict: T$.__ToFutureOfbool(),
      loadBuffer: T$.ObjectNAndFnToImageStreamCompleter(),
      loadImage: T$.ObjectNAndFnToImageStreamCompleter$1()
    }, dart.getMethods(dart.global.Object.getPrototypeOf(ImageProvider))));
    dart.setLibraryUri(ImageProvider, I[2]);
    dart.defineExtensionMethods(ImageProvider, ['toString']);
    return ImageProvider;
  });
  image_provider.ImageProvider = image_provider.ImageProvider$();
  dart.addTypeTests(image_provider.ImageProvider, _is_ImageProvider_default);
  _network_image_web.NetworkImage = class NetworkImage extends image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|NetworkImage")) {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(url, {scale: scale, headers: headers});
    }
    obtainKey(configuration) {
      return new (G.SynchronousFutureOfNetworkImage()).new(this);
    }
    loadBuffer(key, decode) {
      T$.NetworkImage$1()[_as](key);
      let chunkEvents = G.StreamControllerOfImageChunkEvent().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](T$.NetworkImage()[_as](key), decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    loadImage(key, decode) {
      T$.NetworkImage$1()[_as](key);
      let chunkEvents = G.StreamControllerOfImageChunkEvent().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](T$.NetworkImage()[_as](key), decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    [_imageStreamInformationCollector](key) {
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (G.DiagnosticsPropertyOfNetworkImage()).new("Image key", T$.NetworkImage()[_as](key))]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 94, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<image_provider.ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<NetworkImage>('Image key', key as NetworkImage),\r\n      ];\r\n      return true;\r\n    }()");
      return collector;
    }
    [_loadAsync](key, decode, chunkEvents) {
      return async.async(T$.Codec(), (function* _loadAsync() {
        let t$360, t$360$;
        if (!dart.equals(key, this)) dart.assertFailed(null, I[0], 112, 12, "key == this");
        let resolved = core.Uri.base.resolve(key.url);
        let containsNetworkImageHeaders = (t$360$ = (t$360 = key.headers, t$360 == null ? null : t$360[$isNotEmpty]), t$360$ == null ? false : t$360$);
        if (capabilities.isCanvasKit || containsNetworkImageHeaders) {
          let completer = G.CompleterOfXMLHttpRequest().new();
          let request = _network_image_web.httpRequestFactory();
          request.open("GET", key.url, true);
          js_util.setProperty(T$.String(), request, "responseType", "arraybuffer");
          if (containsNetworkImageHeaders) {
            dart.nullCheck(key.headers)[$forEach](dart.fn((header, value) => {
              request.setRequestHeader(header, value);
            }, T$.StringAndStringTovoid()));
          }
          js_util.callMethod(T$.void(), request, "addEventListener", ["load", js_interop['FunctionToJSExportedDartFunction|get#toJS'](dart.fn(e => {
              let status = js_util.getProperty(T$.int(), request, "status");
              let accepted = status >= 200 && status < 300;
              let fileUri = status === 0;
              let notModified = status === 304;
              let unknownRedirect = status > 307 && status < 400;
              let success = accepted || fileUri || notModified || unknownRedirect;
              if (success) {
                completer.complete(request);
              } else {
                completer.completeError(e);
                dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: status, uri: resolved}));
              }
            }, T$.EventToNull()))]);
          js_util.callMethod(T$.void(), request, "addEventListener", ["error", js_interop['FunctionToJSExportedDartFunction|get#toJS'](dart.fn(e => completer.completeError(e), T$.JSObjectTovoid()))]);
          request.send();
          yield completer.future;
          let bytes = js_interop['JSArrayBufferToByteBuffer|get#toDart'](T$.NativeByteBuffer()[_as](dart.nullCheck(js_util.getProperty(T$.ObjectN(), request, "response"))))[$asUint8List]();
          if (bytes[$lengthInBytes] === 0) {
            dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: js_util.getProperty(T$.int(), request, "status"), uri: resolved}));
          }
          return decode(yield ui.ImmutableBuffer.fromUint8List(bytes));
        } else {
          return ui_web.createImageCodecFromUrl(resolved, {chunkCallback: dart.fn((bytes, total) => {
              chunkEvents.add(new image_stream.ImageChunkEvent.new({cumulativeBytesLoaded: bytes, expectedTotalBytes: total}));
            }, T$.intAndintTovoid())});
        }
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.NetworkImage()[_is](other) && other.url === this.url && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.url, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "NetworkImage") + "(\"" + this.url + "\", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (_network_image_web.NetworkImage.new = function(url, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[url$] = url;
    this[scale$] = scale;
    this[headers$] = headers;
    this.$ti = this.$ti || T$.NetworkImage();
    dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage).new.call(this);
    ;
  }).prototype = _network_image_web.NetworkImage.prototype;
  dart.addTypeTests(_network_image_web.NetworkImage);
  dart.addRtiResources(_network_image_web.NetworkImage, ["flutter__src__painting___network_image_web|NetworkImage", "flutter__src__painting__image_provider|NetworkImage", "flutter__src__painting__image_provider|ImageProvider"]);
  dart.addTypeCaches(_network_image_web.NetworkImage);
  dart.setMethodSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: T$.ImageConfigurationToFutureOfNetworkImage(),
    [_imageStreamInformationCollector]: T$.NetworkImageToFn(),
    [_loadAsync]: T$.NetworkImageAndFnAndStreamControllerOfImageChunkEventToFutureOfCodec()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.setLibraryUri(_network_image_web.NetworkImage, I[3]);
  dart.setFieldSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    url: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[4]},
    scale: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[4]},
    headers: {type: T$.MapNOfString$String(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.defineExtensionMethods(_network_image_web.NetworkImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_network_image_web.NetworkImage, ['hashCode']);
  _network_image_web._httpClient = function _httpClient() {
    return T$.XMLHttpRequest()[_as](new dart.global.XMLHttpRequest());
  };
  _network_image_web.debugRestoreHttpRequestFactory = function debugRestoreHttpRequestFactory() {
    _network_image_web.httpRequestFactory = C[1] || CT.C1;
  };
  dart.defineLazy(_network_image_web, {
    /*_network_image_web.httpRequestFactory*/get httpRequestFactory() {
      return C[1] || CT.C1;
    },
    set httpRequestFactory(value) {}
  }, false);
  const bundle$ = ImageConfiguration_bundle;
  const devicePixelRatio$ = ImageConfiguration_devicePixelRatio;
  const locale$ = ImageConfiguration_locale;
  const textDirection$ = ImageConfiguration_textDirection;
  const size$ = ImageConfiguration_size;
  const platform$ = ImageConfiguration_platform;
  image_provider.ImageConfiguration = class ImageConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: bundle, devicePixelRatio: devicePixelRatio, locale: locale, textDirection: textDirection, size: size, platform: platform});
    }
    copyWith(opts) {
      let t$362, t$362$, t$362$0, t$362$1, t$362$2, t$362$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: (t$362 = bundle, t$362 == null ? this.bundle : t$362), devicePixelRatio: (t$362$ = devicePixelRatio, t$362$ == null ? this.devicePixelRatio : t$362$), locale: (t$362$0 = locale, t$362$0 == null ? this.locale : t$362$0), textDirection: (t$362$1 = textDirection, t$362$1 == null ? this.textDirection : t$362$1), size: (t$362$2 = size, t$362$2 == null ? this.size : t$362$2), platform: (t$362$3 = platform, t$362$3 == null ? this.platform : t$362$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.ImageConfiguration()[_is](other) && dart.equals(other.bundle, this.bundle) && other.devicePixelRatio == this.devicePixelRatio && dart.equals(other.locale, this.locale) && other.textDirection == this.textDirection && dart.equals(other.size, this.size) && other.platform == this.platform;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.devicePixelRatio, this.locale, this.size, this.platform);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("ImageConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.devicePixelRatio != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("devicePixelRatio: " + dart.nullCheck(this.devicePixelRatio)[$toStringAsFixed](1));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.size != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("size: " + dart.str(this.size));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("platform: " + core['EnumName|get#name'](dart.nullCheck(this.platform)));
        hasArguments = true;
      }
      result.write(")");
      return dart.toString(result);
    }
  };
  (image_provider.ImageConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    this[bundle$] = bundle;
    this[devicePixelRatio$] = devicePixelRatio;
    this[locale$] = locale;
    this[textDirection$] = textDirection;
    this[size$] = size;
    this[platform$] = platform;
    ;
  }).prototype = image_provider.ImageConfiguration.prototype;
  dart.addTypeTests(image_provider.ImageConfiguration);
  dart.addRtiResources(image_provider.ImageConfiguration, ["flutter__src__painting__image_provider|ImageConfiguration"]);
  dart.addTypeCaches(image_provider.ImageConfiguration);
  dart.setMethodSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({copyWith: T$.__ToImageConfiguration()}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setLibraryUri(image_provider.ImageConfiguration, I[2]);
  dart.setFieldSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({
    bundle: {type: T$.AssetBundleN(), isConst: false, isFinal: true, libraryUri: I[5]},
    devicePixelRatio: {type: T$.doubleN(), isConst: false, isFinal: true, libraryUri: I[4]},
    locale: {type: T$.LocaleN(), isConst: false, isFinal: true, libraryUri: I[6]},
    textDirection: {type: T$.TextDirectionN(), isConst: false, isFinal: true, libraryUri: I[6]},
    size: {type: T$.SizeN(), isConst: false, isFinal: true, libraryUri: I[6]},
    platform: {type: T$.TargetPlatformN(), isConst: false, isFinal: true, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setStaticFieldSignature(image_provider.ImageConfiguration, () => ['empty']);
  dart.defineExtensionMethods(image_provider.ImageConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ImageConfiguration, ['hashCode']);
  dart.defineLazy(image_provider.ImageConfiguration, {
    /*image_provider.ImageConfiguration.empty*/get empty() {
      return C[0] || CT.C0;
    }
  }, false);
  image_provider._AbstractImageStreamCompleter = class _AbstractImageStreamCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._AbstractImageStreamCompleter.new();
    }
  };
  (image_provider._AbstractImageStreamCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._AbstractImageStreamCompleter).new.call(this);
    ;
  }).prototype = image_provider._AbstractImageStreamCompleter.prototype;
  dart.addTypeTests(image_provider._AbstractImageStreamCompleter);
  dart.addRtiResources(image_provider._AbstractImageStreamCompleter, ["flutter__src__painting__image_provider|_AbstractImageStreamCompleter"]);
  dart.addTypeCaches(image_provider._AbstractImageStreamCompleter);
  dart.setLibraryUri(image_provider._AbstractImageStreamCompleter, I[2]);
  var bundle$0 = dart.privateName(image_provider, "AssetBundleImageKey.bundle");
  var name$ = dart.privateName(image_provider, "AssetBundleImageKey.name");
  var scale$0 = dart.privateName(image_provider, "AssetBundleImageKey.scale");
  image_provider.AssetBundleImageKey = class AssetBundleImageKey extends core.Object {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get scale() {
      return this[scale$0];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      return new image_provider.AssetBundleImageKey.new({bundle: bundle, name: name, scale: scale});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.AssetBundleImageKey()[_is](other) && dart.equals(other.bundle, this.bundle) && other.name === this.name && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.name, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "AssetBundleImageKey") + "(bundle: " + dart.str(this.bundle) + ", name: \"" + this.name + "\", scale: " + dart.strSafe(this.scale) + ")";
    }
  };
  (image_provider.AssetBundleImageKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    this[bundle$0] = bundle;
    this[name$] = name;
    this[scale$0] = scale;
    ;
  }).prototype = image_provider.AssetBundleImageKey.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageKey);
  dart.addRtiResources(image_provider.AssetBundleImageKey, ["flutter__src__painting__image_provider|AssetBundleImageKey"]);
  dart.addTypeCaches(image_provider.AssetBundleImageKey);
  dart.setLibraryUri(image_provider.AssetBundleImageKey, I[2]);
  dart.setFieldSignature(image_provider.AssetBundleImageKey, () => dart.global.Object.setPrototypeOf({
    bundle: {type: T$.AssetBundle(), isConst: false, isFinal: true, libraryUri: I[5]},
    name: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[4]},
    scale: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageKey))));
  dart.defineExtensionMethods(image_provider.AssetBundleImageKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.AssetBundleImageKey, ['hashCode']);
  var _loadAsync$ = dart.privateName(image_provider, "_loadAsync");
  image_provider.AssetBundleImageProvider = class AssetBundleImageProvider extends image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|AssetBundleImageKey")) {
    loadImage(key, decode) {
      T$.AssetBundleImageKey()[_as](key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (G.DiagnosticsPropertyOfAssetBundleImageKey()).new("Image key", key)]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 706, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n          ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    loadBuffer(key, decode) {
      T$.AssetBundleImageKey()[_as](key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (G.DiagnosticsPropertyOfAssetBundleImageKey()).new("Image key", key)]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 726, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n      ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      return async.async(T$.Codec(), function* _loadAsync() {
        let buffer = null;
        try {
          buffer = (yield key.bundle.loadBuffer(key.name));
        } catch (t$36$35e) {
          let t$36$35ex = dart.getThrown(t$36$35e);
          if (T$.FlutterError()[_is](t$36$35ex)) {
            binding.PaintingBinding.instance.imageCache.evict(key);
            dart.rethrow(t$36$35e);
          } else
            throw t$36$35e;
        }
        return decode(buffer);
      });
    }
  };
  (image_provider.AssetBundleImageProvider.new = function() {
    this.$ti = this.$ti || T$.AssetBundleImageProvider();
    dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider).new.call(this);
    ;
  }).prototype = image_provider.AssetBundleImageProvider.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageProvider);
  dart.addRtiResources(image_provider.AssetBundleImageProvider, ["flutter__src__painting__image_provider|AssetBundleImageProvider"]);
  dart.addTypeCaches(image_provider.AssetBundleImageProvider);
  dart.setMethodSignature(image_provider.AssetBundleImageProvider, () => dart.global.Object.setPrototypeOf({[_loadAsync$]: T$.AssetBundleImageKey__ToFutureOfCodec()}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider))));
  dart.setLibraryUri(image_provider.AssetBundleImageProvider, I[2]);
  var _providerCacheKey$ = dart.privateName(image_provider, "ResizeImageKey._providerCacheKey");
  var _policy$ = dart.privateName(image_provider, "ResizeImageKey._policy");
  var _width$ = dart.privateName(image_provider, "ResizeImageKey._width");
  var _height$ = dart.privateName(image_provider, "ResizeImageKey._height");
  var _allowUpscaling$ = dart.privateName(image_provider, "ResizeImageKey._allowUpscaling");
  var _providerCacheKey = dart.privateName(image_provider, "_providerCacheKey");
  var _policy = dart.privateName(image_provider, "_policy");
  var _width = dart.privateName(image_provider, "_width");
  var _height = dart.privateName(image_provider, "_height");
  var _allowUpscaling = dart.privateName(image_provider, "_allowUpscaling");
  image_provider.ResizeImageKey = class ResizeImageKey extends core.Object {
    get [_providerCacheKey]() {
      return this[_providerCacheKey$];
    }
    set [_providerCacheKey](value) {
      super[_providerCacheKey] = value;
    }
    get [_policy]() {
      return this[_policy$];
    }
    set [_policy](value) {
      super[_policy] = value;
    }
    get [_width]() {
      return this[_width$];
    }
    set [_width](value) {
      super[_width] = value;
    }
    get [_height]() {
      return this[_height$];
    }
    set [_height](value) {
      super[_height] = value;
    }
    get [_allowUpscaling]() {
      return this[_allowUpscaling$];
    }
    set [_allowUpscaling](value) {
      super[_allowUpscaling] = value;
    }
    static ['_#_#tearOff'](_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
      return new image_provider.ResizeImageKey.__(_providerCacheKey, _policy, _width, _height, _allowUpscaling);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.ResizeImageKey()[_is](other) && dart.equals(other[_providerCacheKey], this[_providerCacheKey]) && other[_policy] === this[_policy] && other[_width] == this[_width] && other[_height] == this[_height] && other[_allowUpscaling] === this[_allowUpscaling];
    }
    get hashCode() {
      return core.Object.hash(this[_providerCacheKey], this[_policy], this[_width], this[_height], this[_allowUpscaling]);
    }
  };
  (image_provider.ResizeImageKey.__ = function(_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
    this[_providerCacheKey$] = _providerCacheKey;
    this[_policy$] = _policy;
    this[_width$] = _width;
    this[_height$] = _height;
    this[_allowUpscaling$] = _allowUpscaling;
    ;
  }).prototype = image_provider.ResizeImageKey.prototype;
  dart.addTypeTests(image_provider.ResizeImageKey);
  dart.addRtiResources(image_provider.ResizeImageKey, ["flutter__src__painting__image_provider|ResizeImageKey"]);
  dart.addTypeCaches(image_provider.ResizeImageKey);
  dart.setLibraryUri(image_provider.ResizeImageKey, I[2]);
  dart.setFieldSignature(image_provider.ResizeImageKey, () => dart.global.Object.setPrototypeOf({
    [_providerCacheKey]: {type: T$.Object(), isConst: false, isFinal: true, libraryUri: I[4]},
    [_policy]: {type: T$.ResizeImagePolicy(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_width]: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[4]},
    [_height]: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[4]},
    [_allowUpscaling]: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImageKey))));
  dart.defineExtensionMethods(image_provider.ResizeImageKey, ['_equals']);
  dart.defineExtensionAccessors(image_provider.ResizeImageKey, ['hashCode']);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  image_provider.ResizeImagePolicy = class ResizeImagePolicy extends core._Enum {
    [_enumToString]() {
      return "ResizeImagePolicy." + this[_name];
    }
  };
  (image_provider.ResizeImagePolicy.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = image_provider.ResizeImagePolicy.prototype;
  dart.addTypeTests(image_provider.ResizeImagePolicy);
  dart.addRtiResources(image_provider.ResizeImagePolicy, ["flutter__src__painting__image_provider|ResizeImagePolicy"]);
  dart.addTypeCaches(image_provider.ResizeImagePolicy);
  dart.setMethodSignature(image_provider.ResizeImagePolicy, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy))));
  dart.setLibraryUri(image_provider.ResizeImagePolicy, I[2]);
  dart.setStaticFieldSignature(image_provider.ResizeImagePolicy, () => ['values', 'exact', 'fit']);
  dart.defineLazy(image_provider.ResizeImagePolicy, {
    /*image_provider.ResizeImagePolicy.values*/get values() {
      return C[2] || CT.C2;
    },
    /*image_provider.ResizeImagePolicy.exact*/get exact() {
      return C[3] || CT.C3;
    },
    /*image_provider.ResizeImagePolicy.fit*/get fit() {
      return C[4] || CT.C4;
    }
  }, false);
  var imageProvider$ = dart.privateName(image_provider, "ResizeImage.imageProvider");
  var width$ = dart.privateName(image_provider, "ResizeImage.width");
  var height$ = dart.privateName(image_provider, "ResizeImage.height");
  var policy$ = dart.privateName(image_provider, "ResizeImage.policy");
  var allowUpscaling$ = dart.privateName(image_provider, "ResizeImage.allowUpscaling");
  var _configureErrorListener = dart.privateName(image_provider, "_configureErrorListener");
  image_provider.ResizeImage = class ResizeImage extends image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|ResizeImageKey")) {
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get policy() {
      return this[policy$];
    }
    set policy(value) {
      super.policy = value;
    }
    get allowUpscaling() {
      return this[allowUpscaling$];
    }
    set allowUpscaling(value) {
      super.allowUpscaling = value;
    }
    static ['_#new#tearOff'](imageProvider, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
      let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
      return new image_provider.ResizeImage.new(imageProvider, {width: width, height: height, policy: policy, allowUpscaling: allowUpscaling});
    }
    static resizeIfNeeded(cacheWidth, cacheHeight, provider) {
      if (cacheWidth != null || cacheHeight != null) {
        return new image_provider.ResizeImage.new(provider, {width: cacheWidth, height: cacheHeight});
      }
      return provider;
    }
    loadBuffer(key, decode) {
      T$.ResizeImageKey()[_as](key);
      const decodeResize = (buffer, opts) => {
        let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : null;
        let cacheHeight = opts && 'cacheHeight' in opts ? opts.cacheHeight : null;
        let cacheWidth = opts && 'cacheWidth' in opts ? opts.cacheWidth : null;
        if (!(cacheWidth == null && cacheHeight == null && allowUpscaling == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies cacheWidth, cacheHeight, or allowUpscaling.", I[1], 1259, 9, "cacheWidth == null && cacheHeight == null && allowUpscaling == null");
        return decode(buffer, {cacheWidth: this.width, cacheHeight: this.height, allowUpscaling: this.allowUpscaling});
      };
      dart.fn(decodeResize, T$.ImmutableBuffer__ToFutureOfCodec());
      let completer = this.imageProvider.loadBuffer(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      this[_configureErrorListener](completer, key);
      return completer;
    }
    loadImage(key, decode) {
      T$.ResizeImageKey()[_as](key);
      const decodeResize = (buffer, opts) => {
        let getTargetSize = opts && 'getTargetSize' in opts ? opts.getTargetSize : null;
        if (!(getTargetSize == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies getTargetSize.", I[1], 1278, 9, "getTargetSize == null");
        return decode(buffer, {getTargetSize: dart.fn((intrinsicWidth, intrinsicHeight) => {
            let t$366, t$366$;
            switch (this.policy) {
              case C[3] || CT.C3:
                {
                  let targetWidth = this.width;
                  let targetHeight = this.height;
                  if (!this.allowUpscaling) {
                    if (targetWidth != null && dart.notNull(targetWidth) > intrinsicWidth) {
                      targetWidth = intrinsicWidth;
                    }
                    if (targetHeight != null && dart.notNull(targetHeight) > intrinsicHeight) {
                      targetHeight = intrinsicHeight;
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
              case C[4] || CT.C4:
                {
                  let aspectRatio = intrinsicWidth / intrinsicHeight;
                  let maxWidth = (t$366 = this.width, t$366 == null ? intrinsicWidth : t$366);
                  let maxHeight = (t$366$ = this.height, t$366$ == null ? intrinsicHeight : t$366$);
                  let targetWidth = intrinsicWidth;
                  let targetHeight = intrinsicHeight;
                  if (targetWidth > maxWidth) {
                    targetWidth = maxWidth;
                    targetHeight = (targetWidth / aspectRatio)[$truncate]();
                  }
                  if (targetHeight > maxHeight) {
                    targetHeight = maxHeight;
                    targetWidth = (targetHeight * aspectRatio)[$floor]();
                  }
                  if (this.allowUpscaling) {
                    if (this.width == null) {
                      if (!(this.height != null)) dart.assertFailed(null, I[1], 1317, 24, "height != null");
                      targetHeight = dart.nullCheck(this.height);
                      targetWidth = (targetHeight * aspectRatio)[$floor]();
                    } else if (this.height == null) {
                      targetWidth = dart.nullCheck(this.width);
                      targetHeight = (targetWidth / aspectRatio)[$truncate]();
                    } else {
                      let derivedMaxWidth = (maxHeight * aspectRatio)[$floor]();
                      let derivedMaxHeight = (maxWidth / aspectRatio)[$truncate]();
                      targetWidth = math.min(T$.int(), maxWidth, derivedMaxWidth);
                      targetHeight = math.min(T$.int(), maxHeight, derivedMaxHeight);
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
            }
          }, T$.intAndintToTargetImageSize())});
      };
      dart.fn(decodeResize, T$.ImmutableBuffer__ToFutureOfCodec$1());
      let completer = this.imageProvider.loadImage(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      this[_configureErrorListener](completer, key);
      return completer;
    }
    [_configureErrorListener](completer, key) {
      completer.addEphemeralErrorListener(dart.fn((exception, stackTrace) => {
        async.scheduleMicrotask(dart.fn(() => {
          binding.PaintingBinding.instance.imageCache.evict(key);
        }, T$.VoidTovoid()));
      }, T$.ObjectAndStackTraceNTovoid()));
    }
    obtainKey(configuration) {
      let completer = null;
      let result = null;
      this.imageProvider.obtainKey(configuration).then(T$.Null(), dart.fn(key => {
        if (completer == null) {
          result = new (G.SynchronousFutureOfResizeImageKey()).new(new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        } else {
          completer.complete(new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        }
      }, T$.ObjectToNull()));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = G.CompleterOfResizeImageKey().new();
      return completer.future;
    }
  };
  (image_provider.ResizeImage.new = function(imageProvider, opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
    let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
    this[imageProvider$] = imageProvider;
    this[width$] = width;
    this[height$] = height;
    this[policy$] = policy;
    this[allowUpscaling$] = allowUpscaling;
    if (!(width != null || height != null)) dart.assertFailed(null, I[1], 1210, 15, "width != null || height != null");
    this.$ti = this.$ti || T$.ResizeImage();
    dart.global.Object.getPrototypeOf(image_provider.ResizeImage).new.call(this);
    ;
  }).prototype = image_provider.ResizeImage.prototype;
  dart.addTypeTests(image_provider.ResizeImage);
  dart.addRtiResources(image_provider.ResizeImage, ["flutter__src__painting__image_provider|ResizeImage"]);
  dart.addTypeCaches(image_provider.ResizeImage);
  dart.setMethodSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({
    [_configureErrorListener]: T$.ImageStreamCompleterAndResizeImageKeyTovoid(),
    obtainKey: T$.ImageConfigurationToFutureOfResizeImageKey()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  dart.setStaticMethodSignature(image_provider.ResizeImage, () => ['resizeIfNeeded']);
  dart.setLibraryUri(image_provider.ResizeImage, I[2]);
  dart.setFieldSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({
    imageProvider: {type: T$.ImageProviderOfObject(), isConst: false, isFinal: true, libraryUri: I[2]},
    width: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[4]},
    height: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[4]},
    policy: {type: T$.ResizeImagePolicy(), isConst: false, isFinal: true, libraryUri: I[2]},
    allowUpscaling: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  image_provider.NetworkImage = class NetworkImage extends image_provider.ImageProvider {
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(url, {scale: scale, headers: headers});
    }
  };
  dart.addTypeTests(image_provider.NetworkImage);
  dart.addRtiResources(image_provider.NetworkImage, ["flutter__src__painting__image_provider|NetworkImage"]);
  dart.addTypeCaches(image_provider.NetworkImage);
  dart.setStaticMethodSignature(image_provider.NetworkImage, () => ['new']);
  dart.setLibraryUri(image_provider.NetworkImage, I[2]);
  var file$ = dart.privateName(image_provider, "FileImage.file");
  var scale$1 = dart.privateName(image_provider, "FileImage.scale");
  image_provider.FileImage = class FileImage extends image_provider.ImageProvider {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get scale() {
      return this[scale$1];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](file, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.FileImage.new(file, {scale: scale});
    }
    obtainKey(configuration) {
      return new (G.SynchronousFutureOfFileImage()).new(this);
    }
    loadBuffer(key, decode) {
      T$.FileImage()[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Path: " + this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    loadImage(key, decode) {
      T$.FileImage()[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Path: " + this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      return async.async(T$.Codec(), (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1479, 12, "key == this");
        let lengthInBytes = (yield this.file.length());
        if (lengthInBytes === 0) {
          binding.PaintingBinding.instance.imageCache.evict(key);
          dart.throw(new core.StateError.new(dart.str(this.file) + " is empty and cannot be loaded as an image."));
        }
        return dart.equals(dart.runtimeType(this.file), dart_rti.createRuntimeType(T$.File())) ? decode(yield ui.ImmutableBuffer.fromFilePath(this.file.path)) : decode(yield ui.ImmutableBuffer.fromUint8List(yield this.file.readAsBytes()));
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.FileImage()[_is](other) && other.file.path === this.file.path && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.file.path, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "FileImage") + "(\"" + this.file.path + "\", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (image_provider.FileImage.new = function(file, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[file$] = file;
    this[scale$1] = scale;
    this.$ti = this.$ti || T$.FileImage();
    dart.global.Object.getPrototypeOf(image_provider.FileImage).new.call(this);
    ;
  }).prototype = image_provider.FileImage.prototype;
  dart.addTypeTests(image_provider.FileImage);
  dart.addRtiResources(image_provider.FileImage, ["flutter__src__painting__image_provider|FileImage"]);
  dart.addTypeCaches(image_provider.FileImage);
  dart.setMethodSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: T$.ImageConfigurationToFutureOfFileImage(),
    [_loadAsync$]: T$.FileImage__ToFutureOfCodec()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.setLibraryUri(image_provider.FileImage, I[2]);
  dart.setFieldSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    file: {type: T$.File(), isConst: false, isFinal: true, libraryUri: I[8]},
    scale: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.defineExtensionMethods(image_provider.FileImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.FileImage, ['hashCode']);
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  var scale$2 = dart.privateName(image_provider, "MemoryImage.scale");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get scale() {
      return this[scale$2];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](bytes, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.MemoryImage.new(bytes, {scale: scale});
    }
    obtainKey(configuration) {
      return new (G.SynchronousFutureOfMemoryImage()).new(this);
    }
    loadBuffer(key, decode) {
      T$.MemoryImage()[_as](key);
      if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1554, 12, "key == this");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    loadImage(key, decode) {
      T$.MemoryImage()[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      return async.async(T$.Codec(), (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1575, 12, "key == this");
        return decode(yield ui.ImmutableBuffer.fromUint8List(this.bytes));
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.MemoryImage()[_is](other) && other.bytes[$_equals](this.bytes) && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bytes[$hashCode], this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "MemoryImage") + "(" + diagnostics.describeIdentity(this.bytes) + ", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (image_provider.MemoryImage.new = function(bytes, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[bytes$] = bytes;
    this[scale$2] = scale;
    this.$ti = this.$ti || T$.MemoryImage();
    dart.global.Object.getPrototypeOf(image_provider.MemoryImage).new.call(this);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addRtiResources(image_provider.MemoryImage, ["flutter__src__painting__image_provider|MemoryImage"]);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: T$.ImageConfigurationToFutureOfMemoryImage(),
    [_loadAsync$]: T$.MemoryImage__ToFutureOfCodec()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.setLibraryUri(image_provider.MemoryImage, I[2]);
  dart.setFieldSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    bytes: {type: T$.Uint8List(), isConst: false, isFinal: true, libraryUri: I[9]},
    scale: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.defineExtensionMethods(image_provider.MemoryImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.MemoryImage, ['hashCode']);
  var assetName$ = dart.privateName(image_provider, "ExactAssetImage.assetName");
  var scale$3 = dart.privateName(image_provider, "ExactAssetImage.scale");
  var bundle$1 = dart.privateName(image_provider, "ExactAssetImage.bundle");
  var $package$ = dart.privateName(image_provider, "ExactAssetImage.package");
  image_provider.ExactAssetImage = class ExactAssetImage extends image_provider.AssetBundleImageProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get scale() {
      return this[scale$3];
    }
    set scale(value) {
      super.scale = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    static ['_#new#tearOff'](assetName, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new image_provider.ExactAssetImage.new(assetName, {scale: scale, bundle: bundle, package: $package});
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + this.assetName;
    }
    obtainKey(configuration) {
      let t$366, t$366$;
      return new (G.SynchronousFutureOfAssetBundleImageKey()).new(new image_provider.AssetBundleImageKey.new({bundle: (t$366$ = (t$366 = this.bundle, t$366 == null ? configuration.bundle : t$366), t$366$ == null ? asset_bundle.rootBundle : t$366$), name: this.keyName, scale: this.scale}));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.ExactAssetImage()[_is](other) && other.keyName === this.keyName && other.scale === this.scale && dart.equals(other.bundle, this.bundle);
    }
    get hashCode() {
      return core.Object.hash(this.keyName, this.scale, this.bundle);
    }
    toString() {
      return object.objectRuntimeType(this, "ExactAssetImage") + "(name: \"" + this.keyName + "\", scale: " + this.scale[$toStringAsFixed](1) + ", bundle: " + dart.str(this.bundle) + ")";
    }
  };
  (image_provider.ExactAssetImage.new = function(assetName, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[assetName$] = assetName;
    this[scale$3] = scale;
    this[bundle$1] = bundle;
    this[$package$] = $package;
    this.$ti = this.$ti || T$.ExactAssetImage();
    dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage).new.call(this);
    ;
  }).prototype = image_provider.ExactAssetImage.prototype;
  dart.addTypeTests(image_provider.ExactAssetImage);
  dart.addRtiResources(image_provider.ExactAssetImage, ["flutter__src__painting__image_provider|ExactAssetImage"]);
  dart.addTypeCaches(image_provider.ExactAssetImage);
  dart.setMethodSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({obtainKey: T$.ImageConfigurationToFutureOfAssetBundleImageKey()}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setGetterSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({keyName: T$.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setLibraryUri(image_provider.ExactAssetImage, I[2]);
  dart.setFieldSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({
    assetName: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[4]},
    scale: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[4]},
    bundle: {type: T$.AssetBundleN(), isConst: false, isFinal: true, libraryUri: I[5]},
    package: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.defineExtensionMethods(image_provider.ExactAssetImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ExactAssetImage, ['hashCode']);
  image_provider._ErrorImageCompleter = class _ErrorImageCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._ErrorImageCompleter.new();
    }
  };
  (image_provider._ErrorImageCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._ErrorImageCompleter).new.call(this);
    ;
  }).prototype = image_provider._ErrorImageCompleter.prototype;
  dart.addTypeTests(image_provider._ErrorImageCompleter);
  dart.addRtiResources(image_provider._ErrorImageCompleter, ["flutter__src__painting__image_provider|_ErrorImageCompleter"]);
  dart.addTypeCaches(image_provider._ErrorImageCompleter);
  dart.setLibraryUri(image_provider._ErrorImageCompleter, I[2]);
  var statusCode$ = dart.privateName(image_provider, "NetworkImageLoadException.statusCode");
  var uri$ = dart.privateName(image_provider, "NetworkImageLoadException.uri");
  var _message = dart.privateName(image_provider, "_message");
  image_provider.NetworkImageLoadException = class NetworkImageLoadException extends core.Object {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](opts) {
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let uri = opts && 'uri' in opts ? opts.uri : null;
      return new image_provider.NetworkImageLoadException.new({statusCode: statusCode, uri: uri});
    }
    toString() {
      return this[_message];
    }
  };
  (image_provider.NetworkImageLoadException.new = function(opts) {
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    this[uri$] = uri;
    this[_message] = "HTTP request failed, statusCode: " + dart.strSafe(statusCode) + ", " + dart.str(uri);
    ;
  }).prototype = image_provider.NetworkImageLoadException.prototype;
  dart.addTypeTests(image_provider.NetworkImageLoadException);
  dart.addRtiResources(image_provider.NetworkImageLoadException, ["flutter__src__painting__image_provider|NetworkImageLoadException", "core|Exception"]);
  dart.addTypeCaches(image_provider.NetworkImageLoadException);
  dart.setLibraryUri(image_provider.NetworkImageLoadException, I[2]);
  dart.setFieldSignature(image_provider.NetworkImageLoadException, () => dart.global.Object.setPrototypeOf({
    statusCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[4]},
    [_message]: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[4]},
    uri: {type: T$.Uri(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.NetworkImageLoadException))));
  dart.defineExtensionMethods(image_provider.NetworkImageLoadException, ['toString']);
  dart.setBaseClass(image_provider.NetworkImage, image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|NetworkImage")));
  dart.setBaseClass(image_provider.FileImage, image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|FileImage")));
  dart.setBaseClass(image_provider.MemoryImage, image_provider.ImageProvider$(dart_rti.findType("flutter__src__painting__image_provider|MemoryImage")));
  dart.moduleConstCaches.set("packages/flutter/src/painting/_network_image_web.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting___network_image_web|NetworkImage":{"ImageProvider.T":"flutter__src__painting__image_provider|NetworkImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|NetworkImage"],"flutter__src__painting__image_provider|NetworkImage":[]},"flutter__src__painting__image_provider|ImageProvider":{"ImageProvider.T":"1"},"flutter__src__painting__image_provider|NetworkImage":{"ImageProvider.T":"flutter__src__painting__image_provider|NetworkImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|NetworkImage"]},"flutter__src__painting__image_stream|ImageChunkEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"_native_typed_data|NativeByteBuffer":{"_interceptors|JavaScriptObject":[],"typed_data|ByteBuffer":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"async|Future":{"Future.T":"1"},"flutter__src__painting__image_stream|ImageStreamCompleter":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|_AbstractImageStreamCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_stream|ImageStream":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"async|StreamController":{"StreamController.T":"1","StreamSink.S":"1","async|StreamSink":["1"],"EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|StreamSink":{"StreamSink.S":"1","EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|EventSink":{"EventSink.T":"1","Sink.T":"1","core|Sink":["1"]},"async|StreamConsumer":{"StreamConsumer.S":"1"},"core|Sink":{"Sink.T":"1"},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__foundation__platform|TargetPlatform":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"ui|Size":{"ui|OffsetBase":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"flutter__src__painting__image_provider|AssetBundleImageProvider":{"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__foundation__assertions|FlutterError":{"core|AssertionError":[],"core|Error":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|AssertionError":{"core|Error":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|ResizeImagePolicy":{"core|_Enum":[],"core|Enum":[]},"flutter__src__painting__image_provider|ResizeImage":{"ImageProvider.T":"flutter__src__painting__image_provider|ResizeImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|ResizeImageKey"]},"flutter__src__painting__image_provider|FileImage":{"ImageProvider.T":"flutter__src__painting__image_provider|FileImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|FileImage"]},"io|File":{"io|FileSystemEntity":[]},"flutter__src__painting__image_provider|MemoryImage":{"ImageProvider.T":"flutter__src__painting__image_provider|MemoryImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|MemoryImage"]},"typed_data|Uint8List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"flutter__src__painting__image_provider|ExactAssetImage":{"flutter__src__painting__image_provider|AssetBundleImageProvider":[],"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__painting__image_provider|_ErrorImageCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|NetworkImageLoadException":{"core|Exception":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/_network_image_web.dart", {
    "package:flutter/src/painting/_network_image_web.dart": _network_image_web,
    "package:flutter/src/painting/image_provider.dart": image_provider
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_provider.dart","_network_image_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/_network_image_web.dart.lib.js"}');
  // Exports:
  return {
    src__painting___network_image_web: _network_image_web,
    src__painting__image_provider: image_provider
  };
}));

//# sourceMappingURL=_network_image_web.dart.lib.js.map

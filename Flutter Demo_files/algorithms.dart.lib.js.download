// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/collection/src/algorithms.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/collection/src/utils.dart'], (function load__packages__collection__src__algorithms_dart(dart_sdk, packages__collection__src__utils$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const utils = packages__collection__src__utils$46dart.src__utils;
  var algorithms = Object.create(dart.library);
  var $length = dartx.length;
  var $rightShift = dartx['>>'];
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $setRange = dartx.setRange;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    ObjectNAndObjectNToint: () => (T.ObjectNAndObjectNToint = dart.constFn(dart_rti.findType("core|int(core|Object?,core|Object?)")))(),
    TToT: () => (T.TToT = dart.constFn(dart_rti.findType("0^(0^)<core|Object?>")))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti.findType("@")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(utils.defaultCompare, T.ObjectNAndObjectNToint());
    },
    get C1() {
      return C[1] = dart.gFn(utils.identity, T.TToT(), dart.constList([T.dynamic()], T.dynamic()));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = ["file:///C:/Users/abhay/AppData/Local/Pub/Cache/hosted/pub.dev/collection-1.18.0/lib/src/algorithms.dart"];
  algorithms.binarySearch = function binarySearch(E, sortedList, value, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = C[0] || CT.C0 : null;
    return algorithms.binarySearchBy(E, E, sortedList, dart.gbind(C[1] || CT.C1, E), compare, value);
  };
  algorithms.binarySearchBy = function binarySearchBy(E, K, sortedList, keyOf, compare, value, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, sortedList[$length]);
    let min = start;
    let max = end;
    let key = keyOf(value);
    while (min < max) {
      let mid = min + (max - min)[$rightShift](1);
      let element = sortedList[$_get](mid);
      let comp = compare(keyOf(element), key);
      if (comp === 0) return mid;
      if (comp < 0) {
        min = mid + 1;
      } else {
        max = mid;
      }
    }
    return -1;
  };
  algorithms.lowerBound = function lowerBound(E, sortedList, value, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = C[0] || CT.C0 : null;
    return algorithms.lowerBoundBy(E, E, sortedList, dart.gbind(C[1] || CT.C1, E), compare, value);
  };
  algorithms.lowerBoundBy = function lowerBoundBy(E, K, sortedList, keyOf, compare, value, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, sortedList[$length]);
    let min = start;
    let max = end;
    let key = keyOf(value);
    while (min < max) {
      let mid = min + (max - min)[$rightShift](1);
      let element = sortedList[$_get](mid);
      let comp = compare(keyOf(element), key);
      if (comp < 0) {
        min = mid + 1;
      } else {
        max = mid;
      }
    }
    return min;
  };
  algorithms.shuffle = function shuffle(elements, start = 0, end = null, random = null) {
    random == null ? random = math.Random.new() : null;
    end == null ? end = elements[$length] : null;
    let length = dart.notNull(end) - start;
    while (length > 1) {
      let pos = random.nextInt(length);
      length = length - 1;
      let tmp1 = elements[$_get](start + pos);
      elements[$_set](start + pos, elements[$_get](start + length));
      elements[$_set](start + length, tmp1);
    }
  };
  algorithms.reverse = function reverse(E, elements, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, elements[$length]);
    algorithms._reverse(E, elements, start, end);
  };
  algorithms._reverse = function _reverse(E, elements, start, end) {
    for (let i = start, j = end - 1; i < j; i = i + 1, j = j - 1) {
      let tmp = elements[$_get](i);
      elements[$_set](i, elements[$_get](j));
      elements[$_set](j, tmp);
    }
  };
  algorithms.insertionSort = function insertionSort(E, elements, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    compare == null ? compare = C[0] || CT.C0 : null;
    end == null ? end = elements[$length] : null;
    for (let pos = start + 1; pos < dart.notNull(end); pos = pos + 1) {
      let min = start;
      let max = pos;
      let element = elements[$_get](pos);
      while (min < max) {
        let mid = min + (max - min)[$rightShift](1);
        let comparison = compare(element, elements[$_get](mid));
        if (comparison < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      elements[$setRange](min + 1, pos + 1, elements, min);
      elements[$_set](min, element);
    }
  };
  algorithms.insertionSortBy = function insertionSortBy(E, K, elements, keyOf, compare, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, elements[$length]);
    algorithms._movingInsertionSort(E, K, elements, keyOf, compare, start, end, elements, start);
  };
  algorithms.mergeSort = function mergeSort(E, elements, opts) {
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    let compare = opts && 'compare' in opts ? opts.compare : null;
    end = core.RangeError.checkValidRange(start, end, elements[$length]);
    compare == null ? compare = C[0] || CT.C0 : null;
    let length = dart.notNull(end) - start;
    if (length < 2) return;
    if (length < 32) {
      algorithms.insertionSort(E, elements, {compare: compare, start: start, end: end});
      return;
    }
    let firstLength = (dart.notNull(end) - start)[$rightShift](1);
    let middle = start + firstLength;
    let secondLength = dart.notNull(end) - middle;
    let scratchSpace = core.List$(E).filled(secondLength, elements[$_get](start));
    algorithms._mergeSort(E, E, elements, dart.gbind(C[1] || CT.C1, E), compare, middle, end, scratchSpace, 0);
    let firstTarget = dart.notNull(end) - firstLength;
    algorithms._mergeSort(E, E, elements, dart.gbind(C[1] || CT.C1, E), compare, start, middle, elements, firstTarget);
    algorithms._merge(E, E, dart.gbind(C[1] || CT.C1, E), compare, elements, firstTarget, end, scratchSpace, 0, secondLength, elements, start);
  };
  algorithms.mergeSortBy = function mergeSortBy(E, K, elements, keyOf, compare, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, elements[$length]);
    let length = dart.notNull(end) - start;
    if (length < 2) return;
    if (length < 32) {
      algorithms._movingInsertionSort(E, K, elements, keyOf, compare, start, end, elements, start);
      return;
    }
    let middle = start + length[$rightShift](1);
    let firstLength = middle - start;
    let secondLength = dart.notNull(end) - middle;
    let scratchSpace = core.List$(E).filled(secondLength, elements[$_get](start));
    algorithms._mergeSort(E, K, elements, keyOf, compare, middle, end, scratchSpace, 0);
    let firstTarget = dart.notNull(end) - firstLength;
    algorithms._mergeSort(E, K, elements, keyOf, compare, start, middle, elements, firstTarget);
    algorithms._merge(E, K, keyOf, compare, elements, firstTarget, end, scratchSpace, 0, secondLength, elements, start);
  };
  algorithms._movingInsertionSort = function _movingInsertionSort(E, K, list, keyOf, compare, start, end, target, targetOffset) {
    let length = end - start;
    if (length === 0) return;
    target[$_set](targetOffset, list[$_get](start));
    for (let i = 1; i < length; i = i + 1) {
      let element = list[$_get](start + i);
      let elementKey = keyOf(element);
      let min = targetOffset;
      let max = targetOffset + i;
      while (min < max) {
        let mid = min + (max - min)[$rightShift](1);
        if (compare(elementKey, keyOf(target[$_get](mid))) < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      target[$setRange](min + 1, targetOffset + i + 1, target, min);
      target[$_set](min, element);
    }
  };
  algorithms._mergeSort = function _mergeSort(E, K, elements, keyOf, compare, start, end, target, targetOffset) {
    let length = end - start;
    if (length < 32) {
      algorithms._movingInsertionSort(E, K, elements, keyOf, compare, start, end, target, targetOffset);
      return;
    }
    let middle = start + length[$rightShift](1);
    let firstLength = middle - start;
    let secondLength = end - middle;
    let targetMiddle = targetOffset + firstLength;
    algorithms._mergeSort(E, K, elements, keyOf, compare, middle, end, target, targetMiddle);
    algorithms._mergeSort(E, K, elements, keyOf, compare, start, middle, elements, middle);
    algorithms._merge(E, K, keyOf, compare, elements, middle, middle + firstLength, target, targetMiddle, targetMiddle + secondLength, target, targetOffset);
  };
  algorithms._merge = function _merge(E, K, keyOf, compare, firstList, firstStart, firstEnd, secondList, secondStart, secondEnd, target, targetOffset) {
    let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5;
    if (!(firstStart < firstEnd)) dart.assertFailed(null, I[0], 367, 10, "firstStart < firstEnd");
    if (!(secondStart < secondEnd)) dart.assertFailed(null, I[0], 368, 10, "secondStart < secondEnd");
    let cursor1 = firstStart;
    let cursor2 = secondStart;
    let firstElement = firstList[$_get]((t$360 = cursor1, cursor1 = t$360 + 1, t$360));
    let firstKey = keyOf(firstElement);
    let secondElement = secondList[$_get]((t$360$ = cursor2, cursor2 = t$360$ + 1, t$360$));
    let secondKey = keyOf(secondElement);
    while (true) {
      if (compare(firstKey, secondKey) <= 0) {
        target[$_set]((t$360$0 = targetOffset, targetOffset = t$360$0 + 1, t$360$0), firstElement);
        if (cursor1 === firstEnd) break;
        firstElement = firstList[$_get]((t$360$1 = cursor1, cursor1 = t$360$1 + 1, t$360$1));
        firstKey = keyOf(firstElement);
      } else {
        target[$_set]((t$360$2 = targetOffset, targetOffset = t$360$2 + 1, t$360$2), secondElement);
        if (cursor2 !== secondEnd) {
          secondElement = secondList[$_get]((t$360$3 = cursor2, cursor2 = t$360$3 + 1, t$360$3));
          secondKey = keyOf(secondElement);
          continue;
        }
        target[$_set]((t$360$4 = targetOffset, targetOffset = t$360$4 + 1, t$360$4), firstElement);
        target[$setRange](targetOffset, targetOffset + (firstEnd - cursor1), firstList, cursor1);
        return;
      }
    }
    target[$_set]((t$360$5 = targetOffset, targetOffset = t$360$5 + 1, t$360$5), secondElement);
    target[$setRange](targetOffset, targetOffset + (secondEnd - cursor2), secondList, cursor2);
  };
  algorithms.quickSort = function quickSort(E, elements, compare, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, elements[$length]);
    algorithms._quickSort(E, E, elements, dart.gbind(C[1] || CT.C1, E), compare, math.Random.new(), start, end);
  };
  algorithms.quickSortBy = function quickSortBy(E, K, list, keyOf, compare, start = 0, end = null) {
    end = core.RangeError.checkValidRange(start, end, list[$length]);
    algorithms._quickSort(E, K, list, keyOf, compare, math.Random.new(), start, end);
  };
  algorithms._quickSort = function _quickSort(E, K, list, keyOf, compare, random, start, end) {
    let length = end - start;
    while (length >= 24) {
      let pivotIndex = random.nextInt(length) + start;
      let pivot = list[$_get](pivotIndex);
      let pivotKey = keyOf(pivot);
      let endSmaller = start;
      let startGreater = end;
      let startPivots = end - 1;
      list[$_set](pivotIndex, list[$_get](startPivots));
      list[$_set](startPivots, pivot);
      while (endSmaller < startPivots) {
        let current = list[$_get](endSmaller);
        let relation = compare(keyOf(current), pivotKey);
        if (relation < 0) {
          endSmaller = endSmaller + 1;
        } else {
          startPivots = startPivots - 1;
          let currentTarget = startPivots;
          list[$_set](endSmaller, list[$_get](startPivots));
          if (relation > 0) {
            startGreater = startGreater - 1;
            currentTarget = startGreater;
            list[$_set](startPivots, list[$_get](startGreater));
          }
          list[$_set](currentTarget, current);
        }
      }
      if (endSmaller - start < end - startGreater) {
        algorithms._quickSort(E, K, list, keyOf, compare, random, start, endSmaller);
        start = startGreater;
      } else {
        algorithms._quickSort(E, K, list, keyOf, compare, random, startGreater, end);
        end = endSmaller;
      }
      length = end - start;
    }
    algorithms._movingInsertionSort(E, K, list, keyOf, compare, start, end, list, start);
  };
  dart.defineLazy(algorithms, {
    /*algorithms._mergeSortLimit*/get _mergeSortLimit() {
      return 32;
    }
  }, false);
  dart.moduleConstCaches.set("packages/collection/src/algorithms.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"}}'));
  dart.trackLibraries("packages/collection/src/algorithms.dart", {
    "package:collection/src/algorithms.dart": algorithms
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["algorithms.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../F:/packages/collection/src/algorithms.dart.lib.js"}');
  // Exports:
  return {
    src__algorithms: algorithms
  };
}));

//# sourceMappingURL=algorithms.dart.lib.js.map

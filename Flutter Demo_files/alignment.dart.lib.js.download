// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/alignment.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__alignment_dart(dart_sdk, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var alignment = Object.create(dart.library);
  var $truncate = dartx.truncate;
  var $toDouble = dartx.toDouble;
  var $modulo = dartx['%'];
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    Alignment: () => (T.Alignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment")))(),
    AlignmentDirectional: () => (T.AlignmentDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentDirectional")))(),
    AlignmentGeometry: () => (T.AlignmentGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentGeometry")))(),
    AlignmentGeometryToAlignmentGeometry: () => (T.AlignmentGeometryToAlignmentGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentGeometry(flutter__src__painting__alignment|AlignmentGeometry)")))(),
    AlignmentGeometryNAndAlignmentGeometryNAnddoubleToAlignmentGeometryN: () => (T.AlignmentGeometryNAndAlignmentGeometryNAnddoubleToAlignmentGeometryN = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentGeometry?(flutter__src__painting__alignment|AlignmentGeometry?,flutter__src__painting__alignment|AlignmentGeometry?,core|double)")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    AlignmentToAlignment: () => (T.AlignmentToAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment(flutter__src__painting__alignment|Alignment)")))(),
    VoidToAlignment: () => (T.VoidToAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment()")))(),
    doubleToAlignment: () => (T.doubleToAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment(core|double)")))(),
    OffsetToOffset: () => (T.OffsetToOffset = dart.constFn(dart_rti.findType("ui|Offset(ui|Offset)")))(),
    SizeToOffset: () => (T.SizeToOffset = dart.constFn(dart_rti.findType("ui|Offset(ui|Size)")))(),
    RectToOffset: () => (T.RectToOffset = dart.constFn(dart_rti.findType("ui|Offset(ui|Rect)")))(),
    SizeAndRectToRect: () => (T.SizeAndRectToRect = dart.constFn(dart_rti.findType("ui|Rect(ui|Size,ui|Rect)")))(),
    AlignmentNAndAlignmentNAnddoubleToAlignmentN: () => (T.AlignmentNAndAlignmentNAnddoubleToAlignmentN = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment?(flutter__src__painting__alignment|Alignment?,flutter__src__painting__alignment|Alignment?,core|double)")))(),
    TextDirectionNToAlignment: () => (T.TextDirectionNToAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|Alignment(ui|TextDirection?)")))(),
    doubleAnddoubleToString: () => (T.doubleAnddoubleToString = dart.constFn(dart_rti.findType("core|String(core|double,core|double)")))(),
    AlignmentDirectionalToAlignmentDirectional: () => (T.AlignmentDirectionalToAlignmentDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentDirectional(flutter__src__painting__alignment|AlignmentDirectional)")))(),
    VoidToAlignmentDirectional: () => (T.VoidToAlignmentDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentDirectional()")))(),
    doubleToAlignmentDirectional: () => (T.doubleToAlignmentDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentDirectional(core|double)")))(),
    AlignmentDirectionalNAndAlignmentDirectionalNAnddoubleToAlignmentDirectionalN: () => (T.AlignmentDirectionalNAndAlignmentDirectionalNAnddoubleToAlignmentDirectionalN = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentDirectional?(flutter__src__painting__alignment|AlignmentDirectional?,flutter__src__painting__alignment|AlignmentDirectional?,core|double)")))(),
    VoidTo_MixedAlignment: () => (T.VoidTo_MixedAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|_MixedAlignment()")))(),
    doubleTo_MixedAlignment: () => (T.doubleTo_MixedAlignment = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|_MixedAlignment(core|double)")))(),
    TextAlignVertical: () => (T.TextAlignVertical = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|TextAlignVertical")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [y$]: -1,
        [x$]: -1
      }, alignment.Alignment.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [y$]: -1,
        [x$]: 0
      }, alignment.Alignment.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [y$]: -1,
        [x$]: 1
      }, alignment.Alignment.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [y$]: 0,
        [x$]: -1
      }, alignment.Alignment.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [y$]: 0,
        [x$]: 0
      }, alignment.Alignment.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [y$]: 0,
        [x$]: 1
      }, alignment.Alignment.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [y$]: 1,
        [x$]: -1
      }, alignment.Alignment.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [y$]: 1,
        [x$]: 0
      }, alignment.Alignment.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [y$]: 1,
        [x$]: 1
      }, alignment.Alignment.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [y$0]: -1,
        [start$]: -1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [y$0]: -1,
        [start$]: 0
      }, alignment.AlignmentDirectional.prototype));
    },
    get C13() {
      return C[13] = dart.const(Object.setPrototypeOf({
        [y$0]: -1,
        [start$]: 1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C14() {
      return C[14] = dart.const(Object.setPrototypeOf({
        [y$0]: 0,
        [start$]: -1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C15() {
      return C[15] = dart.const(Object.setPrototypeOf({
        [y$0]: 0,
        [start$]: 0
      }, alignment.AlignmentDirectional.prototype));
    },
    get C16() {
      return C[16] = dart.const(Object.setPrototypeOf({
        [y$0]: 0,
        [start$]: 1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C17() {
      return C[17] = dart.const(Object.setPrototypeOf({
        [y$0]: 1,
        [start$]: -1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C18() {
      return C[18] = dart.const(Object.setPrototypeOf({
        [y$0]: 1,
        [start$]: 0
      }, alignment.AlignmentDirectional.prototype));
    },
    get C19() {
      return C[19] = dart.const(Object.setPrototypeOf({
        [y$0]: 1,
        [start$]: 1
      }, alignment.AlignmentDirectional.prototype));
    },
    get C20() {
      return C[20] = dart.const(Object.setPrototypeOf({
        [y$1]: -1
      }, alignment.TextAlignVertical.prototype));
    },
    get C21() {
      return C[21] = dart.const(Object.setPrototypeOf({
        [y$1]: 0
      }, alignment.TextAlignVertical.prototype));
    },
    get C22() {
      return C[22] = dart.const(Object.setPrototypeOf({
        [y$1]: 1
      }, alignment.TextAlignVertical.prototype));
    }
  }, false);
  var C = Array(23).fill(void 0);
  var I = [
    "package:flutter/src/painting/alignment.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/alignment.dart"
  ];
  var _x = dart.privateName(alignment, "_x");
  var _start = dart.privateName(alignment, "_start");
  var _y = dart.privateName(alignment, "_y");
  var _is = dart.privateName(dart_rti, "_is");
  alignment.AlignmentGeometry = class AlignmentGeometry extends core.Object {
    add(other) {
      return new alignment._MixedAlignment.new(this[_x] + other[_x], this[_start] + other[_start], this[_y] + other[_y]);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - t);
      }
      if (T.Alignment()[_is](a) && T.Alignment()[_is](b)) {
        return alignment.Alignment.lerp(a, b, t);
      }
      if (T.AlignmentDirectional()[_is](a) && T.AlignmentDirectional()[_is](b)) {
        return alignment.AlignmentDirectional.lerp(a, b, t);
      }
      return new alignment._MixedAlignment.new(dart.nullCheck(ui.lerpDouble(a[_x], b[_x], t)), dart.nullCheck(ui.lerpDouble(a[_start], b[_start], t)), dart.nullCheck(ui.lerpDouble(a[_y], b[_y], t)));
    }
    toString() {
      if (this[_start] === 0.0) {
        return alignment.Alignment._stringify(this[_x], this[_y]);
      }
      if (this[_x] === 0.0) {
        return alignment.AlignmentDirectional._stringify(this[_start], this[_y]);
      }
      return alignment.Alignment._stringify(this[_x], this[_y]) + " + " + alignment.AlignmentDirectional._stringify(this[_start], 0.0);
    }
    _equals(other) {
      if (other == null) return false;
      return T.AlignmentGeometry()[_is](other) && other[_x] === this[_x] && other[_start] === this[_start] && other[_y] === this[_y];
    }
    get hashCode() {
      return core.Object.hash(this[_x], this[_start], this[_y]);
    }
  };
  (alignment.AlignmentGeometry.new = function() {
    ;
  }).prototype = alignment.AlignmentGeometry.prototype;
  dart.addTypeTests(alignment.AlignmentGeometry);
  dart.addRtiResources(alignment.AlignmentGeometry, ["flutter__src__painting__alignment|AlignmentGeometry"]);
  dart.addTypeCaches(alignment.AlignmentGeometry);
  dart.setMethodSignature(alignment.AlignmentGeometry, () => dart.global.Object.setPrototypeOf({add: T.AlignmentGeometryToAlignmentGeometry()}, dart.getMethods(dart.global.Object.getPrototypeOf(alignment.AlignmentGeometry))));
  dart.setStaticMethodSignature(alignment.AlignmentGeometry, () => ['lerp']);
  dart.setLibraryUri(alignment.AlignmentGeometry, I[0]);
  dart.defineExtensionMethods(alignment.AlignmentGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(alignment.AlignmentGeometry, ['hashCode']);
  var x$ = dart.privateName(alignment, "Alignment.x");
  var y$ = dart.privateName(alignment, "Alignment.y");
  alignment.Alignment = class Alignment extends alignment.AlignmentGeometry {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](x, y) {
      return new alignment.Alignment.new(x, y);
    }
    get [_x]() {
      return this.x;
    }
    get [_start]() {
      return 0.0;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (T.Alignment()[_is](other)) {
        return this['+'](other);
      }
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.Alignment.new(this.x - other.x, this.y - other.y);
    }
    ['+'](other) {
      return new alignment.Alignment.new(this.x + other.x, this.y + other.y);
    }
    _negate() {
      return new alignment.Alignment.new(-this.x, -this.y);
    }
    ['*'](other) {
      return new alignment.Alignment.new(this.x * other, this.y * other);
    }
    ['/'](other) {
      return new alignment.Alignment.new(this.x / other, this.y / other);
    }
    ['~/'](other) {
      return new alignment.Alignment.new((this.x / other)[$truncate]()[$toDouble](), (this.y / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.Alignment.new(this.x[$modulo](other), this.y[$modulo](other));
    }
    alongOffset(other) {
      let centerX = other.dx / 2.0;
      let centerY = other.dy / 2.0;
      return new ui.Offset.new(centerX + this.x * centerX, centerY + this.y * centerY);
    }
    alongSize(other) {
      let centerX = other.width / 2.0;
      let centerY = other.height / 2.0;
      return new ui.Offset.new(centerX + this.x * centerX, centerY + this.y * centerY);
    }
    withinRect(rect) {
      let halfWidth = rect.width / 2.0;
      let halfHeight = rect.height / 2.0;
      return new ui.Offset.new(rect.left + halfWidth + this.x * halfWidth, rect.top + halfHeight + this.y * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (rect.width - size.width) / 2.0;
      let halfHeightDelta = (rect.height - size.height) / 2.0;
      return new ui.Rect.fromLTWH(rect.left + halfWidthDelta + this.x * halfWidthDelta, rect.top + halfHeightDelta + this.y * halfHeightDelta, size.width, size.height);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(0.0, dart.nullCheck(b).x, t)), dart.nullCheck(ui.lerpDouble(0.0, b.y, t)));
      }
      if (b == null) {
        return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(a.x, 0.0, t)), dart.nullCheck(ui.lerpDouble(a.y, 0.0, t)));
      }
      return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(a.x, b.x, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)));
    }
    resolve(direction) {
      return this;
    }
    static _stringify(x, y) {
      if (x === -1.0 && y === -1.0) {
        return "Alignment.topLeft";
      }
      if (x === 0.0 && y === -1.0) {
        return "Alignment.topCenter";
      }
      if (x === 1.0 && y === -1.0) {
        return "Alignment.topRight";
      }
      if (x === -1.0 && y === 0.0) {
        return "Alignment.centerLeft";
      }
      if (x === 0.0 && y === 0.0) {
        return "Alignment.center";
      }
      if (x === 1.0 && y === 0.0) {
        return "Alignment.centerRight";
      }
      if (x === -1.0 && y === 1.0) {
        return "Alignment.bottomLeft";
      }
      if (x === 0.0 && y === 1.0) {
        return "Alignment.bottomCenter";
      }
      if (x === 1.0 && y === 1.0) {
        return "Alignment.bottomRight";
      }
      return "Alignment(" + x[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.Alignment._stringify(this.x, this.y);
    }
  };
  (alignment.Alignment.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    dart.global.Object.getPrototypeOf(alignment.Alignment).new.call(this);
    ;
  }).prototype = alignment.Alignment.prototype;
  dart.addTypeTests(alignment.Alignment);
  dart.addRtiResources(alignment.Alignment, ["flutter__src__painting__alignment|Alignment"]);
  dart.addTypeCaches(alignment.Alignment);
  dart.setMethodSignature(alignment.Alignment, () => dart.global.Object.setPrototypeOf({
    '-': T.AlignmentToAlignment(),
    '+': T.AlignmentToAlignment(),
    _negate: T.VoidToAlignment(),
    '*': T.doubleToAlignment(),
    '/': T.doubleToAlignment(),
    '~/': T.doubleToAlignment(),
    '%': T.doubleToAlignment(),
    alongOffset: T.OffsetToOffset(),
    alongSize: T.SizeToOffset(),
    withinRect: T.RectToOffset(),
    inscribe: T.SizeAndRectToRect(),
    resolve: T.TextDirectionNToAlignment()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(alignment.Alignment))));
  dart.setStaticMethodSignature(alignment.Alignment, () => ['lerp', '_stringify']);
  dart.setGetterSignature(alignment.Alignment, () => dart.global.Object.setPrototypeOf({
    [_x]: T.double(),
    [_start]: T.double(),
    [_y]: T.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(alignment.Alignment))));
  dart.setLibraryUri(alignment.Alignment, I[0]);
  dart.setFieldSignature(alignment.Alignment, () => dart.global.Object.setPrototypeOf({
    x: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    y: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(alignment.Alignment))));
  dart.setStaticFieldSignature(alignment.Alignment, () => ['topLeft', 'topCenter', 'topRight', 'centerLeft', 'center', 'centerRight', 'bottomLeft', 'bottomCenter', 'bottomRight']);
  dart.defineExtensionMethods(alignment.Alignment, ['toString']);
  dart.defineLazy(alignment.Alignment, {
    /*alignment.Alignment.topLeft*/get topLeft() {
      return C[0] || CT.C0;
    },
    /*alignment.Alignment.topCenter*/get topCenter() {
      return C[1] || CT.C1;
    },
    /*alignment.Alignment.topRight*/get topRight() {
      return C[2] || CT.C2;
    },
    /*alignment.Alignment.centerLeft*/get centerLeft() {
      return C[3] || CT.C3;
    },
    /*alignment.Alignment.center*/get center() {
      return C[4] || CT.C4;
    },
    /*alignment.Alignment.centerRight*/get centerRight() {
      return C[5] || CT.C5;
    },
    /*alignment.Alignment.bottomLeft*/get bottomLeft() {
      return C[6] || CT.C6;
    },
    /*alignment.Alignment.bottomCenter*/get bottomCenter() {
      return C[7] || CT.C7;
    },
    /*alignment.Alignment.bottomRight*/get bottomRight() {
      return C[8] || CT.C8;
    }
  }, false);
  var start$ = dart.privateName(alignment, "AlignmentDirectional.start");
  var y$0 = dart.privateName(alignment, "AlignmentDirectional.y");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  alignment.AlignmentDirectional = class AlignmentDirectional extends alignment.AlignmentGeometry {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](start, y) {
      return new alignment.AlignmentDirectional.new(start, y);
    }
    get [_x]() {
      return 0.0;
    }
    get [_start]() {
      return this.start;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (T.AlignmentDirectional()[_is](other)) {
        return this['+'](other);
      }
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.AlignmentDirectional.new(this.start - other.start, this.y - other.y);
    }
    ['+'](other) {
      return new alignment.AlignmentDirectional.new(this.start + other.start, this.y + other.y);
    }
    _negate() {
      return new alignment.AlignmentDirectional.new(-this.start, -this.y);
    }
    ['*'](other) {
      return new alignment.AlignmentDirectional.new(this.start * other, this.y * other);
    }
    ['/'](other) {
      return new alignment.AlignmentDirectional.new(this.start / other, this.y / other);
    }
    ['~/'](other) {
      return new alignment.AlignmentDirectional.new((this.start / other)[$truncate]()[$toDouble](), (this.y / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.AlignmentDirectional.new(this.start[$modulo](other), this.y[$modulo](other));
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(0.0, dart.nullCheck(b).start, t)), dart.nullCheck(ui.lerpDouble(0.0, b.y, t)));
      }
      if (b == null) {
        return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(a.start, 0.0, t)), dart.nullCheck(ui.lerpDouble(a.y, 0.0, t)));
      }
      return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(a.start, b.start, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed("Cannot resolve " + dart.str(dart.runtimeType(this)) + " without a TextDirection.", I[2], 541, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[9] || CT.C9:
          {
            return new alignment.Alignment.new(-this.start, this.y);
          }
        case C[10] || CT.C10:
          {
            return new alignment.Alignment.new(this.start, this.y);
          }
      }
    }
    static _stringify(start, y) {
      if (start === -1.0 && y === -1.0) {
        return "AlignmentDirectional.topStart";
      }
      if (start === 0.0 && y === -1.0) {
        return "AlignmentDirectional.topCenter";
      }
      if (start === 1.0 && y === -1.0) {
        return "AlignmentDirectional.topEnd";
      }
      if (start === -1.0 && y === 0.0) {
        return "AlignmentDirectional.centerStart";
      }
      if (start === 0.0 && y === 0.0) {
        return "AlignmentDirectional.center";
      }
      if (start === 1.0 && y === 0.0) {
        return "AlignmentDirectional.centerEnd";
      }
      if (start === -1.0 && y === 1.0) {
        return "AlignmentDirectional.bottomStart";
      }
      if (start === 0.0 && y === 1.0) {
        return "AlignmentDirectional.bottomCenter";
      }
      if (start === 1.0 && y === 1.0) {
        return "AlignmentDirectional.bottomEnd";
      }
      return "AlignmentDirectional(" + start[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.AlignmentDirectional._stringify(this.start, this.y);
    }
  };
  (alignment.AlignmentDirectional.new = function(start, y) {
    this[start$] = start;
    this[y$0] = y;
    dart.global.Object.getPrototypeOf(alignment.AlignmentDirectional).new.call(this);
    ;
  }).prototype = alignment.AlignmentDirectional.prototype;
  dart.addTypeTests(alignment.AlignmentDirectional);
  dart.addRtiResources(alignment.AlignmentDirectional, ["flutter__src__painting__alignment|AlignmentDirectional"]);
  dart.addTypeCaches(alignment.AlignmentDirectional);
  dart.setMethodSignature(alignment.AlignmentDirectional, () => dart.global.Object.setPrototypeOf({
    '-': T.AlignmentDirectionalToAlignmentDirectional(),
    '+': T.AlignmentDirectionalToAlignmentDirectional(),
    _negate: T.VoidToAlignmentDirectional(),
    '*': T.doubleToAlignmentDirectional(),
    '/': T.doubleToAlignmentDirectional(),
    '~/': T.doubleToAlignmentDirectional(),
    '%': T.doubleToAlignmentDirectional(),
    resolve: T.TextDirectionNToAlignment()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(alignment.AlignmentDirectional))));
  dart.setStaticMethodSignature(alignment.AlignmentDirectional, () => ['lerp', '_stringify']);
  dart.setGetterSignature(alignment.AlignmentDirectional, () => dart.global.Object.setPrototypeOf({
    [_x]: T.double(),
    [_start]: T.double(),
    [_y]: T.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(alignment.AlignmentDirectional))));
  dart.setLibraryUri(alignment.AlignmentDirectional, I[0]);
  dart.setFieldSignature(alignment.AlignmentDirectional, () => dart.global.Object.setPrototypeOf({
    start: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    y: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(alignment.AlignmentDirectional))));
  dart.setStaticFieldSignature(alignment.AlignmentDirectional, () => ['topStart', 'topCenter', 'topEnd', 'centerStart', 'center', 'centerEnd', 'bottomStart', 'bottomCenter', 'bottomEnd']);
  dart.defineExtensionMethods(alignment.AlignmentDirectional, ['toString']);
  dart.defineLazy(alignment.AlignmentDirectional, {
    /*alignment.AlignmentDirectional.topStart*/get topStart() {
      return C[11] || CT.C11;
    },
    /*alignment.AlignmentDirectional.topCenter*/get topCenter() {
      return C[12] || CT.C12;
    },
    /*alignment.AlignmentDirectional.topEnd*/get topEnd() {
      return C[13] || CT.C13;
    },
    /*alignment.AlignmentDirectional.centerStart*/get centerStart() {
      return C[14] || CT.C14;
    },
    /*alignment.AlignmentDirectional.center*/get center() {
      return C[15] || CT.C15;
    },
    /*alignment.AlignmentDirectional.centerEnd*/get centerEnd() {
      return C[16] || CT.C16;
    },
    /*alignment.AlignmentDirectional.bottomStart*/get bottomStart() {
      return C[17] || CT.C17;
    },
    /*alignment.AlignmentDirectional.bottomCenter*/get bottomCenter() {
      return C[18] || CT.C18;
    },
    /*alignment.AlignmentDirectional.bottomEnd*/get bottomEnd() {
      return C[19] || CT.C19;
    }
  }, false);
  var _x$ = dart.privateName(alignment, "_MixedAlignment._x");
  var _start$ = dart.privateName(alignment, "_MixedAlignment._start");
  var _y$ = dart.privateName(alignment, "_MixedAlignment._y");
  alignment._MixedAlignment = class _MixedAlignment extends alignment.AlignmentGeometry {
    get [_x]() {
      return this[_x$];
    }
    set [_x](value) {
      super[_x] = value;
    }
    get [_start]() {
      return this[_start$];
    }
    set [_start](value) {
      super[_start] = value;
    }
    get [_y]() {
      return this[_y$];
    }
    set [_y](value) {
      super[_y] = value;
    }
    static ['_#new#tearOff'](_x, _start, _y) {
      return new alignment._MixedAlignment.new(_x, _start, _y);
    }
    _negate() {
      return new alignment._MixedAlignment.new(-this[_x], -this[_start], -this[_y]);
    }
    ['*'](other) {
      return new alignment._MixedAlignment.new(this[_x] * other, this[_start] * other, this[_y] * other);
    }
    ['/'](other) {
      return new alignment._MixedAlignment.new(this[_x] / other, this[_start] / other, this[_y] / other);
    }
    ['~/'](other) {
      return new alignment._MixedAlignment.new((this[_x] / other)[$truncate]()[$toDouble](), (this[_start] / other)[$truncate]()[$toDouble](), (this[_y] / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment._MixedAlignment.new(this[_x][$modulo](other), this[_start][$modulo](other), this[_y][$modulo](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed("Cannot resolve " + dart.str(dart.runtimeType(this)) + " without a TextDirection.", I[2], 645, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[9] || CT.C9:
          {
            return new alignment.Alignment.new(this[_x] - this[_start], this[_y]);
          }
        case C[10] || CT.C10:
          {
            return new alignment.Alignment.new(this[_x] + this[_start], this[_y]);
          }
      }
    }
  };
  (alignment._MixedAlignment.new = function(_x, _start, _y) {
    this[_x$] = _x;
    this[_start$] = _start;
    this[_y$] = _y;
    dart.global.Object.getPrototypeOf(alignment._MixedAlignment).new.call(this);
    ;
  }).prototype = alignment._MixedAlignment.prototype;
  dart.addTypeTests(alignment._MixedAlignment);
  dart.addRtiResources(alignment._MixedAlignment, ["flutter__src__painting__alignment|_MixedAlignment"]);
  dart.addTypeCaches(alignment._MixedAlignment);
  dart.setMethodSignature(alignment._MixedAlignment, () => dart.global.Object.setPrototypeOf({
    _negate: T.VoidTo_MixedAlignment(),
    '*': T.doubleTo_MixedAlignment(),
    '/': T.doubleTo_MixedAlignment(),
    '~/': T.doubleTo_MixedAlignment(),
    '%': T.doubleTo_MixedAlignment(),
    resolve: T.TextDirectionNToAlignment()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(alignment._MixedAlignment))));
  dart.setLibraryUri(alignment._MixedAlignment, I[0]);
  dart.setFieldSignature(alignment._MixedAlignment, () => dart.global.Object.setPrototypeOf({
    [_x]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_start]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_y]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(alignment._MixedAlignment))));
  var y$1 = dart.privateName(alignment, "TextAlignVertical.y");
  alignment.TextAlignVertical = class TextAlignVertical extends core.Object {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](opts) {
      let y = opts && 'y' in opts ? opts.y : null;
      return new alignment.TextAlignVertical.new({y: y});
    }
    toString() {
      return object.objectRuntimeType(this, "TextAlignVertical") + "(y: " + dart.strSafe(this.y) + ")";
    }
  };
  (alignment.TextAlignVertical.new = function(opts) {
    let y = opts && 'y' in opts ? opts.y : null;
    this[y$1] = y;
    if (!(y >= -1.0 && y <= 1.0)) dart.assertFailed(null, I[2], 674, 15, "y >= -1.0 && y <= 1.0");
    ;
  }).prototype = alignment.TextAlignVertical.prototype;
  dart.addTypeTests(alignment.TextAlignVertical);
  dart.addRtiResources(alignment.TextAlignVertical, ["flutter__src__painting__alignment|TextAlignVertical"]);
  dart.addTypeCaches(alignment.TextAlignVertical);
  dart.setLibraryUri(alignment.TextAlignVertical, I[0]);
  dart.setFieldSignature(alignment.TextAlignVertical, () => dart.global.Object.setPrototypeOf({y: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(alignment.TextAlignVertical))));
  dart.setStaticFieldSignature(alignment.TextAlignVertical, () => ['top', 'center', 'bottom']);
  dart.defineExtensionMethods(alignment.TextAlignVertical, ['toString']);
  dart.defineLazy(alignment.TextAlignVertical, {
    /*alignment.TextAlignVertical.top*/get top() {
      return C[20] || CT.C20;
    },
    /*alignment.TextAlignVertical.center*/get center() {
      return C[21] || CT.C21;
    },
    /*alignment.TextAlignVertical.bottom*/get bottom() {
      return C[22] || CT.C22;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/painting/alignment.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting__alignment|Alignment":{"flutter__src__painting__alignment|AlignmentGeometry":[]},"flutter__src__painting__alignment|AlignmentDirectional":{"flutter__src__painting__alignment|AlignmentGeometry":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"ui|Offset":{"ui|OffsetBase":[]},"ui|Size":{"ui|OffsetBase":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"flutter__src__painting__alignment|_MixedAlignment":{"flutter__src__painting__alignment|AlignmentGeometry":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/alignment.dart", {
    "package:flutter/src/painting/alignment.dart": alignment
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["alignment.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/alignment.dart.lib.js"}');
  // Exports:
  return {
    src__painting__alignment: alignment
  };
}));

//# sourceMappingURL=alignment.dart.lib.js.map

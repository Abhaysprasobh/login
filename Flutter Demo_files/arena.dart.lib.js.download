// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/arena.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart'], (function load__packages__flutter__src__gestures__arena_dart(dart_sdk, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  var arena = Object.create(dart.library);
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $map = dartx.map;
  var $join = dartx.join;
  var $putIfAbsent = dartx.putIfAbsent;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $containsKey = dartx.containsKey;
  var $toString = dartx.toString;
  var $padRight = dartx.padRight;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfGestureDisposition: () => (T.ListOfGestureDisposition = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__arena|GestureDisposition>")))(),
    GestureDisposition: () => (T.GestureDisposition = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureDisposition")))(),
    GestureDispositionTovoid: () => (T.GestureDispositionTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__arena|GestureDisposition)")))(),
    GestureArenaManager: () => (T.GestureArenaManager = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaManager")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    GestureArenaMember: () => (T.GestureArenaMember = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaMember")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    GestureArenaMemberToString: () => (T.GestureArenaMemberToString = dart.constFn(dart_rti.findType("core|String(flutter__src__gestures__arena|GestureArenaMember)")))(),
    GestureArenaMemberTovoid: () => (T.GestureArenaMemberTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__arena|GestureArenaMember)")))(),
    ListOfGestureArenaMember: () => (T.ListOfGestureArenaMember = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__arena|GestureArenaMember>")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    GestureArenaMemberN: () => (T.GestureArenaMemberN = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaMember?")))(),
    _GestureArena: () => (T._GestureArena = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|_GestureArena")))(),
    VoidTo_GestureArena: () => (T.VoidTo_GestureArena = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|_GestureArena()")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    intAndGestureArenaMemberToGestureArenaEntry: () => (T.intAndGestureArenaMemberToGestureArenaEntry = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaEntry(core|int,flutter__src__gestures__arena|GestureArenaMember)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    intAndGestureArenaMemberAndGestureDispositionTovoid: () => (T.intAndGestureArenaMemberAndGestureDispositionTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__arena|GestureArenaMember,flutter__src__gestures__arena|GestureDisposition)")))(),
    intAnd_GestureArenaTovoid: () => (T.intAnd_GestureArenaTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__arena|_GestureArena)")))(),
    intAnd_GestureArenaAndGestureArenaMemberTovoid: () => (T.intAnd_GestureArenaAndGestureArenaMemberTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__arena|_GestureArena,flutter__src__gestures__arena|GestureArenaMember)")))(),
    intAndStringAnd_GestureArenaNTobool: () => (T.intAndStringAnd_GestureArenaNTobool = dart.constFn(dart_rti.findType("core|bool(core|int,core|String[flutter__src__gestures__arena|_GestureArena?])")))(),
    MapOfint$_GestureArena: () => (T.MapOfint$_GestureArena = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__arena|_GestureArena>")))()
  };
  var G = {
    JSArrayOfGestureArenaMember: () => (G.JSArrayOfGestureArenaMember = dart.constFn(_interceptors.JSArray$(T.GestureArenaMember())))(),
    IdentityMapOfint$_GestureArena: () => (G.IdentityMapOfint$_GestureArena = dart.constFn(_js_helper.IdentityMap$(T.int(), T._GestureArena())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "accepted",
        [_Enum_index]: 0
      }, arena.GestureDisposition.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rejected",
        [_Enum_index]: 1
      }, arena.GestureDisposition.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], T.GestureDisposition());
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/gestures/arena.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/arena.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  arena.GestureDisposition = class GestureDisposition extends core._Enum {
    [_enumToString]() {
      return "GestureDisposition." + this[_name];
    }
  };
  (arena.GestureDisposition.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(arena.GestureDisposition).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = arena.GestureDisposition.prototype;
  dart.addTypeTests(arena.GestureDisposition);
  dart.addRtiResources(arena.GestureDisposition, ["flutter__src__gestures__arena|GestureDisposition"]);
  dart.addTypeCaches(arena.GestureDisposition);
  dart.setMethodSignature(arena.GestureDisposition, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(arena.GestureDisposition))));
  dart.setLibraryUri(arena.GestureDisposition, I[0]);
  dart.setStaticFieldSignature(arena.GestureDisposition, () => ['values', 'accepted', 'rejected']);
  dart.defineLazy(arena.GestureDisposition, {
    /*arena.GestureDisposition.values*/get values() {
      return C[0] || CT.C0;
    },
    /*arena.GestureDisposition.accepted*/get accepted() {
      return C[1] || CT.C1;
    },
    /*arena.GestureDisposition.rejected*/get rejected() {
      return C[2] || CT.C2;
    }
  }, false);
  arena.GestureArenaMember = class GestureArenaMember extends core.Object {};
  (arena.GestureArenaMember.new = function() {
    ;
  }).prototype = arena.GestureArenaMember.prototype;
  dart.addTypeTests(arena.GestureArenaMember);
  dart.addRtiResources(arena.GestureArenaMember, ["flutter__src__gestures__arena|GestureArenaMember"]);
  dart.addTypeCaches(arena.GestureArenaMember);
  dart.setLibraryUri(arena.GestureArenaMember, I[0]);
  var _arena$ = dart.privateName(arena, "_arena");
  var _pointer$ = dart.privateName(arena, "_pointer");
  var _member$ = dart.privateName(arena, "_member");
  var _resolve = dart.privateName(arena, "_resolve");
  arena.GestureArenaEntry = class GestureArenaEntry extends core.Object {
    static ['_#_#tearOff'](_arena, _pointer, _member) {
      return new arena.GestureArenaEntry.__(_arena, _pointer, _member);
    }
    resolve(disposition) {
      this[_arena$][_resolve](this[_pointer$], this[_member$], disposition);
    }
  };
  (arena.GestureArenaEntry.__ = function(_arena, _pointer, _member) {
    this[_arena$] = _arena;
    this[_pointer$] = _pointer;
    this[_member$] = _member;
    ;
  }).prototype = arena.GestureArenaEntry.prototype;
  dart.addTypeTests(arena.GestureArenaEntry);
  dart.addRtiResources(arena.GestureArenaEntry, ["flutter__src__gestures__arena|GestureArenaEntry"]);
  dart.addTypeCaches(arena.GestureArenaEntry);
  dart.setMethodSignature(arena.GestureArenaEntry, () => dart.global.Object.setPrototypeOf({resolve: T.GestureDispositionTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(arena.GestureArenaEntry))));
  dart.setLibraryUri(arena.GestureArenaEntry, I[0]);
  dart.setFieldSignature(arena.GestureArenaEntry, () => dart.global.Object.setPrototypeOf({
    [_arena$]: {type: T.GestureArenaManager(), isConst: false, isFinal: true, libraryUri: I[0]},
    [_pointer$]: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_member$]: {type: T.GestureArenaMember(), isConst: false, isFinal: true, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(arena.GestureArenaEntry))));
  arena._GestureArena = class _GestureArena extends core.Object {
    add(member) {
      if (!this.isOpen) dart.assertFailed(null, I[2], 70, 12, "isOpen");
      this.members[$add](member);
    }
    toString() {
      let buffer = new core.StringBuffer.new();
      if (this.members[$isEmpty]) {
        buffer.write("<empty>");
      } else {
        buffer.write(this.members[$map](T.String(), dart.fn(member => {
          if (dart.equals(member, this.eagerWinner)) {
            return dart.str(member) + " (eager winner)";
          }
          return dart.str(member);
        }, T.GestureArenaMemberToString()))[$join](", "));
      }
      if (this.isOpen) {
        buffer.write(" [open]");
      }
      if (this.isHeld) {
        buffer.write(" [held]");
      }
      if (this.hasPendingSweep) {
        buffer.write(" [hasPendingSweep]");
      }
      return dart.toString(buffer);
    }
    static ['_#new#tearOff']() {
      return new arena._GestureArena.new();
    }
  };
  (arena._GestureArena.new = function() {
    this.members = G.JSArrayOfGestureArenaMember().of([]);
    this.isOpen = true;
    this.isHeld = false;
    this.hasPendingSweep = false;
    this.eagerWinner = null;
    ;
  }).prototype = arena._GestureArena.prototype;
  dart.addTypeTests(arena._GestureArena);
  dart.addRtiResources(arena._GestureArena, ["flutter__src__gestures__arena|_GestureArena"]);
  dart.addTypeCaches(arena._GestureArena);
  dart.setMethodSignature(arena._GestureArena, () => dart.global.Object.setPrototypeOf({add: T.GestureArenaMemberTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(arena._GestureArena))));
  dart.setLibraryUri(arena._GestureArena, I[0]);
  dart.setFieldSignature(arena._GestureArena, () => dart.global.Object.setPrototypeOf({
    members: {type: T.ListOfGestureArenaMember(), isConst: false, isFinal: true, libraryUri: I[1]},
    isOpen: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    isHeld: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    hasPendingSweep: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    eagerWinner: {type: T.GestureArenaMemberN(), isConst: false, isFinal: false, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(arena._GestureArena))));
  dart.defineExtensionMethods(arena._GestureArena, ['toString']);
  var _arenas = dart.privateName(arena, "_arenas");
  var _debugLogDiagnostic = dart.privateName(arena, "_debugLogDiagnostic");
  var _tryToResolveArena = dart.privateName(arena, "_tryToResolveArena");
  var _resolveInFavorOf = dart.privateName(arena, "_resolveInFavorOf");
  var _resolveByDefault = dart.privateName(arena, "_resolveByDefault");
  arena.GestureArenaManager = class GestureArenaManager extends core.Object {
    add(pointer, member) {
      let state = this[_arenas][$putIfAbsent](pointer, dart.fn(() => {
        if (!this[_debugLogDiagnostic](pointer, "★ Opening new gesture arena.")) dart.assertFailed(null, I[2], 117, 14, "_debugLogDiagnostic(pointer, '★ Opening new gesture arena.')");
        return new arena._GestureArena.new();
      }, T.VoidTo_GestureArena()));
      state.add(member);
      if (!this[_debugLogDiagnostic](pointer, "Adding: " + dart.str(member))) dart.assertFailed(null, I[2], 121, 12, "_debugLogDiagnostic(pointer, 'Adding: $member')");
      return new arena.GestureArenaEntry.__(this, pointer, member);
    }
    close(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) {
        return;
      }
      state.isOpen = false;
      if (!this[_debugLogDiagnostic](pointer, "Closing", state)) dart.assertFailed(null, I[2], 134, 12, "_debugLogDiagnostic(pointer, 'Closing', state)");
      this[_tryToResolveArena](pointer, state);
    }
    sweep(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) {
        return;
      }
      if (!!state.isOpen) dart.assertFailed(null, I[2], 156, 12, "!state.isOpen");
      if (state.isHeld) {
        state.hasPendingSweep = true;
        if (!this[_debugLogDiagnostic](pointer, "Delaying sweep", state)) dart.assertFailed(null, I[2], 159, 14, "_debugLogDiagnostic(pointer, 'Delaying sweep', state)");
        return;
      }
      if (!this[_debugLogDiagnostic](pointer, "Sweeping", state)) dart.assertFailed(null, I[2], 162, 12, "_debugLogDiagnostic(pointer, 'Sweeping', state)");
      this[_arenas][$remove](pointer);
      if (state.members[$isNotEmpty]) {
        if (!this[_debugLogDiagnostic](pointer, "Winner: " + dart.str(state.members[$first]))) dart.assertFailed(null, I[2], 166, 14, "_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}')");
        state.members[$first].acceptGesture(pointer);
        for (let i = 1; i < state.members[$length]; i = i + 1) {
          state.members[$_get](i).rejectGesture(pointer);
        }
      }
    }
    hold(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) {
        return;
      }
      state.isHeld = true;
      if (!this[_debugLogDiagnostic](pointer, "Holding", state)) dart.assertFailed(null, I[2], 193, 12, "_debugLogDiagnostic(pointer, 'Holding', state)");
    }
    release(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) {
        return;
      }
      state.isHeld = false;
      if (!this[_debugLogDiagnostic](pointer, "Releasing", state)) dart.assertFailed(null, I[2], 211, 12, "_debugLogDiagnostic(pointer, 'Releasing', state)");
      if (state.hasPendingSweep) {
        this.sweep(pointer);
      }
    }
    [_resolve](pointer, member, disposition) {
      let t$362;
      let state = this[_arenas][$_get](pointer);
      if (state == null) {
        return;
      }
      if (!this[_debugLogDiagnostic](pointer, (disposition === arena.GestureDisposition.accepted ? "Accepting" : "Rejecting") + ": " + dart.str(member))) dart.assertFailed(null, I[2], 225, 12, "_debugLogDiagnostic(pointer, '${ disposition == GestureDisposition.accepted ? \"Accepting\" : \"Rejecting\" }: $member')");
      if (!state.members[$contains](member)) dart.assertFailed(null, I[2], 226, 12, "state.members.contains(member)");
      if (disposition === arena.GestureDisposition.rejected) {
        state.members[$remove](member);
        member.rejectGesture(pointer);
        if (!state.isOpen) {
          this[_tryToResolveArena](pointer, state);
        }
      } else {
        if (!(disposition === arena.GestureDisposition.accepted)) dart.assertFailed(null, I[2], 234, 14, "disposition == GestureDisposition.accepted");
        if (state.isOpen) {
          t$362 = state;
          t$362.eagerWinner == null ? t$362.eagerWinner = member : null;
        } else {
          if (!this[_debugLogDiagnostic](pointer, "Self-declared winner: " + dart.str(member))) dart.assertFailed(null, I[2], 238, 16, "_debugLogDiagnostic(pointer, 'Self-declared winner: $member')");
          this[_resolveInFavorOf](pointer, state, member);
        }
      }
    }
    [_tryToResolveArena](pointer, state) {
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, I[2], 245, 12, "_arenas[pointer] == state");
      if (!!state.isOpen) dart.assertFailed(null, I[2], 246, 12, "!state.isOpen");
      if (state.members[$length] === 1) {
        async.scheduleMicrotask(dart.fn(() => this[_resolveByDefault](pointer, state), T.VoidTovoid()));
      } else if (state.members[$isEmpty]) {
        this[_arenas][$remove](pointer);
        if (!this[_debugLogDiagnostic](pointer, "Arena empty.")) dart.assertFailed(null, I[2], 251, 14, "_debugLogDiagnostic(pointer, 'Arena empty.')");
      } else if (state.eagerWinner != null) {
        if (!this[_debugLogDiagnostic](pointer, "Eager winner: " + dart.str(state.eagerWinner))) dart.assertFailed(null, I[2], 253, 14, "_debugLogDiagnostic(pointer, 'Eager winner: ${state.eagerWinner}')");
        this[_resolveInFavorOf](pointer, state, dart.nullCheck(state.eagerWinner));
      }
    }
    [_resolveByDefault](pointer, state) {
      if (!this[_arenas][$containsKey](pointer)) {
        return;
      }
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, I[2], 262, 12, "_arenas[pointer] == state");
      if (!!state.isOpen) dart.assertFailed(null, I[2], 263, 12, "!state.isOpen");
      let members = state.members;
      if (!(members[$length] === 1)) dart.assertFailed(null, I[2], 265, 12, "members.length == 1");
      this[_arenas][$remove](pointer);
      if (!this[_debugLogDiagnostic](pointer, "Default winner: " + dart.str(state.members[$first]))) dart.assertFailed(null, I[2], 267, 12, "_debugLogDiagnostic(pointer, 'Default winner: ${state.members.first}')");
      state.members[$first].acceptGesture(pointer);
    }
    [_resolveInFavorOf](pointer, state, member) {
      if (!dart.equals(state, this[_arenas][$_get](pointer))) dart.assertFailed(null, I[2], 272, 12, "state == _arenas[pointer]");
      if (!(state.eagerWinner == null || dart.equals(state.eagerWinner, member))) dart.assertFailed(null, I[2], 273, 12, "state.eagerWinner == null || state.eagerWinner == member");
      if (!!state.isOpen) dart.assertFailed(null, I[2], 274, 12, "!state.isOpen");
      this[_arenas][$remove](pointer);
      for (let rejectedMember of state.members) {
        if (!dart.equals(rejectedMember, member)) {
          rejectedMember.rejectGesture(pointer);
        }
      }
      member.acceptGesture(pointer);
    }
    [_debugLogDiagnostic](pointer, message, state = null) {
      if (!dart.fn(() => {
        let t$362;
        if (debug.debugPrintGestureArenaDiagnostics) {
          let count = (t$362 = state, t$362 == null ? null : t$362.members[$length]);
          let s = count !== 1 ? "s" : "";
          print.debugPrint("Gesture arena " + pointer[$toString]()[$padRight](4) + " ❙ " + message + (count != null ? " with " + dart.str(count) + " member" + s + "." : ""));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 285, 12, "() {\r\n      if (debugPrintGestureArenaDiagnostics) {\r\n        final int? count = state?.members.length;\r\n        final String s = count != 1 ? 's' : '';\r\n        debugPrint('Gesture arena ${pointer.toString().padRight(4)} ❙ $message${ count != null ? \" with $count member$s.\" : \"\"}');\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    static ['_#new#tearOff']() {
      return new arena.GestureArenaManager.new();
    }
  };
  (arena.GestureArenaManager.new = function() {
    this[_arenas] = new (G.IdentityMapOfint$_GestureArena()).new();
    ;
  }).prototype = arena.GestureArenaManager.prototype;
  dart.addTypeTests(arena.GestureArenaManager);
  dart.addRtiResources(arena.GestureArenaManager, ["flutter__src__gestures__arena|GestureArenaManager"]);
  dart.addTypeCaches(arena.GestureArenaManager);
  dart.setMethodSignature(arena.GestureArenaManager, () => dart.global.Object.setPrototypeOf({
    add: T.intAndGestureArenaMemberToGestureArenaEntry(),
    close: T.intTovoid(),
    sweep: T.intTovoid(),
    hold: T.intTovoid(),
    release: T.intTovoid(),
    [_resolve]: T.intAndGestureArenaMemberAndGestureDispositionTovoid(),
    [_tryToResolveArena]: T.intAnd_GestureArenaTovoid(),
    [_resolveByDefault]: T.intAnd_GestureArenaTovoid(),
    [_resolveInFavorOf]: T.intAnd_GestureArenaAndGestureArenaMemberTovoid(),
    [_debugLogDiagnostic]: T.intAndStringAnd_GestureArenaNTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(arena.GestureArenaManager))));
  dart.setLibraryUri(arena.GestureArenaManager, I[0]);
  dart.setFieldSignature(arena.GestureArenaManager, () => dart.global.Object.setPrototypeOf({[_arenas]: {type: T.MapOfint$_GestureArena(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(arena.GestureArenaManager))));
  dart.moduleConstCaches.set("packages/flutter/src/gestures/arena.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__arena|GestureDisposition":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/flutter/src/gestures/arena.dart", {
    "package:flutter/src/gestures/arena.dart": arena
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["arena.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/arena.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__arena: arena
  };
}));

//# sourceMappingURL=arena.dart.lib.js.map

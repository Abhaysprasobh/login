// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/binding.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/resampler.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/gestures/pointer_router.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/pointer_signal_resolver.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/gestures/converter.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/hit_test.dart'], (function load__packages__flutter__src__gestures__binding_dart(dart_sdk, packages__flutter__src__gestures__resampler$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__gestures__pointer_router$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__pointer_signal_resolver$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__gestures__converter$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__hit_test$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const resampler$ = packages__flutter__src__gestures__resampler$46dart.src__gestures__resampler;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const pointer_router = packages__flutter__src__gestures__pointer_router$46dart.src__gestures__pointer_router;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const pointer_signal_resolver = packages__flutter__src__gestures__pointer_signal_resolver$46dart.src__gestures__pointer_signal_resolver;
  const binding$ = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const converter = packages__flutter__src__gestures__converter$46dart.src__gestures__converter;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  var binding$0 = Object.create(dart.library);
  var $putIfAbsent = dartx.putIfAbsent;
  var $truncate = dartx.truncate;
  var $values = dartx.values;
  var $removeWhere = dartx.removeWhere;
  var $isEmpty = dartx.isEmpty;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToDateTime: () => (T.VoidToDateTime = dart.constFn(dart_rti.findType("core|DateTime()")))(),
    VoidToStopwatch: () => (T.VoidToStopwatch = dart.constFn(dart_rti.findType("core|Stopwatch()")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    PointerEventResampler: () => (T.PointerEventResampler = dart.constFn(dart_rti.findType("flutter__src__gestures__resampler|PointerEventResampler")))(),
    VoidToPointerEventResampler: () => (T.VoidToPointerEventResampler = dart.constFn(dart_rti.findType("flutter__src__gestures__resampler|PointerEventResampler()")))(),
    TimerTovoid: () => (T.TimerTovoid = dart.constFn(dart_rti.findType("~(async|Timer)")))(),
    intAndPointerEventResamplerTobool: () => (T.intAndPointerEventResamplerTobool = dart.constFn(dart_rti.findType("core|bool(core|int,flutter__src__gestures__resampler|PointerEventResampler)")))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart_rti.findType("~(core|Duration)")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    DurationAndSamplingClockTovoid: () => (T.DurationAndSamplingClockTovoid = dart.constFn(dart_rti.findType("~(core|Duration,flutter__src__gestures__binding|SamplingClock)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    MapOfint$PointerEventResampler: () => (T.MapOfint$PointerEventResampler = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__resampler|PointerEventResampler>")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    Stopwatch: () => (T.Stopwatch = dart.constFn(dart_rti.findType("core|Stopwatch")))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))(),
    PointerEvent: () => (T.PointerEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent")))(),
    HitTestResult: () => (T.HitTestResult = dart.constFn(dart_rti.findType("flutter__src__gestures__hit_test|HitTestResult")))(),
    GestureBinding: () => (T.GestureBinding = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|GestureBinding")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    PointerSignalEvent: () => (T.PointerSignalEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerSignalEvent")))(),
    PointerHoverEvent: () => (T.PointerHoverEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerHoverEvent")))(),
    PointerPanZoomStartEvent: () => (T.PointerPanZoomStartEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomStartEvent")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerCancelEvent: () => (T.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerPanZoomEndEvent: () => (T.PointerPanZoomEndEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomEndEvent")))(),
    PointerPanZoomUpdateEvent: () => (T.PointerPanZoomUpdateEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomUpdateEvent")))(),
    PointerAddedEvent: () => (T.PointerAddedEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerAddedEvent")))(),
    PointerRemovedEvent: () => (T.PointerRemovedEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerRemovedEvent")))(),
    HitTestTarget: () => (T.HitTestTarget = dart.constFn(dart_rti.findType("flutter__src__gestures__hit_test|HitTestTarget")))(),
    DiagnosticsNode: () => (T.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    PointerDataPacketTovoid: () => (T.PointerDataPacketTovoid = dart.constFn(dart_rti.findType("~(ui|PointerDataPacket)")))(),
    intTodoubleN: () => (T.intTodoubleN = dart.constFn(dart_rti.findType("core|double?(core|int)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    HitTestResultAndOffsetAndintTovoid: () => (T.HitTestResultAndOffsetAndintTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__hit_test|HitTestResult,ui|Offset,core|int)")))(),
    HitTestResultAndOffsetTovoid: () => (T.HitTestResultAndOffsetTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__hit_test|HitTestResult,ui|Offset)")))(),
    PointerEventAndHitTestResultNTovoid: () => (T.PointerEventAndHitTestResultNTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent,flutter__src__gestures__hit_test|HitTestResult?)")))(),
    PointerEventAndHitTestEntryOfHitTestTargetTovoid: () => (T.PointerEventAndHitTestEntryOfHitTestTargetTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent,flutter__src__gestures__hit_test|HitTestEntry<flutter__src__gestures__hit_test|HitTestTarget>)")))(),
    SamplingClockN: () => (T.SamplingClockN = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|SamplingClock?")))(),
    SamplingClock: () => (T.SamplingClock = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|SamplingClock")))(),
    _Resampler: () => (T._Resampler = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|_Resampler")))(),
    GestureBindingN: () => (T.GestureBindingN = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|GestureBinding?")))(),
    QueueOfPointerEvent: () => (T.QueueOfPointerEvent = dart.constFn(dart_rti.findType("collection|Queue<flutter__src__gestures__events|PointerEvent>")))(),
    PointerRouter: () => (T.PointerRouter = dart.constFn(dart_rti.findType("flutter__src__gestures__pointer_router|PointerRouter")))(),
    GestureArenaManager: () => (T.GestureArenaManager = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaManager")))(),
    PointerSignalResolver: () => (T.PointerSignalResolver = dart.constFn(dart_rti.findType("flutter__src__gestures__pointer_signal_resolver|PointerSignalResolver")))(),
    MapOfint$HitTestResult: () => (T.MapOfint$HitTestResult = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__hit_test|HitTestResult>")))(),
    _ResamplerN: () => (T._ResamplerN = dart.constFn(dart_rti.findType("flutter__src__gestures__binding|_Resampler?")))(),
    PointerEventN: () => (T.PointerEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent?")))(),
    HitTestEntryNOfHitTestTarget: () => (T.HitTestEntryNOfHitTestTarget = dart.constFn(dart_rti.findType("flutter__src__gestures__hit_test|HitTestEntry<flutter__src__gestures__hit_test|HitTestTarget>?")))()
  };
  var G = {
    IdentityMapOfint$PointerEventResampler: () => (G.IdentityMapOfint$PointerEventResampler = dart.constFn(_js_helper.IdentityMap$(T.int(), T.PointerEventResampler())))(),
    ListQueueOfPointerEvent: () => (G.ListQueueOfPointerEvent = dart.constFn(collection.ListQueue$(T.PointerEvent())))(),
    IdentityMapOfint$HitTestResult: () => (G.IdentityMapOfint$HitTestResult = dart.constFn(_js_helper.IdentityMap$(T.int(), T.HitTestResult())))(),
    HitTestEntryOfHitTestTarget: () => (G.HitTestEntryOfHitTestTarget = dart.constFn(hit_test.HitTestEntry$(T.HitTestTarget())))(),
    DiagnosticsPropertyOfPointerEvent: () => (G.DiagnosticsPropertyOfPointerEvent = dart.constFn(diagnostics.DiagnosticsProperty$(T.PointerEvent())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNode())))(),
    DiagnosticsPropertyOfHitTestTarget: () => (G.DiagnosticsPropertyOfHitTestTarget = dart.constFn(diagnostics.DiagnosticsProperty$(T.HitTestTarget())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: -38000
      }, core.Duration.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 16667
      }, core.Duration.prototype));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "package:flutter/src/gestures/binding.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/binding.dart",
    "dart:core",
    "dart:async",
    "dart:collection",
    "package:flutter/src/gestures/pointer_router.dart",
    "package:flutter/src/gestures/arena.dart",
    "package:flutter/src/gestures/pointer_signal_resolver.dart",
    "package:flutter/src/gestures/events.dart",
    "package:flutter/src/gestures/hit_test.dart"
  ];
  binding$0.SamplingClock = class SamplingClock extends core.Object {
    now() {
      return new core.DateTime.now();
    }
    stopwatch() {
      return new core.Stopwatch.new();
    }
    static ['_#new#tearOff']() {
      return new binding$0.SamplingClock.new();
    }
  };
  (binding$0.SamplingClock.new = function() {
    ;
  }).prototype = binding$0.SamplingClock.prototype;
  dart.addTypeTests(binding$0.SamplingClock);
  dart.addRtiResources(binding$0.SamplingClock, ["flutter__src__gestures__binding|SamplingClock"]);
  dart.addTypeCaches(binding$0.SamplingClock);
  dart.setMethodSignature(binding$0.SamplingClock, () => dart.global.Object.setPrototypeOf({
    now: T.VoidToDateTime(),
    stopwatch: T.VoidToStopwatch()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$0.SamplingClock))));
  dart.setLibraryUri(binding$0.SamplingClock, I[0]);
  var _resamplers = dart.privateName(binding$0, "_resamplers");
  var _frameCallbackScheduled = dart.privateName(binding$0, "_frameCallbackScheduled");
  var _frameTime = dart.privateName(binding$0, "_frameTime");
  var _frameTimeAge = dart.privateName(binding$0, "_frameTimeAge");
  var _lastSampleTime = dart.privateName(binding$0, "_lastSampleTime");
  var _lastEventTime = dart.privateName(binding$0, "_lastEventTime");
  var _timer = dart.privateName(binding$0, "_timer");
  var _handlePointerEvent$ = dart.privateName(binding$0, "_handlePointerEvent");
  var _handleSampleTimeChanged$ = dart.privateName(binding$0, "_handleSampleTimeChanged");
  var _samplingInterval$ = dart.privateName(binding$0, "_samplingInterval");
  var _onSampleTimeChanged = dart.privateName(binding$0, "_onSampleTimeChanged");
  binding$0._Resampler = class _Resampler extends core.Object {
    static ['_#new#tearOff'](_handlePointerEvent, _handleSampleTimeChanged, _samplingInterval) {
      return new binding$0._Resampler.new(_handlePointerEvent, _handleSampleTimeChanged, _samplingInterval);
    }
    addOrDispatch(event) {
      let t$360;
      if (event.kind === ui.PointerDeviceKind.touch) {
        this[_lastEventTime] = event.timeStamp;
        let resampler = this[_resamplers][$putIfAbsent](event.device, dart.fn(() => new resampler$.PointerEventResampler.new(), T.VoidToPointerEventResampler()));
        resampler.addEvent(event);
      } else {
        t$360 = event;
        this[_handlePointerEvent$](t$360);
      }
    }
    sample(samplingOffset, clock) {
      let t$360, t$360$;
      let scheduler = binding.SchedulerBinding.instance;
      if (dart.equals(this[_frameTime], core.Duration.zero)) {
        this[_frameTime] = new core.Duration.new({milliseconds: clock.now().millisecondsSinceEpoch});
        this[_frameTimeAge] = (t$360 = clock.stopwatch(), (() => {
          t$360.start();
          return t$360;
        })());
      }
      if ((t$360$ = this[_timer], t$360$ == null ? null : t$360$.isActive) !== true) {
        this[_timer] = async.Timer.periodic(this[_samplingInterval$], dart.fn(_ => this[_onSampleTimeChanged](), T.TimerTovoid()));
      }
      let samplingIntervalUs = this[_samplingInterval$].inMicroseconds;
      let elapsedIntervals = (this[_frameTimeAge].elapsedMicroseconds / samplingIntervalUs)[$truncate]();
      let elapsedUs = elapsedIntervals * samplingIntervalUs;
      let frameTime = this[_frameTime]['+'](new core.Duration.new({microseconds: elapsedUs}));
      let sampleTime = frameTime['+'](samplingOffset);
      let nextSampleTime = sampleTime['+'](this[_samplingInterval$]);
      for (let resampler of this[_resamplers][$values]) {
        resampler.sample(sampleTime, nextSampleTime, this[_handlePointerEvent$]);
      }
      this[_resamplers][$removeWhere](dart.fn((key, resampler) => !resampler.hasPendingEvents && !resampler.isDown, T.intAndPointerEventResamplerTobool()));
      this[_lastSampleTime] = sampleTime;
      if (this[_resamplers][$isEmpty]) {
        dart.nullCheck(this[_timer]).cancel();
        return;
      }
      if (!this[_frameCallbackScheduled]) {
        this[_frameCallbackScheduled] = true;
        scheduler.addPostFrameCallback(dart.fn(_ => {
          let t$360;
          this[_frameCallbackScheduled] = false;
          this[_frameTime] = scheduler.currentSystemFrameTimeStamp;
          this[_frameTimeAge].reset();
          t$360 = this[_timer];
          t$360 == null ? null : t$360.cancel();
          this[_timer] = async.Timer.periodic(this[_samplingInterval$], dart.fn(_ => this[_onSampleTimeChanged](), T.TimerTovoid()));
          this[_onSampleTimeChanged]();
        }, T.DurationTovoid()), {debugLabel: "Resampler.startTimer"});
      }
    }
    stop() {
      let t$360;
      for (let resampler of this[_resamplers][$values]) {
        resampler.stop(this[_handlePointerEvent$]);
      }
      this[_resamplers][$clear]();
      this[_frameTime] = core.Duration.zero;
      t$360 = this[_timer];
      t$360 == null ? null : t$360.cancel();
    }
    [_onSampleTimeChanged]() {
      if (!dart.fn(() => {
        if (debug.debugPrintResamplingMargin) {
          let resamplingMargin = this[_lastEventTime]['-'](this[_lastSampleTime]);
          print.debugPrint(dart.str(resamplingMargin));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 200, 12, "() {\r\n      if (debugPrintResamplingMargin) {\r\n        final Duration resamplingMargin = _lastEventTime - _lastSampleTime;\r\n        debugPrint('$resamplingMargin');\r\n      }\r\n      return true;\r\n    }()");
      this[_handleSampleTimeChanged$]();
    }
  };
  (binding$0._Resampler.new = function(_handlePointerEvent, _handleSampleTimeChanged, _samplingInterval) {
    this[_resamplers] = new (G.IdentityMapOfint$PointerEventResampler()).new();
    this[_frameCallbackScheduled] = false;
    this[_frameTime] = core.Duration.zero;
    this[_frameTimeAge] = new core.Stopwatch.new();
    this[_lastSampleTime] = core.Duration.zero;
    this[_lastEventTime] = core.Duration.zero;
    this[_timer] = null;
    this[_handlePointerEvent$] = _handlePointerEvent;
    this[_handleSampleTimeChanged$] = _handleSampleTimeChanged;
    this[_samplingInterval$] = _samplingInterval;
    ;
  }).prototype = binding$0._Resampler.prototype;
  dart.addTypeTests(binding$0._Resampler);
  dart.addRtiResources(binding$0._Resampler, ["flutter__src__gestures__binding|_Resampler"]);
  dart.addTypeCaches(binding$0._Resampler);
  dart.setMethodSignature(binding$0._Resampler, () => dart.global.Object.setPrototypeOf({
    addOrDispatch: T.PointerEventTovoid(),
    sample: T.DurationAndSamplingClockTovoid(),
    stop: T.VoidTovoid(),
    [_onSampleTimeChanged]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$0._Resampler))));
  dart.setLibraryUri(binding$0._Resampler, I[0]);
  dart.setFieldSignature(binding$0._Resampler, () => dart.global.Object.setPrototypeOf({
    [_resamplers]: {type: T.MapOfint$PointerEventResampler(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_frameCallbackScheduled]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_frameTime]: {type: T.Duration(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_frameTimeAge]: {type: T.Stopwatch(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_lastSampleTime]: {type: T.Duration(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_lastEventTime]: {type: T.Duration(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_handlePointerEvent$]: {type: T.PointerEventTovoid(), isConst: false, isFinal: true},
    [_handleSampleTimeChanged$]: {type: T.VoidTovoid(), isConst: false, isFinal: true},
    [_samplingInterval$]: {type: T.Duration(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_timer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$0._Resampler))));
  var pointerRouter = dart.privateName(binding$0, "GestureBinding.pointerRouter");
  var gestureArena = dart.privateName(binding$0, "GestureBinding.gestureArena");
  var pointerSignalResolver = dart.privateName(binding$0, "GestureBinding.pointerSignalResolver");
  var resamplingEnabled = dart.privateName(binding$0, "GestureBinding.resamplingEnabled");
  var samplingOffset = dart.privateName(binding$0, "GestureBinding.samplingOffset");
  var _pendingPointerEvents = dart.privateName(binding$0, "_pendingPointerEvents");
  var _hitTests = dart.privateName(binding$0, "_hitTests");
  var __GestureBinding__resampler = dart.privateName(binding$0, "_#GestureBinding#_resampler");
  var _handlePointerDataPacket = dart.privateName(binding$0, "_handlePointerDataPacket");
  var _flushPointerEventQueue = dart.privateName(binding$0, "_flushPointerEventQueue");
  var _devicePixelRatioForView = dart.privateName(binding$0, "_devicePixelRatioForView");
  var _is = dart.privateName(dart_rti, "_is");
  var _resampler = dart.privateName(binding$0, "_resampler");
  var _handlePointerEventImmediately = dart.privateName(binding$0, "_handlePointerEventImmediately");
  binding$0.GestureBinding = class GestureBinding extends binding$.BindingBase {
    static get instance() {
      return binding$.BindingBase.checkInstance(T.GestureBinding(), binding$0.GestureBinding._instance);
    }
  };
  binding$0.GestureBinding[dart.mixinOn] = BindingBase => class GestureBinding extends BindingBase {
    get pointerRouter() {
      return this[pointerRouter];
    }
    set pointerRouter(value) {
      super.pointerRouter = value;
    }
    get gestureArena() {
      return this[gestureArena];
    }
    set gestureArena(value) {
      super.gestureArena = value;
    }
    get pointerSignalResolver() {
      return this[pointerSignalResolver];
    }
    set pointerSignalResolver(value) {
      super.pointerSignalResolver = value;
    }
    get resamplingEnabled() {
      return this[resamplingEnabled];
    }
    set resamplingEnabled(value) {
      this[resamplingEnabled] = value;
    }
    get samplingOffset() {
      return this[samplingOffset];
    }
    set samplingOffset(value) {
      this[samplingOffset] = value;
    }
    initInstances() {
      super.initInstances();
      binding$0.GestureBinding._instance = this;
      this.platformDispatcher.onPointerDataPacket = dart.bind(this, _handlePointerDataPacket);
    }
    unlocked() {
      super.unlocked();
      this[_flushPointerEventQueue]();
    }
    [_handlePointerDataPacket](packet) {
      try {
        this[_pendingPointerEvents].addAll(converter.PointerEventConverter.expand(packet.data, dart.bind(this, _devicePixelRatioForView)));
        if (!this.locked) {
          this[_flushPointerEventQueue]();
        }
      } catch (t$36$35e) {
        let error = dart.getThrown(t$36$35e);
        let stack = dart.stackTrace(t$36$35e);
        if (T.Object()[_is](error)) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: error, stack: stack, library: "gestures library", context: new assertions.ErrorDescription.new("while handling a pointer data packet")}));
        } else
          throw t$36$35e;
      }
    }
    [_devicePixelRatioForView](viewId) {
      let t$361;
      t$361 = this.platformDispatcher.view({id: viewId});
      return t$361 == null ? null : t$361.devicePixelRatio;
    }
    cancelPointer(pointer) {
      if (this[_pendingPointerEvents][$isEmpty] && !this.locked) {
        async.scheduleMicrotask(dart.bind(this, _flushPointerEventQueue));
      }
      this[_pendingPointerEvents].addFirst(new events.PointerCancelEvent.new({pointer: pointer}));
    }
    [_flushPointerEventQueue]() {
      if (!!this.locked) dart.assertFailed(null, I[1], 327, 12, "!locked");
      while (this[_pendingPointerEvents][$isNotEmpty]) {
        this.handlePointerEvent(this[_pendingPointerEvents].removeFirst());
      }
    }
    handlePointerEvent(event) {
      if (!!this.locked) dart.assertFailed(null, I[1], 372, 12, "!locked");
      if (this.resamplingEnabled) {
        this[_resampler].addOrDispatch(event);
        this[_resampler].sample(this.samplingOffset, this.samplingClock);
        return;
      }
      this[_resampler].stop();
      this[_handlePointerEventImmediately](event);
    }
    [_handlePointerEventImmediately](event) {
      let hitTestResult = null;
      if (T.PointerDownEvent()[_is](event) || T.PointerSignalEvent()[_is](event) || T.PointerHoverEvent()[_is](event) || T.PointerPanZoomStartEvent()[_is](event)) {
        if (!!this[_hitTests][$containsKey](event.pointer)) dart.assertFailed("Pointer of " + event.toString({minLevel: diagnostics.DiagnosticLevel.debug}) + " unexpectedly has a HitTestResult associated with it.", I[1], 389, 14, "!_hitTests.containsKey(event.pointer)");
        hitTestResult = new hit_test.HitTestResult.new();
        this.hitTestInView(hitTestResult, event.position, event.viewId);
        if (T.PointerDownEvent()[_is](event) || T.PointerPanZoomStartEvent()[_is](event)) {
          this[_hitTests][$_set](event.pointer, hitTestResult);
        }
        if (!dart.fn(() => {
          if (debug.debugPrintHitTestResults) {
            print.debugPrint(event.toString({minLevel: diagnostics.DiagnosticLevel.debug}) + ": " + dart.str(hitTestResult));
          }
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 395, 14, "() {\r\n        if (debugPrintHitTestResults) {\r\n          debugPrint('${event.toString(minLevel: DiagnosticLevel.debug)}: $hitTestResult');\r\n        }\r\n        return true;\r\n      }()");
      } else if (T.PointerUpEvent()[_is](event) || T.PointerCancelEvent()[_is](event) || T.PointerPanZoomEndEvent()[_is](event)) {
        hitTestResult = this[_hitTests][$remove](event.pointer);
      } else if (event.down || T.PointerPanZoomUpdateEvent()[_is](event)) {
        hitTestResult = this[_hitTests][$_get](event.pointer);
      }
      if (!dart.fn(() => {
        if (debug.debugPrintMouseHoverEvents && T.PointerHoverEvent()[_is](event)) {
          print.debugPrint(dart.str(event));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 411, 12, "() {\r\n      if (debugPrintMouseHoverEvents && event is PointerHoverEvent) {\r\n        debugPrint('$event');\r\n      }\r\n      return true;\r\n    }()");
      if (hitTestResult != null || T.PointerAddedEvent()[_is](event) || T.PointerRemovedEvent()[_is](event)) {
        this.dispatchEvent(event, hitTestResult);
      }
    }
    hitTestInView(result, position, viewId) {
      result.add(new (G.HitTestEntryOfHitTestTarget()).new(this));
    }
    hitTest(result, position) {
      this.hitTestInView(result, position, dart.nullCheck(this.platformDispatcher.implicitView).viewId);
    }
    dispatchEvent(event, hitTestResult) {
      if (!!this.locked) dart.assertFailed(null, I[1], 451, 12, "!locked");
      if (hitTestResult == null) {
        if (!(T.PointerAddedEvent()[_is](event) || T.PointerRemovedEvent()[_is](event))) dart.assertFailed(null, I[1], 456, 14, "event is PointerAddedEvent || event is PointerRemovedEvent");
        try {
          this.pointerRouter.route(event);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](exception)) {
            assertions.FlutterError.reportError(new binding$0.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a non-hit-tested pointer event"), event: event, informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T.VoidToListOfDiagnosticsNode())}));
          } else
            throw t$36$35e;
        }
        return;
      }
      for (let entry of hitTestResult.path) {
        try {
          entry.target.handleEvent(event.transformed(entry.transform), entry);
        } catch (t$36$35e$) {
          let exception = dart.getThrown(t$36$35e$);
          let stack = dart.stackTrace(t$36$35e$);
          if (T.Object()[_is](exception)) {
            assertions.FlutterError.reportError(new binding$0.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a pointer event"), event: event, hitTestEntry: entry, informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new (G.DiagnosticsPropertyOfHitTestTarget()).new("Target", entry.target, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T.VoidToListOfDiagnosticsNode())}));
          } else
            throw t$36$35e$;
        }
      }
    }
    handleEvent(event, entry) {
      this.pointerRouter.route(event);
      if (T.PointerDownEvent()[_is](event) || T.PointerPanZoomStartEvent()[_is](event)) {
        this.gestureArena.close(event.pointer);
      } else if (T.PointerUpEvent()[_is](event) || T.PointerPanZoomEndEvent()[_is](event)) {
        this.gestureArena.sweep(event.pointer);
      } else if (T.PointerSignalEvent()[_is](event)) {
        this.pointerSignalResolver.resolve(event);
      }
    }
    resetGestureBinding() {
      this[_hitTests][$clear]();
    }
    [_handleSampleTimeChanged$]() {
      if (!this.locked) {
        if (this.resamplingEnabled) {
          this[_resampler].sample(this.samplingOffset, this.samplingClock);
        } else {
          this[_resampler].stop();
        }
      }
    }
    get debugSamplingClock() {
      return null;
    }
    get samplingClock() {
      let value = new binding$0.SamplingClock.new();
      if (!dart.fn(() => {
        let debugValue = this.debugSamplingClock;
        if (debugValue != null) {
          value = debugValue;
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 539, 12, "() {\r\n      final SamplingClock? debugValue = debugSamplingClock;\r\n      if (debugValue != null) {\r\n        value = debugValue;\r\n      }\r\n      return true;\r\n    }()");
      return value;
    }
    get [_resampler]() {
      let t$364, t$363;
      t$363 = this[__GestureBinding__resampler];
      return t$363 == null ? (t$364 = new binding$0._Resampler.new(dart.bind(this, _handlePointerEventImmediately), dart.bind(this, _handleSampleTimeChanged$), binding$0._samplingInterval), this[__GestureBinding__resampler] == null ? this[__GestureBinding__resampler] = t$364 : dart.throw(new _internal.LateError.fieldADI("_resampler"))) : t$363;
    }
  };
  (binding$0.GestureBinding[dart.mixinNew] = function() {
    this[_pendingPointerEvents] = new (G.ListQueueOfPointerEvent()).new();
    this[pointerRouter] = new pointer_router.PointerRouter.new();
    this[gestureArena] = new arena.GestureArenaManager.new();
    this[pointerSignalResolver] = new pointer_signal_resolver.PointerSignalResolver.new();
    this[_hitTests] = new (G.IdentityMapOfint$HitTestResult()).new();
    this[__GestureBinding__resampler] = null;
    this[resamplingEnabled] = false;
    this[samplingOffset] = binding$0._defaultSamplingOffset;
  }).prototype = binding$0.GestureBinding.prototype;
  dart.addTypeTests(binding$0.GestureBinding);
  dart.addRtiResources(binding$0.GestureBinding, ["flutter__src__gestures__binding|GestureBinding", "flutter__src__gestures__hit_test|HitTestable", "flutter__src__gestures__hit_test|HitTestDispatcher", "flutter__src__gestures__hit_test|HitTestTarget"]);
  dart.addTypeCaches(binding$0.GestureBinding);
  dart.setMethodSignature(binding$0.GestureBinding, () => dart.global.Object.setPrototypeOf({
    [_handlePointerDataPacket]: T.PointerDataPacketTovoid(),
    [_devicePixelRatioForView]: T.intTodoubleN(),
    cancelPointer: T.intTovoid(),
    [_flushPointerEventQueue]: T.VoidTovoid(),
    handlePointerEvent: T.PointerEventTovoid(),
    [_handlePointerEventImmediately]: T.PointerEventTovoid(),
    hitTestInView: T.HitTestResultAndOffsetAndintTovoid(),
    hitTest: T.HitTestResultAndOffsetTovoid(),
    dispatchEvent: T.PointerEventAndHitTestResultNTovoid(),
    handleEvent: T.PointerEventAndHitTestEntryOfHitTestTargetTovoid(),
    resetGestureBinding: T.VoidTovoid(),
    [_handleSampleTimeChanged$]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$0.GestureBinding))));
  dart.setGetterSignature(binding$0.GestureBinding, () => dart.global.Object.setPrototypeOf({
    debugSamplingClock: T.SamplingClockN(),
    samplingClock: T.SamplingClock(),
    [_resampler]: T._Resampler()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$0.GestureBinding))));
  dart.setStaticGetterSignature(binding$0.GestureBinding, () => ['instance']);
  dart.setLibraryUri(binding$0.GestureBinding, I[0]);
  dart.setFieldSignature(binding$0.GestureBinding, () => dart.global.Object.setPrototypeOf({
    [_pendingPointerEvents]: {type: T.QueueOfPointerEvent(), isConst: false, isFinal: true, libraryUri: I[4]},
    pointerRouter: {type: T.PointerRouter(), isConst: false, isFinal: true, libraryUri: I[5]},
    gestureArena: {type: T.GestureArenaManager(), isConst: false, isFinal: true, libraryUri: I[6]},
    pointerSignalResolver: {type: T.PointerSignalResolver(), isConst: false, isFinal: true, libraryUri: I[7]},
    [_hitTests]: {type: T.MapOfint$HitTestResult(), isConst: false, isFinal: true, libraryUri: I[2]},
    [__GestureBinding__resampler]: {type: T._ResamplerN(), isConst: false, isFinal: false, libraryUri: I[0]},
    resamplingEnabled: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    samplingOffset: {type: T.Duration(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$0.GestureBinding))));
  dart.setStaticFieldSignature(binding$0.GestureBinding, () => ['_instance']);
  dart.defineLazy(binding$0.GestureBinding, {
    /*binding$0.GestureBinding._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  var event$ = dart.privateName(binding$0, "FlutterErrorDetailsForPointerEventDispatcher.event");
  var hitTestEntry$ = dart.privateName(binding$0, "FlutterErrorDetailsForPointerEventDispatcher.hitTestEntry");
  binding$0.FlutterErrorDetailsForPointerEventDispatcher = class FlutterErrorDetailsForPointerEventDispatcher extends assertions.FlutterErrorDetails {
    get event() {
      return this[event$];
    }
    set event(value) {
      super.event = value;
    }
    get hitTestEntry() {
      return this[hitTestEntry$];
    }
    set hitTestEntry(value) {
      super.hitTestEntry = value;
    }
    static ['_#new#tearOff'](opts) {
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let stack = opts && 'stack' in opts ? opts.stack : null;
      let library = opts && 'library' in opts ? opts.library : "Flutter framework";
      let context = opts && 'context' in opts ? opts.context : null;
      let event = opts && 'event' in opts ? opts.event : null;
      let hitTestEntry = opts && 'hitTestEntry' in opts ? opts.hitTestEntry : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      let silent = opts && 'silent' in opts ? opts.silent : false;
      return new binding$0.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: library, context: context, event: event, hitTestEntry: hitTestEntry, informationCollector: informationCollector, silent: silent});
    }
  };
  (binding$0.FlutterErrorDetailsForPointerEventDispatcher.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : "Flutter framework";
    let context = opts && 'context' in opts ? opts.context : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let hitTestEntry = opts && 'hitTestEntry' in opts ? opts.hitTestEntry : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[event$] = event;
    this[hitTestEntry$] = hitTestEntry;
    dart.global.Object.getPrototypeOf(binding$0.FlutterErrorDetailsForPointerEventDispatcher).new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = binding$0.FlutterErrorDetailsForPointerEventDispatcher.prototype;
  dart.addTypeTests(binding$0.FlutterErrorDetailsForPointerEventDispatcher);
  dart.addRtiResources(binding$0.FlutterErrorDetailsForPointerEventDispatcher, ["flutter__src__gestures__binding|FlutterErrorDetailsForPointerEventDispatcher"]);
  dart.addTypeCaches(binding$0.FlutterErrorDetailsForPointerEventDispatcher);
  dart.setLibraryUri(binding$0.FlutterErrorDetailsForPointerEventDispatcher, I[0]);
  dart.setFieldSignature(binding$0.FlutterErrorDetailsForPointerEventDispatcher, () => dart.global.Object.setPrototypeOf({
    event: {type: T.PointerEventN(), isConst: false, isFinal: true, libraryUri: I[8]},
    hitTestEntry: {type: T.HitTestEntryNOfHitTestTarget(), isConst: false, isFinal: true, libraryUri: I[9]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$0.FlutterErrorDetailsForPointerEventDispatcher))));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(binding$0, {
    /*binding$0._defaultSamplingOffset*/get _defaultSamplingOffset() {
      return C[0] || CT.C0;
    },
    /*binding$0._samplingInterval*/get _samplingInterval() {
      return C[1] || CT.C1;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/gestures/binding.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|DateTime":{"Comparable.T":"core|DateTime","core|Comparable":["core|DateTime"]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__gestures__binding|GestureBinding":{"flutter__src__foundation__binding|BindingBase":[],"flutter__src__gestures__hit_test|HitTestable":[],"flutter__src__gestures__hit_test|HitTestDispatcher":[],"flutter__src__gestures__hit_test|HitTestTarget":[]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerSignalEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerHoverEvent":{"flutter__src__gestures__events|_CopyPointerHoverEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerHoverEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomStartEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomEndEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomUpdateEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomUpdateEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomUpdateEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerAddedEvent":{"flutter__src__gestures__events|_CopyPointerAddedEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerAddedEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerRemovedEvent":{"flutter__src__gestures__events|_CopyPointerRemovedEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerRemovedEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__gestures__hit_test|HitTestEntry":{"HitTestEntry.T":"1"},"collection|Queue":{"Queue.E":"1","Iterable.E":"1","core|Iterable":["1"],"_QueueIterable.E":"1","collection|_QueueIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|_QueueIterable":{"_QueueIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__binding|FlutterErrorDetailsForPointerEventDispatcher":{"flutter__src__foundation__assertions|FlutterErrorDetails":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__assertions|FlutterErrorDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/binding.dart", {
    "package:flutter/src/gestures/binding.dart": binding$0
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/binding.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__binding: binding$0
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/semantics/binding.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/semantics/debug.dart', 'packages/flutter/src/foundation/memory_allocations.dart'], (function load__packages__flutter__src__semantics__binding_dart(dart_sdk, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__semantics__debug$46dart, packages__flutter__src__foundation__memory_allocations$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const message_codecs = packages__flutter__src__services__text_editing_delta$46dart.src__services__message_codecs;
  const debug = packages__flutter__src__semantics__debug$46dart.src__semantics__debug;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  var binding$ = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    SemanticsBinding: () => (T.SemanticsBinding = dart.constFn(dart_rti.findType("flutter__src__semantics__binding|SemanticsBinding")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ByteData: () => (T.ByteData = dart.constFn(dart_rti.findType("typed_data|ByteData")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    ValueNotifierOfbool: () => (T.ValueNotifierOfbool = dart.constFn(dart_rti.findType("flutter__src__foundation__change_notifier|ValueNotifier<core|bool>")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(~())")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    VoidToSemanticsHandle: () => (T.VoidToSemanticsHandle = dart.constFn(dart_rti.findType("flutter__src__semantics__binding|SemanticsHandle()")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    SemanticsActionEventTovoid: () => (T.SemanticsActionEventTovoid = dart.constFn(dart_rti.findType("~(ui|SemanticsActionEvent)")))(),
    AccessibilityFeatures: () => (T.AccessibilityFeatures = dart.constFn(dart_rti.findType("ui|AccessibilityFeatures")))(),
    VoidToSemanticsUpdateBuilder: () => (T.VoidToSemanticsUpdateBuilder = dart.constFn(dart_rti.findType("ui|SemanticsUpdateBuilder()")))(),
    SemanticsBindingN: () => (T.SemanticsBindingN = dart.constFn(dart_rti.findType("flutter__src__semantics__binding|SemanticsBinding?")))(),
    ValueNotifierNOfbool: () => (T.ValueNotifierNOfbool = dart.constFn(dart_rti.findType("flutter__src__foundation__change_notifier|ValueNotifier<core|bool>?")))(),
    SemanticsHandleN: () => (T.SemanticsHandleN = dart.constFn(dart_rti.findType("flutter__src__semantics__binding|SemanticsHandle?")))(),
    AccessibilityFeaturesN: () => (T.AccessibilityFeaturesN = dart.constFn(dart_rti.findType("ui|AccessibilityFeatures?")))(),
    SemanticsHandle: () => (T.SemanticsHandle = dart.constFn(dart_rti.findType("flutter__src__semantics__binding|SemanticsHandle")))()
  };
  var G = {
    ValueNotifierOfbool: () => (G.ValueNotifierOfbool = dart.constFn(change_notifier.ValueNotifier$(T.bool())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
      }, message_codecs.StandardMessageCodec.prototype));
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/semantics/binding.dart",
    "package:flutter/src/semantics/binding.dart",
    "package:flutter/src/foundation/change_notifier.dart",
    "dart:core",
    "dart:ui"
  ];
  var __SemanticsBinding__semanticsEnabled = dart.privateName(binding$, "_#SemanticsBinding#_semanticsEnabled");
  var _outstandingHandles = dart.privateName(binding$, "_outstandingHandles");
  var _semanticsHandle = dart.privateName(binding$, "_semanticsHandle");
  var __SemanticsBinding__accessibilityFeatures = dart.privateName(binding$, "_#SemanticsBinding#_accessibilityFeatures");
  var _accessibilityFeatures = dart.privateName(binding$, "_accessibilityFeatures");
  var _handleSemanticsEnabledChanged = dart.privateName(binding$, "_handleSemanticsEnabledChanged");
  var _handleSemanticsActionEvent = dart.privateName(binding$, "_handleSemanticsActionEvent");
  var _semanticsEnabled = dart.privateName(binding$, "_semanticsEnabled");
  var _didDisposeSemanticsHandle = dart.privateName(binding$, "_didDisposeSemanticsHandle");
  var _is = dart.privateName(dart_rti, "_is");
  binding$.SemanticsBinding = class SemanticsBinding extends binding.BindingBase {
    static get instance() {
      return binding.BindingBase.checkInstance(T.SemanticsBinding(), binding$.SemanticsBinding._instance);
    }
  };
  binding$.SemanticsBinding[dart.mixinOn] = BindingBase => class SemanticsBinding extends BindingBase {
    initInstances() {
      let t$360;
      super.initInstances();
      binding$.SemanticsBinding._instance = this;
      this[_accessibilityFeatures] = this.platformDispatcher.accessibilityFeatures;
      t$360 = this.platformDispatcher;
      (() => {
        t$360.onSemanticsEnabledChanged = dart.bind(this, _handleSemanticsEnabledChanged);
        t$360.onSemanticsActionEvent = dart.bind(this, _handleSemanticsActionEvent);
        t$360.onAccessibilityFeaturesChanged = dart.bind(this, 'handleAccessibilityFeaturesChanged');
        return t$360;
      })();
      this[_handleSemanticsEnabledChanged]();
    }
    get semanticsEnabled() {
      if (!(this[_semanticsEnabled].value === this[_outstandingHandles] > 0)) dart.assertFailed(null, I[0], 44, 12, "_semanticsEnabled.value == (_outstandingHandles > 0)");
      return this[_semanticsEnabled].value;
    }
    get [_semanticsEnabled]() {
      let t$361, t$360;
      t$360 = this[__SemanticsBinding__semanticsEnabled];
      return t$360 == null ? (t$361 = new (G.ValueNotifierOfbool()).new(this.platformDispatcher.semanticsEnabled), this[__SemanticsBinding__semanticsEnabled] == null ? this[__SemanticsBinding__semanticsEnabled] = t$361 : dart.throw(new _internal.LateError.fieldADI("_semanticsEnabled"))) : t$360;
    }
    addSemanticsEnabledListener(listener) {
      this[_semanticsEnabled].addListener(listener);
    }
    removeSemanticsEnabledListener(listener) {
      this[_semanticsEnabled].removeListener(listener);
    }
    get debugOutstandingSemanticsHandles() {
      return this[_outstandingHandles];
    }
    ensureSemantics() {
      if (!(this[_outstandingHandles] >= 0)) dart.assertFailed(null, I[0], 88, 12, "_outstandingHandles >= 0");
      this[_outstandingHandles] = this[_outstandingHandles] + 1;
      if (!(this[_outstandingHandles] > 0)) dart.assertFailed(null, I[0], 90, 12, "_outstandingHandles > 0");
      this[_semanticsEnabled].value = true;
      return new binding$.SemanticsHandle.__(dart.bind(this, _didDisposeSemanticsHandle));
    }
    [_didDisposeSemanticsHandle]() {
      if (!(this[_outstandingHandles] > 0)) dart.assertFailed(null, I[0], 96, 12, "_outstandingHandles > 0");
      this[_outstandingHandles] = this[_outstandingHandles] - 1;
      if (!(this[_outstandingHandles] >= 0)) dart.assertFailed(null, I[0], 98, 12, "_outstandingHandles >= 0");
      this[_semanticsEnabled].value = this[_outstandingHandles] > 0;
    }
    [_handleSemanticsEnabledChanged]() {
      let t$360;
      if (this.platformDispatcher.semanticsEnabled) {
        this[_semanticsHandle] == null ? this[_semanticsHandle] = this.ensureSemantics() : null;
      } else {
        t$360 = this[_semanticsHandle];
        t$360 == null ? null : t$360.dispose();
        this[_semanticsHandle] = null;
      }
    }
    [_handleSemanticsActionEvent](action) {
      let $arguments = action.arguments;
      let decodedAction = T.ByteData()[_is]($arguments) ? action.copyWith({arguments: (C[0] || CT.C0).decodeMessage($arguments)}) : action;
      this.performSemanticsAction(decodedAction);
    }
    get accessibilityFeatures() {
      return this[_accessibilityFeatures];
    }
    get [_accessibilityFeatures]() {
      let t$360;
      t$360 = this[__SemanticsBinding__accessibilityFeatures];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_accessibilityFeatures")) : t$360;
    }
    set [_accessibilityFeatures](_accessibilityFeatures$35param) {
      this[__SemanticsBinding__accessibilityFeatures] = _accessibilityFeatures$35param;
    }
    handleAccessibilityFeaturesChanged() {
      this[_accessibilityFeatures] = this.platformDispatcher.accessibilityFeatures;
    }
    createSemanticsUpdateBuilder() {
      return new ui.SemanticsUpdateBuilder.new();
    }
    get disableAnimations() {
      let value = this[_accessibilityFeatures].disableAnimations;
      if (!dart.fn(() => {
        if (debug.debugSemanticsDisableAnimations != null) {
          value = dart.nullCheck(debug.debugSemanticsDisableAnimations);
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 173, 12, "() {\r\n      if (debugSemanticsDisableAnimations != null) {\r\n        value = debugSemanticsDisableAnimations!;\r\n      }\r\n      return true;\r\n    }()");
      return value;
    }
  };
  (binding$.SemanticsBinding[dart.mixinNew] = function() {
    this[__SemanticsBinding__semanticsEnabled] = null;
    this[_outstandingHandles] = 0;
    this[_semanticsHandle] = null;
    this[__SemanticsBinding__accessibilityFeatures] = null;
  }).prototype = binding$.SemanticsBinding.prototype;
  dart.addTypeTests(binding$.SemanticsBinding);
  dart.addRtiResources(binding$.SemanticsBinding, ["flutter__src__semantics__binding|SemanticsBinding"]);
  dart.addTypeCaches(binding$.SemanticsBinding);
  dart.setMethodSignature(binding$.SemanticsBinding, () => dart.global.Object.setPrototypeOf({
    addSemanticsEnabledListener: T.FnTovoid(),
    removeSemanticsEnabledListener: T.FnTovoid(),
    ensureSemantics: T.VoidToSemanticsHandle(),
    [_didDisposeSemanticsHandle]: T.VoidTovoid(),
    [_handleSemanticsEnabledChanged]: T.VoidTovoid(),
    [_handleSemanticsActionEvent]: T.SemanticsActionEventTovoid(),
    handleAccessibilityFeaturesChanged: T.VoidTovoid(),
    createSemanticsUpdateBuilder: T.VoidToSemanticsUpdateBuilder()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SemanticsBinding))));
  dart.setGetterSignature(binding$.SemanticsBinding, () => dart.global.Object.setPrototypeOf({
    semanticsEnabled: T.bool(),
    [_semanticsEnabled]: T.ValueNotifierOfbool(),
    debugOutstandingSemanticsHandles: T.int(),
    accessibilityFeatures: T.AccessibilityFeatures(),
    [_accessibilityFeatures]: T.AccessibilityFeatures(),
    disableAnimations: T.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$.SemanticsBinding))));
  dart.setSetterSignature(binding$.SemanticsBinding, () => dart.global.Object.setPrototypeOf({[_accessibilityFeatures]: T.AccessibilityFeatures()}, dart.getSetters(dart.global.Object.getPrototypeOf(binding$.SemanticsBinding))));
  dart.setStaticGetterSignature(binding$.SemanticsBinding, () => ['instance']);
  dart.setLibraryUri(binding$.SemanticsBinding, I[1]);
  dart.setFieldSignature(binding$.SemanticsBinding, () => dart.global.Object.setPrototypeOf({
    [__SemanticsBinding__semanticsEnabled]: {type: T.ValueNotifierNOfbool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_outstandingHandles]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_semanticsHandle]: {type: T.SemanticsHandleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [__SemanticsBinding__accessibilityFeatures]: {type: T.AccessibilityFeaturesN(), isConst: false, isFinal: false, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$.SemanticsBinding))));
  dart.setStaticFieldSignature(binding$.SemanticsBinding, () => ['_instance']);
  dart.defineLazy(binding$.SemanticsBinding, {
    /*binding$.SemanticsBinding._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  var _onDispose$ = dart.privateName(binding$, "_onDispose");
  binding$.SemanticsHandle = class SemanticsHandle extends core.Object {
    static ['_#_#tearOff'](_onDispose) {
      return new binding$.SemanticsHandle.__(_onDispose);
    }
    dispose() {
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      this[_onDispose$]();
    }
  };
  (binding$.SemanticsHandle.__ = function(_onDispose) {
    this[_onDispose$] = _onDispose;
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/semantics.dart", className: dart.strSafe(dart_rti.createRuntimeType(T.SemanticsHandle())), object: this});
    }
  }).prototype = binding$.SemanticsHandle.prototype;
  dart.addTypeTests(binding$.SemanticsHandle);
  dart.addRtiResources(binding$.SemanticsHandle, ["flutter__src__semantics__binding|SemanticsHandle"]);
  dart.addTypeCaches(binding$.SemanticsHandle);
  dart.setMethodSignature(binding$.SemanticsHandle, () => dart.global.Object.setPrototypeOf({dispose: T.VoidTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SemanticsHandle))));
  dart.setLibraryUri(binding$.SemanticsHandle, I[1]);
  dart.setFieldSignature(binding$.SemanticsHandle, () => dart.global.Object.setPrototypeOf({[_onDispose$]: {type: T.VoidTovoid(), isConst: false, isFinal: true}}, dart.getFields(dart.global.Object.getPrototypeOf(binding$.SemanticsHandle))));
  dart.moduleConstCaches.set("packages/flutter/src/semantics/binding.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__semantics__binding|SemanticsBinding":{"flutter__src__foundation__binding|BindingBase":[]},"typed_data|ByteData":{"typed_data|TypedData":[]},"flutter__src__foundation__change_notifier|ValueNotifier":{"ValueNotifier.T":"1","flutter__src__foundation__change_notifier|ChangeNotifier":[],"ValueListenable.T":"1","flutter__src__foundation__change_notifier|ValueListenable":["1"],"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ChangeNotifier":{"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ValueListenable":{"ValueListenable.T":"1","flutter__src__foundation__change_notifier|Listenable":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"}}'));
  dart.trackLibraries("packages/flutter/src/semantics/binding.dart", {
    "package:flutter/src/semantics/binding.dart": binding$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgC0C,YAAY,yDAAc;IAAU;;;;;AAfpE;AACN,4CAAY;AACZ,qCAAyB,AAAmB;AAC5C;;AACI,oDAA4B;AAC5B,iDAAyB;AACzB,yDAAiC;;;AACrC;IACF;;AAkBE,YAAO,AAAkB,AAAM,kCAAI,AAAoB,4BAAE;AACzD,YAAO,AAAkB;IAC3B;;;AAC+B;sCAAoB,kCAAoB,AAAmB,iMAA3D;IAA4E;gCAS7D;AAC1B,MAAlB,oCAA8B,QAAQ;IACxC;mCAQiD;AAC7B,MAAlB,uCAAiC,QAAQ;IAC3C;;AAM4C;IAAmB;;AAc7D,YAAO,AAAoB,6BAAG;AAC9B,kCAAA,AAAmB,4BAAA;AACnB,YAAO,AAAoB,4BAAE;AACX,MAAlB,gCAA0B;AAC1B,YAAuB,2CAAE;IAC3B;;AAGE,YAAO,AAAoB,4BAAE;AAC7B,kCAAA,AAAmB,4BAAA;AACnB,YAAO,AAAoB,6BAAG;AACZ,MAAlB,gCAA0B,AAAoB,4BAAE;IAClD;;;AAME,UAAI,AAAmB;AACJ,yCAAjB,yBAAqB,yBAAJ;;AAEjB;+BAAkB;AAClB,iCAAmB;;IAEvB;kCAEyD;AACzC,uBAAY,AAAO,MAAD;AACF,0BAA0B,kBAAV,cAC1C,AAAO,MAAD,sBAAkD,8BAAc,gBACtE,MAAM;AACV,kCAAuB,aAAa;IACtC;;AAyBsD;IAAsB;;;AAC9C;;IAAsB;iCAAtB;;IAAsB;;AAQlD,qCAAyB,AAAmB;IAC9C;;AASE,YAAU;IACZ;;AAOO,kBAAQ,AAAuB;AACpC,WAAO,AAKN;AAJC,YAAI;AACF,kBAAuC,eAA/B;;AAEV,cAAO;;AAET,YAAO,MAAK;IACd;;;iDArI+B;IA4B3B,4BAAsB;IA4BT;sDA2Ca;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAhHL,mCAAS;;;;;;;;;;;AAsLhC;AACoC,QAAT,qFAAwC;;AAGzD,MAAV;IACF;;;IA3BuB;AAGrB;AACoC,MAAT,qFACd,6CACoB,uEACrB;;EAGd","file":"../../../../../../../../F:/packages/flutter/src/semantics/binding.dart.lib.js"}');
  // Exports:
  return {
    src__semantics__binding: binding$
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map

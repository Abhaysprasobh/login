// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/scheduler/binding.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/collection/src/priority_queue.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/scheduler/service_extensions.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/scheduler/debug.dart', 'packages/flutter/src/scheduler/priority.dart'], (function load__packages__flutter__src__scheduler__binding_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__collection__src__priority_queue$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__scheduler__service_extensions$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__scheduler__debug$46dart, packages__flutter__src__scheduler__priority$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const developer = dart_sdk.developer;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const priority_queue = packages__collection__src__priority_queue$46dart.src__priority_queue;
  const binding = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const service_extensions = packages__flutter__src__scheduler__service_extensions$46dart.src__scheduler__service_extensions;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const debug = packages__flutter__src__scheduler__debug$46dart.src__scheduler__debug;
  const priority$ = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  var binding$ = Object.create(dart.library);
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $compareTo = dartx.compareTo;
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $trimRight = dartx.trimRight;
  var $split = dartx.split;
  var $join = dartx.join;
  var $round = dartx.round;
  var $toString = dartx.toString;
  var $padRight = dartx.padRight;
  var $padLeft = dartx.padLeft;
  var $clear = dartx.clear;
  var $times = dartx['*'];
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    Null: () => (T$.Null = dart.constFn(dart_rti.findType("core|Null")))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart_rti.findType("core|Null()")))(),
    StackTrace: () => (T$.StackTrace = dart.constFn(dart_rti.findType("core|StackTrace")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))(),
    StringN: () => (T$.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    FlowN: () => (T$.FlowN = dart.constFn(dart_rti.findType("developer|Flow?")))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart_rti.findType("core|StackTrace?")))(),
    DiagnosticsNode: () => (T$.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart_rti.findType("~(core|Duration)")))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfSchedulerPhase: () => (T$.ListOfSchedulerPhase = dart.constFn(dart_rti.findType("core|List<flutter__src__scheduler__binding|SchedulerPhase>")))(),
    SchedulerPhase: () => (T$.SchedulerPhase = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|SchedulerPhase")))(),
    PerformanceModeRequestHandle: () => (T$.PerformanceModeRequestHandle = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|PerformanceModeRequestHandle")))(),
    VoidToNvoid: () => (T$.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    ListOfFrameTimingTovoid: () => (T$.ListOfFrameTimingTovoid = dart.constFn(dart_rti.findType("~(core|List<ui|FrameTiming>)")))(),
    __Tobool: () => (T$.__Tobool = dart.constFn(dart_rti.findType("core|bool({priority!core|int,scheduler!flutter__src__scheduler__binding|SchedulerBinding})")))(),
    _TaskEntry: () => (T$._TaskEntry = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|_TaskEntry<@>")))(),
    _TaskEntryAnd_TaskEntryToint: () => (T$._TaskEntryAnd_TaskEntryToint = dart.constFn(dart_rti.findType("core|int(flutter__src__scheduler__binding|_TaskEntry<@>,flutter__src__scheduler__binding|_TaskEntry<@>)")))(),
    _FrameCallbackEntry: () => (T$._FrameCallbackEntry = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|_FrameCallbackEntry")))(),
    SchedulerBinding: () => (T$.SchedulerBinding = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|SchedulerBinding")))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    double: () => (T$.double = dart.constFn(dart_rti.findType("core|double")))(),
    VoidToFutureOfdouble: () => (T$.VoidToFutureOfdouble = dart.constFn(dart_rti.findType("async|Future<core|double>()")))(),
    void: () => (T$.void = dart.constFn(dart_rti.findType("~")))(),
    doubleToFutureOfvoid: () => (T$.doubleToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|double)")))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>()")))(),
    intAnd_FrameCallbackEntryTovoid: () => (T$.intAnd_FrameCallbackEntryTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__scheduler__binding|_FrameCallbackEntry)")))(),
    String: () => (T$.String = dart.constFn(dart_rti.findType("core|String")))(),
    dynamic: () => (T$.dynamic = dart.constFn(dart_rti.findType("@")))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart_rti.findType("~(~(core|List<ui|FrameTiming>))")))(),
    AppLifecycleStateN: () => (T$.AppLifecycleStateN = dart.constFn(dart_rti.findType("ui|AppLifecycleState?")))(),
    AppLifecycleStateTovoid: () => (T$.AppLifecycleStateTovoid = dart.constFn(dart_rti.findType("~(ui|AppLifecycleState)")))(),
    FnAndPriority__ToFutureOfT: () => (T$.FnAndPriority__ToFutureOfT = dart.constFn(dart_rti.findType("async|Future<0^>(0^/(),flutter__src__scheduler__priority|Priority{debugLabel:core|String?,flow:developer|Flow?})<core|Object?>")))(),
    Fn__Toint: () => (T$.Fn__Toint = dart.constFn(dart_rti.findType("core|int(~(core|Duration){rescheduling:core|bool})")))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart_rti.findType("core|bool(core|String)")))(),
    FnTovoid$1: () => (T$.FnTovoid$1 = dart.constFn(dart_rti.findType("~(~(core|Duration))")))(),
    Fn__Tovoid: () => (T$.Fn__Tovoid = dart.constFn(dart_rti.findType("~(~(core|Duration){debugLabel:core|String})")))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    boolTovoid: () => (T$.boolTovoid = dart.constFn(dart_rti.findType("~(core|bool)")))(),
    DurationToDuration: () => (T$.DurationToDuration = dart.constFn(dart_rti.findType("core|Duration(core|Duration)")))(),
    Duration: () => (T$.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    DurationNTovoid: () => (T$.DurationNTovoid = dart.constFn(dart_rti.findType("~(core|Duration?)")))(),
    DartPerformanceModeToPerformanceModeRequestHandleN: () => (T$.DartPerformanceModeToPerformanceModeRequestHandleN = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|PerformanceModeRequestHandle?(ui|DartPerformanceMode)")))(),
    VoidToDartPerformanceModeN: () => (T$.VoidToDartPerformanceModeN = dart.constFn(dart_rti.findType("ui|DartPerformanceMode?()")))(),
    FrameTimingTovoid: () => (T$.FrameTimingTovoid = dart.constFn(dart_rti.findType("~(ui|FrameTiming)")))(),
    DurationAndStringBufferTovoid: () => (T$.DurationAndStringBufferTovoid = dart.constFn(dart_rti.findType("~(core|Duration,core|StringBuffer)")))(),
    FnAndDurationAndStackTraceNTovoid: () => (T$.FnAndDurationAndStackTraceNTovoid = dart.constFn(dart_rti.findType("~(~(core|Duration),core|Duration[core|StackTrace?])")))(),
    SchedulerBindingN: () => (T$.SchedulerBindingN = dart.constFn(dart_rti.findType("flutter__src__scheduler__binding|SchedulerBinding?")))(),
    ListOfListOfFrameTimingTovoid: () => (T$.ListOfListOfFrameTimingTovoid = dart.constFn(dart_rti.findType("core|List<~(core|List<ui|FrameTiming>)>")))(),
    PriorityQueueOf_TaskEntry: () => (T$.PriorityQueueOf_TaskEntry = dart.constFn(dart_rti.findType("collection__src__priority_queue|PriorityQueue<flutter__src__scheduler__binding|_TaskEntry<@>>")))(),
    MapOfint$_FrameCallbackEntry: () => (T$.MapOfint$_FrameCallbackEntry = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__scheduler__binding|_FrameCallbackEntry>")))(),
    SetOfint: () => (T$.SetOfint = dart.constFn(dart_rti.findType("core|Set<core|int>")))(),
    ListOfDurationTovoid: () => (T$.ListOfDurationTovoid = dart.constFn(dart_rti.findType("core|List<~(core|Duration)>")))(),
    CompleterNOfvoid: () => (T$.CompleterNOfvoid = dart.constFn(dart_rti.findType("async|Completer<~>?")))(),
    DurationN: () => (T$.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    TimelineTaskN: () => (T$.TimelineTaskN = dart.constFn(dart_rti.findType("developer|TimelineTask?")))(),
    DartPerformanceModeN: () => (T$.DartPerformanceModeN = dart.constFn(dart_rti.findType("ui|DartPerformanceMode?")))()
  };
  var G = {
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNode())))(),
    JSArrayOfListOfFrameTimingTovoid: () => (G.JSArrayOfListOfFrameTimingTovoid = dart.constFn(_interceptors.JSArray$(T$.ListOfFrameTimingTovoid())))(),
    HeapPriorityQueueOf_TaskEntry: () => (G.HeapPriorityQueueOf_TaskEntry = dart.constFn(priority_queue.HeapPriorityQueue$(T$._TaskEntry())))(),
    IdentityMapOfint$_FrameCallbackEntry: () => (G.IdentityMapOfint$_FrameCallbackEntry = dart.constFn(_js_helper.IdentityMap$(T$.int(), T$._FrameCallbackEntry())))(),
    _IdentityHashSetOfint: () => (G._IdentityHashSetOfint = dart.constFn(collection._IdentityHashSet$(T$.int())))(),
    JSArrayOfDurationTovoid: () => (G.JSArrayOfDurationTovoid = dart.constFn(_interceptors.JSArray$(T$.DurationTovoid())))(),
    ListOfListOfFrameTimingTovoid: () => (G.ListOfListOfFrameTimingTovoid = dart.constFn(core.List$(T$.ListOfFrameTimingTovoid())))(),
    DiagnosticsPropertyOfListOfFrameTimingTovoid: () => (G.DiagnosticsPropertyOfListOfFrameTimingTovoid = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ListOfFrameTimingTovoid())))(),
    LinkedHashMapOfint$_FrameCallbackEntry: () => (G.LinkedHashMapOfint$_FrameCallbackEntry = dart.constFn(collection.LinkedHashMap$(T$.int(), T$._FrameCallbackEntry())))(),
    CompleterOfvoid: () => (G.CompleterOfvoid = dart.constFn(async.Completer$(T$.void())))(),
    ListOfDurationTovoid: () => (G.ListOfDurationTovoid = dart.constFn(core.List$(T$.DurationTovoid())))(),
    IdentityMapOfString$dynamic: () => (G.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.dynamic())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "idle",
        [_Enum_index]: 0
      }, binding$.SchedulerPhase.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "transientCallbacks",
        [_Enum_index]: 1
      }, binding$.SchedulerPhase.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "midFrameMicrotasks",
        [_Enum_index]: 2
      }, binding$.SchedulerPhase.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "persistentCallbacks",
        [_Enum_index]: 3
      }, binding$.SchedulerPhase.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "postFrameCallbacks",
        [_Enum_index]: 4
      }, binding$.SchedulerPhase.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T$.SchedulerPhase());
    },
    get C6() {
      return C[6] = dart.fn(binding$.defaultSchedulingStrategy, T$.__Tobool());
    },
    get C7() {
      return C[7] = dart.fn(binding$.SchedulerBinding._taskSorter, T$._TaskEntryAnd_TaskEntryToint());
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "resumed",
        [_Enum_index]: 1
      }, ui.AppLifecycleState.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "inactive",
        [_Enum_index]: 2
      }, ui.AppLifecycleState.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "hidden",
        [_Enum_index]: 3
      }, ui.AppLifecycleState.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "paused",
        [_Enum_index]: 4
      }, ui.AppLifecycleState.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "detached",
        [_Enum_index]: 0
      }, ui.AppLifecycleState.prototype));
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/scheduler/binding.dart",
    "package:flutter/src/scheduler/binding.dart",
    "dart:core",
    "dart:developer",
    "dart:async",
    "dart:ui",
    "package:collection/src/priority_queue.dart"
  ];
  var ___TaskEntry_debugStack = dart.privateName(binding$, "_#_TaskEntry#debugStack");
  var _eval = dart.privateName(dart_rti, "_eval");
  const _is__TaskEntry_default = Symbol('_is__TaskEntry_default');
  binding$._TaskEntry$ = dart.generic(T => {
    var __t$_TaskEntryOfT = () => (__t$_TaskEntryOfT = dart.constFn(T[_eval]("flutter__src__scheduler__binding|_TaskEntry<0>")))();
    var __t$VoidToFutureOrOfT = () => (__t$VoidToFutureOrOfT = dart.constFn(T[_eval]("0/()")))();
    var __t$CompleterOfT = () => (__t$CompleterOfT = dart.constFn(T[_eval]("async|Completer<0>")))();
    var __t$CompleterOfT$ = () => (__t$CompleterOfT$ = dart.constFn(async.Completer$(T)))();
    class _TaskEntry extends core.Object {
      static ['_#new#tearOff'](T, task, priority, debugLabel, flow) {
        return new (binding$._TaskEntry$(T)).new(task, priority, debugLabel, flow);
      }
      get debugStack() {
        let t$360;
        t$360 = this[___TaskEntry_debugStack];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("debugStack")) : t$360;
      }
      set debugStack(debugStack$35param) {
        this[___TaskEntry_debugStack] = debugStack$35param;
      }
      run() {
        let t$360;
        {
          developer.Timeline.timeSync(T$.Null(), (t$360 = this.debugLabel, t$360 == null ? "Scheduled Task" : t$360), dart.fn(() => {
            this.completer.complete(this.task());
          }, T$.VoidToNull()), {flow: this.flow != null ? developer.Flow.step(dart.nullCheck(this.flow).id) : null});
        }
      }
    }
    (_TaskEntry.new = function(task, priority, debugLabel, flow) {
      this[___TaskEntry_debugStack] = null;
      this.completer = __t$CompleterOfT$().new();
      this.task = task;
      this.priority = priority;
      this.debugLabel = debugLabel;
      this.flow = flow;
      this.$ti = this.$ti || __t$_TaskEntryOfT();
      if (!dart.fn(() => {
        this.debugStack = core.StackTrace.current;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 68, 12, "() {\r\n      debugStack = StackTrace.current;\r\n      return true;\r\n    }()");
    }).prototype = _TaskEntry.prototype;
    dart.addTypeTests(_TaskEntry);
    _TaskEntry.prototype[_is__TaskEntry_default] = true;
    dart.addRtiResources(_TaskEntry, ["flutter__src__scheduler__binding|_TaskEntry"]);
    dart.addTypeCaches(_TaskEntry);
    dart.setMethodSignature(_TaskEntry, () => dart.global.Object.setPrototypeOf({run: T$.VoidTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(_TaskEntry))));
    dart.setGetterSignature(_TaskEntry, () => dart.global.Object.setPrototypeOf({debugStack: T$.StackTrace()}, dart.getGetters(dart.global.Object.getPrototypeOf(_TaskEntry))));
    dart.setSetterSignature(_TaskEntry, () => dart.global.Object.setPrototypeOf({debugStack: T$.StackTrace()}, dart.getSetters(dart.global.Object.getPrototypeOf(_TaskEntry))));
    dart.setLibraryUri(_TaskEntry, I[1]);
    dart.setFieldSignature(_TaskEntry, () => dart.global.Object.setPrototypeOf({
      task: {type: __t$VoidToFutureOrOfT(), isConst: false, isFinal: true},
      priority: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
      debugLabel: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]},
      flow: {type: T$.FlowN(), isConst: false, isFinal: true, libraryUri: I[3]},
      [___TaskEntry_debugStack]: {type: T$.StackTraceN(), isConst: false, isFinal: false, libraryUri: I[2]},
      completer: {type: __t$CompleterOfT(), isConst: false, isFinal: true, libraryUri: I[4]}
    }, dart.getFields(dart.global.Object.getPrototypeOf(_TaskEntry))));
    return _TaskEntry;
  });
  binding$._TaskEntry = binding$._TaskEntry$();
  dart.addTypeTests(binding$._TaskEntry, _is__TaskEntry_default);
  binding$._FrameCallbackEntry = class _FrameCallbackEntry extends core.Object {
    static ['_#new#tearOff'](callback, opts) {
      let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
      return new binding$._FrameCallbackEntry.new(callback, {rescheduling: rescheduling});
    }
  };
  (binding$._FrameCallbackEntry.new = function(callback, opts) {
    let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
    this.debugStack = null;
    this.callback = callback;
    if (!dart.fn(() => {
      if (rescheduling) {
        if (!dart.fn(() => {
          if (binding$._FrameCallbackEntry.debugCurrentCallbackStack == null) {
            dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("scheduleFrameCallback called with rescheduling true, but no callback is in scope."), new assertions.ErrorDescription.new("The \"rescheduling\" argument should only be set to true if the callback is being reregistered from within the callback itself, and only then if the callback itself is entirely synchronous."), new assertions.ErrorHint.new("If this is the initial registration of the callback, or if the callback is asynchronous, then do not use the \"rescheduling\" argument.")])));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 100, 16, "() {\r\n          if (debugCurrentCallbackStack == null) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('scheduleFrameCallback called with rescheduling true, but no callback is in scope.'),\r\n              ErrorDescription(\r\n                'The \"rescheduling\" argument should only be set to true if the '\r\n                'callback is being reregistered from within the callback itself, '\r\n                'and only then if the callback itself is entirely synchronous.',\r\n              ),\r\n              ErrorHint(\r\n                'If this is the initial registration of the callback, or if the '\r\n                'callback is asynchronous, then do not use the \"rescheduling\" '\r\n                'argument.',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }()");
        this.debugStack = binding$._FrameCallbackEntry.debugCurrentCallbackStack;
      } else {
        this.debugStack = core.StackTrace.current;
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 98, 12, "() {\r\n      if (rescheduling) {\r\n        assert(() {\r\n          if (debugCurrentCallbackStack == null) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('scheduleFrameCallback called with rescheduling true, but no callback is in scope.'),\r\n              ErrorDescription(\r\n                'The \"rescheduling\" argument should only be set to true if the '\r\n                'callback is being reregistered from within the callback itself, '\r\n                'and only then if the callback itself is entirely synchronous.',\r\n              ),\r\n              ErrorHint(\r\n                'If this is the initial registration of the callback, or if the '\r\n                'callback is asynchronous, then do not use the \"rescheduling\" '\r\n                'argument.',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }());\r\n        debugStack = debugCurrentCallbackStack;\r\n      } else {\r\n        // TODO(ianh): trim the frames from this library, so that the call to scheduleFrameCallback is the top one\r\n        debugStack = StackTrace.current;\r\n      }\r\n      return true;\r\n    }()");
  }).prototype = binding$._FrameCallbackEntry.prototype;
  dart.addTypeTests(binding$._FrameCallbackEntry);
  dart.addRtiResources(binding$._FrameCallbackEntry, ["flutter__src__scheduler__binding|_FrameCallbackEntry"]);
  dart.addTypeCaches(binding$._FrameCallbackEntry);
  dart.setLibraryUri(binding$._FrameCallbackEntry, I[1]);
  dart.setFieldSignature(binding$._FrameCallbackEntry, () => dart.global.Object.setPrototypeOf({
    callback: {type: T$.DurationTovoid(), isConst: false, isFinal: true},
    debugStack: {type: T$.StackTraceN(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$._FrameCallbackEntry))));
  dart.setStaticFieldSignature(binding$._FrameCallbackEntry, () => ['debugCurrentCallbackStack']);
  dart.defineLazy(binding$._FrameCallbackEntry, {
    /*binding$._FrameCallbackEntry.debugCurrentCallbackStack*/get debugCurrentCallbackStack() {
      return null;
    },
    set debugCurrentCallbackStack(value) {}
  }, false);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  binding$.SchedulerPhase = class SchedulerPhase extends core._Enum {
    [_enumToString]() {
      return "SchedulerPhase." + this[_name];
    }
  };
  (binding$.SchedulerPhase.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(binding$.SchedulerPhase).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = binding$.SchedulerPhase.prototype;
  dart.addTypeTests(binding$.SchedulerPhase);
  dart.addRtiResources(binding$.SchedulerPhase, ["flutter__src__scheduler__binding|SchedulerPhase"]);
  dart.addTypeCaches(binding$.SchedulerPhase);
  dart.setMethodSignature(binding$.SchedulerPhase, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SchedulerPhase))));
  dart.setLibraryUri(binding$.SchedulerPhase, I[1]);
  dart.setStaticFieldSignature(binding$.SchedulerPhase, () => ['values', 'idle', 'transientCallbacks', 'midFrameMicrotasks', 'persistentCallbacks', 'postFrameCallbacks']);
  dart.defineLazy(binding$.SchedulerPhase, {
    /*binding$.SchedulerPhase.values*/get values() {
      return C[0] || CT.C0;
    },
    /*binding$.SchedulerPhase.idle*/get idle() {
      return C[1] || CT.C1;
    },
    /*binding$.SchedulerPhase.transientCallbacks*/get transientCallbacks() {
      return C[2] || CT.C2;
    },
    /*binding$.SchedulerPhase.midFrameMicrotasks*/get midFrameMicrotasks() {
      return C[3] || CT.C3;
    },
    /*binding$.SchedulerPhase.persistentCallbacks*/get persistentCallbacks() {
      return C[4] || CT.C4;
    },
    /*binding$.SchedulerPhase.postFrameCallbacks*/get postFrameCallbacks() {
      return C[5] || CT.C5;
    }
  }, false);
  var _cleanup$ = dart.privateName(binding$, "_cleanup");
  binding$.PerformanceModeRequestHandle = class PerformanceModeRequestHandle extends core.Object {
    static ['_#_#tearOff'](_cleanup) {
      return new binding$.PerformanceModeRequestHandle.__(_cleanup);
    }
    dispose() {
      if (!(this[_cleanup$] != null)) dart.assertFailed(null, I[0], 218, 12, "_cleanup != null");
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      dart.nullCheck(this[_cleanup$])();
      this[_cleanup$] = null;
    }
  };
  (binding$.PerformanceModeRequestHandle.__ = function(_cleanup) {
    this[_cleanup$] = _cleanup;
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/scheduler.dart", className: dart.strSafe(dart_rti.createRuntimeType(T$.PerformanceModeRequestHandle())), object: this});
    }
  }).prototype = binding$.PerformanceModeRequestHandle.prototype;
  dart.addTypeTests(binding$.PerformanceModeRequestHandle);
  dart.addRtiResources(binding$.PerformanceModeRequestHandle, ["flutter__src__scheduler__binding|PerformanceModeRequestHandle"]);
  dart.addTypeCaches(binding$.PerformanceModeRequestHandle);
  dart.setMethodSignature(binding$.PerformanceModeRequestHandle, () => dart.global.Object.setPrototypeOf({dispose: T$.VoidTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.PerformanceModeRequestHandle))));
  dart.setLibraryUri(binding$.PerformanceModeRequestHandle, I[1]);
  dart.setFieldSignature(binding$.PerformanceModeRequestHandle, () => dart.global.Object.setPrototypeOf({[_cleanup$]: {type: T$.VoidToNvoid(), isConst: false, isFinal: false}}, dart.getFields(dart.global.Object.getPrototypeOf(binding$.PerformanceModeRequestHandle))));
  var schedulingStrategy = dart.privateName(binding$, "SchedulerBinding.schedulingStrategy");
  var _timingsCallbacks = dart.privateName(binding$, "_timingsCallbacks");
  var _lifecycleState = dart.privateName(binding$, "_lifecycleState");
  var _taskQueue = dart.privateName(binding$, "_taskQueue");
  var _hasRequestedAnEventLoopCallback = dart.privateName(binding$, "_hasRequestedAnEventLoopCallback");
  var _nextFrameCallbackId = dart.privateName(binding$, "_nextFrameCallbackId");
  var _transientCallbacks = dart.privateName(binding$, "_transientCallbacks");
  var _removedIds = dart.privateName(binding$, "_removedIds");
  var _persistentCallbacks = dart.privateName(binding$, "_persistentCallbacks");
  var _postFrameCallbacks = dart.privateName(binding$, "_postFrameCallbacks");
  var _nextFrameCompleter = dart.privateName(binding$, "_nextFrameCompleter");
  var _hasScheduledFrame = dart.privateName(binding$, "_hasScheduledFrame");
  var _schedulerPhase = dart.privateName(binding$, "_schedulerPhase");
  var _framesEnabled = dart.privateName(binding$, "_framesEnabled");
  var _warmUpFrame = dart.privateName(binding$, "_warmUpFrame");
  var _firstRawTimeStampInEpoch = dart.privateName(binding$, "_firstRawTimeStampInEpoch");
  var _epochStart = dart.privateName(binding$, "_epochStart");
  var _lastRawTimeStamp = dart.privateName(binding$, "_lastRawTimeStamp");
  var _currentFrameTimeStamp = dart.privateName(binding$, "_currentFrameTimeStamp");
  var _debugFrameNumber = dart.privateName(binding$, "_debugFrameNumber");
  var _debugBanner = dart.privateName(binding$, "_debugBanner");
  var _rescheduleAfterWarmUpFrame = dart.privateName(binding$, "_rescheduleAfterWarmUpFrame");
  var _frameTimelineTask = dart.privateName(binding$, "_frameTimelineTask");
  var _performanceMode = dart.privateName(binding$, "_performanceMode");
  var _numPerformanceModeRequests = dart.privateName(binding$, "_numPerformanceModeRequests");
  var _profileFramePostEvent = dart.privateName(binding$, "_profileFramePostEvent");
  var _executeTimingsCallbacks = dart.privateName(binding$, "_executeTimingsCallbacks");
  var _is = dart.privateName(dart_rti, "_is");
  var _setFramesEnabledState = dart.privateName(binding$, "_setFramesEnabledState");
  var _ensureEventLoopCallback = dart.privateName(binding$, "_ensureEventLoopCallback");
  var _runTasks = dart.privateName(binding$, "_runTasks");
  var _handleBeginFrame = dart.privateName(binding$, "_handleBeginFrame");
  var _handleDrawFrame = dart.privateName(binding$, "_handleDrawFrame");
  var _adjustForEpoch = dart.privateName(binding$, "_adjustForEpoch");
  var _invokeFrameCallback = dart.privateName(binding$, "_invokeFrameCallback");
  var _disposePerformanceModeRequest = dart.privateName(binding$, "_disposePerformanceModeRequest");
  binding$.SchedulerBinding = class SchedulerBinding extends binding.BindingBase {
    static get instance() {
      return binding.BindingBase.checkInstance(T$.SchedulerBinding(), binding$.SchedulerBinding._instance);
    }
    static _taskSorter(e1, e2) {
      return -e1.priority[$compareTo](e2.priority);
    }
    static debugPrintTransientCallbackRegistrationStack() {
      if (!dart.fn(() => {
        if (binding$._FrameCallbackEntry.debugCurrentCallbackStack != null) {
          print.debugPrint("When the current transient callback was registered, this was the stack:");
          print.debugPrint(assertions.FlutterError.defaultStackFilter(dart.toString(assertions.FlutterError.demangleStackTrace(dart.nullCheck(binding$._FrameCallbackEntry.debugCurrentCallbackStack)))[$trimRight]()[$split]("\n"))[$join]("\n"));
        } else {
          print.debugPrint("No transient callback is currently executing.");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 723, 12, "() {\r\n      if (_FrameCallbackEntry.debugCurrentCallbackStack != null) {\r\n        debugPrint('When the current transient callback was registered, this was the stack:');\r\n        debugPrint(\r\n          FlutterError.defaultStackFilter(\r\n            FlutterError.demangleStackTrace(\r\n              _FrameCallbackEntry.debugCurrentCallbackStack!,\r\n            ).toString().trimRight().split('\\n'),\r\n          ).join('\\n'),\r\n        );\r\n      } else {\r\n        debugPrint('No transient callback is currently executing.');\r\n      }\r\n      return true;\r\n    }()");
    }
    static _debugDescribeTimeStamp(timeStamp, buffer) {
      if (timeStamp.inDays > 0) {
        buffer.write(dart.strSafe(timeStamp.inDays) + "d ");
      }
      if (timeStamp.inHours > 0) {
        buffer.write(dart.strSafe(timeStamp.inHours - timeStamp.inDays * 24) + "h ");
      }
      if (timeStamp.inMinutes > 0) {
        buffer.write(dart.strSafe(timeStamp.inMinutes - timeStamp.inHours * 60) + "m ");
      }
      if (timeStamp.inSeconds > 0) {
        buffer.write(dart.strSafe(timeStamp.inSeconds - timeStamp.inMinutes * 60) + "s ");
      }
      buffer.write(dart.strSafe(timeStamp.inMilliseconds - timeStamp.inSeconds * 1000));
      let microseconds = timeStamp.inMicroseconds - timeStamp.inMilliseconds * 1000;
      if (microseconds > 0) {
        buffer.write("." + microseconds[$toString]()[$padLeft](3, "0"));
      }
      buffer.write("ms");
    }
  };
  binding$.SchedulerBinding[dart.mixinOn] = BindingBase => class SchedulerBinding extends BindingBase {
    get schedulingStrategy() {
      return this[schedulingStrategy];
    }
    set schedulingStrategy(value) {
      this[schedulingStrategy] = value;
    }
    initInstances() {
      super.initInstances();
      binding$.SchedulerBinding._instance = this;
      {
        this.addTimingsCallback(dart.fn(timings => {
          timings[$forEach](dart.bind(this, _profileFramePostEvent));
        }, T$.ListOfFrameTimingTovoid()));
      }
    }
    addTimingsCallback(callback) {
      this[_timingsCallbacks][$add](callback);
      if (this[_timingsCallbacks][$length] === 1) {
        if (!(this.platformDispatcher.onReportTimings == null)) dart.assertFailed(null, I[0], 321, 14, "platformDispatcher.onReportTimings == null");
        this.platformDispatcher.onReportTimings = dart.bind(this, _executeTimingsCallbacks);
      }
      if (!dart.equals(this.platformDispatcher.onReportTimings, dart.bind(this, _executeTimingsCallbacks))) dart.assertFailed(null, I[0], 324, 12, "platformDispatcher.onReportTimings == _executeTimingsCallbacks");
    }
    removeTimingsCallback(callback) {
      if (!this[_timingsCallbacks][$contains](callback)) dart.assertFailed(null, I[0], 329, 12, "_timingsCallbacks.contains(callback)");
      this[_timingsCallbacks][$remove](callback);
      if (this[_timingsCallbacks][$isEmpty]) {
        this.platformDispatcher.onReportTimings = null;
      }
    }
    [_executeTimingsCallbacks](timings) {
      let clonedCallbacks = G.ListOfListOfFrameTimingTovoid().of(this[_timingsCallbacks]);
      for (let callback of clonedCallbacks) {
        try {
          if (this[_timingsCallbacks][$contains](callback)) {
            callback(timings);
          }
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfListOfFrameTimingTovoid()).new("The TimingsCallback that gets executed was", callback, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 347, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<TimingsCallback>(\r\n              'The TimingsCallback that gets executed was',\r\n              callback,\r\n              style: DiagnosticsTreeStyle.errorProperty,\r\n            ),\r\n          ];\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, context: new assertions.ErrorDescription.new("while executing callbacks for FrameTiming"), informationCollector: collector}));
          } else
            throw t$36$35e;
        }
      }
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      {
        this.registerNumericServiceExtension({name: core['EnumName|get#name'](service_extensions.SchedulerServiceExtensions.timeDilation), getter: dart.fn(() => async.async(T$.double(), function*() {
            return binding$.timeDilation;
          }), T$.VoidToFutureOfdouble()), setter: dart.fn(value => async.async(T$.void(), function*() {
            binding$.timeDilation = value;
          }), T$.doubleToFutureOfvoid())});
      }
    }
    get lifecycleState() {
      return this[_lifecycleState];
    }
    resetLifecycleState() {
      this[_lifecycleState] = null;
    }
    handleAppLifecycleStateChanged(state) {
      if (this.lifecycleState === state) {
        return;
      }
      this[_lifecycleState] = state;
      switch (state) {
        case C[8] || CT.C8:
        case C[9] || CT.C9:
          {
            this[_setFramesEnabledState](true);
            break;
          }
        case C[10] || CT.C10:
        case C[11] || CT.C11:
        case C[12] || CT.C12:
          {
            this[_setFramesEnabledState](false);
          }
      }
    }
    scheduleTask(T, task, priority, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      let isFirstTask = this[_taskQueue].isEmpty;
      let entry = new (binding$._TaskEntry$(T)).new(task, priority.value, debugLabel, flow);
      this[_taskQueue].add(entry);
      if (isFirstTask && !this.locked) {
        this[_ensureEventLoopCallback]();
      }
      return entry.completer.future;
    }
    unlocked() {
      super.unlocked();
      if (this[_taskQueue].isNotEmpty) {
        this[_ensureEventLoopCallback]();
      }
    }
    [_ensureEventLoopCallback]() {
      if (!!this.locked) dart.assertFailed(null, I[0], 492, 12, "!locked");
      if (!this[_taskQueue].isNotEmpty) dart.assertFailed(null, I[0], 493, 12, "_taskQueue.isNotEmpty");
      if (this[_hasRequestedAnEventLoopCallback]) {
        return;
      }
      this[_hasRequestedAnEventLoopCallback] = true;
      async.Timer.run(dart.bind(this, _runTasks));
    }
    [_runTasks]() {
      this[_hasRequestedAnEventLoopCallback] = false;
      if (this.handleEventLoopCallback()) {
        this[_ensureEventLoopCallback]();
      }
    }
    handleEventLoopCallback() {
      let t$363;
      if (this[_taskQueue].isEmpty || this.locked) {
        return false;
      }
      let entry = this[_taskQueue].first;
      if (t$363 = entry.priority, this.schedulingStrategy({priority: t$363, scheduler: this})) {
        try {
          this[_taskQueue].removeFirst();
          entry.run();
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let exceptionStack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            let callbackStack = null;
            if (!dart.fn(() => {
              callbackStack = entry.debugStack;
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 532, 16, "() {\r\n          callbackStack = entry.debugStack;\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: exceptionStack, library: "scheduler library", context: new assertions.ErrorDescription.new("during a task callback"), informationCollector: callbackStack == null ? null : dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new assertions.DiagnosticsStackTrace.new("\nThis exception was thrown in the context of a scheduler callback. When the scheduler callback was _registered_ (as opposed to when the exception was thrown), this was the stack", callbackStack)]), T$.VoidToListOfDiagnosticsNode())}));
          } else
            throw t$36$35e;
        }
        return this[_taskQueue].isNotEmpty;
      }
      return false;
    }
    get transientCallbackCount() {
      return this[_transientCallbacks][$length];
    }
    scheduleFrameCallback(callback, opts) {
      let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
      this.scheduleFrame();
      this[_nextFrameCallbackId] = this[_nextFrameCallbackId] + 1;
      this[_transientCallbacks][$_set](this[_nextFrameCallbackId], new binding$._FrameCallbackEntry.new(callback, {rescheduling: rescheduling}));
      return this[_nextFrameCallbackId];
    }
    cancelFrameCallbackWithId(id) {
      if (!(id > 0)) dart.assertFailed(null, I[0], 617, 12, "id > 0");
      this[_transientCallbacks][$remove](id);
      this[_removedIds].add(id);
    }
    debugAssertNoTransientCallbacks(reason) {
      if (!dart.fn(() => {
        if (this.transientCallbackCount > 0) {
          let count = this.transientCallbackCount;
          let callbacks = G.LinkedHashMapOfint$_FrameCallbackEntry().of(this[_transientCallbacks]);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: reason, library: "scheduler library", informationCollector: dart.fn(() => (() => {
              let t$364 = G.JSArrayOfDiagnosticsNode().of([]);
              if (count === 1)
                t$364.push(new assertions.ErrorDescription.new("There was one transient callback left. The stack trace for when it was registered is as follows:"));
              else
                t$364.push(new assertions.ErrorDescription.new("There were " + dart.strSafe(count) + " transient callbacks left. " + "The stack traces for when they were registered are as follows:"));
              for (let id of callbacks[$keys])
                t$364.push(new assertions.DiagnosticsStackTrace.new("── callback " + dart.strSafe(id) + " ──", dart.nullCheck(callbacks[$_get](id)).debugStack, {showSeparator: false}));
              return t$364;
            })(), T$.VoidToListOfDiagnosticsNode())}));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 643, 12, "() {\r\n      if (transientCallbackCount > 0) {\r\n        // We cache the values so that we can produce them later\r\n        // even if the information collector is called after\r\n        // the problem has been resolved.\r\n        final int count = transientCallbackCount;\r\n        final Map<int, _FrameCallbackEntry> callbacks = Map<int, _FrameCallbackEntry>.of(_transientCallbacks);\r\n        FlutterError.reportError(FlutterErrorDetails(\r\n          exception: reason,\r\n          library: 'scheduler library',\r\n          informationCollector: () => <DiagnosticsNode>[\r\n            if (count == 1)\r\n              // TODO(jacobr): I have added an extra line break in this case.\r\n              ErrorDescription(\r\n                'There was one transient callback left. '\r\n                'The stack trace for when it was registered is as follows:',\r\n              )\r\n            else\r\n              ErrorDescription(\r\n                'There were $count transient callbacks left. '\r\n                'The stack traces for when they were registered are as follows:',\r\n              ),\r\n            for (final int id in callbacks.keys)\r\n              DiagnosticsStackTrace('── callback $id ──', callbacks[id]!.debugStack, showSeparator: false),\r\n          ],\r\n        ));\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugAssertNoPendingPerformanceModeRequests(reason) {
      if (!dart.fn(() => {
        if (this[_performanceMode] != null) {
          dart.throw(assertions.FlutterError.new(reason));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 680, 12, "() {\r\n      if (_performanceMode != null) {\r\n        throw FlutterError(reason);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugAssertNoTimeDilation(reason) {
      if (!dart.fn(() => {
        if (binding$.timeDilation !== 1.0) {
          dart.throw(assertions.FlutterError.new(reason));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 694, 12, "() {\r\n      if (timeDilation != 1.0) {\r\n        throw FlutterError(reason);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    addPersistentFrameCallback(callback) {
      this[_persistentCallbacks][$add](callback);
    }
    addPostFrameCallback(callback, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : "callback";
      if (!dart.fn(() => {
        if (debug.debugTracePostFrameCallbacks) {
          let originalCallback = callback;
          callback = dart.fn(timeStamp => {
            developer.Timeline.startSync(debugLabel);
            try {
              originalCallback(timeStamp);
            } finally {
              developer.Timeline.finishSync();
            }
          }, T$.DurationTovoid());
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 798, 12, "() {\r\n      if (debugTracePostFrameCallbacks) {\r\n        final FrameCallback originalCallback = callback;\r\n        callback = (Duration timeStamp) {\r\n          Timeline.startSync(debugLabel);\r\n          try {\r\n            originalCallback(timeStamp);\r\n          } finally {\r\n            Timeline.finishSync();\r\n          }\r\n        };\r\n      }\r\n      return true;\r\n    }()");
      this[_postFrameCallbacks][$add](callback);
    }
    get endOfFrame() {
      if (this[_nextFrameCompleter] == null) {
        if (this.schedulerPhase === binding$.SchedulerPhase.idle) {
          this.scheduleFrame();
        }
        this[_nextFrameCompleter] = G.CompleterOfvoid().new();
        this.addPostFrameCallback(dart.fn(timeStamp => {
          dart.nullCheck(this[_nextFrameCompleter]).complete();
          this[_nextFrameCompleter] = null;
        }, T$.DurationTovoid()), {debugLabel: "SchedulerBinding.completeFrame"});
      }
      return dart.nullCheck(this[_nextFrameCompleter]).future;
    }
    get hasScheduledFrame() {
      return this[_hasScheduledFrame];
    }
    get schedulerPhase() {
      return this[_schedulerPhase];
    }
    get framesEnabled() {
      return this[_framesEnabled];
    }
    [_setFramesEnabledState](enabled) {
      if (this[_framesEnabled] === enabled) {
        return;
      }
      this[_framesEnabled] = enabled;
      if (enabled) {
        this.scheduleFrame();
      }
    }
    ensureFrameCallbacksRegistered() {
      let t$365, t$365$;
      t$365 = this.platformDispatcher;
      t$365.onBeginFrame == null ? t$365.onBeginFrame = dart.bind(this, _handleBeginFrame) : null;
      t$365$ = this.platformDispatcher;
      t$365$.onDrawFrame == null ? t$365$.onDrawFrame = dart.bind(this, _handleDrawFrame) : null;
    }
    ensureVisualUpdate() {
      switch (this.schedulerPhase) {
        case C[1] || CT.C1:
        case C[5] || CT.C5:
          {
            this.scheduleFrame();
            return;
          }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        case C[4] || CT.C4:
          {
            return;
          }
      }
    }
    scheduleFrame() {
      if (this[_hasScheduledFrame] || !this.framesEnabled) {
        return;
      }
      if (!dart.fn(() => {
        if (debug.debugPrintScheduleFrameStacks) {
          assertions.debugPrintStack({label: "scheduleFrame() called. Current phase is " + dart.str(this.schedulerPhase) + "."});
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 929, 12, "() {\r\n      if (debugPrintScheduleFrameStacks) {\r\n        debugPrintStack(label: 'scheduleFrame() called. Current phase is $schedulerPhase.');\r\n      }\r\n      return true;\r\n    }()");
      this.ensureFrameCallbacksRegistered();
      this.platformDispatcher.scheduleFrame();
      this[_hasScheduledFrame] = true;
    }
    scheduleForcedFrame() {
      if (this[_hasScheduledFrame]) {
        return;
      }
      if (!dart.fn(() => {
        if (debug.debugPrintScheduleFrameStacks) {
          assertions.debugPrintStack({label: "scheduleForcedFrame() called. Current phase is " + dart.str(this.schedulerPhase) + "."});
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 964, 12, "() {\r\n      if (debugPrintScheduleFrameStacks) {\r\n        debugPrintStack(label: 'scheduleForcedFrame() called. Current phase is $schedulerPhase.');\r\n      }\r\n      return true;\r\n    }()");
      this.ensureFrameCallbacksRegistered();
      this.platformDispatcher.scheduleFrame();
      this[_hasScheduledFrame] = true;
    }
    scheduleWarmUpFrame() {
      let t$365;
      if (this[_warmUpFrame] || this.schedulerPhase !== binding$.SchedulerPhase.idle) {
        return;
      }
      this[_warmUpFrame] = true;
      let debugTimelineTask = null;
      {
        debugTimelineTask = (t$365 = new developer.TimelineTask.new(), (() => {
          t$365.start("Warm-up frame");
          return t$365;
        })());
      }
      let hadScheduledFrame = this[_hasScheduledFrame];
      async.Timer.run(dart.fn(() => {
        if (!this[_warmUpFrame]) dart.assertFailed(null, I[0], 1029, 14, "_warmUpFrame");
        this.handleBeginFrame(null);
      }, T$.VoidTovoid()));
      async.Timer.run(dart.fn(() => {
        if (!this[_warmUpFrame]) dart.assertFailed(null, I[0], 1033, 14, "_warmUpFrame");
        this.handleDrawFrame();
        this.resetEpoch();
        this[_warmUpFrame] = false;
        if (hadScheduledFrame) {
          this.scheduleFrame();
        }
      }, T$.VoidTovoid()));
      this.lockEvents(dart.fn(() => async.async(T$.void(), (function*() {
        yield this.endOfFrame;
        {
          dart.nullCheck(debugTimelineTask).finish();
        }
      }).bind(this)), T$.VoidToFutureOfvoid()));
    }
    resetEpoch() {
      this[_epochStart] = this[_adjustForEpoch](this[_lastRawTimeStamp]);
      this[_firstRawTimeStampInEpoch] = null;
    }
    [_adjustForEpoch](rawTimeStamp) {
      let rawDurationSinceEpoch = this[_firstRawTimeStampInEpoch] == null ? core.Duration.zero : rawTimeStamp['-'](dart.nullCheck(this[_firstRawTimeStampInEpoch]));
      return new core.Duration.new({microseconds: (rawDurationSinceEpoch.inMicroseconds / binding$.timeDilation)[$round]() + this[_epochStart].inMicroseconds});
    }
    get currentFrameTimeStamp() {
      if (!(this[_currentFrameTimeStamp] != null)) dart.assertFailed(null, I[0], 1105, 12, "_currentFrameTimeStamp != null");
      return dart.nullCheck(this[_currentFrameTimeStamp]);
    }
    get currentSystemFrameTimeStamp() {
      return this[_lastRawTimeStamp];
    }
    [_handleBeginFrame](rawTimeStamp) {
      if (this[_warmUpFrame]) {
        if (!!this[_rescheduleAfterWarmUpFrame]) dart.assertFailed(null, I[0], 1144, 14, "!_rescheduleAfterWarmUpFrame");
        this[_rescheduleAfterWarmUpFrame] = true;
        return;
      }
      this.handleBeginFrame(rawTimeStamp);
    }
    [_handleDrawFrame]() {
      if (this[_rescheduleAfterWarmUpFrame]) {
        this[_rescheduleAfterWarmUpFrame] = false;
        this.addPostFrameCallback(dart.fn(timeStamp => {
          this[_hasScheduledFrame] = false;
          this.scheduleFrame();
        }, T$.DurationTovoid()), {debugLabel: "SchedulerBinding.scheduleFrame"});
        return;
      }
      this.handleDrawFrame();
    }
    handleBeginFrame(rawTimeStamp) {
      let t$365, t$365$, t$365$0;
      t$365 = this[_frameTimelineTask];
      t$365 == null ? null : t$365.start("Frame");
      this[_firstRawTimeStampInEpoch] == null ? this[_firstRawTimeStampInEpoch] = rawTimeStamp : null;
      this[_currentFrameTimeStamp] = this[_adjustForEpoch]((t$365$ = rawTimeStamp, t$365$ == null ? this[_lastRawTimeStamp] : t$365$));
      if (rawTimeStamp != null) {
        this[_lastRawTimeStamp] = rawTimeStamp;
      }
      if (!dart.fn(() => {
        this[_debugFrameNumber] = this[_debugFrameNumber] + 1;
        if (debug.debugPrintBeginFrameBanner || debug.debugPrintEndFrameBanner) {
          let frameTimeStampDescription = new core.StringBuffer.new();
          if (rawTimeStamp != null) {
            binding$.SchedulerBinding._debugDescribeTimeStamp(dart.nullCheck(this[_currentFrameTimeStamp]), frameTimeStampDescription);
          } else {
            frameTimeStampDescription.write("(warm-up frame)");
          }
          this[_debugBanner] = "▄▄▄▄▄▄▄▄ Frame " + this[_debugFrameNumber][$toString]()[$padRight](7) + "   " + dart.toString(frameTimeStampDescription)[$padLeft](18) + " ▄▄▄▄▄▄▄▄";
          if (debug.debugPrintBeginFrameBanner) {
            print.debugPrint(this[_debugBanner]);
          }
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 1205, 12, "() {\r\n      _debugFrameNumber += 1;\r\n\r\n      if (debugPrintBeginFrameBanner || debugPrintEndFrameBanner) {\r\n        final StringBuffer frameTimeStampDescription = StringBuffer();\r\n        if (rawTimeStamp != null) {\r\n          _debugDescribeTimeStamp(_currentFrameTimeStamp!, frameTimeStampDescription);\r\n        } else {\r\n          frameTimeStampDescription.write('(warm-up frame)');\r\n        }\r\n        _debugBanner = '▄▄▄▄▄▄▄▄ Frame ${_debugFrameNumber.toString().padRight(7)}   ${frameTimeStampDescription.toString().padLeft(18)} ▄▄▄▄▄▄▄▄';\r\n        if (debugPrintBeginFrameBanner) {\r\n          debugPrint(_debugBanner);\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      if (!(this.schedulerPhase === binding$.SchedulerPhase.idle)) dart.assertFailed(null, I[0], 1223, 12, "schedulerPhase == SchedulerPhase.idle");
      this[_hasScheduledFrame] = false;
      try {
        t$365$0 = this[_frameTimelineTask];
        t$365$0 == null ? null : t$365$0.start("Animate");
        this[_schedulerPhase] = binding$.SchedulerPhase.transientCallbacks;
        let callbacks = this[_transientCallbacks];
        this[_transientCallbacks] = new (G.IdentityMapOfint$_FrameCallbackEntry()).new();
        callbacks[$forEach](dart.fn((id, callbackEntry) => {
          if (!this[_removedIds].contains(id)) {
            this[_invokeFrameCallback](callbackEntry.callback, dart.nullCheck(this[_currentFrameTimeStamp]), callbackEntry.debugStack);
          }
        }, T$.intAnd_FrameCallbackEntryTovoid()));
        this[_removedIds].clear();
      } finally {
        this[_schedulerPhase] = binding$.SchedulerPhase.midFrameMicrotasks;
      }
    }
    requestPerformanceMode(mode) {
      if (this[_performanceMode] != null && this[_performanceMode] !== mode) {
        return null;
      }
      if (this[_performanceMode] === mode) {
        if (!(this[_numPerformanceModeRequests] > 0)) dart.assertFailed(null, I[0], 1260, 14, "_numPerformanceModeRequests > 0");
        this[_numPerformanceModeRequests] = this[_numPerformanceModeRequests] + 1;
      } else if (this[_performanceMode] == null) {
        if (!(this[_numPerformanceModeRequests] === 0)) dart.assertFailed(null, I[0], 1263, 14, "_numPerformanceModeRequests == 0");
        this[_performanceMode] = mode;
        this[_numPerformanceModeRequests] = 1;
      }
      return new binding$.PerformanceModeRequestHandle.__(dart.bind(this, _disposePerformanceModeRequest));
    }
    [_disposePerformanceModeRequest]() {
      this[_numPerformanceModeRequests] = this[_numPerformanceModeRequests] - 1;
      if (this[_numPerformanceModeRequests] === 0) {
        this[_performanceMode] = null;
        ui.PlatformDispatcher.instance.requestDartPerformanceMode(ui.DartPerformanceMode.balanced);
      }
    }
    debugGetRequestedPerformanceMode() {
      if (!(true || false)) {
        return null;
      } else {
        return this[_performanceMode];
      }
    }
    handleDrawFrame() {
      let t$365, t$365$;
      if (!(this[_schedulerPhase] === binding$.SchedulerPhase.midFrameMicrotasks)) dart.assertFailed(null, I[0], 1305, 12, "_schedulerPhase == SchedulerPhase.midFrameMicrotasks");
      t$365 = this[_frameTimelineTask];
      t$365 == null ? null : t$365.finish();
      try {
        this[_schedulerPhase] = binding$.SchedulerPhase.persistentCallbacks;
        for (let callback of G.ListOfDurationTovoid().of(this[_persistentCallbacks])) {
          this[_invokeFrameCallback](callback, dart.nullCheck(this[_currentFrameTimeStamp]));
        }
        this[_schedulerPhase] = binding$.SchedulerPhase.postFrameCallbacks;
        let localPostFrameCallbacks = G.ListOfDurationTovoid().of(this[_postFrameCallbacks]);
        this[_postFrameCallbacks][$clear]();
        developer.Timeline.startSync("POST_FRAME");
        try {
          for (let callback of localPostFrameCallbacks) {
            this[_invokeFrameCallback](callback, dart.nullCheck(this[_currentFrameTimeStamp]));
          }
        } finally {
          developer.Timeline.finishSync();
        }
      } finally {
        this[_schedulerPhase] = binding$.SchedulerPhase.idle;
        t$365$ = this[_frameTimelineTask];
        t$365$ == null ? null : t$365$.finish();
        if (!dart.fn(() => {
          if (debug.debugPrintEndFrameBanner) {
            print.debugPrint("▀"[$times](dart.nullCheck(this[_debugBanner]).length));
          }
          this[_debugBanner] = null;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 1330, 14, "() {\r\n        if (debugPrintEndFrameBanner) {\r\n          debugPrint('▀' * _debugBanner!.length);\r\n        }\r\n        _debugBanner = null;\r\n        return true;\r\n      }()");
        this[_currentFrameTimeStamp] = null;
      }
    }
    [_profileFramePostEvent](frameTiming) {
      this.postEvent("Flutter.Frame", new (G.IdentityMapOfString$dynamic()).from(["number", frameTiming.frameNumber, "startTime", frameTiming.timestampInMicroseconds(ui.FramePhase.buildStart), "elapsed", frameTiming.totalSpan.inMicroseconds, "build", frameTiming.buildDuration.inMicroseconds, "raster", frameTiming.rasterDuration.inMicroseconds, "vsyncOverhead", frameTiming.vsyncOverhead.inMicroseconds]));
    }
    [_invokeFrameCallback](callback, timeStamp, callbackStack = null) {
      if (!(binding$._FrameCallbackEntry.debugCurrentCallbackStack == null)) dart.assertFailed(null, I[0], 1380, 12, "_FrameCallbackEntry.debugCurrentCallbackStack == null");
      if (!dart.fn(() => {
        binding$._FrameCallbackEntry.debugCurrentCallbackStack = callbackStack;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 1381, 12, "() {\r\n      _FrameCallbackEntry.debugCurrentCallbackStack = callbackStack;\r\n      return true;\r\n    }()");
      try {
        callback(timeStamp);
      } catch (t$36$35e) {
        let exception = dart.getThrown(t$36$35e);
        let exceptionStack = dart.stackTrace(t$36$35e);
        if (T$.Object()[_is](exception)) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: exceptionStack, library: "scheduler library", context: new assertions.ErrorDescription.new("during a scheduler callback"), informationCollector: callbackStack == null ? null : dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new assertions.DiagnosticsStackTrace.new("\nThis exception was thrown in the context of a scheduler callback. When the scheduler callback was _registered_ (as opposed to when the exception was thrown), this was the stack", callbackStack)]), T$.VoidToListOfDiagnosticsNode())}));
        } else
          throw t$36$35e;
      }
      if (!dart.fn(() => {
        binding$._FrameCallbackEntry.debugCurrentCallbackStack = null;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 1405, 12, "() {\r\n      _FrameCallbackEntry.debugCurrentCallbackStack = null;\r\n      return true;\r\n    }()");
    }
  };
  (binding$.SchedulerBinding[dart.mixinNew] = function() {
    this[_timingsCallbacks] = G.JSArrayOfListOfFrameTimingTovoid().of([]);
    this[_lifecycleState] = null;
    this[schedulingStrategy] = C[6] || CT.C6;
    this[_taskQueue] = new (G.HeapPriorityQueueOf_TaskEntry()).new(C[7] || CT.C7);
    this[_hasRequestedAnEventLoopCallback] = false;
    this[_nextFrameCallbackId] = 0;
    this[_transientCallbacks] = new (G.IdentityMapOfint$_FrameCallbackEntry()).new();
    this[_removedIds] = new (G._IdentityHashSetOfint()).new();
    this[_persistentCallbacks] = G.JSArrayOfDurationTovoid().of([]);
    this[_postFrameCallbacks] = G.JSArrayOfDurationTovoid().of([]);
    this[_nextFrameCompleter] = null;
    this[_hasScheduledFrame] = false;
    this[_schedulerPhase] = binding$.SchedulerPhase.idle;
    this[_framesEnabled] = true;
    this[_warmUpFrame] = false;
    this[_firstRawTimeStampInEpoch] = null;
    this[_epochStart] = core.Duration.zero;
    this[_lastRawTimeStamp] = core.Duration.zero;
    this[_currentFrameTimeStamp] = null;
    this[_debugFrameNumber] = 0;
    this[_debugBanner] = null;
    this[_rescheduleAfterWarmUpFrame] = false;
    this[_frameTimelineTask] = new developer.TimelineTask.new();
    this[_performanceMode] = null;
    this[_numPerformanceModeRequests] = 0;
  }).prototype = binding$.SchedulerBinding.prototype;
  dart.addTypeTests(binding$.SchedulerBinding);
  dart.addRtiResources(binding$.SchedulerBinding, ["flutter__src__scheduler__binding|SchedulerBinding"]);
  dart.addTypeCaches(binding$.SchedulerBinding);
  dart.setMethodSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    addTimingsCallback: T$.FnTovoid(),
    removeTimingsCallback: T$.FnTovoid(),
    [_executeTimingsCallbacks]: T$.ListOfFrameTimingTovoid(),
    resetLifecycleState: T$.VoidTovoid(),
    handleAppLifecycleStateChanged: T$.AppLifecycleStateTovoid(),
    scheduleTask: T$.FnAndPriority__ToFutureOfT(),
    [_ensureEventLoopCallback]: T$.VoidTovoid(),
    [_runTasks]: T$.VoidTovoid(),
    handleEventLoopCallback: T$.VoidTobool(),
    scheduleFrameCallback: T$.Fn__Toint(),
    cancelFrameCallbackWithId: T$.intTovoid(),
    debugAssertNoTransientCallbacks: T$.StringTobool(),
    debugAssertNoPendingPerformanceModeRequests: T$.StringTobool(),
    debugAssertNoTimeDilation: T$.StringTobool(),
    addPersistentFrameCallback: T$.FnTovoid$1(),
    addPostFrameCallback: T$.Fn__Tovoid(),
    [_setFramesEnabledState]: T$.boolTovoid(),
    ensureFrameCallbacksRegistered: T$.VoidTovoid(),
    ensureVisualUpdate: T$.VoidTovoid(),
    scheduleFrame: T$.VoidTovoid(),
    scheduleForcedFrame: T$.VoidTovoid(),
    scheduleWarmUpFrame: T$.VoidTovoid(),
    resetEpoch: T$.VoidTovoid(),
    [_adjustForEpoch]: T$.DurationToDuration(),
    [_handleBeginFrame]: T$.DurationTovoid(),
    [_handleDrawFrame]: T$.VoidTovoid(),
    handleBeginFrame: T$.DurationNTovoid(),
    requestPerformanceMode: T$.DartPerformanceModeToPerformanceModeRequestHandleN(),
    [_disposePerformanceModeRequest]: T$.VoidTovoid(),
    debugGetRequestedPerformanceMode: T$.VoidToDartPerformanceModeN(),
    handleDrawFrame: T$.VoidTovoid(),
    [_profileFramePostEvent]: T$.FrameTimingTovoid(),
    [_invokeFrameCallback]: T$.FnAndDurationAndStackTraceNTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setMethodsDefaultTypeArgSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({scheduleTask: [T$.dynamic()]}, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticMethodSignature(binding$.SchedulerBinding, () => ['_taskSorter', 'debugPrintTransientCallbackRegistrationStack', '_debugDescribeTimeStamp']);
  dart.setGetterSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    lifecycleState: T$.AppLifecycleStateN(),
    transientCallbackCount: T$.int(),
    endOfFrame: T$.FutureOfvoid(),
    hasScheduledFrame: T$.bool(),
    schedulerPhase: T$.SchedulerPhase(),
    framesEnabled: T$.bool(),
    currentFrameTimeStamp: T$.Duration(),
    currentSystemFrameTimeStamp: T$.Duration()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticGetterSignature(binding$.SchedulerBinding, () => ['instance']);
  dart.setLibraryUri(binding$.SchedulerBinding, I[1]);
  dart.setFieldSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    [_timingsCallbacks]: {type: T$.ListOfListOfFrameTimingTovoid(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_lifecycleState]: {type: T$.AppLifecycleStateN(), isConst: false, isFinal: false, libraryUri: I[5]},
    schedulingStrategy: {type: T$.__Tobool(), isConst: false, isFinal: false},
    [_taskQueue]: {type: T$.PriorityQueueOf_TaskEntry(), isConst: false, isFinal: true, libraryUri: I[6]},
    [_hasRequestedAnEventLoopCallback]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_nextFrameCallbackId]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_transientCallbacks]: {type: T$.MapOfint$_FrameCallbackEntry(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_removedIds]: {type: T$.SetOfint(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_persistentCallbacks]: {type: T$.ListOfDurationTovoid(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_postFrameCallbacks]: {type: T$.ListOfDurationTovoid(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_nextFrameCompleter]: {type: T$.CompleterNOfvoid(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_hasScheduledFrame]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_schedulerPhase]: {type: T$.SchedulerPhase(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_framesEnabled]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_warmUpFrame]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_firstRawTimeStampInEpoch]: {type: T$.DurationN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_epochStart]: {type: T$.Duration(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_lastRawTimeStamp]: {type: T$.Duration(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_currentFrameTimeStamp]: {type: T$.DurationN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_debugFrameNumber]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_debugBanner]: {type: T$.StringN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_rescheduleAfterWarmUpFrame]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_frameTimelineTask]: {type: T$.TimelineTaskN(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_performanceMode]: {type: T$.DartPerformanceModeN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_numPerformanceModeRequests]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticFieldSignature(binding$.SchedulerBinding, () => ['_instance']);
  dart.defineLazy(binding$.SchedulerBinding, {
    /*binding$.SchedulerBinding._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  binding$.defaultSchedulingStrategy = function defaultSchedulingStrategy(opts) {
    let priority = opts && 'priority' in opts ? opts.priority : null;
    let scheduler = opts && 'scheduler' in opts ? opts.scheduler : null;
    if (scheduler.transientCallbackCount > 0) {
      return priority >= priority$.Priority.animation.value;
    }
    return true;
  };
  dart.copyProperties(binding$, {
    get timeDilation() {
      return binding$._timeDilation;
    },
    set timeDilation(value) {
      let t$366;
      if (!(value > 0.0)) dart.assertFailed(null, I[0], 30, 10, "value > 0.0");
      if (binding$._timeDilation === value) {
        return;
      }
      t$366 = binding$.SchedulerBinding._instance;
      t$366 == null ? null : t$366.resetEpoch();
      binding$._timeDilation = value;
    }
  });
  dart.defineLazy(binding$, {
    /*binding$._timeDilation*/get _timeDilation() {
      return 1.0;
    },
    set _timeDilation(value) {}
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/scheduler/binding.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__scheduler__binding|_TaskEntry":{"_TaskEntry.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"async|Completer":{"Completer.T":"1"},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__scheduler__binding|SchedulerPhase":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__scheduler__binding|SchedulerBinding":{"flutter__src__foundation__binding|BindingBase":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Future":{"Future.T":"1"},"ui|AppLifecycleState":{"core|_Enum":[],"core|Enum":[]},"ui|DartPerformanceMode":{"core|_Enum":[],"core|Enum":[]},"core|StringBuffer":{"core|StringSink":[]},"collection__src__priority_queue|PriorityQueue":{"PriorityQueue.E":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/flutter/src/scheduler/binding.dart", {
    "package:flutter/src/scheduler/binding.dart": binding$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/scheduler/binding.dart.lib.js"}');
  // Exports:
  return {
    src__scheduler__binding: binding$
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map

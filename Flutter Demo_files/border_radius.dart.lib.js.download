// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/border_radius.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__painting__border_radius_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var border_radius = Object.create(dart.library);
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    BorderRadiusGeometry: () => (T.BorderRadiusGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry")))(),
    BorderRadiusGeometryToBorderRadiusGeometry: () => (T.BorderRadiusGeometryToBorderRadiusGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry(flutter__src__painting__border_radius|BorderRadiusGeometry)")))(),
    BorderRadiusGeometryNAndBorderRadiusGeometryNAnddoubleToBorderRadiusGeometryN: () => (T.BorderRadiusGeometryNAndBorderRadiusGeometryNAnddoubleToBorderRadiusGeometryN = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry?(flutter__src__painting__border_radius|BorderRadiusGeometry?,flutter__src__painting__border_radius|BorderRadiusGeometry?,core|double)")))(),
    BorderRadius: () => (T.BorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius")))(),
    __ToBorderRadius: () => (T.__ToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius({bottomLeft:ui|Radius?,bottomRight:ui|Radius?,topLeft:ui|Radius?,topRight:ui|Radius?})")))(),
    Radius: () => (T.Radius = dart.constFn(dart_rti.findType("ui|Radius")))(),
    RectToRRect: () => (T.RectToRRect = dart.constFn(dart_rti.findType("ui|RRect(ui|Rect)")))(),
    BorderRadiusToBorderRadius: () => (T.BorderRadiusToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius(flutter__src__painting__border_radius|BorderRadius)")))(),
    VoidToBorderRadius: () => (T.VoidToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius()")))(),
    doubleToBorderRadius: () => (T.doubleToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius(core|double)")))(),
    BorderRadiusNAndBorderRadiusNAnddoubleToBorderRadiusN: () => (T.BorderRadiusNAndBorderRadiusNAnddoubleToBorderRadiusN = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius?(flutter__src__painting__border_radius|BorderRadius?,flutter__src__painting__border_radius|BorderRadius?,core|double)")))(),
    TextDirectionNToBorderRadius: () => (T.TextDirectionNToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius(ui|TextDirection?)")))(),
    BorderRadiusDirectional: () => (T.BorderRadiusDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusDirectional")))(),
    BorderRadiusDirectionalToBorderRadiusDirectional: () => (T.BorderRadiusDirectionalToBorderRadiusDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusDirectional(flutter__src__painting__border_radius|BorderRadiusDirectional)")))(),
    VoidToBorderRadiusDirectional: () => (T.VoidToBorderRadiusDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusDirectional()")))(),
    doubleToBorderRadiusDirectional: () => (T.doubleToBorderRadiusDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusDirectional(core|double)")))(),
    BorderRadiusDirectionalNAndBorderRadiusDirectionalNAnddoubleToBorderRadiusDirectionalN: () => (T.BorderRadiusDirectionalNAndBorderRadiusDirectionalNAnddoubleToBorderRadiusDirectionalN = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusDirectional?(flutter__src__painting__border_radius|BorderRadiusDirectional?,flutter__src__painting__border_radius|BorderRadiusDirectional?,core|double)")))(),
    VoidTo_MixedBorderRadius: () => (T.VoidTo_MixedBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|_MixedBorderRadius()")))(),
    doubleTo_MixedBorderRadius: () => (T.doubleTo_MixedBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|_MixedBorderRadius(core|double)")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Radius_y]: 0,
        [Radius_x]: 0
      }, ui.Radius.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [bottomRight$]: C[0] || CT.C0,
        [bottomLeft$]: C[0] || CT.C0,
        [topRight$]: C[0] || CT.C0,
        [topLeft$]: C[0] || CT.C0
      }, border_radius.BorderRadius.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [bottomEnd$]: C[0] || CT.C0,
        [bottomStart$]: C[0] || CT.C0,
        [topEnd$]: C[0] || CT.C0,
        [topStart$]: C[0] || CT.C0
      }, border_radius.BorderRadiusDirectional.prototype));
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:flutter/src/painting/border_radius.dart",
    "dart:ui",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/border_radius.dart"
  ];
  var _topLeft = dart.privateName(border_radius, "_topLeft");
  var _topRight = dart.privateName(border_radius, "_topRight");
  var _bottomLeft = dart.privateName(border_radius, "_bottomLeft");
  var _bottomRight = dart.privateName(border_radius, "_bottomRight");
  var _topStart = dart.privateName(border_radius, "_topStart");
  var _topEnd = dart.privateName(border_radius, "_topEnd");
  var _bottomStart = dart.privateName(border_radius, "_bottomStart");
  var _bottomEnd = dart.privateName(border_radius, "_bottomEnd");
  var _is = dart.privateName(dart_rti, "_is");
  border_radius.BorderRadiusGeometry = class BorderRadiusGeometry extends core.Object {
    subtract(other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['-'](other[_topLeft]), this[_topRight]['-'](other[_topRight]), this[_bottomLeft]['-'](other[_bottomLeft]), this[_bottomRight]['-'](other[_bottomRight]), this[_topStart]['-'](other[_topStart]), this[_topEnd]['-'](other[_topEnd]), this[_bottomStart]['-'](other[_bottomStart]), this[_bottomEnd]['-'](other[_bottomEnd]));
    }
    add(other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['+'](other[_topLeft]), this[_topRight]['+'](other[_topRight]), this[_bottomLeft]['+'](other[_bottomLeft]), this[_bottomRight]['+'](other[_bottomRight]), this[_topStart]['+'](other[_topStart]), this[_topEnd]['+'](other[_topEnd]), this[_bottomStart]['+'](other[_bottomStart]), this[_bottomEnd]['+'](other[_bottomEnd]));
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      a == null ? a = border_radius.BorderRadius.zero : null;
      b == null ? b = border_radius.BorderRadius.zero : null;
      return a.add(b.subtract(a)['*'](t));
    }
    toString() {
      let visual = null;
      let logical = null;
      if (dart.equals(this[_topLeft], this[_topRight]) && dart.equals(this[_topRight], this[_bottomLeft]) && dart.equals(this[_bottomLeft], this[_bottomRight])) {
        if (!dart.equals(this[_topLeft], ui.Radius.zero)) {
          if (this[_topLeft].x === this[_topLeft].y) {
            visual = "BorderRadius.circular(" + this[_topLeft].x[$toStringAsFixed](1) + ")";
          } else {
            visual = "BorderRadius.all(" + dart.str(this[_topLeft]) + ")";
          }
        }
      } else {
        let result = new core.StringBuffer.new();
        result.write("BorderRadius.only(");
        let comma = false;
        if (!dart.equals(this[_topLeft], ui.Radius.zero)) {
          result.write("topLeft: " + dart.str(this[_topLeft]));
          comma = true;
        }
        if (!dart.equals(this[_topRight], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("topRight: " + dart.str(this[_topRight]));
          comma = true;
        }
        if (!dart.equals(this[_bottomLeft], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("bottomLeft: " + dart.str(this[_bottomLeft]));
          comma = true;
        }
        if (!dart.equals(this[_bottomRight], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("bottomRight: " + dart.str(this[_bottomRight]));
        }
        result.write(")");
        visual = dart.toString(result);
      }
      if (dart.equals(this[_topStart], this[_topEnd]) && dart.equals(this[_topEnd], this[_bottomEnd]) && dart.equals(this[_bottomEnd], this[_bottomStart])) {
        if (!dart.equals(this[_topStart], ui.Radius.zero)) {
          if (this[_topStart].x === this[_topStart].y) {
            logical = "BorderRadiusDirectional.circular(" + this[_topStart].x[$toStringAsFixed](1) + ")";
          } else {
            logical = "BorderRadiusDirectional.all(" + dart.str(this[_topStart]) + ")";
          }
        }
      } else {
        let result = new core.StringBuffer.new();
        result.write("BorderRadiusDirectional.only(");
        let comma = false;
        if (!dart.equals(this[_topStart], ui.Radius.zero)) {
          result.write("topStart: " + dart.str(this[_topStart]));
          comma = true;
        }
        if (!dart.equals(this[_topEnd], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("topEnd: " + dart.str(this[_topEnd]));
          comma = true;
        }
        if (!dart.equals(this[_bottomStart], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("bottomStart: " + dart.str(this[_bottomStart]));
          comma = true;
        }
        if (!dart.equals(this[_bottomEnd], ui.Radius.zero)) {
          if (comma) {
            result.write(", ");
          }
          result.write("bottomEnd: " + dart.str(this[_bottomEnd]));
        }
        result.write(")");
        logical = dart.toString(result);
      }
      if (visual != null && logical != null) {
        return dart.str(visual) + " + " + dart.str(logical);
      }
      if (visual != null) {
        return visual;
      }
      if (logical != null) {
        return logical;
      }
      return "BorderRadius.zero";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.BorderRadiusGeometry()[_is](other) && dart.equals(other[_topLeft], this[_topLeft]) && dart.equals(other[_topRight], this[_topRight]) && dart.equals(other[_bottomLeft], this[_bottomLeft]) && dart.equals(other[_bottomRight], this[_bottomRight]) && dart.equals(other[_topStart], this[_topStart]) && dart.equals(other[_topEnd], this[_topEnd]) && dart.equals(other[_bottomStart], this[_bottomStart]) && dart.equals(other[_bottomEnd], this[_bottomEnd]);
    }
    get hashCode() {
      return core.Object.hash(this[_topLeft], this[_topRight], this[_bottomLeft], this[_bottomRight], this[_topStart], this[_topEnd], this[_bottomStart], this[_bottomEnd]);
    }
  };
  (border_radius.BorderRadiusGeometry.new = function() {
    ;
  }).prototype = border_radius.BorderRadiusGeometry.prototype;
  dart.addTypeTests(border_radius.BorderRadiusGeometry);
  dart.addRtiResources(border_radius.BorderRadiusGeometry, ["flutter__src__painting__border_radius|BorderRadiusGeometry"]);
  dart.addTypeCaches(border_radius.BorderRadiusGeometry);
  dart.setMethodSignature(border_radius.BorderRadiusGeometry, () => dart.global.Object.setPrototypeOf({
    subtract: T.BorderRadiusGeometryToBorderRadiusGeometry(),
    add: T.BorderRadiusGeometryToBorderRadiusGeometry()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(border_radius.BorderRadiusGeometry))));
  dart.setStaticMethodSignature(border_radius.BorderRadiusGeometry, () => ['lerp']);
  dart.setLibraryUri(border_radius.BorderRadiusGeometry, I[0]);
  dart.defineExtensionMethods(border_radius.BorderRadiusGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(border_radius.BorderRadiusGeometry, ['hashCode']);
  var topLeft$ = dart.privateName(border_radius, "BorderRadius.topLeft");
  var topRight$ = dart.privateName(border_radius, "BorderRadius.topRight");
  var bottomLeft$ = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var bottomRight$ = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  border_radius.BorderRadius = class BorderRadius extends border_radius.BorderRadiusGeometry {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    static ['_#all#tearOff'](radius) {
      return new border_radius.BorderRadius.all(radius);
    }
    static ['_#circular#tearOff'](radius) {
      return new border_radius.BorderRadius.circular(radius);
    }
    static ['_#vertical#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[0] || CT.C0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[0] || CT.C0;
      return new border_radius.BorderRadius.vertical({top: top, bottom: bottom});
    }
    static ['_#horizontal#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : C[0] || CT.C0;
      let right = opts && 'right' in opts ? opts.right : C[0] || CT.C0;
      return new border_radius.BorderRadius.horizontal({left: left, right: right});
    }
    static ['_#only#tearOff'](opts) {
      let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C[0] || CT.C0;
      let topRight = opts && 'topRight' in opts ? opts.topRight : C[0] || CT.C0;
      let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C[0] || CT.C0;
      let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C[0] || CT.C0;
      return new border_radius.BorderRadius.only({topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight});
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0, t$360$1;
      let topLeft = opts && 'topLeft' in opts ? opts.topLeft : null;
      let topRight = opts && 'topRight' in opts ? opts.topRight : null;
      let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : null;
      let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : null;
      return new border_radius.BorderRadius.only({topLeft: (t$360 = topLeft, t$360 == null ? this.topLeft : t$360), topRight: (t$360$ = topRight, t$360$ == null ? this.topRight : t$360$), bottomLeft: (t$360$0 = bottomLeft, t$360$0 == null ? this.bottomLeft : t$360$0), bottomRight: (t$360$1 = bottomRight, t$360$1 == null ? this.bottomRight : t$360$1)});
    }
    get [_topLeft]() {
      return this.topLeft;
    }
    get [_topRight]() {
      return this.topRight;
    }
    get [_bottomLeft]() {
      return this.bottomLeft;
    }
    get [_bottomRight]() {
      return this.bottomRight;
    }
    get [_topStart]() {
      return ui.Radius.zero;
    }
    get [_topEnd]() {
      return ui.Radius.zero;
    }
    get [_bottomStart]() {
      return ui.Radius.zero;
    }
    get [_bottomEnd]() {
      return ui.Radius.zero;
    }
    toRRect(rect) {
      return new ui.RRect.fromRectAndCorners(rect, {topLeft: this.topLeft.clamp({minimum: ui.Radius.zero}), topRight: this.topRight.clamp({minimum: ui.Radius.zero}), bottomLeft: this.bottomLeft.clamp({minimum: ui.Radius.zero}), bottomRight: this.bottomRight.clamp({minimum: ui.Radius.zero})});
    }
    subtract(other) {
      if (T.BorderRadius()[_is](other)) {
        return this['-'](other);
      }
      return super.subtract(other);
    }
    add(other) {
      if (T.BorderRadius()[_is](other)) {
        return this['+'](other);
      }
      return super.add(other);
    }
    ['-'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['-'](other.topLeft), topRight: this.topRight['-'](other.topRight), bottomLeft: this.bottomLeft['-'](other.bottomLeft), bottomRight: this.bottomRight['-'](other.bottomRight)});
    }
    ['+'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['+'](other.topLeft), topRight: this.topRight['+'](other.topRight), bottomLeft: this.bottomLeft['+'](other.bottomLeft), bottomRight: this.bottomRight['+'](other.bottomRight)});
    }
    _negate() {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft._negate(), topRight: this.topRight._negate(), bottomLeft: this.bottomLeft._negate(), bottomRight: this.bottomRight._negate()});
    }
    ['*'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['*'](other), topRight: this.topRight['*'](other), bottomLeft: this.bottomLeft['*'](other), bottomRight: this.bottomRight['*'](other)});
    }
    ['/'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['/'](other), topRight: this.topRight['/'](other), bottomLeft: this.bottomLeft['/'](other), bottomRight: this.bottomRight['/'](other)});
    }
    ['~/'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['~/'](other), topRight: this.topRight['~/'](other), bottomLeft: this.bottomLeft['~/'](other), bottomRight: this.bottomRight['~/'](other)});
    }
    ['%'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['%'](other), topRight: this.topRight['%'](other), bottomLeft: this.bottomLeft['%'](other), bottomRight: this.bottomRight['%'](other)});
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - t);
      }
      return new border_radius.BorderRadius.only({topLeft: dart.nullCheck(ui.Radius.lerp(a.topLeft, b.topLeft, t)), topRight: dart.nullCheck(ui.Radius.lerp(a.topRight, b.topRight, t)), bottomLeft: dart.nullCheck(ui.Radius.lerp(a.bottomLeft, b.bottomLeft, t)), bottomRight: dart.nullCheck(ui.Radius.lerp(a.bottomRight, b.bottomRight, t))});
    }
    resolve(direction) {
      return this;
    }
  };
  (border_radius.BorderRadius.all = function(radius) {
    border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.circular = function(radius) {
    border_radius.BorderRadius.all.call(this, new ui.Radius.circular(radius));
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[0] || CT.C0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[0] || CT.C0;
    border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C[0] || CT.C0;
    let right = opts && 'right' in opts ? opts.right : C[0] || CT.C0;
    border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C[0] || CT.C0;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C[0] || CT.C0;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C[0] || CT.C0;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C[0] || CT.C0;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    dart.global.Object.getPrototypeOf(border_radius.BorderRadius).new.call(this);
    ;
  }).prototype = border_radius.BorderRadius.prototype;
  dart.addTypeTests(border_radius.BorderRadius);
  dart.addRtiResources(border_radius.BorderRadius, ["flutter__src__painting__border_radius|BorderRadius"]);
  dart.addTypeCaches(border_radius.BorderRadius);
  dart.setMethodSignature(border_radius.BorderRadius, () => dart.global.Object.setPrototypeOf({
    copyWith: T.__ToBorderRadius(),
    toRRect: T.RectToRRect(),
    '-': T.BorderRadiusToBorderRadius(),
    '+': T.BorderRadiusToBorderRadius(),
    _negate: T.VoidToBorderRadius(),
    '*': T.doubleToBorderRadius(),
    '/': T.doubleToBorderRadius(),
    '~/': T.doubleToBorderRadius(),
    '%': T.doubleToBorderRadius(),
    resolve: T.TextDirectionNToBorderRadius()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(border_radius.BorderRadius))));
  dart.setStaticMethodSignature(border_radius.BorderRadius, () => ['lerp']);
  dart.setGetterSignature(border_radius.BorderRadius, () => dart.global.Object.setPrototypeOf({
    [_topLeft]: T.Radius(),
    [_topRight]: T.Radius(),
    [_bottomLeft]: T.Radius(),
    [_bottomRight]: T.Radius(),
    [_topStart]: T.Radius(),
    [_topEnd]: T.Radius(),
    [_bottomStart]: T.Radius(),
    [_bottomEnd]: T.Radius()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(border_radius.BorderRadius))));
  dart.setLibraryUri(border_radius.BorderRadius, I[0]);
  dart.setFieldSignature(border_radius.BorderRadius, () => dart.global.Object.setPrototypeOf({
    topLeft: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    topRight: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    bottomLeft: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    bottomRight: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(border_radius.BorderRadius))));
  dart.setStaticFieldSignature(border_radius.BorderRadius, () => ['zero']);
  dart.defineLazy(border_radius.BorderRadius, {
    /*border_radius.BorderRadius.zero*/get zero() {
      return C[1] || CT.C1;
    }
  }, false);
  var topStart$ = dart.privateName(border_radius, "BorderRadiusDirectional.topStart");
  var topEnd$ = dart.privateName(border_radius, "BorderRadiusDirectional.topEnd");
  var bottomStart$ = dart.privateName(border_radius, "BorderRadiusDirectional.bottomStart");
  var bottomEnd$ = dart.privateName(border_radius, "BorderRadiusDirectional.bottomEnd");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  border_radius.BorderRadiusDirectional = class BorderRadiusDirectional extends border_radius.BorderRadiusGeometry {
    get topStart() {
      return this[topStart$];
    }
    set topStart(value) {
      super.topStart = value;
    }
    get topEnd() {
      return this[topEnd$];
    }
    set topEnd(value) {
      super.topEnd = value;
    }
    get bottomStart() {
      return this[bottomStart$];
    }
    set bottomStart(value) {
      super.bottomStart = value;
    }
    get bottomEnd() {
      return this[bottomEnd$];
    }
    set bottomEnd(value) {
      super.bottomEnd = value;
    }
    static ['_#all#tearOff'](radius) {
      return new border_radius.BorderRadiusDirectional.all(radius);
    }
    static ['_#circular#tearOff'](radius) {
      return new border_radius.BorderRadiusDirectional.circular(radius);
    }
    static ['_#vertical#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[0] || CT.C0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[0] || CT.C0;
      return new border_radius.BorderRadiusDirectional.vertical({top: top, bottom: bottom});
    }
    static ['_#horizontal#tearOff'](opts) {
      let start = opts && 'start' in opts ? opts.start : C[0] || CT.C0;
      let end = opts && 'end' in opts ? opts.end : C[0] || CT.C0;
      return new border_radius.BorderRadiusDirectional.horizontal({start: start, end: end});
    }
    static ['_#only#tearOff'](opts) {
      let topStart = opts && 'topStart' in opts ? opts.topStart : C[0] || CT.C0;
      let topEnd = opts && 'topEnd' in opts ? opts.topEnd : C[0] || CT.C0;
      let bottomStart = opts && 'bottomStart' in opts ? opts.bottomStart : C[0] || CT.C0;
      let bottomEnd = opts && 'bottomEnd' in opts ? opts.bottomEnd : C[0] || CT.C0;
      return new border_radius.BorderRadiusDirectional.only({topStart: topStart, topEnd: topEnd, bottomStart: bottomStart, bottomEnd: bottomEnd});
    }
    get [_topStart]() {
      return this.topStart;
    }
    get [_topEnd]() {
      return this.topEnd;
    }
    get [_bottomStart]() {
      return this.bottomStart;
    }
    get [_bottomEnd]() {
      return this.bottomEnd;
    }
    get [_topLeft]() {
      return ui.Radius.zero;
    }
    get [_topRight]() {
      return ui.Radius.zero;
    }
    get [_bottomLeft]() {
      return ui.Radius.zero;
    }
    get [_bottomRight]() {
      return ui.Radius.zero;
    }
    subtract(other) {
      if (T.BorderRadiusDirectional()[_is](other)) {
        return this['-'](other);
      }
      return super.subtract(other);
    }
    add(other) {
      if (T.BorderRadiusDirectional()[_is](other)) {
        return this['+'](other);
      }
      return super.add(other);
    }
    ['-'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['-'](other.topStart), topEnd: this.topEnd['-'](other.topEnd), bottomStart: this.bottomStart['-'](other.bottomStart), bottomEnd: this.bottomEnd['-'](other.bottomEnd)});
    }
    ['+'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['+'](other.topStart), topEnd: this.topEnd['+'](other.topEnd), bottomStart: this.bottomStart['+'](other.bottomStart), bottomEnd: this.bottomEnd['+'](other.bottomEnd)});
    }
    _negate() {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart._negate(), topEnd: this.topEnd._negate(), bottomStart: this.bottomStart._negate(), bottomEnd: this.bottomEnd._negate()});
    }
    ['*'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['*'](other), topEnd: this.topEnd['*'](other), bottomStart: this.bottomStart['*'](other), bottomEnd: this.bottomEnd['*'](other)});
    }
    ['/'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['/'](other), topEnd: this.topEnd['/'](other), bottomStart: this.bottomStart['/'](other), bottomEnd: this.bottomEnd['/'](other)});
    }
    ['~/'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['~/'](other), topEnd: this.topEnd['~/'](other), bottomStart: this.bottomStart['~/'](other), bottomEnd: this.bottomEnd['~/'](other)});
    }
    ['%'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['%'](other), topEnd: this.topEnd['%'](other), bottomStart: this.bottomStart['%'](other), bottomEnd: this.bottomEnd['%'](other)});
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - t);
      }
      return new border_radius.BorderRadiusDirectional.only({topStart: dart.nullCheck(ui.Radius.lerp(a.topStart, b.topStart, t)), topEnd: dart.nullCheck(ui.Radius.lerp(a.topEnd, b.topEnd, t)), bottomStart: dart.nullCheck(ui.Radius.lerp(a.bottomStart, b.bottomStart, t)), bottomEnd: dart.nullCheck(ui.Radius.lerp(a.bottomEnd, b.bottomEnd, t))});
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, I[2], 749, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[2] || CT.C2:
          {
            return new border_radius.BorderRadius.only({topLeft: this.topEnd, topRight: this.topStart, bottomLeft: this.bottomEnd, bottomRight: this.bottomStart});
          }
        case C[3] || CT.C3:
          {
            return new border_radius.BorderRadius.only({topLeft: this.topStart, topRight: this.topEnd, bottomLeft: this.bottomStart, bottomRight: this.bottomEnd});
          }
      }
    }
  };
  (border_radius.BorderRadiusDirectional.all = function(radius) {
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: radius, topEnd: radius, bottomStart: radius, bottomEnd: radius});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.circular = function(radius) {
    border_radius.BorderRadiusDirectional.all.call(this, new ui.Radius.circular(radius));
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[0] || CT.C0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[0] || CT.C0;
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: top, topEnd: top, bottomStart: bottom, bottomEnd: bottom});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.horizontal = function(opts) {
    let start = opts && 'start' in opts ? opts.start : C[0] || CT.C0;
    let end = opts && 'end' in opts ? opts.end : C[0] || CT.C0;
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: start, topEnd: end, bottomStart: start, bottomEnd: end});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.only = function(opts) {
    let topStart = opts && 'topStart' in opts ? opts.topStart : C[0] || CT.C0;
    let topEnd = opts && 'topEnd' in opts ? opts.topEnd : C[0] || CT.C0;
    let bottomStart = opts && 'bottomStart' in opts ? opts.bottomStart : C[0] || CT.C0;
    let bottomEnd = opts && 'bottomEnd' in opts ? opts.bottomEnd : C[0] || CT.C0;
    this[topStart$] = topStart;
    this[topEnd$] = topEnd;
    this[bottomStart$] = bottomStart;
    this[bottomEnd$] = bottomEnd;
    dart.global.Object.getPrototypeOf(border_radius.BorderRadiusDirectional).new.call(this);
    ;
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  dart.addTypeTests(border_radius.BorderRadiusDirectional);
  dart.addRtiResources(border_radius.BorderRadiusDirectional, ["flutter__src__painting__border_radius|BorderRadiusDirectional"]);
  dart.addTypeCaches(border_radius.BorderRadiusDirectional);
  dart.setMethodSignature(border_radius.BorderRadiusDirectional, () => dart.global.Object.setPrototypeOf({
    '-': T.BorderRadiusDirectionalToBorderRadiusDirectional(),
    '+': T.BorderRadiusDirectionalToBorderRadiusDirectional(),
    _negate: T.VoidToBorderRadiusDirectional(),
    '*': T.doubleToBorderRadiusDirectional(),
    '/': T.doubleToBorderRadiusDirectional(),
    '~/': T.doubleToBorderRadiusDirectional(),
    '%': T.doubleToBorderRadiusDirectional(),
    resolve: T.TextDirectionNToBorderRadius()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(border_radius.BorderRadiusDirectional))));
  dart.setStaticMethodSignature(border_radius.BorderRadiusDirectional, () => ['lerp']);
  dart.setGetterSignature(border_radius.BorderRadiusDirectional, () => dart.global.Object.setPrototypeOf({
    [_topStart]: T.Radius(),
    [_topEnd]: T.Radius(),
    [_bottomStart]: T.Radius(),
    [_bottomEnd]: T.Radius(),
    [_topLeft]: T.Radius(),
    [_topRight]: T.Radius(),
    [_bottomLeft]: T.Radius(),
    [_bottomRight]: T.Radius()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(border_radius.BorderRadiusDirectional))));
  dart.setLibraryUri(border_radius.BorderRadiusDirectional, I[0]);
  dart.setFieldSignature(border_radius.BorderRadiusDirectional, () => dart.global.Object.setPrototypeOf({
    topStart: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    topEnd: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    bottomStart: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    bottomEnd: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(border_radius.BorderRadiusDirectional))));
  dart.setStaticFieldSignature(border_radius.BorderRadiusDirectional, () => ['zero']);
  dart.defineLazy(border_radius.BorderRadiusDirectional, {
    /*border_radius.BorderRadiusDirectional.zero*/get zero() {
      return C[4] || CT.C4;
    }
  }, false);
  var _topLeft$ = dart.privateName(border_radius, "_MixedBorderRadius._topLeft");
  var _topRight$ = dart.privateName(border_radius, "_MixedBorderRadius._topRight");
  var _bottomLeft$ = dart.privateName(border_radius, "_MixedBorderRadius._bottomLeft");
  var _bottomRight$ = dart.privateName(border_radius, "_MixedBorderRadius._bottomRight");
  var _topStart$ = dart.privateName(border_radius, "_MixedBorderRadius._topStart");
  var _topEnd$ = dart.privateName(border_radius, "_MixedBorderRadius._topEnd");
  var _bottomStart$ = dart.privateName(border_radius, "_MixedBorderRadius._bottomStart");
  var _bottomEnd$ = dart.privateName(border_radius, "_MixedBorderRadius._bottomEnd");
  border_radius._MixedBorderRadius = class _MixedBorderRadius extends border_radius.BorderRadiusGeometry {
    get [_topLeft]() {
      return this[_topLeft$];
    }
    set [_topLeft](value) {
      super[_topLeft] = value;
    }
    get [_topRight]() {
      return this[_topRight$];
    }
    set [_topRight](value) {
      super[_topRight] = value;
    }
    get [_bottomLeft]() {
      return this[_bottomLeft$];
    }
    set [_bottomLeft](value) {
      super[_bottomLeft] = value;
    }
    get [_bottomRight]() {
      return this[_bottomRight$];
    }
    set [_bottomRight](value) {
      super[_bottomRight] = value;
    }
    get [_topStart]() {
      return this[_topStart$];
    }
    set [_topStart](value) {
      super[_topStart] = value;
    }
    get [_topEnd]() {
      return this[_topEnd$];
    }
    set [_topEnd](value) {
      super[_topEnd] = value;
    }
    get [_bottomStart]() {
      return this[_bottomStart$];
    }
    set [_bottomStart](value) {
      super[_bottomStart] = value;
    }
    get [_bottomEnd]() {
      return this[_bottomEnd$];
    }
    set [_bottomEnd](value) {
      super[_bottomEnd] = value;
    }
    static ['_#new#tearOff'](_topLeft, _topRight, _bottomLeft, _bottomRight, _topStart, _topEnd, _bottomStart, _bottomEnd) {
      return new border_radius._MixedBorderRadius.new(_topLeft, _topRight, _bottomLeft, _bottomRight, _topStart, _topEnd, _bottomStart, _bottomEnd);
    }
    _negate() {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]._negate(), this[_topRight]._negate(), this[_bottomLeft]._negate(), this[_bottomRight]._negate(), this[_topStart]._negate(), this[_topEnd]._negate(), this[_bottomStart]._negate(), this[_bottomEnd]._negate());
    }
    ['*'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['*'](other), this[_topRight]['*'](other), this[_bottomLeft]['*'](other), this[_bottomRight]['*'](other), this[_topStart]['*'](other), this[_topEnd]['*'](other), this[_bottomStart]['*'](other), this[_bottomEnd]['*'](other));
    }
    ['/'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['/'](other), this[_topRight]['/'](other), this[_bottomLeft]['/'](other), this[_bottomRight]['/'](other), this[_topStart]['/'](other), this[_topEnd]['/'](other), this[_bottomStart]['/'](other), this[_bottomEnd]['/'](other));
    }
    ['~/'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['~/'](other), this[_topRight]['~/'](other), this[_bottomLeft]['~/'](other), this[_bottomRight]['~/'](other), this[_topStart]['~/'](other), this[_topEnd]['~/'](other), this[_bottomStart]['~/'](other), this[_bottomEnd]['~/'](other));
    }
    ['%'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['%'](other), this[_topRight]['%'](other), this[_bottomLeft]['%'](other), this[_bottomRight]['%'](other), this[_topStart]['%'](other), this[_topEnd]['%'](other), this[_bottomStart]['%'](other), this[_bottomEnd]['%'](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, I[2], 878, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[2] || CT.C2:
          {
            return new border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topEnd]), topRight: this[_topRight]['+'](this[_topStart]), bottomLeft: this[_bottomLeft]['+'](this[_bottomEnd]), bottomRight: this[_bottomRight]['+'](this[_bottomStart])});
          }
        case C[3] || CT.C3:
          {
            return new border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topStart]), topRight: this[_topRight]['+'](this[_topEnd]), bottomLeft: this[_bottomLeft]['+'](this[_bottomStart]), bottomRight: this[_bottomRight]['+'](this[_bottomEnd])});
          }
      }
    }
  };
  (border_radius._MixedBorderRadius.new = function(_topLeft, _topRight, _bottomLeft, _bottomRight, _topStart, _topEnd, _bottomStart, _bottomEnd) {
    this[_topLeft$] = _topLeft;
    this[_topRight$] = _topRight;
    this[_bottomLeft$] = _bottomLeft;
    this[_bottomRight$] = _bottomRight;
    this[_topStart$] = _topStart;
    this[_topEnd$] = _topEnd;
    this[_bottomStart$] = _bottomStart;
    this[_bottomEnd$] = _bottomEnd;
    dart.global.Object.getPrototypeOf(border_radius._MixedBorderRadius).new.call(this);
    ;
  }).prototype = border_radius._MixedBorderRadius.prototype;
  dart.addTypeTests(border_radius._MixedBorderRadius);
  dart.addRtiResources(border_radius._MixedBorderRadius, ["flutter__src__painting__border_radius|_MixedBorderRadius"]);
  dart.addTypeCaches(border_radius._MixedBorderRadius);
  dart.setMethodSignature(border_radius._MixedBorderRadius, () => dart.global.Object.setPrototypeOf({
    _negate: T.VoidTo_MixedBorderRadius(),
    '*': T.doubleTo_MixedBorderRadius(),
    '/': T.doubleTo_MixedBorderRadius(),
    '~/': T.doubleTo_MixedBorderRadius(),
    '%': T.doubleTo_MixedBorderRadius(),
    resolve: T.TextDirectionNToBorderRadius()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(border_radius._MixedBorderRadius))));
  dart.setLibraryUri(border_radius._MixedBorderRadius, I[0]);
  dart.setFieldSignature(border_radius._MixedBorderRadius, () => dart.global.Object.setPrototypeOf({
    [_topLeft]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_topRight]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_bottomLeft]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_bottomRight]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_topStart]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_topEnd]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_bottomStart]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_bottomEnd]: {type: T.Radius(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(border_radius._MixedBorderRadius))));
  dart.moduleConstCaches.set("packages/flutter/src/painting/border_radius.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__border_radius|BorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__painting__border_radius|BorderRadiusDirectional":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]},"flutter__src__painting__border_radius|_MixedBorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/border_radius.dart", {
    "package:flutter/src/painting/border_radius.dart": border_radius
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["border_radius.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/border_radius.dart.lib.js"}');
  // Exports:
  return {
    src__painting__border_radius: border_radius
  };
}));

//# sourceMappingURL=border_radius.dart.lib.js.map

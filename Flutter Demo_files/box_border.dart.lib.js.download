// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/box_border.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__box_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var box_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $length = dartx.length;
  var $first = dartx.first;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfBoxShape: () => (T.ListOfBoxShape = dart.constFn(dart_rti.findType("core|List<flutter__src__painting__box_border|BoxShape>")))(),
    BoxShape: () => (T.BoxShape = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BoxShape")))(),
    BorderN: () => (T.BorderN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border?")))(),
    BorderDirectionalN: () => (T.BorderDirectionalN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BorderDirectional?")))(),
    Border: () => (T.Border = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border")))(),
    BorderDirectional: () => (T.BorderDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BorderDirectional")))(),
    DiagnosticsNode: () => (T.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    ShapeBorder__ToBoxBorderN: () => (T.ShapeBorder__ToBoxBorderN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BoxBorder?(flutter__src__painting__borders|ShapeBorder{reversed:core|bool})")))(),
    BoxBorderNAndBoxBorderNAnddoubleToBoxBorderN: () => (T.BoxBorderNAndBoxBorderNAnddoubleToBoxBorderN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BoxBorder?(flutter__src__painting__box_border|BoxBorder?,flutter__src__painting__box_border|BoxBorder?,core|double)")))(),
    Rect__ToPath: () => (T.Rect__ToPath = dart.constFn(dart_rti.findType("ui|Path(ui|Rect{textDirection:ui|TextDirection?})")))(),
    CanvasAndRectAndBorderSide__Tovoid: () => (T.CanvasAndRectAndBorderSide__Tovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect,flutter__src__painting__borders|BorderSide,flutter__src__painting__border_radius|BorderRadius)")))(),
    CanvasAndRect__Tovoid: () => (T.CanvasAndRect__Tovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect{borderRadius!flutter__src__painting__border_radius|BorderRadius?,bottom:flutter__src__painting__borders|BorderSide,color!ui|Color,left:flutter__src__painting__borders|BorderSide,right:flutter__src__painting__borders|BorderSide,shape:flutter__src__painting__box_border|BoxShape,textDirection!ui|TextDirection?,top:flutter__src__painting__borders|BorderSide})")))(),
    RRectAndEdgeInsetsToRRect: () => (T.RRectAndEdgeInsetsToRRect = dart.constFn(dart_rti.findType("ui|RRect(ui|RRect,flutter__src__painting__edge_insets|EdgeInsets)")))(),
    CanvasAndRectAndBorderSideTovoid: () => (T.CanvasAndRectAndBorderSideTovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect,flutter__src__painting__borders|BorderSide)")))(),
    Color: () => (T.Color = dart.constFn(dart_rti.findType("ui|Color")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    __ToBorder: () => (T.__ToBorder = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border({color:ui|Color,strokeAlign:core|double,style:flutter__src__painting__borders|BorderStyle,width:core|double})")))(),
    BorderAndBorderToBorder: () => (T.BorderAndBorderToBorder = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border(flutter__src__painting__box_border|Border,flutter__src__painting__box_border|Border)")))(),
    EdgeInsetsGeometry: () => (T.EdgeInsetsGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__edge_insets|EdgeInsetsGeometry")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    VoidToSetOfColor: () => (T.VoidToSetOfColor = dart.constFn(dart_rti.findType("core|Set<ui|Color>()")))(),
    ShapeBorder__ToBorderN: () => (T.ShapeBorder__ToBorderN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border?(flutter__src__painting__borders|ShapeBorder{reversed:core|bool})")))(),
    doubleToBorder: () => (T.doubleToBorder = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border(core|double)")))(),
    BorderNAndBorderNAnddoubleToBorderN: () => (T.BorderNAndBorderNAnddoubleToBorderN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|Border?(flutter__src__painting__box_border|Border?,flutter__src__painting__box_border|Border?,core|double)")))(),
    CanvasAndRect__Tovoid$1: () => (T.CanvasAndRect__Tovoid$1 = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect{borderRadius:flutter__src__painting__border_radius|BorderRadius?,shape:flutter__src__painting__box_border|BoxShape,textDirection:ui|TextDirection?})")))(),
    BorderSide: () => (T.BorderSide = dart.constFn(dart_rti.findType("flutter__src__painting__borders|BorderSide")))(),
    BorderDirectionalAndBorderDirectionalToBorderDirectional: () => (T.BorderDirectionalAndBorderDirectionalToBorderDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BorderDirectional(flutter__src__painting__box_border|BorderDirectional,flutter__src__painting__box_border|BorderDirectional)")))(),
    doubleToBorderDirectional: () => (T.doubleToBorderDirectional = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BorderDirectional(core|double)")))(),
    BorderDirectionalNAndBorderDirectionalNAnddoubleToBorderDirectionalN: () => (T.BorderDirectionalNAndBorderDirectionalNAnddoubleToBorderDirectionalN = dart.constFn(dart_rti.findType("flutter__src__painting__box_border|BorderDirectional?(flutter__src__painting__box_border|BorderDirectional?,flutter__src__painting__box_border|BorderDirectional?,core|double)")))()
  };
  var G = {
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNode())))(),
    LinkedHashSetOfColor: () => (G.LinkedHashSetOfColor = dart.constFn(collection.LinkedHashSet$(T.Color())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rectangle",
        [_Enum_index]: 0
      }, box_border.BoxShape.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "circle",
        [_Enum_index]: 1
      }, box_border.BoxShape.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], T.BoxShape());
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 0
      }, borders.BorderStyle.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [Color_value]: 4278190080.0
      }, ui.Color.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[4] || CT.C4,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[5] || CT.C5
      }, borders.BorderSide.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      }, borders.BorderStyle.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = [
    "package:flutter/src/painting/box_border.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/box_border.dart",
    "package:flutter/src/painting/borders.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  box_border.BoxShape = class BoxShape extends core._Enum {
    [_enumToString]() {
      return "BoxShape." + this[_name];
    }
  };
  (box_border.BoxShape.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(box_border.BoxShape).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = box_border.BoxShape.prototype;
  dart.addTypeTests(box_border.BoxShape);
  dart.addRtiResources(box_border.BoxShape, ["flutter__src__painting__box_border|BoxShape"]);
  dart.addTypeCaches(box_border.BoxShape);
  dart.setMethodSignature(box_border.BoxShape, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(box_border.BoxShape))));
  dart.setLibraryUri(box_border.BoxShape, I[0]);
  dart.setStaticFieldSignature(box_border.BoxShape, () => ['values', 'rectangle', 'circle']);
  dart.defineLazy(box_border.BoxShape, {
    /*box_border.BoxShape.values*/get values() {
      return C[0] || CT.C0;
    },
    /*box_border.BoxShape.rectangle*/get rectangle() {
      return C[1] || CT.C1;
    },
    /*box_border.BoxShape.circle*/get circle() {
      return C[2] || CT.C2;
    }
  }, false);
  var _is = dart.privateName(dart_rti, "_is");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  box_border.BoxBorder = class BoxBorder extends borders.ShapeBorder {
    add(other, opts) {
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      return null;
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (T.BorderN()[_is](a) && T.BorderN()[_is](b)) {
        return box_border.Border.lerp(a, b, t);
      }
      if (T.BorderDirectionalN()[_is](a) && T.BorderDirectionalN()[_is](b)) {
        return box_border.BorderDirectional.lerp(a, b, t);
      }
      if (T.Border()[_is](b) && T.BorderDirectional()[_is](a)) {
        let c = b;
        b = a;
        a = c;
        t = 1.0 - t;
      }
      if (T.Border()[_is](a) && T.BorderDirectional()[_is](b)) {
        if (dart.equals(b.start, borders.BorderSide.none) && dart.equals(b.end, borders.BorderSide.none)) {
          return new box_border.Border.new({top: borders.BorderSide.lerp(a.top, b.top, t), right: borders.BorderSide.lerp(a.right, borders.BorderSide.none, t), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t), left: borders.BorderSide.lerp(a.left, borders.BorderSide.none, t)});
        }
        if (dart.equals(a.left, borders.BorderSide.none) && dart.equals(a.right, borders.BorderSide.none)) {
          return new box_border.BorderDirectional.new({top: borders.BorderSide.lerp(a.top, b.top, t), start: borders.BorderSide.lerp(borders.BorderSide.none, b.start, t), end: borders.BorderSide.lerp(borders.BorderSide.none, b.end, t), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t)});
        }
        if (t < 0.5) {
          return new box_border.Border.new({top: borders.BorderSide.lerp(a.top, b.top, t), right: borders.BorderSide.lerp(a.right, borders.BorderSide.none, t * 2.0), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t), left: borders.BorderSide.lerp(a.left, borders.BorderSide.none, t * 2.0)});
        }
        return new box_border.BorderDirectional.new({top: borders.BorderSide.lerp(a.top, b.top, t), start: borders.BorderSide.lerp(borders.BorderSide.none, b.start, (t - 0.5) * 2.0), end: borders.BorderSide.lerp(borders.BorderSide.none, b.end, (t - 0.5) * 2.0), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t)});
      }
      dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("BoxBorder.lerp can only interpolate Border and BorderDirectional classes."), new assertions.ErrorDescription.new("BoxBorder.lerp() was called with two objects of type " + dart.str(dart.runtimeType(a)) + " and " + dart.str(dart.runtimeType(b)) + ":\n" + "  " + dart.str(a) + "\n" + "  " + dart.str(b) + "\n" + "However, only Border and BorderDirectional classes are supported by this method."), new assertions.ErrorHint.new("For a more general interpolation method, consider using ShapeBorder.lerp instead.")])));
    }
    getInnerPath(rect, opts) {
      let t$362;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(textDirection != null)) dart.assertFailed("The textDirection argument to " + dart.str(dart.runtimeType(this)) + ".getInnerPath must not be null.", I[2], 173, 12, "textDirection != null");
      t$362 = ui.Path.new();
      return (() => {
        t$362.addRect(this.dimensions.resolve(textDirection).deflateRect(rect));
        return t$362;
      })();
    }
    getOuterPath(rect, opts) {
      let t$362;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(textDirection != null)) dart.assertFailed("The textDirection argument to " + dart.str(dart.runtimeType(this)) + ".getOuterPath must not be null.", I[2], 180, 12, "textDirection != null");
      t$362 = ui.Path.new();
      return (() => {
        t$362.addRect(rect);
        return t$362;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      canvas.drawRect(rect, paint);
    }
    get preferPaintInterior() {
      return true;
    }
    static _paintUniformBorderWithRadius(canvas, rect, side, borderRadius) {
      let t$362, t$362$;
      if (!(side.style !== borders.BorderStyle.none)) dart.assertFailed(null, I[2], 228, 12, "side.style != BorderStyle.none");
      let paint = (t$362 = ui.Paint.new(), (() => {
        t$362.color = side.color;
        return t$362;
      })());
      let width = side.width;
      if (width === 0.0) {
        t$362$ = paint;
        (() => {
          t$362$.style = ui.PaintingStyle.stroke;
          t$362$.strokeWidth = 0.0;
          return t$362$;
        })();
        canvas.drawRRect(borderRadius.toRRect(rect), paint);
      } else {
        let borderRect = borderRadius.toRRect(rect);
        let inner = borderRect.deflate(side.strokeInset);
        let outer = borderRect.inflate(side.strokeOutset);
        canvas.drawDRRect(outer, inner, paint);
      }
    }
    static paintNonUniformBorder(canvas, rect, opts) {
      let t$362, t$362$;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let shape = opts && 'shape' in opts ? opts.shape : C[1] || CT.C1;
      let top = opts && 'top' in opts ? opts.top : C[3] || CT.C3;
      let right = opts && 'right' in opts ? opts.right : C[3] || CT.C3;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[3] || CT.C3;
      let left = opts && 'left' in opts ? opts.left : C[3] || CT.C3;
      let color = opts && 'color' in opts ? opts.color : null;
      let borderRect = null;
      switch (shape) {
        case C[1] || CT.C1:
          {
            borderRect = (t$362 = borderRadius, t$362 == null ? border_radius.BorderRadius.zero : t$362).resolve(textDirection).toRRect(rect);
            break;
          }
        case C[2] || CT.C2:
          {
            if (!(borderRadius == null)) dart.assertFailed("A borderRadius cannot be given when shape is a BoxShape.circle.", I[2], 271, 16, "borderRadius == null");
            borderRect = new ui.RRect.fromRectAndRadius(new ui.Rect.fromCircle({center: rect.center, radius: rect.shortestSide / 2.0}), new ui.Radius.circular(rect.width));
          }
      }
      let paint = (t$362$ = ui.Paint.new(), (() => {
        t$362$.color = color;
        return t$362$;
      })());
      let inner = box_border.BoxBorder._deflateRRect(borderRect, new edge_insets.EdgeInsets.fromLTRB(left.strokeInset, top.strokeInset, right.strokeInset, bottom.strokeInset));
      let outer = box_border.BoxBorder._inflateRRect(borderRect, new edge_insets.EdgeInsets.fromLTRB(left.strokeOutset, top.strokeOutset, right.strokeOutset, bottom.strokeOutset));
      canvas.drawDRRect(outer, inner, paint);
    }
    static _inflateRRect(rect, insets) {
      return new ui.RRect.fromLTRBAndCorners(rect.left - insets.left, rect.top - insets.top, rect.right + insets.right, rect.bottom + insets.bottom, {topLeft: rect.tlRadius['+'](new ui.Radius.elliptical(insets.left, insets.top)).clamp({minimum: ui.Radius.zero}), topRight: rect.trRadius['+'](new ui.Radius.elliptical(insets.right, insets.top)).clamp({minimum: ui.Radius.zero}), bottomRight: rect.brRadius['+'](new ui.Radius.elliptical(insets.right, insets.bottom)).clamp({minimum: ui.Radius.zero}), bottomLeft: rect.blRadius['+'](new ui.Radius.elliptical(insets.left, insets.bottom)).clamp({minimum: ui.Radius.zero})});
    }
    static _deflateRRect(rect, insets) {
      return new ui.RRect.fromLTRBAndCorners(rect.left + insets.left, rect.top + insets.top, rect.right - insets.right, rect.bottom - insets.bottom, {topLeft: rect.tlRadius['-'](new ui.Radius.elliptical(insets.left, insets.top)).clamp({minimum: ui.Radius.zero}), topRight: rect.trRadius['-'](new ui.Radius.elliptical(insets.right, insets.top)).clamp({minimum: ui.Radius.zero}), bottomRight: rect.brRadius['-'](new ui.Radius.elliptical(insets.right, insets.bottom)).clamp({minimum: ui.Radius.zero}), bottomLeft: rect.blRadius['-'](new ui.Radius.elliptical(insets.left, insets.bottom)).clamp({minimum: ui.Radius.zero})});
    }
    static _paintUniformBorderWithCircle(canvas, rect, side) {
      if (!(side.style !== borders.BorderStyle.none)) dart.assertFailed(null, I[2], 310, 12, "side.style != BorderStyle.none");
      let radius = (rect.shortestSide + side.strokeOffset) / 2;
      canvas.drawCircle(rect.center, radius, side.toPaint());
    }
    static _paintUniformBorderWithRectangle(canvas, rect, side) {
      if (!(side.style !== borders.BorderStyle.none)) dart.assertFailed(null, I[2], 316, 12, "side.style != BorderStyle.none");
      canvas.drawRect(rect.inflate(side.strokeOffset / 2), side.toPaint());
    }
  };
  (box_border.BoxBorder.new = function() {
    dart.global.Object.getPrototypeOf(box_border.BoxBorder).new.call(this);
    ;
  }).prototype = box_border.BoxBorder.prototype;
  dart.addTypeTests(box_border.BoxBorder);
  dart.addRtiResources(box_border.BoxBorder, ["flutter__src__painting__box_border|BoxBorder"]);
  dart.addTypeCaches(box_border.BoxBorder);
  dart.setMethodSignature(box_border.BoxBorder, () => dart.global.Object.setPrototypeOf({
    add: T.ShapeBorder__ToBoxBorderN(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(box_border.BoxBorder))));
  dart.setStaticMethodSignature(box_border.BoxBorder, () => ['lerp', '_paintUniformBorderWithRadius', 'paintNonUniformBorder', '_inflateRRect', '_deflateRRect', '_paintUniformBorderWithCircle', '_paintUniformBorderWithRectangle']);
  dart.setLibraryUri(box_border.BoxBorder, I[0]);
  var top$ = dart.privateName(box_border, "Border.top");
  var right$ = dart.privateName(box_border, "Border.right");
  var bottom$ = dart.privateName(box_border, "Border.bottom");
  var left$ = dart.privateName(box_border, "Border.left");
  var _widthIsUniform = dart.privateName(box_border, "_widthIsUniform");
  var _colorIsUniform = dart.privateName(box_border, "_colorIsUniform");
  var _styleIsUniform = dart.privateName(box_border, "_styleIsUniform");
  var _strokeAlignIsUniform = dart.privateName(box_border, "_strokeAlignIsUniform");
  var _distinctVisibleColors = dart.privateName(box_border, "_distinctVisibleColors");
  var _hasHairlineBorder = dart.privateName(box_border, "_hasHairlineBorder");
  box_border.Border = class Border extends box_border.BoxBorder {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    static ['_#new#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[3] || CT.C3;
      let right = opts && 'right' in opts ? opts.right : C[3] || CT.C3;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[3] || CT.C3;
      let left = opts && 'left' in opts ? opts.left : C[3] || CT.C3;
      return new box_border.Border.new({top: top, right: right, bottom: bottom, left: left});
    }
    static ['_#fromBorderSide#tearOff'](side) {
      return new box_border.Border.fromBorderSide(side);
    }
    static ['_#symmetric#tearOff'](opts) {
      let vertical = opts && 'vertical' in opts ? opts.vertical : C[3] || CT.C3;
      let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C[3] || CT.C3;
      return new box_border.Border.symmetric({vertical: vertical, horizontal: horizontal});
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C[5] || CT.C5;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[6] || CT.C6;
      let strokeAlign = opts && 'strokeAlign' in opts ? opts.strokeAlign : -1;
      let side = new borders.BorderSide.new({color: color, width: width, style: style, strokeAlign: strokeAlign});
      return new box_border.Border.fromBorderSide(side);
    }
    static ['_#all#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[5] || CT.C5;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[6] || CT.C6;
      let strokeAlign = opts && 'strokeAlign' in opts ? opts.strokeAlign : -1;
      return box_border.Border.all({color: color, width: width, style: style, strokeAlign: strokeAlign});
    }
    static merge(a, b) {
      if (!borders.BorderSide.canMerge(a.top, b.top)) dart.assertFailed(null, I[2], 437, 12, "BorderSide.canMerge(a.top, b.top)");
      if (!borders.BorderSide.canMerge(a.right, b.right)) dart.assertFailed(null, I[2], 438, 12, "BorderSide.canMerge(a.right, b.right)");
      if (!borders.BorderSide.canMerge(a.bottom, b.bottom)) dart.assertFailed(null, I[2], 439, 12, "BorderSide.canMerge(a.bottom, b.bottom)");
      if (!borders.BorderSide.canMerge(a.left, b.left)) dart.assertFailed(null, I[2], 440, 12, "BorderSide.canMerge(a.left, b.left)");
      return new box_border.Border.new({top: borders.BorderSide.merge(a.top, b.top), right: borders.BorderSide.merge(a.right, b.right), bottom: borders.BorderSide.merge(a.bottom, b.bottom), left: borders.BorderSide.merge(a.left, b.left)});
    }
    get dimensions() {
      if (this[_widthIsUniform]) {
        return new edge_insets.EdgeInsets.all(this.top.strokeInset);
      }
      return new edge_insets.EdgeInsets.fromLTRB(this.left.strokeInset, this.top.strokeInset, this.right.strokeInset, this.bottom.strokeInset);
    }
    get isUniform() {
      return this[_colorIsUniform] && this[_widthIsUniform] && this[_styleIsUniform] && this[_strokeAlignIsUniform];
    }
    get [_colorIsUniform]() {
      let topColor = this.top.color;
      return dart.equals(this.left.color, topColor) && dart.equals(this.bottom.color, topColor) && dart.equals(this.right.color, topColor);
    }
    get [_widthIsUniform]() {
      let topWidth = this.top.width;
      return this.left.width === topWidth && this.bottom.width === topWidth && this.right.width === topWidth;
    }
    get [_styleIsUniform]() {
      let topStyle = this.top.style;
      return this.left.style === topStyle && this.bottom.style === topStyle && this.right.style === topStyle;
    }
    get [_strokeAlignIsUniform]() {
      let topStrokeAlign = this.top.strokeAlign;
      return this.left.strokeAlign === topStrokeAlign && this.bottom.strokeAlign === topStrokeAlign && this.right.strokeAlign === topStrokeAlign;
    }
    [_distinctVisibleColors]() {
      let distinctVisibleColors = G.LinkedHashSetOfColor().new();
      if (this.top.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.top.color);
      }
      if (this.right.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.right.color);
      }
      if (this.bottom.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.bottom.color);
      }
      if (this.left.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.left.color);
      }
      return distinctVisibleColors;
    }
    get [_hasHairlineBorder]() {
      return this.top.style === borders.BorderStyle.solid && this.top.width === 0.0 || this.right.style === borders.BorderStyle.solid && this.right.width === 0.0 || this.bottom.style === borders.BorderStyle.solid && this.bottom.width === 0.0 || this.left.style === borders.BorderStyle.solid && this.left.width === 0.0;
    }
    add(other, opts) {
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      if (T.Border()[_is](other) && borders.BorderSide.canMerge(this.top, other.top) && borders.BorderSide.canMerge(this.right, other.right) && borders.BorderSide.canMerge(this.bottom, other.bottom) && borders.BorderSide.canMerge(this.left, other.left)) {
        return box_border.Border.merge(this, other);
      }
      return null;
    }
    scale(t) {
      return new box_border.Border.new({top: this.top.scale(t), right: this.right.scale(t), bottom: this.bottom.scale(t), left: this.left.scale(t)});
    }
    lerpFrom(a, t) {
      if (T.Border()[_is](a)) {
        return box_border.Border.lerp(a, this, t);
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.Border()[_is](b)) {
        return box_border.Border.lerp(this, b, t);
      }
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      return new box_border.Border.new({top: borders.BorderSide.lerp(a.top, b.top, t), right: borders.BorderSide.lerp(a.right, b.right, t), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t), left: borders.BorderSide.lerp(a.left, b.left, t)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let shape = opts && 'shape' in opts ? opts.shape : C[1] || CT.C1;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      if (this.isUniform) {
        switch (this.top.style) {
          case C[4] || CT.C4:
            {
              return;
            }
          case C[6] || CT.C6:
            {
              switch (shape) {
                case C[2] || CT.C2:
                  {
                    if (!(borderRadius == null)) dart.assertFailed("A borderRadius cannot be given when shape is a BoxShape.circle.", I[2], 621, 22, "borderRadius == null");
                    box_border.BoxBorder._paintUniformBorderWithCircle(canvas, rect, this.top);
                    break;
                  }
                case C[1] || CT.C1:
                  {
                    if (borderRadius != null && !dart.equals(borderRadius, border_radius.BorderRadius.zero)) {
                      box_border.BoxBorder._paintUniformBorderWithRadius(canvas, rect, this.top, borderRadius);
                      return;
                    }
                    box_border.BoxBorder._paintUniformBorderWithRectangle(canvas, rect, this.top);
                  }
              }
              return;
            }
        }
      }
      if (this[_styleIsUniform] && this.top.style === borders.BorderStyle.none) {
        return;
      }
      let visibleColors = this[_distinctVisibleColors]();
      let hasHairlineBorder = this[_hasHairlineBorder];
      if (visibleColors[$length] === 1 && !hasHairlineBorder && (shape === box_border.BoxShape.circle || borderRadius != null && !dart.equals(borderRadius, border_radius.BorderRadius.zero))) {
        box_border.BoxBorder.paintNonUniformBorder(canvas, rect, {shape: shape, borderRadius: borderRadius, textDirection: textDirection, top: this.top.style === borders.BorderStyle.none ? borders.BorderSide.none : this.top, right: this.right.style === borders.BorderStyle.none ? borders.BorderSide.none : this.right, bottom: this.bottom.style === borders.BorderStyle.none ? borders.BorderSide.none : this.bottom, left: this.left.style === borders.BorderStyle.none ? borders.BorderSide.none : this.left, color: visibleColors[$first]});
        return;
      }
      if (!dart.fn(() => {
        if (hasHairlineBorder) {
          if (!(borderRadius == null || dart.equals(borderRadius, border_radius.BorderRadius.zero))) dart.assertFailed("A hairline border like `BorderSide(width: 0.0, style: BorderStyle.solid)` can only be drawn when BorderRadius is zero or null.", I[2], 661, 16, "borderRadius == null || borderRadius == BorderRadius.zero");
        }
        if (borderRadius != null && !dart.equals(borderRadius, border_radius.BorderRadius.zero)) {
          dart.throw(new assertions.FlutterError.fromParts((() => {
            let t$362 = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("A borderRadius can only be given on borders with uniform colors."), new assertions.ErrorDescription.new("The following is not uniform:")]);
            if (!this[_colorIsUniform]) t$362.push(new assertions.ErrorDescription.new("BorderSide.color"));
            return t$362;
          })()));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 659, 13, "() {\r\n      if (hasHairlineBorder) {\r\n        assert(borderRadius == null || borderRadius == BorderRadius.zero,\r\n            'A hairline border like `BorderSide(width: 0.0, style: BorderStyle.solid)` can only be drawn when BorderRadius is zero or null.');\r\n      }\r\n      if (borderRadius != null && borderRadius != BorderRadius.zero) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('A borderRadius can only be given on borders with uniform colors.'),\r\n          ErrorDescription('The following is not uniform:'),\r\n          if (!_colorIsUniform) ErrorDescription('BorderSide.color'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (!dart.fn(() => {
        if (shape !== box_border.BoxShape.rectangle) {
          dart.throw(new assertions.FlutterError.fromParts((() => {
            let t$363 = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("A Border can only be drawn as a circle on borders with uniform colors."), new assertions.ErrorDescription.new("The following is not uniform:")]);
            if (!this[_colorIsUniform]) t$363.push(new assertions.ErrorDescription.new("BorderSide.color"));
            return t$363;
          })()));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 673, 12, "() {\r\n      if (shape != BoxShape.rectangle) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('A Border can only be drawn as a circle on borders with uniform colors.'),\r\n          ErrorDescription('The following is not uniform:'),\r\n          if (!_colorIsUniform) ErrorDescription('BorderSide.color'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (!dart.fn(() => {
        if (!this[_strokeAlignIsUniform] || this.top.strokeAlign !== -1) {
          dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("A Border can only draw strokeAlign different than BorderSide.strokeAlignInside on borders with uniform colors.")])));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 683, 12, "() {\r\n      if (!_strokeAlignIsUniform || top.strokeAlign != BorderSide.strokeAlignInside) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('A Border can only draw strokeAlign different than BorderSide.strokeAlignInside on borders with uniform colors.'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      borders.paintBorder(canvas, rect, {top: this.top, right: this.right, bottom: this.bottom, left: this.left});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.Border()[_is](other) && dart.equals(other.top, this.top) && dart.equals(other.right, this.right) && dart.equals(other.bottom, this.bottom) && dart.equals(other.left, this.left);
    }
    get hashCode() {
      return core.Object.hash(this.top, this.right, this.bottom, this.left);
    }
    toString() {
      if (this.isUniform) {
        return object.objectRuntimeType(this, "Border") + ".all(" + dart.str(this.top) + ")";
      }
      let $arguments = (() => {
        let t$364 = G.JSArrayOfString().of([]);
        if (!dart.equals(this.top, borders.BorderSide.none)) t$364.push("top: " + dart.str(this.top));
        if (!dart.equals(this.right, borders.BorderSide.none)) t$364.push("right: " + dart.str(this.right));
        if (!dart.equals(this.bottom, borders.BorderSide.none)) t$364.push("bottom: " + dart.str(this.bottom));
        if (!dart.equals(this.left, borders.BorderSide.none)) t$364.push("left: " + dart.str(this.left));
        return t$364;
      })();
      return object.objectRuntimeType(this, "Border") + "(" + $arguments[$join](", ") + ")";
    }
  };
  (box_border.Border.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[3] || CT.C3;
    let right = opts && 'right' in opts ? opts.right : C[3] || CT.C3;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[3] || CT.C3;
    let left = opts && 'left' in opts ? opts.left : C[3] || CT.C3;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    this[left$] = left;
    dart.global.Object.getPrototypeOf(box_border.Border).new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.fromBorderSide = function(side) {
    this[top$] = side;
    this[right$] = side;
    this[bottom$] = side;
    this[left$] = side;
    dart.global.Object.getPrototypeOf(box_border.Border).new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : C[3] || CT.C3;
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C[3] || CT.C3;
    this[left$] = vertical;
    this[top$] = horizontal;
    this[right$] = vertical;
    this[bottom$] = horizontal;
    dart.global.Object.getPrototypeOf(box_border.Border).new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  dart.addTypeTests(box_border.Border);
  dart.addRtiResources(box_border.Border, ["flutter__src__painting__box_border|Border"]);
  dart.addTypeCaches(box_border.Border);
  dart.setMethodSignature(box_border.Border, () => dart.global.Object.setPrototypeOf({
    [_distinctVisibleColors]: T.VoidToSetOfColor(),
    add: T.ShapeBorder__ToBorderN(),
    scale: T.doubleToBorder(),
    paint: T.CanvasAndRect__Tovoid$1()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(box_border.Border))));
  dart.setStaticMethodSignature(box_border.Border, () => ['all', 'merge', 'lerp']);
  dart.setGetterSignature(box_border.Border, () => dart.global.Object.setPrototypeOf({
    dimensions: T.EdgeInsetsGeometry(),
    isUniform: T.bool(),
    [_colorIsUniform]: T.bool(),
    [_widthIsUniform]: T.bool(),
    [_styleIsUniform]: T.bool(),
    [_strokeAlignIsUniform]: T.bool(),
    [_hasHairlineBorder]: T.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(box_border.Border))));
  dart.setLibraryUri(box_border.Border, I[0]);
  dart.setFieldSignature(box_border.Border, () => dart.global.Object.setPrototypeOf({
    top: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    right: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    bottom: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    left: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(box_border.Border))));
  dart.defineExtensionMethods(box_border.Border, ['_equals', 'toString']);
  dart.defineExtensionAccessors(box_border.Border, ['hashCode']);
  var top$0 = dart.privateName(box_border, "BorderDirectional.top");
  var start$ = dart.privateName(box_border, "BorderDirectional.start");
  var end$ = dart.privateName(box_border, "BorderDirectional.end");
  var bottom$0 = dart.privateName(box_border, "BorderDirectional.bottom");
  box_border.BorderDirectional = class BorderDirectional extends box_border.BoxBorder {
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    static ['_#new#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[3] || CT.C3;
      let start = opts && 'start' in opts ? opts.start : C[3] || CT.C3;
      let end = opts && 'end' in opts ? opts.end : C[3] || CT.C3;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[3] || CT.C3;
      return new box_border.BorderDirectional.new({top: top, start: start, end: end, bottom: bottom});
    }
    static merge(a, b) {
      if (!borders.BorderSide.canMerge(a.top, b.top)) dart.assertFailed(null, I[2], 771, 12, "BorderSide.canMerge(a.top, b.top)");
      if (!borders.BorderSide.canMerge(a.start, b.start)) dart.assertFailed(null, I[2], 772, 12, "BorderSide.canMerge(a.start, b.start)");
      if (!borders.BorderSide.canMerge(a.end, b.end)) dart.assertFailed(null, I[2], 773, 12, "BorderSide.canMerge(a.end, b.end)");
      if (!borders.BorderSide.canMerge(a.bottom, b.bottom)) dart.assertFailed(null, I[2], 774, 12, "BorderSide.canMerge(a.bottom, b.bottom)");
      return new box_border.BorderDirectional.new({top: borders.BorderSide.merge(a.top, b.top), start: borders.BorderSide.merge(a.start, b.start), end: borders.BorderSide.merge(a.end, b.end), bottom: borders.BorderSide.merge(a.bottom, b.bottom)});
    }
    get dimensions() {
      if (this.isUniform) {
        return new edge_insets.EdgeInsetsDirectional.all(this.top.strokeInset);
      }
      return new edge_insets.EdgeInsetsDirectional.fromSTEB(this.start.strokeInset, this.top.strokeInset, this.end.strokeInset, this.bottom.strokeInset);
    }
    get isUniform() {
      return this[_colorIsUniform] && this[_widthIsUniform] && this[_styleIsUniform] && this[_strokeAlignIsUniform];
    }
    get [_colorIsUniform]() {
      let topColor = this.top.color;
      return dart.equals(this.start.color, topColor) && dart.equals(this.bottom.color, topColor) && dart.equals(this.end.color, topColor);
    }
    get [_widthIsUniform]() {
      let topWidth = this.top.width;
      return this.start.width === topWidth && this.bottom.width === topWidth && this.end.width === topWidth;
    }
    get [_styleIsUniform]() {
      let topStyle = this.top.style;
      return this.start.style === topStyle && this.bottom.style === topStyle && this.end.style === topStyle;
    }
    get [_strokeAlignIsUniform]() {
      let topStrokeAlign = this.top.strokeAlign;
      return this.start.strokeAlign === topStrokeAlign && this.bottom.strokeAlign === topStrokeAlign && this.end.strokeAlign === topStrokeAlign;
    }
    [_distinctVisibleColors]() {
      let distinctVisibleColors = G.LinkedHashSetOfColor().new();
      if (this.top.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.top.color);
      }
      if (this.end.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.end.color);
      }
      if (this.bottom.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.bottom.color);
      }
      if (this.start.style !== borders.BorderStyle.none) {
        distinctVisibleColors.add(this.start.color);
      }
      return distinctVisibleColors;
    }
    get [_hasHairlineBorder]() {
      return this.top.style === borders.BorderStyle.solid && this.top.width === 0.0 || this.end.style === borders.BorderStyle.solid && this.end.width === 0.0 || this.bottom.style === borders.BorderStyle.solid && this.bottom.width === 0.0 || this.start.style === borders.BorderStyle.solid && this.start.width === 0.0;
    }
    add(other, opts) {
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      if (T.BorderDirectional()[_is](other)) {
        let typedOther = other;
        if (borders.BorderSide.canMerge(this.top, typedOther.top) && borders.BorderSide.canMerge(this.start, typedOther.start) && borders.BorderSide.canMerge(this.end, typedOther.end) && borders.BorderSide.canMerge(this.bottom, typedOther.bottom)) {
          return box_border.BorderDirectional.merge(this, typedOther);
        }
        return null;
      }
      if (T.Border()[_is](other)) {
        let typedOther = other;
        if (!borders.BorderSide.canMerge(typedOther.top, this.top) || !borders.BorderSide.canMerge(typedOther.bottom, this.bottom)) {
          return null;
        }
        if (!dart.equals(this.start, borders.BorderSide.none) || !dart.equals(this.end, borders.BorderSide.none)) {
          if (!dart.equals(typedOther.left, borders.BorderSide.none) || !dart.equals(typedOther.right, borders.BorderSide.none)) {
            return null;
          }
          if (!dart.equals(typedOther.left, borders.BorderSide.none)) dart.assertFailed(null, I[2], 891, 16, "typedOther.left == BorderSide.none");
          if (!dart.equals(typedOther.right, borders.BorderSide.none)) dart.assertFailed(null, I[2], 892, 16, "typedOther.right == BorderSide.none");
          return new box_border.BorderDirectional.new({top: borders.BorderSide.merge(typedOther.top, this.top), start: this.start, end: this.end, bottom: borders.BorderSide.merge(typedOther.bottom, this.bottom)});
        }
        if (!dart.equals(this.start, borders.BorderSide.none)) dart.assertFailed(null, I[2], 900, 14, "start == BorderSide.none");
        if (!dart.equals(this.end, borders.BorderSide.none)) dart.assertFailed(null, I[2], 901, 14, "end == BorderSide.none");
        return new box_border.Border.new({top: borders.BorderSide.merge(typedOther.top, this.top), right: typedOther.right, bottom: borders.BorderSide.merge(typedOther.bottom, this.bottom), left: typedOther.left});
      }
      return null;
    }
    scale(t) {
      return new box_border.BorderDirectional.new({top: this.top.scale(t), start: this.start.scale(t), end: this.end.scale(t), bottom: this.bottom.scale(t)});
    }
    lerpFrom(a, t) {
      if (T.BorderDirectional()[_is](a)) {
        return box_border.BorderDirectional.lerp(a, this, t);
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.BorderDirectional()[_is](b)) {
        return box_border.BorderDirectional.lerp(this, b, t);
      }
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      return new box_border.BorderDirectional.new({top: borders.BorderSide.lerp(a.top, b.top, t), end: borders.BorderSide.lerp(a.end, b.end, t), bottom: borders.BorderSide.lerp(a.bottom, b.bottom, t), start: borders.BorderSide.lerp(a.start, b.start, t)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let shape = opts && 'shape' in opts ? opts.shape : C[1] || CT.C1;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      if (this.isUniform) {
        switch (this.top.style) {
          case C[4] || CT.C4:
            {
              return;
            }
          case C[6] || CT.C6:
            {
              switch (shape) {
                case C[2] || CT.C2:
                  {
                    if (!(borderRadius == null)) dart.assertFailed("A borderRadius cannot be given when shape is a BoxShape.circle.", I[2], 999, 22, "borderRadius == null");
                    box_border.BoxBorder._paintUniformBorderWithCircle(canvas, rect, this.top);
                    break;
                  }
                case C[1] || CT.C1:
                  {
                    if (borderRadius != null && !dart.equals(borderRadius, border_radius.BorderRadius.zero)) {
                      box_border.BoxBorder._paintUniformBorderWithRadius(canvas, rect, this.top, borderRadius);
                      return;
                    }
                    box_border.BoxBorder._paintUniformBorderWithRectangle(canvas, rect, this.top);
                  }
              }
              return;
            }
        }
      }
      if (this[_styleIsUniform] && this.top.style === borders.BorderStyle.none) {
        return;
      }
      let left = null;
      let right = null;
      if (!(textDirection != null)) dart.assertFailed("Non-uniform BorderDirectional objects require a TextDirection when painting.", I[2], 1017, 12, "textDirection != null");
      switch (dart.nullCheck(textDirection)) {
        case C[7] || CT.C7:
          {
            left = this.end;
            right = this.start;
            break;
          }
        case C[8] || CT.C8:
          {
            left = this.start;
            right = this.end;
          }
      }
      let visibleColors = this[_distinctVisibleColors]();
      let hasHairlineBorder = this[_hasHairlineBorder];
      if (visibleColors[$length] === 1 && !hasHairlineBorder && (shape === box_border.BoxShape.circle || borderRadius != null && !dart.equals(borderRadius, border_radius.BorderRadius.zero))) {
        box_border.BoxBorder.paintNonUniformBorder(canvas, rect, {shape: shape, borderRadius: borderRadius, textDirection: textDirection, top: this.top.style === borders.BorderStyle.none ? borders.BorderSide.none : this.top, right: right.style === borders.BorderStyle.none ? borders.BorderSide.none : right, bottom: this.bottom.style === borders.BorderStyle.none ? borders.BorderSide.none : this.bottom, left: left.style === borders.BorderStyle.none ? borders.BorderSide.none : left, color: visibleColors[$first]});
        return;
      }
      if (hasHairlineBorder) {
        if (!(borderRadius == null || dart.equals(borderRadius, border_radius.BorderRadius.zero))) dart.assertFailed("A side like `BorderSide(width: 0.0, style: BorderStyle.solid)` can only be drawn when BorderRadius is zero or null.", I[2], 1047, 14, "borderRadius == null || borderRadius == BorderRadius.zero");
      }
      if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for borders with uniform colors.", I[2], 1049, 12, "borderRadius == null");
      if (!(shape === box_border.BoxShape.rectangle)) dart.assertFailed("A Border can only be drawn as a circle on borders with uniform colors.", I[2], 1050, 12, "shape == BoxShape.rectangle");
      if (!(this[_strokeAlignIsUniform] && this.top.strokeAlign === -1)) dart.assertFailed("A Border can only draw strokeAlign different than strokeAlignInside on borders with uniform colors.", I[2], 1051, 12, "_strokeAlignIsUniform && top.strokeAlign == BorderSide.strokeAlignInside");
      borders.paintBorder(canvas, rect, {top: this.top, left: left, bottom: this.bottom, right: right});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.BorderDirectional()[_is](other) && dart.equals(other.top, this.top) && dart.equals(other.start, this.start) && dart.equals(other.end, this.end) && dart.equals(other.bottom, this.bottom);
    }
    get hashCode() {
      return core.Object.hash(this.top, this.start, this.end, this.bottom);
    }
    toString() {
      let $arguments = (() => {
        let t$365 = G.JSArrayOfString().of([]);
        if (!dart.equals(this.top, borders.BorderSide.none)) t$365.push("top: " + dart.str(this.top));
        if (!dart.equals(this.start, borders.BorderSide.none)) t$365.push("start: " + dart.str(this.start));
        if (!dart.equals(this.end, borders.BorderSide.none)) t$365.push("end: " + dart.str(this.end));
        if (!dart.equals(this.bottom, borders.BorderSide.none)) t$365.push("bottom: " + dart.str(this.bottom));
        return t$365;
      })();
      return object.objectRuntimeType(this, "BorderDirectional") + "(" + $arguments[$join](", ") + ")";
    }
  };
  (box_border.BorderDirectional.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[3] || CT.C3;
    let start = opts && 'start' in opts ? opts.start : C[3] || CT.C3;
    let end = opts && 'end' in opts ? opts.end : C[3] || CT.C3;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[3] || CT.C3;
    this[top$0] = top;
    this[start$] = start;
    this[end$] = end;
    this[bottom$0] = bottom;
    dart.global.Object.getPrototypeOf(box_border.BorderDirectional).new.call(this);
    ;
  }).prototype = box_border.BorderDirectional.prototype;
  dart.addTypeTests(box_border.BorderDirectional);
  dart.addRtiResources(box_border.BorderDirectional, ["flutter__src__painting__box_border|BorderDirectional"]);
  dart.addTypeCaches(box_border.BorderDirectional);
  dart.setMethodSignature(box_border.BorderDirectional, () => dart.global.Object.setPrototypeOf({
    [_distinctVisibleColors]: T.VoidToSetOfColor(),
    scale: T.doubleToBorderDirectional(),
    paint: T.CanvasAndRect__Tovoid$1()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(box_border.BorderDirectional))));
  dart.setStaticMethodSignature(box_border.BorderDirectional, () => ['merge', 'lerp']);
  dart.setGetterSignature(box_border.BorderDirectional, () => dart.global.Object.setPrototypeOf({
    dimensions: T.EdgeInsetsGeometry(),
    isUniform: T.bool(),
    [_colorIsUniform]: T.bool(),
    [_widthIsUniform]: T.bool(),
    [_styleIsUniform]: T.bool(),
    [_strokeAlignIsUniform]: T.bool(),
    [_hasHairlineBorder]: T.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(box_border.BorderDirectional))));
  dart.setLibraryUri(box_border.BorderDirectional, I[0]);
  dart.setFieldSignature(box_border.BorderDirectional, () => dart.global.Object.setPrototypeOf({
    top: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    start: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    end: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]},
    bottom: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(box_border.BorderDirectional))));
  dart.defineExtensionMethods(box_border.BorderDirectional, ['_equals', 'toString']);
  dart.defineExtensionAccessors(box_border.BorderDirectional, ['hashCode']);
  dart.moduleConstCaches.set("packages/flutter/src/painting/box_border.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__painting__box_border|BoxShape":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__painting__box_border|Border":{"flutter__src__painting__box_border|BoxBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__box_border|BoxBorder":{"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__box_border|BorderDirectional":{"flutter__src__painting__box_border|BoxBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"flutter__src__painting__borders|BorderSide":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__border_radius|BorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]},"flutter__src__painting__edge_insets|EdgeInsets":{"flutter__src__painting__edge_insets|EdgeInsetsGeometry":[]},"flutter__src__painting__borders|BorderStyle":{"core|_Enum":[],"core|Enum":[]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/flutter/src/painting/box_border.dart", {
    "package:flutter/src/painting/box_border.dart": box_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["box_border.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/box_border.dart.lib.js"}');
  // Exports:
  return {
    src__painting__box_border: box_border
  };
}));

//# sourceMappingURL=box_border.dart.lib.js.map

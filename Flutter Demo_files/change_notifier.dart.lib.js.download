// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/change_notifier.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/memory_allocations.dart'], (function load__packages__flutter__src__foundation__change_notifier_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__memory_allocations$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  var change_notifier = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    ListOfListenableNToListenable: () => (T$.ListOfListenableNToListenable = dart.constFn(dart_rti.findType("flutter__src__foundation__change_notifier|Listenable(core|List<flutter__src__foundation__change_notifier|Listenable?>)")))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    ChangeNotifier: () => (T$.ChangeNotifier = dart.constFn(dart_rti.findType("flutter__src__foundation__change_notifier|ChangeNotifier")))(),
    VoidToNvoid: () => (T$.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    DiagnosticsNode: () => (T$.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    ChangeNotifierTobool: () => (T$.ChangeNotifierTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__foundation__change_notifier|ChangeNotifier)")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ChangeNotifierTovoid: () => (T$.ChangeNotifierTovoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__change_notifier|ChangeNotifier)")))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart_rti.findType("~(~())")))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))(),
    ListOfVoidToNvoid: () => (T$.ListOfVoidToNvoid = dart.constFn(dart_rti.findType("core|List<~()?>")))(),
    ListOfListenableN: () => (T$.ListOfListenableN = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__change_notifier|Listenable?>")))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart_rti.findType("core|Object?")))()
  };
  var G = {
    ListOfVoidToNvoid: () => (G.ListOfVoidToNvoid = dart.constFn(core.List$(T$.VoidToNvoid())))(),
    DiagnosticsPropertyOfChangeNotifier: () => (G.DiagnosticsPropertyOfChangeNotifier = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ChangeNotifier())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNode())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/foundation/change_notifier.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/change_notifier.dart",
    "dart:core"
  ];
  change_notifier.Listenable = class Listenable extends core.Object {
    static ['_#merge#tearOff'](listenables) {
      return new change_notifier._MergingListenable.new(listenables);
    }
  };
  (change_notifier.Listenable.new = function() {
    ;
  }).prototype = change_notifier.Listenable.prototype;
  dart.addTypeTests(change_notifier.Listenable);
  dart.addRtiResources(change_notifier.Listenable, ["flutter__src__foundation__change_notifier|Listenable"]);
  dart.addTypeCaches(change_notifier.Listenable);
  dart.setStaticMethodSignature(change_notifier.Listenable, () => ['merge']);
  dart.setLibraryUri(change_notifier.Listenable, I[0]);
  var _eval = dart.privateName(dart_rti, "_eval");
  const _is_ValueListenable_default = Symbol('_is_ValueListenable_default');
  change_notifier.ValueListenable$ = dart.generic(T => {
    var __t$ValueListenableOfT = () => (__t$ValueListenableOfT = dart.constFn(T[_eval]("flutter__src__foundation__change_notifier|ValueListenable<0>")))();
    class ValueListenable extends change_notifier.Listenable {}
    (ValueListenable.new = function() {
      this.$ti = this.$ti || __t$ValueListenableOfT();
      dart.global.Object.getPrototypeOf(ValueListenable).new.call(this);
      ;
    }).prototype = ValueListenable.prototype;
    dart.addTypeTests(ValueListenable);
    ValueListenable.prototype[_is_ValueListenable_default] = true;
    dart.addRtiResources(ValueListenable, ["flutter__src__foundation__change_notifier|ValueListenable"]);
    dart.addTypeCaches(ValueListenable);
    dart.setLibraryUri(ValueListenable, I[0]);
    return ValueListenable;
  });
  change_notifier.ValueListenable = change_notifier.ValueListenable$();
  dart.addTypeTests(change_notifier.ValueListenable, _is_ValueListenable_default);
  var _count = dart.privateName(change_notifier, "_count");
  var _listeners = dart.privateName(change_notifier, "_listeners");
  var _notificationCallStackDepth = dart.privateName(change_notifier, "_notificationCallStackDepth");
  var _reentrantlyRemovedListeners = dart.privateName(change_notifier, "_reentrantlyRemovedListeners");
  var _debugDisposed = dart.privateName(change_notifier, "_debugDisposed");
  var _creationDispatched = dart.privateName(change_notifier, "_creationDispatched");
  var _removeAt = dart.privateName(change_notifier, "_removeAt");
  var _is = dart.privateName(dart_rti, "_is");
  change_notifier.ChangeNotifier = class ChangeNotifier extends core.Object {
    static debugAssertNotDisposed(notifier) {
      if (!dart.fn(() => {
        if (notifier[_debugDisposed]) {
          dart.throw(assertions.FlutterError.new("A " + dart.str(dart.runtimeType(notifier)) + " was used after being disposed.\n" + "Once you have called dispose() on a " + dart.str(dart.runtimeType(notifier)) + ", it " + "can no longer be used."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 177, 12, "() {\r\n      if (notifier._debugDisposed) {\r\n        throw FlutterError(\r\n          'A ${notifier.runtimeType} was used after being disposed.\\n'\r\n          'Once you have called dispose() on a ${notifier.runtimeType}, it '\r\n          'can no longer be used.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    get hasListeners() {
      return this[_count] > 0;
    }
    static maybeDispatchObjectCreation(object) {
      if (true && !object[_creationDispatched]) {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/foundation.dart", className: dart.strSafe(dart_rti.createRuntimeType(T$.ChangeNotifier())), object: object});
        object[_creationDispatched] = true;
      }
    }
    addListener(listener) {
      let t$360;
      if (!change_notifier.ChangeNotifier.debugAssertNotDisposed(this)) dart.assertFailed(null, I[1], 271, 12, "ChangeNotifier.debugAssertNotDisposed(this)");
      {
        change_notifier.ChangeNotifier.maybeDispatchObjectCreation(this);
      }
      if (this[_count] === this[_listeners][$length]) {
        if (this[_count] === 0) {
          this[_listeners] = G.ListOfVoidToNvoid().filled(1, null);
        } else {
          let newListeners = G.ListOfVoidToNvoid().filled(this[_listeners][$length] * 2, null);
          for (let i = 0; i < this[_count]; i = i + 1) {
            newListeners[$_set](i, this[_listeners][$_get](i));
          }
          this[_listeners] = newListeners;
        }
      }
      this[_listeners][$_set]((t$360 = this[_count], this[_count] = t$360 + 1, t$360), listener);
    }
    [_removeAt](index) {
      this[_count] = this[_count] - 1;
      if (this[_count] * 2 <= this[_listeners][$length]) {
        let newListeners = G.ListOfVoidToNvoid().filled(this[_count], null);
        for (let i = 0; i < index; i = i + 1) {
          newListeners[$_set](i, this[_listeners][$_get](i));
        }
        for (let i = index; i < this[_count]; i = i + 1) {
          newListeners[$_set](i, this[_listeners][$_get](i + 1));
        }
        this[_listeners] = newListeners;
      } else {
        for (let i = index; i < this[_count]; i = i + 1) {
          this[_listeners][$_set](i, this[_listeners][$_get](i + 1));
        }
        this[_listeners][$_set](this[_count], null);
      }
    }
    removeListener(listener) {
      for (let i = 0; i < this[_count]; i = i + 1) {
        let listenerAtIndex = this[_listeners][$_get](i);
        if (dart.equals(listenerAtIndex, listener)) {
          if (this[_notificationCallStackDepth] > 0) {
            this[_listeners][$_set](i, null);
            this[_reentrantlyRemovedListeners] = this[_reentrantlyRemovedListeners] + 1;
          } else {
            this[_removeAt](i);
          }
          break;
        }
      }
    }
    dispose() {
      if (!change_notifier.ChangeNotifier.debugAssertNotDisposed(this)) dart.assertFailed(null, I[1], 375, 12, "ChangeNotifier.debugAssertNotDisposed(this)");
      if (!(this[_notificationCallStackDepth] === 0)) dart.assertFailed("The \"dispose()\" method on " + dart.str(this) + " was called during the call to " + "\"notifyListeners()\". This is likely to cause errors since it modifies " + "the list of listeners while the list is being used.", I[1], 377, 7, "_notificationCallStackDepth == 0");
      if (!dart.fn(() => {
        this[_debugDisposed] = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 382, 12, "() {\r\n      _debugDisposed = true;\r\n      return true;\r\n    }()");
      if (true && this[_creationDispatched]) {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      this[_listeners] = change_notifier.ChangeNotifier._emptyListeners;
      this[_count] = 0;
    }
    notifyListeners() {
      let t$360, t$361;
      if (!change_notifier.ChangeNotifier.debugAssertNotDisposed(this)) dart.assertFailed(null, I[1], 412, 12, "ChangeNotifier.debugAssertNotDisposed(this)");
      if (this[_count] === 0) {
        return;
      }
      this[_notificationCallStackDepth] = this[_notificationCallStackDepth] + 1;
      let end = this[_count];
      for (let i = 0; i < end; i = i + 1) {
        try {
          t$360 = this[_listeners][$_get](i);
          t$360 == null ? null : t$360();
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "foundation library", context: new assertions.ErrorDescription.new("while dispatching notifications for " + dart.str(dart.runtimeType(this))), informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfChangeNotifier()).new("The " + dart.str(dart.runtimeType(this)) + " sending notification was", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T$.VoidToListOfDiagnosticsNode())}));
          } else
            throw t$36$35e;
        }
      }
      this[_notificationCallStackDepth] = this[_notificationCallStackDepth] - 1;
      if (this[_notificationCallStackDepth] === 0 && this[_reentrantlyRemovedListeners] > 0) {
        let newLength = this[_count] - this[_reentrantlyRemovedListeners];
        if (newLength * 2 <= this[_listeners][$length]) {
          let newListeners = G.ListOfVoidToNvoid().filled(newLength, null);
          let newIndex = 0;
          for (let i = 0; i < this[_count]; i = i + 1) {
            let listener = this[_listeners][$_get](i);
            if (listener != null) {
              newListeners[$_set]((t$361 = newIndex, newIndex = t$361 + 1, t$361), listener);
            }
          }
          this[_listeners] = newListeners;
        } else {
          for (let i = 0; i < newLength; i = i + 1) {
            if (this[_listeners][$_get](i) == null) {
              let swapIndex = i + 1;
              while (this[_listeners][$_get](swapIndex) == null) {
                swapIndex = swapIndex + 1;
              }
              this[_listeners][$_set](i, this[_listeners][$_get](swapIndex));
              this[_listeners][$_set](swapIndex, null);
            }
          }
        }
        this[_reentrantlyRemovedListeners] = 0;
        this[_count] = newLength;
      }
    }
    static ['_#new#tearOff']() {
      return new change_notifier.ChangeNotifier.new();
    }
  };
  (change_notifier.ChangeNotifier.new = function() {
    this[_count] = 0;
    this[_listeners] = change_notifier.ChangeNotifier._emptyListeners;
    this[_notificationCallStackDepth] = 0;
    this[_reentrantlyRemovedListeners] = 0;
    this[_debugDisposed] = false;
    this[_creationDispatched] = false;
    ;
  }).prototype = change_notifier.ChangeNotifier.prototype;
  dart.addTypeTests(change_notifier.ChangeNotifier);
  dart.addRtiResources(change_notifier.ChangeNotifier, ["flutter__src__foundation__change_notifier|ChangeNotifier", "flutter__src__foundation__change_notifier|Listenable"]);
  dart.addTypeCaches(change_notifier.ChangeNotifier);
  dart.setMethodSignature(change_notifier.ChangeNotifier, () => dart.global.Object.setPrototypeOf({
    addListener: T$.FnTovoid(),
    [_removeAt]: T$.intTovoid(),
    removeListener: T$.FnTovoid(),
    dispose: T$.VoidTovoid(),
    notifyListeners: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(change_notifier.ChangeNotifier))));
  dart.setStaticMethodSignature(change_notifier.ChangeNotifier, () => ['debugAssertNotDisposed', 'maybeDispatchObjectCreation']);
  dart.setGetterSignature(change_notifier.ChangeNotifier, () => dart.global.Object.setPrototypeOf({hasListeners: T$.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(change_notifier.ChangeNotifier))));
  dart.setLibraryUri(change_notifier.ChangeNotifier, I[0]);
  dart.setFieldSignature(change_notifier.ChangeNotifier, () => dart.global.Object.setPrototypeOf({
    [_count]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_listeners]: {type: T$.ListOfVoidToNvoid(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_notificationCallStackDepth]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_reentrantlyRemovedListeners]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_debugDisposed]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_creationDispatched]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(change_notifier.ChangeNotifier))));
  dart.setStaticFieldSignature(change_notifier.ChangeNotifier, () => ['_emptyListeners']);
  dart.defineLazy(change_notifier.ChangeNotifier, {
    /*change_notifier.ChangeNotifier._emptyListeners*/get _emptyListeners() {
      return G.ListOfVoidToNvoid().filled(0, null);
    }
  }, false);
  var _children$ = dart.privateName(change_notifier, "_children");
  change_notifier._MergingListenable = class _MergingListenable extends change_notifier.Listenable {
    static ['_#new#tearOff'](_children) {
      return new change_notifier._MergingListenable.new(_children);
    }
    addListener(listener) {
      let t$361;
      for (let child of this[_children$]) {
        t$361 = child;
        t$361 == null ? null : t$361.addListener(listener);
      }
    }
    removeListener(listener) {
      let t$361;
      for (let child of this[_children$]) {
        t$361 = child;
        t$361 == null ? null : t$361.removeListener(listener);
      }
    }
    toString() {
      return "Listenable.merge([" + this[_children$][$join](", ") + "])";
    }
  };
  (change_notifier._MergingListenable.new = function(_children) {
    this[_children$] = _children;
    dart.global.Object.getPrototypeOf(change_notifier._MergingListenable).new.call(this);
    ;
  }).prototype = change_notifier._MergingListenable.prototype;
  dart.addTypeTests(change_notifier._MergingListenable);
  dart.addRtiResources(change_notifier._MergingListenable, ["flutter__src__foundation__change_notifier|_MergingListenable"]);
  dart.addTypeCaches(change_notifier._MergingListenable);
  dart.setMethodSignature(change_notifier._MergingListenable, () => dart.global.Object.setPrototypeOf({
    addListener: T$.FnTovoid(),
    removeListener: T$.FnTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(change_notifier._MergingListenable))));
  dart.setLibraryUri(change_notifier._MergingListenable, I[0]);
  dart.setFieldSignature(change_notifier._MergingListenable, () => dart.global.Object.setPrototypeOf({[_children$]: {type: T$.ListOfListenableN(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(change_notifier._MergingListenable))));
  dart.defineExtensionMethods(change_notifier._MergingListenable, ['toString']);
  var _value$ = dart.privateName(change_notifier, "_value");
  var _as = dart.privateName(dart_rti, "_as");
  const _is_ValueNotifier_default = Symbol('_is_ValueNotifier_default');
  change_notifier.ValueNotifier$ = dart.generic(T => {
    var __t$ValueNotifierOfT = () => (__t$ValueNotifierOfT = dart.constFn(T[_eval]("flutter__src__foundation__change_notifier|ValueNotifier<0>")))();
    class ValueNotifier extends change_notifier.ChangeNotifier {
      static ['_#new#tearOff'](T, _value) {
        return new (change_notifier.ValueNotifier$(T)).new(_value);
      }
      get value() {
        return this[_value$];
      }
      set value(newValue) {
        T[_as](newValue);
        if (dart.equals(this[_value$], newValue)) {
          return;
        }
        this[_value$] = newValue;
        this.notifyListeners();
      }
      toString() {
        return diagnostics.describeIdentity(this) + "(" + dart.str(this.value) + ")";
      }
    }
    (ValueNotifier.new = function(_value) {
      this[_value$] = _value;
      this.$ti = this.$ti || __t$ValueNotifierOfT();
      dart.global.Object.getPrototypeOf(ValueNotifier).new.call(this);
      {
        change_notifier.ChangeNotifier.maybeDispatchObjectCreation(this);
      }
    }).prototype = ValueNotifier.prototype;
    dart.addTypeTests(ValueNotifier);
    ValueNotifier.prototype[_is_ValueNotifier_default] = true;
    dart.addRtiResources(ValueNotifier, ["flutter__src__foundation__change_notifier|ValueNotifier", "flutter__src__foundation__change_notifier|ValueListenable", "flutter__src__foundation__change_notifier|Listenable"]);
    dart.addTypeCaches(ValueNotifier);
    dart.setGetterSignature(ValueNotifier, () => dart.global.Object.setPrototypeOf({value: T}, dart.getGetters(dart.global.Object.getPrototypeOf(ValueNotifier))));
    dart.setSetterSignature(ValueNotifier, () => dart.global.Object.setPrototypeOf({value: T$.ObjectN()}, dart.getSetters(dart.global.Object.getPrototypeOf(ValueNotifier))));
    dart.setLibraryUri(ValueNotifier, I[0]);
    dart.setFieldSignature(ValueNotifier, () => dart.global.Object.setPrototypeOf({[_value$]: {type: T, isConst: false, isFinal: false}}, dart.getFields(dart.global.Object.getPrototypeOf(ValueNotifier))));
    dart.defineExtensionMethods(ValueNotifier, ['toString']);
    return ValueNotifier;
  });
  change_notifier.ValueNotifier = change_notifier.ValueNotifier$();
  dart.addTypeTests(change_notifier.ValueNotifier, _is_ValueNotifier_default);
  dart.defineLazy(change_notifier, {
    /*change_notifier._flutterFoundationLibrary*/get _flutterFoundationLibrary() {
      return "package:flutter/foundation.dart";
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__foundation__change_notifier|ValueListenable":{"ValueListenable.T":"1","flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ChangeNotifier":{"flutter__src__foundation__change_notifier|Listenable":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__foundation__change_notifier|ValueNotifier":{"ValueNotifier.T":"1","flutter__src__foundation__change_notifier|ChangeNotifier":[],"ValueListenable.T":"1","flutter__src__foundation__change_notifier|ValueListenable":["1"],"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|_MergingListenable":{"flutter__src__foundation__change_notifier|Listenable":[]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/change_notifier.dart", {
    "package:flutter/src/foundation/change_notifier.dart": change_notifier
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["change_notifier.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/foundation/change_notifier.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__change_notifier: change_notifier
  };
}));

//# sourceMappingURL=change_notifier.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/material_color_utilities/utils/color_utils.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/utils/math_utils.dart'], (function load__packages__material_color_utilities__utils__color_utils_dart(dart_sdk, packages__material_color_utilities__utils__math_utils$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const math_utils = packages__material_color_utilities__utils__math_utils$46dart.utils__math_utils;
  var color_utils = Object.create(dart.library);
  var $_get = dartx._get;
  var $rightShift = dartx['>>'];
  var $toDouble = dartx.toDouble;
  var $round = dartx.round;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    intAndintAndintToint: () => (T.intAndintAndintToint = dart.constFn(dart_rti.findType("core|int(core|int,core|int,core|int)")))(),
    ListOfdoubleToint: () => (T.ListOfdoubleToint = dart.constFn(dart_rti.findType("core|int(core|List<core|double>)")))(),
    intToint: () => (T.intToint = dart.constFn(dart_rti.findType("core|int(core|int)")))(),
    intTobool: () => (T.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    doubleAnddoubleAnddoubleToint: () => (T.doubleAnddoubleAnddoubleToint = dart.constFn(dart_rti.findType("core|int(core|double,core|double,core|double)")))(),
    intToListOfdouble: () => (T.intToListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>(core|int)")))(),
    doubleToint: () => (T.doubleToint = dart.constFn(dart_rti.findType("core|int(core|double)")))(),
    intTodouble: () => (T.intTodouble = dart.constFn(dart_rti.findType("core|double(core|int)")))(),
    doubleTodouble: () => (T.doubleTodouble = dart.constFn(dart_rti.findType("core|double(core|double)")))(),
    VoidToListOfdouble: () => (T.VoidToListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>()")))(),
    ListOfListOfdouble: () => (T.ListOfListOfdouble = dart.constFn(dart_rti.findType("core|List<core|List<core|double>>")))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>")))()
  };
  var G = {
    JSArrayOfdouble: () => (G.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(T.double())))(),
    JSArrayOfListOfdouble: () => (G.JSArrayOfListOfdouble = dart.constFn(_interceptors.JSArray$(T.ListOfdouble())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:material_color_utilities/utils/color_utils.dart",
    "dart:core"
  ];
  color_utils.ColorUtils = class ColorUtils extends core.Object {
    static argbFromRgb(red, green, blue) {
      return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;
    }
    static argbFromLinrgb(linrgb) {
      let r = color_utils.ColorUtils.delinearized(linrgb[$_get](0));
      let g = color_utils.ColorUtils.delinearized(linrgb[$_get](1));
      let b = color_utils.ColorUtils.delinearized(linrgb[$_get](2));
      return color_utils.ColorUtils.argbFromRgb(r, g, b);
    }
    static alphaFromArgb(argb) {
      return argb[$rightShift](24) & 255;
    }
    static redFromArgb(argb) {
      return argb >> 16 & 255;
    }
    static greenFromArgb(argb) {
      return argb >> 8 & 255;
    }
    static blueFromArgb(argb) {
      return argb & 255;
    }
    static isOpaque(argb) {
      return color_utils.ColorUtils.alphaFromArgb(argb) >= 255;
    }
    static argbFromXyz(x, y, z) {
      let matrix = color_utils.ColorUtils._xyzToSrgb;
      let linearR = matrix[$_get](0)[$_get](0) * x + matrix[$_get](0)[$_get](1) * y + matrix[$_get](0)[$_get](2) * z;
      let linearG = matrix[$_get](1)[$_get](0) * x + matrix[$_get](1)[$_get](1) * y + matrix[$_get](1)[$_get](2) * z;
      let linearB = matrix[$_get](2)[$_get](0) * x + matrix[$_get](2)[$_get](1) * y + matrix[$_get](2)[$_get](2) * z;
      let r = color_utils.ColorUtils.delinearized(linearR);
      let g = color_utils.ColorUtils.delinearized(linearG);
      let b = color_utils.ColorUtils.delinearized(linearB);
      return color_utils.ColorUtils.argbFromRgb(r, g, b);
    }
    static xyzFromArgb(argb) {
      let r = color_utils.ColorUtils.linearized(color_utils.ColorUtils.redFromArgb(argb));
      let g = color_utils.ColorUtils.linearized(color_utils.ColorUtils.greenFromArgb(argb));
      let b = color_utils.ColorUtils.linearized(color_utils.ColorUtils.blueFromArgb(argb));
      return math_utils.MathUtils.matrixMultiply(G.JSArrayOfdouble().of([r, g, b]), color_utils.ColorUtils._srgbToXyz);
    }
    static argbFromLab(l, a, b) {
      let whitePoint = color_utils.ColorUtils._whitePointD65;
      let fy = (l + 16.0) / 116.0;
      let fx = a / 500.0 + fy;
      let fz = fy - b / 200.0;
      let xNormalized = color_utils.ColorUtils._labInvf(fx);
      let yNormalized = color_utils.ColorUtils._labInvf(fy);
      let zNormalized = color_utils.ColorUtils._labInvf(fz);
      let x = xNormalized * whitePoint[$_get](0);
      let y = yNormalized * whitePoint[$_get](1);
      let z = zNormalized * whitePoint[$_get](2);
      return color_utils.ColorUtils.argbFromXyz(x, y, z);
    }
    static labFromArgb(argb) {
      let linearR = color_utils.ColorUtils.linearized(color_utils.ColorUtils.redFromArgb(argb));
      let linearG = color_utils.ColorUtils.linearized(color_utils.ColorUtils.greenFromArgb(argb));
      let linearB = color_utils.ColorUtils.linearized(color_utils.ColorUtils.blueFromArgb(argb));
      let matrix = color_utils.ColorUtils._srgbToXyz;
      let x = matrix[$_get](0)[$_get](0) * linearR + matrix[$_get](0)[$_get](1) * linearG + matrix[$_get](0)[$_get](2) * linearB;
      let y = matrix[$_get](1)[$_get](0) * linearR + matrix[$_get](1)[$_get](1) * linearG + matrix[$_get](1)[$_get](2) * linearB;
      let z = matrix[$_get](2)[$_get](0) * linearR + matrix[$_get](2)[$_get](1) * linearG + matrix[$_get](2)[$_get](2) * linearB;
      let whitePoint = color_utils.ColorUtils._whitePointD65;
      let xNormalized = x / whitePoint[$_get](0);
      let yNormalized = y / whitePoint[$_get](1);
      let zNormalized = z / whitePoint[$_get](2);
      let fx = color_utils.ColorUtils._labF(xNormalized);
      let fy = color_utils.ColorUtils._labF(yNormalized);
      let fz = color_utils.ColorUtils._labF(zNormalized);
      let l = 116.0 * fy - 16;
      let a = 500.0 * (fx - fy);
      let b = 200.0 * (fy - fz);
      return G.JSArrayOfdouble().of([l, a, b]);
    }
    static argbFromLstar(lstar) {
      let y = color_utils.ColorUtils.yFromLstar(lstar);
      let component = color_utils.ColorUtils.delinearized(y);
      return color_utils.ColorUtils.argbFromRgb(component, component, component);
    }
    static lstarFromArgb(argb) {
      let y = color_utils.ColorUtils.xyzFromArgb(argb)[$_get](1);
      return 116.0 * color_utils.ColorUtils._labF(y / 100.0) - 16.0;
    }
    static yFromLstar(lstar) {
      return 100.0 * color_utils.ColorUtils._labInvf((lstar + 16.0) / 116.0);
    }
    static lstarFromY(y) {
      return color_utils.ColorUtils._labF(y / 100.0) * 116.0 - 16.0;
    }
    static linearized(rgbComponent) {
      let normalized = rgbComponent / 255.0;
      if (normalized <= 0.040449936) {
        return normalized / 12.92 * 100.0;
      } else {
        return math.pow((normalized + 0.055) / 1.055, 2.4)[$toDouble]() * 100.0;
      }
    }
    static delinearized(rgbComponent) {
      let normalized = rgbComponent / 100.0;
      let delinearized = 0.0;
      if (normalized <= 0.0031308) {
        delinearized = normalized * 12.92;
      } else {
        delinearized = 1.055 * math.pow(normalized, 1.0 / 2.4)[$toDouble]() - 0.055;
      }
      return math_utils.MathUtils.clampInt(0, 255, (delinearized * 255.0)[$round]());
    }
    static whitePointD65() {
      return color_utils.ColorUtils._whitePointD65;
    }
    static _labF(t) {
      let e = 216.0 / 24389.0;
      let kappa = 24389.0 / 27.0;
      if (t > e) {
        return math.pow(t, 1.0 / 3.0)[$toDouble]();
      } else {
        return (kappa * t + 16) / 116;
      }
    }
    static _labInvf(ft) {
      let e = 216.0 / 24389.0;
      let kappa = 24389.0 / 27.0;
      let ft3 = ft * ft * ft;
      if (ft3 > e) {
        return ft3;
      } else {
        return (116 * ft - 16) / kappa;
      }
    }
    static ['_#new#tearOff']() {
      return new color_utils.ColorUtils.new();
    }
  };
  (color_utils.ColorUtils.new = function() {
    ;
  }).prototype = color_utils.ColorUtils.prototype;
  dart.addTypeTests(color_utils.ColorUtils);
  dart.addRtiResources(color_utils.ColorUtils, ["material_color_utilities__utils__color_utils|ColorUtils"]);
  dart.addTypeCaches(color_utils.ColorUtils);
  dart.setStaticMethodSignature(color_utils.ColorUtils, () => ['argbFromRgb', 'argbFromLinrgb', 'alphaFromArgb', 'redFromArgb', 'greenFromArgb', 'blueFromArgb', 'isOpaque', 'argbFromXyz', 'xyzFromArgb', 'argbFromLab', 'labFromArgb', 'argbFromLstar', 'lstarFromArgb', 'yFromLstar', 'lstarFromY', 'linearized', 'delinearized', 'whitePointD65', '_labF', '_labInvf']);
  dart.setLibraryUri(color_utils.ColorUtils, I[0]);
  dart.setStaticFieldSignature(color_utils.ColorUtils, () => ['_srgbToXyz', '_xyzToSrgb', '_whitePointD65']);
  dart.defineLazy(color_utils.ColorUtils, {
    /*color_utils.ColorUtils._srgbToXyz*/get _srgbToXyz() {
      return G.JSArrayOfListOfdouble().of([G.JSArrayOfdouble().of([0.41233895, 0.35762064, 0.18051042]), G.JSArrayOfdouble().of([0.2126, 0.7152, 0.0722]), G.JSArrayOfdouble().of([0.01932141, 0.11916382, 0.95034478])]);
    },
    /*color_utils.ColorUtils._xyzToSrgb*/get _xyzToSrgb() {
      return G.JSArrayOfListOfdouble().of([G.JSArrayOfdouble().of([3.2413774792388685, -1.5376652402851851, -0.49885366846268053]), G.JSArrayOfdouble().of([-0.9691452513005321, 1.8758853451067872, 0.04156585616912061]), G.JSArrayOfdouble().of([0.05562093689691305, -0.20395524564742123, 1.0571799111220335])]);
    },
    /*color_utils.ColorUtils._whitePointD65*/get _whitePointD65() {
      return G.JSArrayOfdouble().of([95.047, 100.0, 108.883]);
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/material_color_utilities/utils/color_utils.dart", {
    "package:material_color_utilities/utils/color_utils.dart": color_utils
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["color_utils.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../F:/packages/material_color_utilities/utils/color_utils.dart.lib.js"}');
  // Exports:
  return {
    utils__color_utils: color_utils
  };
}));

//# sourceMappingURL=color_utils.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/colors.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__painting__colors_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var colors = Object.create(dart.library);
  var $modulo = dartx['%'];
  var $abs = dartx.abs;
  var $_get = dartx._get;
  var $runtimeType = dartx.runtimeType;
  var $map = dartx.map;
  var $_set = dartx._set;
  var $isNaN = dartx.isNaN;
  var $round = dartx.round;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    double: () => (T$.double = dart.constFn(dart_rti.findType("core|double")))(),
    HSVColor: () => (T$.HSVColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSVColor")))(),
    ColorToHSVColor: () => (T$.ColorToHSVColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSVColor(ui|Color)")))(),
    doubleToHSVColor: () => (T$.doubleToHSVColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSVColor(core|double)")))(),
    VoidToColor: () => (T$.VoidToColor = dart.constFn(dart_rti.findType("ui|Color()")))(),
    HSVColorNAndHSVColorNAnddoubleToHSVColorN: () => (T$.HSVColorNAndHSVColorNAnddoubleToHSVColorN = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSVColor?(flutter__src__painting__colors|HSVColor?,flutter__src__painting__colors|HSVColor?,core|double)")))(),
    HSLColor: () => (T$.HSLColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSLColor")))(),
    ColorToHSLColor: () => (T$.ColorToHSLColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSLColor(ui|Color)")))(),
    doubleToHSLColor: () => (T$.doubleToHSLColor = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSLColor(core|double)")))(),
    HSLColorNAndHSLColorNAnddoubleToHSLColorN: () => (T$.HSLColorNAndHSLColorNAnddoubleToHSLColorN = dart.constFn(dart_rti.findType("flutter__src__painting__colors|HSLColor?(flutter__src__painting__colors|HSLColor?,flutter__src__painting__colors|HSLColor?,core|double)")))(),
    Color: () => (T$.Color = dart.constFn(dart_rti.findType("ui|Color")))(),
    ObjectNToColorN: () => (T$.ObjectNToColorN = dart.constFn(dart_rti.findType("ui|Color?(core|Object?)")))(),
    ColorSwatchNOfTAndColorSwatchNOfTAnddoubleToColorSwatchNOfT: () => (T$.ColorSwatchNOfTAndColorSwatchNOfTAnddoubleToColorSwatchNOfT = dart.constFn(dart_rti.findType("flutter__src__painting__colors|ColorSwatch<0^>?(flutter__src__painting__colors|ColorSwatch<0^>?,flutter__src__painting__colors|ColorSwatch<0^>?,core|double)<core|Object?>")))(),
    ColorProperty: () => (T$.ColorProperty = dart.constFn(dart_rti.findType("flutter__src__painting__colors|ColorProperty")))(),
    String: () => (T$.String = dart.constFn(dart_rti.findType("core|String")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))()
  };
  var G = {
    IdentityMapOfString$Object: () => (G.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.Object())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
      }, diagnostics._NoDefaultValue.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "singleLine",
        [_Enum_index]: 8
      }, diagnostics.DiagnosticsTreeStyle.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "info",
        [_Enum_index]: 3
      }, diagnostics.DiagnosticLevel.prototype));
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/colors.dart",
    "package:flutter/src/painting/colors.dart",
    "dart:core"
  ];
  var alpha$ = dart.privateName(colors, "HSVColor.alpha");
  var hue$ = dart.privateName(colors, "HSVColor.hue");
  var saturation$ = dart.privateName(colors, "HSVColor.saturation");
  var value$ = dart.privateName(colors, "HSVColor.value");
  var _scaleAlpha = dart.privateName(colors, "_scaleAlpha");
  var _is = dart.privateName(dart_rti, "_is");
  colors.HSVColor = class HSVColor extends core.Object {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#fromAHSV#tearOff'](alpha, hue, saturation, value) {
      return new colors.HSVColor.fromAHSV(alpha, hue, saturation, value);
    }
    static fromColor(color) {
      let red = color.red / 255;
      let green = color.green / 255;
      let blue = color.blue / 255;
      let max = math.max(T$.double(), red, math.max(T$.double(), green, blue));
      let min = math.min(T$.double(), red, math.min(T$.double(), green, blue));
      let delta = max - min;
      let alpha = color.alpha / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let saturation = max === 0.0 ? 0.0 : delta / max;
      return new colors.HSVColor.fromAHSV(alpha, hue, saturation, max);
    }
    static ['_#fromColor#tearOff'](color) {
      return colors.HSVColor.fromColor(color);
    }
    withAlpha(alpha) {
      return new colors.HSVColor.fromAHSV(alpha, this.hue, this.saturation, this.value);
    }
    withHue(hue) {
      return new colors.HSVColor.fromAHSV(this.alpha, hue, this.saturation, this.value);
    }
    withSaturation(saturation) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, saturation, this.value);
    }
    withValue(value) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, this.saturation, value);
    }
    toColor() {
      let chroma = this.saturation * this.value;
      let secondary = chroma * (1.0 - ((this.hue / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = this.value - chroma;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(this.alpha * factor);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)[_scaleAlpha](t);
      }
      if (b == null) {
        return a[_scaleAlpha](1.0 - t);
      }
      return new colors.HSVColor.fromAHSV(ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.alpha, b.alpha, t)), 0.0, 1.0), dart.nullCheck(ui.lerpDouble(a.hue, b.hue, t))[$modulo](360.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.saturation, b.saturation, t)), 0.0, 1.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.value, b.value, t)), 0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T$.HSVColor()[_is](other) && other.alpha === this.alpha && other.hue === this.hue && other.saturation === this.saturation && other.value === this.value;
    }
    get hashCode() {
      return core.Object.hash(this.alpha, this.hue, this.saturation, this.value);
    }
    toString() {
      return object.objectRuntimeType(this, "HSVColor") + "(" + dart.strSafe(this.alpha) + ", " + dart.strSafe(this.hue) + ", " + dart.strSafe(this.saturation) + ", " + dart.strSafe(this.value) + ")";
    }
  };
  (colors.HSVColor.fromAHSV = function(alpha, hue, saturation, value) {
    this[alpha$] = alpha;
    this[hue$] = hue;
    this[saturation$] = saturation;
    this[value$] = value;
    if (!(alpha >= 0.0)) dart.assertFailed(null, I[0], 92, 14, "alpha >= 0.0");
    if (!(alpha <= 1.0)) dart.assertFailed(null, I[0], 93, 14, "alpha <= 1.0");
    if (!(hue >= 0.0)) dart.assertFailed(null, I[0], 94, 14, "hue >= 0.0");
    if (!(hue <= 360.0)) dart.assertFailed(null, I[0], 95, 14, "hue <= 360.0");
    if (!(saturation >= 0.0)) dart.assertFailed(null, I[0], 96, 14, "saturation >= 0.0");
    if (!(saturation <= 1.0)) dart.assertFailed(null, I[0], 97, 14, "saturation <= 1.0");
    if (!(value >= 0.0)) dart.assertFailed(null, I[0], 98, 14, "value >= 0.0");
    if (!(value <= 1.0)) dart.assertFailed(null, I[0], 99, 14, "value <= 1.0");
    ;
  }).prototype = colors.HSVColor.prototype;
  dart.addTypeTests(colors.HSVColor);
  dart.addRtiResources(colors.HSVColor, ["flutter__src__painting__colors|HSVColor"]);
  dart.addTypeCaches(colors.HSVColor);
  dart.setMethodSignature(colors.HSVColor, () => dart.global.Object.setPrototypeOf({
    withAlpha: T$.doubleToHSVColor(),
    withHue: T$.doubleToHSVColor(),
    withSaturation: T$.doubleToHSVColor(),
    withValue: T$.doubleToHSVColor(),
    toColor: T$.VoidToColor(),
    [_scaleAlpha]: T$.doubleToHSVColor()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(colors.HSVColor))));
  dart.setStaticMethodSignature(colors.HSVColor, () => ['fromColor', 'lerp']);
  dart.setLibraryUri(colors.HSVColor, I[1]);
  dart.setFieldSignature(colors.HSVColor, () => dart.global.Object.setPrototypeOf({
    alpha: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    hue: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    saturation: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    value: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(colors.HSVColor))));
  dart.defineExtensionMethods(colors.HSVColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSVColor, ['hashCode']);
  var alpha$0 = dart.privateName(colors, "HSLColor.alpha");
  var hue$0 = dart.privateName(colors, "HSLColor.hue");
  var saturation$0 = dart.privateName(colors, "HSLColor.saturation");
  var lightness$ = dart.privateName(colors, "HSLColor.lightness");
  colors.HSLColor = class HSLColor extends core.Object {
    get alpha() {
      return this[alpha$0];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$0];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$0];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get lightness() {
      return this[lightness$];
    }
    set lightness(value) {
      super.lightness = value;
    }
    static ['_#fromAHSL#tearOff'](alpha, hue, saturation, lightness) {
      return new colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    static fromColor(color) {
      let red = color.red / 255;
      let green = color.green / 255;
      let blue = color.blue / 255;
      let max = math.max(T$.double(), red, math.max(T$.double(), green, blue));
      let min = math.min(T$.double(), red, math.min(T$.double(), green, blue));
      let delta = max - min;
      let alpha = color.alpha / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let lightness = (max + min) / 2.0;
      let saturation = lightness === 1.0 ? 0.0 : ui.clampDouble(delta / (1.0 - (2.0 * lightness - 1.0)[$abs]()), 0.0, 1.0);
      return new colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    static ['_#fromColor#tearOff'](color) {
      return colors.HSLColor.fromColor(color);
    }
    withAlpha(alpha) {
      return new colors.HSLColor.fromAHSL(alpha, this.hue, this.saturation, this.lightness);
    }
    withHue(hue) {
      return new colors.HSLColor.fromAHSL(this.alpha, hue, this.saturation, this.lightness);
    }
    withSaturation(saturation) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, saturation, this.lightness);
    }
    withLightness(lightness) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, this.saturation, lightness);
    }
    toColor() {
      let chroma = (1.0 - (2.0 * this.lightness - 1.0)[$abs]()) * this.saturation;
      let secondary = chroma * (1.0 - ((this.hue / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = this.lightness - chroma / 2.0;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(this.alpha * factor);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)[_scaleAlpha](t);
      }
      if (b == null) {
        return a[_scaleAlpha](1.0 - t);
      }
      return new colors.HSLColor.fromAHSL(ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.alpha, b.alpha, t)), 0.0, 1.0), dart.nullCheck(ui.lerpDouble(a.hue, b.hue, t))[$modulo](360.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.saturation, b.saturation, t)), 0.0, 1.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.lightness, b.lightness, t)), 0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T$.HSLColor()[_is](other) && other.alpha === this.alpha && other.hue === this.hue && other.saturation === this.saturation && other.lightness === this.lightness;
    }
    get hashCode() {
      return core.Object.hash(this.alpha, this.hue, this.saturation, this.lightness);
    }
    toString() {
      return object.objectRuntimeType(this, "HSLColor") + "(" + dart.strSafe(this.alpha) + ", " + dart.strSafe(this.hue) + ", " + dart.strSafe(this.saturation) + ", " + dart.strSafe(this.lightness) + ")";
    }
  };
  (colors.HSLColor.fromAHSL = function(alpha, hue, saturation, lightness) {
    this[alpha$0] = alpha;
    this[hue$0] = hue;
    this[saturation$0] = saturation;
    this[lightness$] = lightness;
    if (!(alpha >= 0.0)) dart.assertFailed(null, I[0], 260, 14, "alpha >= 0.0");
    if (!(alpha <= 1.0)) dart.assertFailed(null, I[0], 261, 14, "alpha <= 1.0");
    if (!(hue >= 0.0)) dart.assertFailed(null, I[0], 262, 14, "hue >= 0.0");
    if (!(hue <= 360.0)) dart.assertFailed(null, I[0], 263, 14, "hue <= 360.0");
    if (!(saturation >= 0.0)) dart.assertFailed(null, I[0], 264, 14, "saturation >= 0.0");
    if (!(saturation <= 1.0)) dart.assertFailed(null, I[0], 265, 14, "saturation <= 1.0");
    if (!(lightness >= 0.0)) dart.assertFailed(null, I[0], 266, 14, "lightness >= 0.0");
    if (!(lightness <= 1.0)) dart.assertFailed(null, I[0], 267, 14, "lightness <= 1.0");
    ;
  }).prototype = colors.HSLColor.prototype;
  dart.addTypeTests(colors.HSLColor);
  dart.addRtiResources(colors.HSLColor, ["flutter__src__painting__colors|HSLColor"]);
  dart.addTypeCaches(colors.HSLColor);
  dart.setMethodSignature(colors.HSLColor, () => dart.global.Object.setPrototypeOf({
    withAlpha: T$.doubleToHSLColor(),
    withHue: T$.doubleToHSLColor(),
    withSaturation: T$.doubleToHSLColor(),
    withLightness: T$.doubleToHSLColor(),
    toColor: T$.VoidToColor(),
    [_scaleAlpha]: T$.doubleToHSLColor()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(colors.HSLColor))));
  dart.setStaticMethodSignature(colors.HSLColor, () => ['fromColor', 'lerp']);
  dart.setLibraryUri(colors.HSLColor, I[1]);
  dart.setFieldSignature(colors.HSLColor, () => dart.global.Object.setPrototypeOf({
    alpha: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    hue: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    saturation: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    lightness: {type: T$.double(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(colors.HSLColor))));
  dart.defineExtensionMethods(colors.HSLColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSLColor, ['hashCode']);
  var _swatch$ = dart.privateName(colors, "ColorSwatch._swatch");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _swatch = dart.privateName(colors, "_swatch");
  var _as = dart.privateName(dart_rti, "_as");
  const _is_ColorSwatch_default = Symbol('_is_ColorSwatch_default');
  colors.ColorSwatch$ = dart.generic(T => {
    var __t$ColorSwatchOfT = () => (__t$ColorSwatchOfT = dart.constFn(T[_eval]("flutter__src__painting__colors|ColorSwatch<0>")))();
    var __t$MapOfT$Color = () => (__t$MapOfT$Color = dart.constFn(T[_eval]("core|Map<0,ui|Color>")))();
    class ColorSwatch extends ui.Color {
      get [_swatch]() {
        return this[_swatch$];
      }
      set [_swatch](value) {
        super[_swatch] = value;
      }
      static ['_#new#tearOff'](T, primary, _swatch) {
        return new (colors.ColorSwatch$(T)).new(primary, _swatch);
      }
      _get(index) {
        T[_as](index);
        return this[_swatch][$_get](index);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
          return false;
        }
        return super._equals(other) && __t$ColorSwatchOfT()[_is](other) && collections.mapEquals(T, T$.Color(), other[_swatch], this[_swatch]);
      }
      get hashCode() {
        return core.Object.hash(dart.runtimeType(this), this.value, this[_swatch]);
      }
      toString() {
        return object.objectRuntimeType(this, "ColorSwatch") + "(primary value: " + super.toString() + ")";
      }
      static lerp(T, a, b, t) {
        if (a == b) {
          return a;
        }
        let swatch = null;
        if (b == null) {
          swatch = dart.nullCheck(a)[_swatch][$map](T, T$.Color(), dart.fn((key, color) => new (core.MapEntry$(T, T$.Color())).__(key, dart.nullCheck(ui.Color.lerp(color, null, t))), T[_eval]("core|MapEntry<0,ui|Color>(0,ui|Color)")));
        } else {
          if (a == null) {
            swatch = b[_swatch][$map](T, T$.Color(), dart.fn((key, color) => new (core.MapEntry$(T, T$.Color())).__(key, dart.nullCheck(ui.Color.lerp(null, color, t))), T[_eval]("core|MapEntry<0,ui|Color>(0,ui|Color)")));
          } else {
            swatch = a[_swatch][$map](T, T$.Color(), dart.fn((key, color) => new (core.MapEntry$(T, T$.Color())).__(key, dart.nullCheck(ui.Color.lerp(color, b._get(key), t))), T[_eval]("core|MapEntry<0,ui|Color>(0,ui|Color)")));
          }
        }
        return new (colors.ColorSwatch$(T)).new(dart.nullCheck(ui.Color.lerp(a, b, t)).value, swatch);
      }
    }
    (ColorSwatch.new = function(primary, _swatch) {
      this[_swatch$] = _swatch;
      this.$ti = this.$ti || __t$ColorSwatchOfT();
      dart.global.Object.getPrototypeOf(ColorSwatch).new.call(this, primary);
      ;
    }).prototype = ColorSwatch.prototype;
    dart.addTypeTests(ColorSwatch);
    ColorSwatch.prototype[_is_ColorSwatch_default] = true;
    dart.addRtiResources(ColorSwatch, ["flutter__src__painting__colors|ColorSwatch"]);
    dart.addTypeCaches(ColorSwatch);
    dart.setMethodSignature(ColorSwatch, () => dart.global.Object.setPrototypeOf({_get: T$.ObjectNToColorN()}, dart.getMethods(dart.global.Object.getPrototypeOf(ColorSwatch))));
    dart.setStaticMethodSignature(ColorSwatch, () => ['lerp']);
    dart.setLibraryUri(ColorSwatch, I[1]);
    dart.setFieldSignature(ColorSwatch, () => dart.global.Object.setPrototypeOf({[_swatch]: {type: __t$MapOfT$Color(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(ColorSwatch))));
    dart.defineExtensionMethods(ColorSwatch, ['_equals', 'toString']);
    dart.defineExtensionAccessors(ColorSwatch, ['hashCode']);
    return ColorSwatch;
  });
  colors.ColorSwatch = colors.ColorSwatch$();
  dart.addTypeTests(colors.ColorSwatch, _is_ColorSwatch_default);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  colors.ColorProperty = class ColorProperty extends diagnostics.DiagnosticsProperty$(dart_rti.findType("ui|Color")) {
    static ['_#new#tearOff'](name, value, opts) {
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[0] || CT.C0;
      let style = opts && 'style' in opts ? opts.style : C[1] || CT.C1;
      let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
      return new colors.ColorProperty.new(name, value, {showName: showName, defaultValue: defaultValue, style: style, level: level});
    }
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      if (this.value != null) {
        json[$_set]("valueProperties", new (G.IdentityMapOfString$Object()).from(["red", dart.nullCheck(this.value).red, "green", dart.nullCheck(this.value).green, "blue", dart.nullCheck(this.value).blue, "alpha", dart.nullCheck(this.value).alpha]));
      }
      return json;
    }
  };
  (colors.ColorProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[0] || CT.C0;
    let style = opts && 'style' in opts ? opts.style : C[1] || CT.C1;
    let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
    this.$ti = this.$ti || T$.ColorProperty();
    dart.global.Object.getPrototypeOf(colors.ColorProperty).new.call(this, name, value, {showName: showName, defaultValue: defaultValue, style: style, level: level});
    ;
  }).prototype = colors.ColorProperty.prototype;
  dart.addTypeTests(colors.ColorProperty);
  dart.addRtiResources(colors.ColorProperty, ["flutter__src__painting__colors|ColorProperty"]);
  dart.addTypeCaches(colors.ColorProperty);
  dart.setLibraryUri(colors.ColorProperty, I[1]);
  colors._getHue = function _getHue(red, green, blue, max, delta) {
    let t$36$35hue = null;
    function t$36$35hue$35get() {
      let t$361;
      t$361 = t$36$35hue;
      return t$361 == null ? dart.throw(new _internal.LateError.localNI("hue")) : t$361;
    }
    function t$36$35hue$35set(hue$35param) {
      return t$36$35hue = hue$35param;
    }
    if (max === 0.0) {
      t$36$35hue$35set(0.0);
    } else if (max === red) {
      t$36$35hue$35set(60.0 * ((green - blue) / delta)[$modulo](6));
    } else if (max === green) {
      t$36$35hue$35set(60.0 * ((blue - red) / delta + 2));
    } else if (max === blue) {
      t$36$35hue$35set(60.0 * ((red - green) / delta + 4));
    }
    t$36$35hue$35set(t$36$35hue$35get()[$isNaN] ? 0.0 : t$36$35hue$35get());
    return t$36$35hue$35get();
  };
  colors._colorFromHue = function _colorFromHue(alpha, hue, chroma, secondary, match) {
    let red = null;
    let green = null;
    let blue = null;
    if (hue < 60.0) {
      red = chroma;
      green = secondary;
      blue = 0.0;
    } else if (hue < 120.0) {
      red = secondary;
      green = chroma;
      blue = 0.0;
    } else if (hue < 180.0) {
      red = 0.0;
      green = chroma;
      blue = secondary;
    } else if (hue < 240.0) {
      red = 0.0;
      green = secondary;
      blue = chroma;
    } else if (hue < 300.0) {
      red = secondary;
      green = 0.0;
      blue = chroma;
    } else {
      red = chroma;
      green = 0.0;
      blue = secondary;
    }
    return new ui.Color.fromARGB((alpha * 255)[$round](), ((red + match) * 255)[$round](), ((green + match) * 255)[$round](), ((blue + match) * 255)[$round]());
  };
  dart.moduleConstCaches.set("packages/flutter/src/painting/colors.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__colors|ColorSwatch":{"ColorSwatch.T":"1","ui|Color":[]},"core|MapEntry":{"MapEntry.K":"1","MapEntry.V":"2"},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__painting__colors|ColorProperty":{"DiagnosticsProperty.T":"ui|Color","flutter__src__foundation__diagnostics|DiagnosticsProperty":["ui|Color"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/colors.dart", {
    "package:flutter/src/painting/colors.dart": colors
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["colors.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/colors.dart.lib.js"}');
  // Exports:
  return {
    src__painting__colors: colors
  };
}));

//# sourceMappingURL=colors.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/consolidate_response.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__foundation__consolidate_response_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const _http = dart_sdk._http;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var consolidate_response = Object.create(dart.library);
  var $add = dartx.add;
  var $length = dartx.length;
  var $setRange = dartx.setRange;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    ListOfint: () => (T.ListOfint = dart.constFn(dart_rti.findType("core|List<core|int>")))(),
    ObjectNTovoid: () => (T.ObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Object?)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    Uint8List: () => (T.Uint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List")))(),
    ListNOfListOfint: () => (T.ListNOfListOfint = dart.constFn(dart_rti.findType("core|List<core|List<core|int>>?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart_rti.findType("typed_data|Uint8List?")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    ListOfintTovoid: () => (T.ListOfintTovoid = dart.constFn(dart_rti.findType("~(core|List<core|int>)")))()
  };
  var G = {
    JSArrayOfListOfint: () => (G.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T.ListOfint())))(),
    CompleterOfUint8List: () => (G.CompleterOfUint8List = dart.constFn(async.Completer$(T.Uint8List())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "compressed",
        [_Enum_index]: 2
      }, _http.HttpClientResponseCompressionState.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "decompressed",
        [_Enum_index]: 1
      }, _http.HttpClientResponseCompressionState.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "notCompressed",
        [_Enum_index]: 0
      }, _http.HttpClientResponseCompressionState.prototype));
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/consolidate_response.dart",
    "package:flutter/src/foundation/consolidate_response.dart",
    "dart:core",
    "dart:typed_data"
  ];
  var _chunks = dart.privateName(consolidate_response, "_chunks");
  var _contentLength = dart.privateName(consolidate_response, "_contentLength");
  var _bytes = dart.privateName(consolidate_response, "_bytes");
  var _as = dart.privateName(dart_rti, "_as");
  consolidate_response._OutputBuffer = class _OutputBuffer extends convert.ByteConversionSink {
    add(chunk) {
      T.ListOfint()[_as](chunk);
      if (!(this[_bytes] == null)) dart.assertFailed(null, I[0], 106, 12, "_bytes == null");
      dart.nullCheck(this[_chunks])[$add](chunk);
      this[_contentLength] = this[_contentLength] + chunk[$length];
    }
    close() {
      if (this[_bytes] != null) {
        return;
      }
      this[_bytes] = _native_typed_data.NativeUint8List.new(this[_contentLength]);
      let offset = 0;
      for (let chunk of dart.nullCheck(this[_chunks])) {
        dart.nullCheck(this[_bytes])[$setRange](offset, offset + chunk[$length], chunk);
        offset = offset + chunk[$length];
      }
      this[_chunks] = null;
    }
    get bytes() {
      if (!(this[_bytes] != null)) dart.assertFailed(null, I[0], 127, 12, "_bytes != null");
      return dart.nullCheck(this[_bytes]);
    }
    static ['_#new#tearOff']() {
      return new consolidate_response._OutputBuffer.new();
    }
  };
  (consolidate_response._OutputBuffer.new = function() {
    this[_chunks] = G.JSArrayOfListOfint().of([]);
    this[_contentLength] = 0;
    this[_bytes] = null;
    dart.global.Object.getPrototypeOf(consolidate_response._OutputBuffer).new.call(this);
    ;
  }).prototype = consolidate_response._OutputBuffer.prototype;
  dart.addTypeTests(consolidate_response._OutputBuffer);
  dart.addRtiResources(consolidate_response._OutputBuffer, ["flutter__src__foundation__consolidate_response|_OutputBuffer"]);
  dart.addTypeCaches(consolidate_response._OutputBuffer);
  dart.setMethodSignature(consolidate_response._OutputBuffer, () => dart.global.Object.setPrototypeOf({
    add: T.ObjectNTovoid(),
    close: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(consolidate_response._OutputBuffer))));
  dart.setGetterSignature(consolidate_response._OutputBuffer, () => dart.global.Object.setPrototypeOf({bytes: T.Uint8List()}, dart.getGetters(dart.global.Object.getPrototypeOf(consolidate_response._OutputBuffer))));
  dart.setLibraryUri(consolidate_response._OutputBuffer, I[1]);
  dart.setFieldSignature(consolidate_response._OutputBuffer, () => dart.global.Object.setPrototypeOf({
    [_chunks]: {type: T.ListNOfListOfint(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_contentLength]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_bytes]: {type: T.Uint8ListN(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(consolidate_response._OutputBuffer))));
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _is = dart.privateName(dart_rti, "_is");
  consolidate_response.consolidateHttpClientResponseBytes = function consolidateHttpClientResponseBytes(response, opts) {
    let autoUncompress = opts && 'autoUncompress' in opts ? opts.autoUncompress : true;
    let onBytesReceived = opts && 'onBytesReceived' in opts ? opts.onBytesReceived : null;
    let completer = G.CompleterOfUint8List().sync();
    let output = new consolidate_response._OutputBuffer.new();
    let sink = output;
    let expectedContentLength = response.contentLength;
    if (expectedContentLength === -1) {
      expectedContentLength = null;
    }
    switch (response.compressionState) {
      case C[0] || CT.C0:
        {
          if (autoUncompress) {
            sink = io.gzip.decoder.startChunkedConversion(output);
          }
          break;
        }
      case C[1] || CT.C1:
        {
          expectedContentLength = null;
          break;
        }
      case C[2] || CT.C2:
        {
          break;
        }
    }
    let bytesReceived = 0;
    let t$36$35subscription = null;
    function t$36$35subscription$35get() {
      let t$361;
      t$361 = t$36$35subscription;
      return t$361 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t$361;
    }
    function t$36$35subscription$35set(subscription$35param) {
      if (t$36$35subscription == null)
        return t$36$35subscription = subscription$35param;
      else
        dart.throw(new _internal.LateError.localAI("subscription"));
    }
    t$36$35subscription$35set(response.listen(dart.fn(chunk => {
      sink.add(chunk);
      if (onBytesReceived != null) {
        bytesReceived = bytesReceived + chunk[$length];
        try {
          onBytesReceived(bytesReceived, expectedContentLength);
        } catch (t$36$35e) {
          let error = dart.getThrown(t$36$35e);
          let stackTrace = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](error)) {
            completer.completeError(error, stackTrace);
            t$36$35subscription$35get().cancel();
            return;
          } else
            throw t$36$35e;
        }
      }
    }, T.ListOfintTovoid()), {onDone: dart.fn(() => {
        sink.close();
        completer.complete(output.bytes);
      }, T.VoidTovoid()), onError: dart.bind(completer, 'completeError'), cancelOnError: true}));
    return completer.future;
  };
  dart.moduleConstCaches.set("packages/flutter/src/foundation/consolidate_response.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"typed_data|Uint8List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"flutter__src__foundation__consolidate_response|_OutputBuffer":{"convert|ByteConversionSink":[],"ChunkedConversionSink.T":"core|List<core|int>","convert|ChunkedConversionSink":["core|List<core|int>"],"Sink.T":"core|List<core|int>","core|Sink":["core|List<core|int>"]},"convert|ByteConversionSink":{"ChunkedConversionSink.T":"core|List<core|int>","convert|ChunkedConversionSink":["core|List<core|int>"],"Sink.T":"core|List<core|int>","core|Sink":["core|List<core|int>"]},"convert|ChunkedConversionSink":{"ChunkedConversionSink.T":"1","Sink.T":"1","core|Sink":["1"]},"core|Sink":{"Sink.T":"1"}}'));
  dart.trackLibraries("packages/flutter/src/foundation/consolidate_response.dart", {
    "package:flutter/src/foundation/consolidate_response.dart": consolidate_response
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["consolidate_response.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAwGqB;;AACjB,YAAO,AAAO;AACL,MAAF,eAAP,qBAAa,KAAK;AAClB,6BAAA,AAAe,uBAAG,AAAM,KAAD;IACzB;;AAIE,UAAI;AAEF;;AAEF,qBAAS,uCAAU;AACf,mBAAS;AACb,eAAqB,QAAgB,gBAAP;AACpB,QAAF,eAAN,yBAAiB,MAAM,EAAE,AAAO,MAAD,GAAG,AAAM,KAAD,WAAS,KAAK;AACrD,iBAAA,AAAO,MAAD,GAAI,AAAM,KAAD;;AAEjB,sBAAU;IACZ;;AAGE,YAAO,AAAO;AACd,YAAa,gBAAN;IACT;;;;;;IA7BiB,gBAAqB;IAClC,uBAAiB;IACV;;;EA4Bb;;;;;;;;;;;;;;;;;;wGAhFqB;QACd;QACkB;AAEI,oBAAY;AAEnB,iBAAS;AACV,eAAO,MAAM;AAC3B,gCAAwB,AAAS,QAAD;AACrC,QAAI,AAAsB,qBAAD,KAAI,CAAC;AAC5B,8BAAwB;;AAE1B,YAAQ,AAAS,QAAD;;;AAEZ,cAAI,cAAc;AAEhB,mBAAO,AAAK,AAAQ,uCAAuB,MAAM;;;;;;AAKnD,kCAAwB;;;;;AAGxB;;;AAGA,wBAAgB;AACqB;;;;;;;;;;;;AACzC,8BAAe,AAAS,QAAD,QAAQ,QAAW;AACnC,MAAL,IAAI,KAAK,KAAK;AACd,UAAI,eAAe;AACjB,wBAAA,AAAc,aAAD,GAAI,AAAM,KAAD;AACtB;AACiB,UAAf,eAAe,CAAC,aAAa,EAAE,qBAAqB;;cAC7C;cAAO;AAAd;AACU,YAAV,SAAS,eAAe,KAAK,EAAE,UAAU;AAC5B,YAAb;AACA;;;;;sCAGK;AACJ,QAAL,IAAI;AACM,QAAV,SAAS,UAAU,AAAO,MAAD;mCACL,UAAV,SAAS,mCAA+B;AAEpD,UAAO,AAAU,UAAD;EAClB","file":"../../../../../../../../F:/packages/flutter/src/foundation/consolidate_response.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__consolidate_response: consolidate_response
  };
}));

//# sourceMappingURL=consolidate_response.dart.lib.js.map

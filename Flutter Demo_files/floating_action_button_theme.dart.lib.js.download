// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/material/floating_action_button_theme.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/widgets/unique_widget.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__material__floating_action_button_theme_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__widgets__unique_widget$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const box = packages__flutter__src__widgets__unique_widget$46dart.src__rendering__box;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const text_style = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_style;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var floating_action_button_theme = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    FloatingActionButtonThemeData: () => (T.FloatingActionButtonThemeData = dart.constFn(dart_rti.findType("flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData")))(),
    ShapeBorder: () => (T.ShapeBorder = dart.constFn(dart_rti.findType("flutter__src__painting__borders|ShapeBorder")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    BoxConstraints: () => (T.BoxConstraints = dart.constFn(dart_rti.findType("flutter__src__rendering__box|BoxConstraints")))(),
    EdgeInsetsGeometry: () => (T.EdgeInsetsGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__edge_insets|EdgeInsetsGeometry")))(),
    TextStyle: () => (T.TextStyle = dart.constFn(dart_rti.findType("flutter__src__painting__text_style|TextStyle")))(),
    MaterialStatePropertyOfMouseCursorN: () => (T.MaterialStatePropertyOfMouseCursorN = dart.constFn(dart_rti.findType("flutter__src__material__material_state|MaterialStateProperty<flutter__src__services__mouse_cursor|MouseCursor?>")))(),
    __ToFloatingActionButtonThemeData: () => (T.__ToFloatingActionButtonThemeData = dart.constFn(dart_rti.findType("flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData({backgroundColor:ui|Color?,disabledElevation:core|double?,elevation:core|double?,enableFeedback:core|bool?,extendedIconLabelSpacing:core|double?,extendedPadding:flutter__src__painting__edge_insets|EdgeInsetsGeometry?,extendedSizeConstraints:flutter__src__rendering__box|BoxConstraints?,extendedTextStyle:flutter__src__painting__text_style|TextStyle?,focusColor:ui|Color?,focusElevation:core|double?,foregroundColor:ui|Color?,highlightElevation:core|double?,hoverColor:ui|Color?,hoverElevation:core|double?,iconSize:core|double?,largeSizeConstraints:flutter__src__rendering__box|BoxConstraints?,mouseCursor:flutter__src__material__material_state|MaterialStateProperty<flutter__src__services__mouse_cursor|MouseCursor?>?,shape:flutter__src__painting__borders|ShapeBorder?,sizeConstraints:flutter__src__rendering__box|BoxConstraints?,smallSizeConstraints:flutter__src__rendering__box|BoxConstraints?,splashColor:ui|Color?})")))(),
    FloatingActionButtonThemeDataNAndFloatingActionButtonThemeDataNAnddoubleToFloatingActionButtonThemeDataN: () => (T.FloatingActionButtonThemeDataNAndFloatingActionButtonThemeDataNAnddoubleToFloatingActionButtonThemeDataN = dart.constFn(dart_rti.findType("flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData?(flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData?,flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData?,core|double)")))(),
    ColorN: () => (T.ColorN = dart.constFn(dart_rti.findType("ui|Color?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    ShapeBorderN: () => (T.ShapeBorderN = dart.constFn(dart_rti.findType("flutter__src__painting__borders|ShapeBorder?")))(),
    boolN: () => (T.boolN = dart.constFn(dart_rti.findType("core|bool?")))(),
    BoxConstraintsN: () => (T.BoxConstraintsN = dart.constFn(dart_rti.findType("flutter__src__rendering__box|BoxConstraints?")))(),
    EdgeInsetsGeometryN: () => (T.EdgeInsetsGeometryN = dart.constFn(dart_rti.findType("flutter__src__painting__edge_insets|EdgeInsetsGeometry?")))(),
    TextStyleN: () => (T.TextStyleN = dart.constFn(dart_rti.findType("flutter__src__painting__text_style|TextStyle?")))(),
    MaterialStatePropertyNOfMouseCursorN: () => (T.MaterialStatePropertyNOfMouseCursorN = dart.constFn(dart_rti.findType("flutter__src__material__material_state|MaterialStateProperty<flutter__src__services__mouse_cursor|MouseCursor?>?")))()
  };
  var G = {
    DiagnosticsPropertyOfShapeBorder: () => (G.DiagnosticsPropertyOfShapeBorder = dart.constFn(diagnostics.DiagnosticsProperty$(T.ShapeBorder())))(),
    DiagnosticsPropertyOfbool: () => (G.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(T.bool())))(),
    DiagnosticsPropertyOfBoxConstraints: () => (G.DiagnosticsPropertyOfBoxConstraints = dart.constFn(diagnostics.DiagnosticsProperty$(T.BoxConstraints())))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (G.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(T.EdgeInsetsGeometry())))(),
    DiagnosticsPropertyOfTextStyle: () => (G.DiagnosticsPropertyOfTextStyle = dart.constFn(diagnostics.DiagnosticsProperty$(T.TextStyle())))(),
    DiagnosticsPropertyOfMaterialStatePropertyOfMouseCursorN: () => (G.DiagnosticsPropertyOfMaterialStatePropertyOfMouseCursorN = dart.constFn(diagnostics.DiagnosticsProperty$(T.MaterialStatePropertyOfMouseCursorN())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/material/floating_action_button_theme.dart",
    "dart:ui",
    "dart:core",
    "package:flutter/src/painting/borders.dart",
    "package:flutter/src/rendering/box.dart",
    "package:flutter/src/painting/edge_insets.dart",
    "package:flutter/src/painting/text_style.dart",
    "package:flutter/src/material/material_state.dart"
  ];
  var foregroundColor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.foregroundColor");
  var backgroundColor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.backgroundColor");
  var focusColor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.focusColor");
  var hoverColor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.hoverColor");
  var splashColor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.splashColor");
  var elevation$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.elevation");
  var focusElevation$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.focusElevation");
  var hoverElevation$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.hoverElevation");
  var disabledElevation$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.disabledElevation");
  var highlightElevation$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.highlightElevation");
  var shape$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.shape");
  var enableFeedback$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.enableFeedback");
  var iconSize$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.iconSize");
  var sizeConstraints$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.sizeConstraints");
  var smallSizeConstraints$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.smallSizeConstraints");
  var largeSizeConstraints$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.largeSizeConstraints");
  var extendedSizeConstraints$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.extendedSizeConstraints");
  var extendedIconLabelSpacing$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.extendedIconLabelSpacing");
  var extendedPadding$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.extendedPadding");
  var extendedTextStyle$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.extendedTextStyle");
  var mouseCursor$ = dart.privateName(floating_action_button_theme, "FloatingActionButtonThemeData.mouseCursor");
  var _is = dart.privateName(dart_rti, "_is");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  floating_action_button_theme.FloatingActionButtonThemeData = class FloatingActionButtonThemeData extends Object_Diagnosticable$36 {
    get foregroundColor() {
      return this[foregroundColor$];
    }
    set foregroundColor(value) {
      super.foregroundColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get focusColor() {
      return this[focusColor$];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get splashColor() {
      return this[splashColor$];
    }
    set splashColor(value) {
      super.splashColor = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get focusElevation() {
      return this[focusElevation$];
    }
    set focusElevation(value) {
      super.focusElevation = value;
    }
    get hoverElevation() {
      return this[hoverElevation$];
    }
    set hoverElevation(value) {
      super.hoverElevation = value;
    }
    get disabledElevation() {
      return this[disabledElevation$];
    }
    set disabledElevation(value) {
      super.disabledElevation = value;
    }
    get highlightElevation() {
      return this[highlightElevation$];
    }
    set highlightElevation(value) {
      super.highlightElevation = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    get enableFeedback() {
      return this[enableFeedback$];
    }
    set enableFeedback(value) {
      super.enableFeedback = value;
    }
    get iconSize() {
      return this[iconSize$];
    }
    set iconSize(value) {
      super.iconSize = value;
    }
    get sizeConstraints() {
      return this[sizeConstraints$];
    }
    set sizeConstraints(value) {
      super.sizeConstraints = value;
    }
    get smallSizeConstraints() {
      return this[smallSizeConstraints$];
    }
    set smallSizeConstraints(value) {
      super.smallSizeConstraints = value;
    }
    get largeSizeConstraints() {
      return this[largeSizeConstraints$];
    }
    set largeSizeConstraints(value) {
      super.largeSizeConstraints = value;
    }
    get extendedSizeConstraints() {
      return this[extendedSizeConstraints$];
    }
    set extendedSizeConstraints(value) {
      super.extendedSizeConstraints = value;
    }
    get extendedIconLabelSpacing() {
      return this[extendedIconLabelSpacing$];
    }
    set extendedIconLabelSpacing(value) {
      super.extendedIconLabelSpacing = value;
    }
    get extendedPadding() {
      return this[extendedPadding$];
    }
    set extendedPadding(value) {
      super.extendedPadding = value;
    }
    get extendedTextStyle() {
      return this[extendedTextStyle$];
    }
    set extendedTextStyle(value) {
      super.extendedTextStyle = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    static ['_#new#tearOff'](opts) {
      let foregroundColor = opts && 'foregroundColor' in opts ? opts.foregroundColor : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let focusElevation = opts && 'focusElevation' in opts ? opts.focusElevation : null;
      let hoverElevation = opts && 'hoverElevation' in opts ? opts.hoverElevation : null;
      let disabledElevation = opts && 'disabledElevation' in opts ? opts.disabledElevation : null;
      let highlightElevation = opts && 'highlightElevation' in opts ? opts.highlightElevation : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let enableFeedback = opts && 'enableFeedback' in opts ? opts.enableFeedback : null;
      let iconSize = opts && 'iconSize' in opts ? opts.iconSize : null;
      let sizeConstraints = opts && 'sizeConstraints' in opts ? opts.sizeConstraints : null;
      let smallSizeConstraints = opts && 'smallSizeConstraints' in opts ? opts.smallSizeConstraints : null;
      let largeSizeConstraints = opts && 'largeSizeConstraints' in opts ? opts.largeSizeConstraints : null;
      let extendedSizeConstraints = opts && 'extendedSizeConstraints' in opts ? opts.extendedSizeConstraints : null;
      let extendedIconLabelSpacing = opts && 'extendedIconLabelSpacing' in opts ? opts.extendedIconLabelSpacing : null;
      let extendedPadding = opts && 'extendedPadding' in opts ? opts.extendedPadding : null;
      let extendedTextStyle = opts && 'extendedTextStyle' in opts ? opts.extendedTextStyle : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      return new floating_action_button_theme.FloatingActionButtonThemeData.new({foregroundColor: foregroundColor, backgroundColor: backgroundColor, focusColor: focusColor, hoverColor: hoverColor, splashColor: splashColor, elevation: elevation, focusElevation: focusElevation, hoverElevation: hoverElevation, disabledElevation: disabledElevation, highlightElevation: highlightElevation, shape: shape, enableFeedback: enableFeedback, iconSize: iconSize, sizeConstraints: sizeConstraints, smallSizeConstraints: smallSizeConstraints, largeSizeConstraints: largeSizeConstraints, extendedSizeConstraints: extendedSizeConstraints, extendedIconLabelSpacing: extendedIconLabelSpacing, extendedPadding: extendedPadding, extendedTextStyle: extendedTextStyle, mouseCursor: mouseCursor});
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5, t$360$6, t$360$7, t$360$8, t$360$9, t$360$10, t$360$11, t$360$12, t$360$13, t$360$14, t$360$15, t$360$16, t$360$17, t$360$18;
      let foregroundColor = opts && 'foregroundColor' in opts ? opts.foregroundColor : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let focusElevation = opts && 'focusElevation' in opts ? opts.focusElevation : null;
      let hoverElevation = opts && 'hoverElevation' in opts ? opts.hoverElevation : null;
      let disabledElevation = opts && 'disabledElevation' in opts ? opts.disabledElevation : null;
      let highlightElevation = opts && 'highlightElevation' in opts ? opts.highlightElevation : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let enableFeedback = opts && 'enableFeedback' in opts ? opts.enableFeedback : null;
      let iconSize = opts && 'iconSize' in opts ? opts.iconSize : null;
      let sizeConstraints = opts && 'sizeConstraints' in opts ? opts.sizeConstraints : null;
      let smallSizeConstraints = opts && 'smallSizeConstraints' in opts ? opts.smallSizeConstraints : null;
      let largeSizeConstraints = opts && 'largeSizeConstraints' in opts ? opts.largeSizeConstraints : null;
      let extendedSizeConstraints = opts && 'extendedSizeConstraints' in opts ? opts.extendedSizeConstraints : null;
      let extendedIconLabelSpacing = opts && 'extendedIconLabelSpacing' in opts ? opts.extendedIconLabelSpacing : null;
      let extendedPadding = opts && 'extendedPadding' in opts ? opts.extendedPadding : null;
      let extendedTextStyle = opts && 'extendedTextStyle' in opts ? opts.extendedTextStyle : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      return new floating_action_button_theme.FloatingActionButtonThemeData.new({foregroundColor: (t$360 = foregroundColor, t$360 == null ? this.foregroundColor : t$360), backgroundColor: (t$360$ = backgroundColor, t$360$ == null ? this.backgroundColor : t$360$), focusColor: (t$360$0 = focusColor, t$360$0 == null ? this.focusColor : t$360$0), hoverColor: (t$360$1 = hoverColor, t$360$1 == null ? this.hoverColor : t$360$1), splashColor: (t$360$2 = splashColor, t$360$2 == null ? this.splashColor : t$360$2), elevation: (t$360$3 = elevation, t$360$3 == null ? this.elevation : t$360$3), focusElevation: (t$360$4 = focusElevation, t$360$4 == null ? this.focusElevation : t$360$4), hoverElevation: (t$360$5 = hoverElevation, t$360$5 == null ? this.hoverElevation : t$360$5), disabledElevation: (t$360$6 = disabledElevation, t$360$6 == null ? this.disabledElevation : t$360$6), highlightElevation: (t$360$7 = highlightElevation, t$360$7 == null ? this.highlightElevation : t$360$7), shape: (t$360$8 = shape, t$360$8 == null ? this.shape : t$360$8), enableFeedback: (t$360$9 = enableFeedback, t$360$9 == null ? this.enableFeedback : t$360$9), iconSize: (t$360$10 = iconSize, t$360$10 == null ? this.iconSize : t$360$10), sizeConstraints: (t$360$11 = sizeConstraints, t$360$11 == null ? this.sizeConstraints : t$360$11), smallSizeConstraints: (t$360$12 = smallSizeConstraints, t$360$12 == null ? this.smallSizeConstraints : t$360$12), largeSizeConstraints: (t$360$13 = largeSizeConstraints, t$360$13 == null ? this.largeSizeConstraints : t$360$13), extendedSizeConstraints: (t$360$14 = extendedSizeConstraints, t$360$14 == null ? this.extendedSizeConstraints : t$360$14), extendedIconLabelSpacing: (t$360$15 = extendedIconLabelSpacing, t$360$15 == null ? this.extendedIconLabelSpacing : t$360$15), extendedPadding: (t$360$16 = extendedPadding, t$360$16 == null ? this.extendedPadding : t$360$16), extendedTextStyle: (t$360$17 = extendedTextStyle, t$360$17 == null ? this.extendedTextStyle : t$360$17), mouseCursor: (t$360$18 = mouseCursor, t$360$18 == null ? this.mouseCursor : t$360$18)});
    }
    static lerp(a, b, t) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5, t$360$6, t$360$7, t$360$8, t$360$9, t$360$10, t$360$11, t$360$12, t$360$13, t$360$14, t$360$15, t$360$16, t$360$17, t$360$18, t$360$19, t$360$20, t$360$21, t$360$22, t$360$23, t$360$24, t$360$25, t$360$26, t$360$27, t$360$28, t$360$29, t$360$30, t$360$31, t$360$32, t$360$33, t$360$34, t$360$35, t$360$36, t$360$37, t$360$38, t$360$39;
      if (a == b) {
        return a;
      }
      return new floating_action_button_theme.FloatingActionButtonThemeData.new({foregroundColor: ui.Color.lerp((t$360 = a, t$360 == null ? null : t$360.foregroundColor), (t$360$ = b, t$360$ == null ? null : t$360$.foregroundColor), t), backgroundColor: ui.Color.lerp((t$360$0 = a, t$360$0 == null ? null : t$360$0.backgroundColor), (t$360$1 = b, t$360$1 == null ? null : t$360$1.backgroundColor), t), focusColor: ui.Color.lerp((t$360$2 = a, t$360$2 == null ? null : t$360$2.focusColor), (t$360$3 = b, t$360$3 == null ? null : t$360$3.focusColor), t), hoverColor: ui.Color.lerp((t$360$4 = a, t$360$4 == null ? null : t$360$4.hoverColor), (t$360$5 = b, t$360$5 == null ? null : t$360$5.hoverColor), t), splashColor: ui.Color.lerp((t$360$6 = a, t$360$6 == null ? null : t$360$6.splashColor), (t$360$7 = b, t$360$7 == null ? null : t$360$7.splashColor), t), elevation: ui.lerpDouble((t$360$8 = a, t$360$8 == null ? null : t$360$8.elevation), (t$360$9 = b, t$360$9 == null ? null : t$360$9.elevation), t), focusElevation: ui.lerpDouble((t$360$10 = a, t$360$10 == null ? null : t$360$10.focusElevation), (t$360$11 = b, t$360$11 == null ? null : t$360$11.focusElevation), t), hoverElevation: ui.lerpDouble((t$360$12 = a, t$360$12 == null ? null : t$360$12.hoverElevation), (t$360$13 = b, t$360$13 == null ? null : t$360$13.hoverElevation), t), disabledElevation: ui.lerpDouble((t$360$14 = a, t$360$14 == null ? null : t$360$14.disabledElevation), (t$360$15 = b, t$360$15 == null ? null : t$360$15.disabledElevation), t), highlightElevation: ui.lerpDouble((t$360$16 = a, t$360$16 == null ? null : t$360$16.highlightElevation), (t$360$17 = b, t$360$17 == null ? null : t$360$17.highlightElevation), t), shape: borders.ShapeBorder.lerp((t$360$18 = a, t$360$18 == null ? null : t$360$18.shape), (t$360$19 = b, t$360$19 == null ? null : t$360$19.shape), t), enableFeedback: t < 0.5 ? (t$360$20 = a, t$360$20 == null ? null : t$360$20.enableFeedback) : (t$360$21 = b, t$360$21 == null ? null : t$360$21.enableFeedback), iconSize: ui.lerpDouble((t$360$22 = a, t$360$22 == null ? null : t$360$22.iconSize), (t$360$23 = b, t$360$23 == null ? null : t$360$23.iconSize), t), sizeConstraints: box.BoxConstraints.lerp((t$360$24 = a, t$360$24 == null ? null : t$360$24.sizeConstraints), (t$360$25 = b, t$360$25 == null ? null : t$360$25.sizeConstraints), t), smallSizeConstraints: box.BoxConstraints.lerp((t$360$26 = a, t$360$26 == null ? null : t$360$26.smallSizeConstraints), (t$360$27 = b, t$360$27 == null ? null : t$360$27.smallSizeConstraints), t), largeSizeConstraints: box.BoxConstraints.lerp((t$360$28 = a, t$360$28 == null ? null : t$360$28.largeSizeConstraints), (t$360$29 = b, t$360$29 == null ? null : t$360$29.largeSizeConstraints), t), extendedSizeConstraints: box.BoxConstraints.lerp((t$360$30 = a, t$360$30 == null ? null : t$360$30.extendedSizeConstraints), (t$360$31 = b, t$360$31 == null ? null : t$360$31.extendedSizeConstraints), t), extendedIconLabelSpacing: ui.lerpDouble((t$360$32 = a, t$360$32 == null ? null : t$360$32.extendedIconLabelSpacing), (t$360$33 = b, t$360$33 == null ? null : t$360$33.extendedIconLabelSpacing), t), extendedPadding: edge_insets.EdgeInsetsGeometry.lerp((t$360$34 = a, t$360$34 == null ? null : t$360$34.extendedPadding), (t$360$35 = b, t$360$35 == null ? null : t$360$35.extendedPadding), t), extendedTextStyle: text_style.TextStyle.lerp((t$360$36 = a, t$360$36 == null ? null : t$360$36.extendedTextStyle), (t$360$37 = b, t$360$37 == null ? null : t$360$37.extendedTextStyle), t), mouseCursor: t < 0.5 ? (t$360$38 = a, t$360$38 == null ? null : t$360$38.mouseCursor) : (t$360$39 = b, t$360$39 == null ? null : t$360$39.mouseCursor)});
    }
    get hashCode() {
      return core.Object.hash(this.foregroundColor, this.backgroundColor, this.focusColor, this.hoverColor, this.splashColor, this.elevation, this.focusElevation, this.hoverElevation, this.disabledElevation, this.highlightElevation, this.shape, this.enableFeedback, this.iconSize, this.sizeConstraints, this.smallSizeConstraints, this.largeSizeConstraints, this.extendedSizeConstraints, this.extendedIconLabelSpacing, this.extendedPadding, core.Object.hash(this.extendedTextStyle, this.mouseCursor));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.FloatingActionButtonThemeData()[_is](other) && dart.equals(other.foregroundColor, this.foregroundColor) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.focusColor, this.focusColor) && dart.equals(other.hoverColor, this.hoverColor) && dart.equals(other.splashColor, this.splashColor) && other.elevation == this.elevation && other.focusElevation == this.focusElevation && other.hoverElevation == this.hoverElevation && other.disabledElevation == this.disabledElevation && other.highlightElevation == this.highlightElevation && dart.equals(other.shape, this.shape) && other.enableFeedback == this.enableFeedback && other.iconSize == this.iconSize && dart.equals(other.sizeConstraints, this.sizeConstraints) && dart.equals(other.smallSizeConstraints, this.smallSizeConstraints) && dart.equals(other.largeSizeConstraints, this.largeSizeConstraints) && dart.equals(other.extendedSizeConstraints, this.extendedSizeConstraints) && other.extendedIconLabelSpacing == this.extendedIconLabelSpacing && dart.equals(other.extendedPadding, this.extendedPadding) && dart.equals(other.extendedTextStyle, this.extendedTextStyle) && dart.equals(other.mouseCursor, this.mouseCursor);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new colors.ColorProperty.new("foregroundColor", this.foregroundColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("focusColor", this.focusColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("hoverColor", this.hoverColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("splashColor", this.splashColor, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("focusElevation", this.focusElevation, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("hoverElevation", this.hoverElevation, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("disabledElevation", this.disabledElevation, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("highlightElevation", this.highlightElevation, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfShapeBorder()).new("shape", this.shape, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("enableFeedback", this.enableFeedback, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("iconSize", this.iconSize, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfBoxConstraints()).new("sizeConstraints", this.sizeConstraints, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfBoxConstraints()).new("smallSizeConstraints", this.smallSizeConstraints, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfBoxConstraints()).new("largeSizeConstraints", this.largeSizeConstraints, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfBoxConstraints()).new("extendedSizeConstraints", this.extendedSizeConstraints, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("extendedIconLabelSpacing", this.extendedIconLabelSpacing, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfEdgeInsetsGeometry()).new("extendedPadding", this.extendedPadding, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfTextStyle()).new("extendedTextStyle", this.extendedTextStyle, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfMaterialStatePropertyOfMouseCursorN()).new("mouseCursor", this.mouseCursor, {defaultValue: null}));
    }
  };
  (floating_action_button_theme.FloatingActionButtonThemeData.new = function(opts) {
    let foregroundColor = opts && 'foregroundColor' in opts ? opts.foregroundColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let focusElevation = opts && 'focusElevation' in opts ? opts.focusElevation : null;
    let hoverElevation = opts && 'hoverElevation' in opts ? opts.hoverElevation : null;
    let disabledElevation = opts && 'disabledElevation' in opts ? opts.disabledElevation : null;
    let highlightElevation = opts && 'highlightElevation' in opts ? opts.highlightElevation : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let enableFeedback = opts && 'enableFeedback' in opts ? opts.enableFeedback : null;
    let iconSize = opts && 'iconSize' in opts ? opts.iconSize : null;
    let sizeConstraints = opts && 'sizeConstraints' in opts ? opts.sizeConstraints : null;
    let smallSizeConstraints = opts && 'smallSizeConstraints' in opts ? opts.smallSizeConstraints : null;
    let largeSizeConstraints = opts && 'largeSizeConstraints' in opts ? opts.largeSizeConstraints : null;
    let extendedSizeConstraints = opts && 'extendedSizeConstraints' in opts ? opts.extendedSizeConstraints : null;
    let extendedIconLabelSpacing = opts && 'extendedIconLabelSpacing' in opts ? opts.extendedIconLabelSpacing : null;
    let extendedPadding = opts && 'extendedPadding' in opts ? opts.extendedPadding : null;
    let extendedTextStyle = opts && 'extendedTextStyle' in opts ? opts.extendedTextStyle : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    this[foregroundColor$] = foregroundColor;
    this[backgroundColor$] = backgroundColor;
    this[focusColor$] = focusColor;
    this[hoverColor$] = hoverColor;
    this[splashColor$] = splashColor;
    this[elevation$] = elevation;
    this[focusElevation$] = focusElevation;
    this[hoverElevation$] = hoverElevation;
    this[disabledElevation$] = disabledElevation;
    this[highlightElevation$] = highlightElevation;
    this[shape$] = shape;
    this[enableFeedback$] = enableFeedback;
    this[iconSize$] = iconSize;
    this[sizeConstraints$] = sizeConstraints;
    this[smallSizeConstraints$] = smallSizeConstraints;
    this[largeSizeConstraints$] = largeSizeConstraints;
    this[extendedSizeConstraints$] = extendedSizeConstraints;
    this[extendedIconLabelSpacing$] = extendedIconLabelSpacing;
    this[extendedPadding$] = extendedPadding;
    this[extendedTextStyle$] = extendedTextStyle;
    this[mouseCursor$] = mouseCursor;
    ;
  }).prototype = floating_action_button_theme.FloatingActionButtonThemeData.prototype;
  dart.addTypeTests(floating_action_button_theme.FloatingActionButtonThemeData);
  dart.addRtiResources(floating_action_button_theme.FloatingActionButtonThemeData, ["flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData"]);
  dart.addTypeCaches(floating_action_button_theme.FloatingActionButtonThemeData);
  dart.setMethodSignature(floating_action_button_theme.FloatingActionButtonThemeData, () => dart.global.Object.setPrototypeOf({copyWith: T.__ToFloatingActionButtonThemeData()}, dart.getMethods(dart.global.Object.getPrototypeOf(floating_action_button_theme.FloatingActionButtonThemeData))));
  dart.setStaticMethodSignature(floating_action_button_theme.FloatingActionButtonThemeData, () => ['lerp']);
  dart.setLibraryUri(floating_action_button_theme.FloatingActionButtonThemeData, I[0]);
  dart.setFieldSignature(floating_action_button_theme.FloatingActionButtonThemeData, () => dart.global.Object.setPrototypeOf({
    foregroundColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[1]},
    backgroundColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[1]},
    focusColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[1]},
    hoverColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[1]},
    splashColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[1]},
    elevation: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    focusElevation: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    hoverElevation: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    disabledElevation: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    highlightElevation: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    shape: {type: T.ShapeBorderN(), isConst: false, isFinal: true, libraryUri: I[3]},
    enableFeedback: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[2]},
    iconSize: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    sizeConstraints: {type: T.BoxConstraintsN(), isConst: false, isFinal: true, libraryUri: I[4]},
    smallSizeConstraints: {type: T.BoxConstraintsN(), isConst: false, isFinal: true, libraryUri: I[4]},
    largeSizeConstraints: {type: T.BoxConstraintsN(), isConst: false, isFinal: true, libraryUri: I[4]},
    extendedSizeConstraints: {type: T.BoxConstraintsN(), isConst: false, isFinal: true, libraryUri: I[4]},
    extendedIconLabelSpacing: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[2]},
    extendedPadding: {type: T.EdgeInsetsGeometryN(), isConst: false, isFinal: true, libraryUri: I[5]},
    extendedTextStyle: {type: T.TextStyleN(), isConst: false, isFinal: true, libraryUri: I[6]},
    mouseCursor: {type: T.MaterialStatePropertyNOfMouseCursorN(), isConst: false, isFinal: true, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(floating_action_button_theme.FloatingActionButtonThemeData))));
  dart.defineExtensionMethods(floating_action_button_theme.FloatingActionButtonThemeData, ['_equals']);
  dart.defineExtensionAccessors(floating_action_button_theme.FloatingActionButtonThemeData, ['hashCode']);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__material__floating_action_button_theme|FloatingActionButtonThemeData":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__rendering__box|BoxConstraints":{"flutter__src__rendering__object|Constraints":[]},"flutter__src__painting__text_style|TextStyle":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__material__material_state|MaterialStateProperty":{"MaterialStateProperty.T":"1"},"flutter__src__services__mouse_cursor|MouseCursor":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"}}'));
  dart.trackLibraries("packages/flutter/src/material/floating_action_button_theme.dart", {
    "package:flutter/src/material/floating_action_button_theme.dart": floating_action_button_theme
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["floating_action_button_theme.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/material/floating_action_button_theme.dart.lib.js"}');
  // Exports:
  return {
    src__material__floating_action_button_theme: floating_action_button_theme
  };
}));

//# sourceMappingURL=floating_action_button_theme.dart.lib.js.map

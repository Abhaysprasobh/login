// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/force_press.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/events.dart'], (function load__packages__flutter__src__gestures__force_press_dart(dart_sdk, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__events$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  var force_press = Object.create(dart.library);
  var $isNaN = dartx.isNaN;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOf_ForceState: () => (T.ListOf_ForceState = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__force_press|_ForceState>")))(),
    _ForceState: () => (T._ForceState = dart.constFn(dart_rti.findType("flutter__src__gestures__force_press|_ForceState")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    doubleAnddoubleAnddoubleTodouble: () => (T.doubleAnddoubleAnddoubleTodouble = dart.constFn(dart_rti.findType("core|double(core|double,core|double,core|double)")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    OffsetPair: () => (T.OffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    ForcePressDetailsToNvoid: () => (T.ForcePressDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__force_press|ForcePressDetails)?")))(),
    OffsetPairN: () => (T.OffsetPairN = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ready",
        [_Enum_index]: 0
      }, force_press._ForceState.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "possible",
        [_Enum_index]: 1
      }, force_press._ForceState.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "accepted",
        [_Enum_index]: 2
      }, force_press._ForceState.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "started",
        [_Enum_index]: 3
      }, force_press._ForceState.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "peaked",
        [_Enum_index]: 4
      }, force_press._ForceState.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T._ForceState());
    },
    get C6() {
      return C[6] = dart.fn(force_press.ForcePressGestureRecognizer._inverseLerp, T.doubleAnddoubleAnddoubleTodouble());
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "package:flutter/src/gestures/force_press.dart",
    "dart:core",
    "dart:ui",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/force_press.dart",
    "package:flutter/src/gestures/recognizer.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  force_press._ForceState = class _ForceState extends core._Enum {
    [_enumToString]() {
      return "_ForceState." + this[_name];
    }
  };
  (force_press._ForceState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(force_press._ForceState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = force_press._ForceState.prototype;
  dart.addTypeTests(force_press._ForceState);
  dart.addRtiResources(force_press._ForceState, ["flutter__src__gestures__force_press|_ForceState"]);
  dart.addTypeCaches(force_press._ForceState);
  dart.setMethodSignature(force_press._ForceState, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(force_press._ForceState))));
  dart.setLibraryUri(force_press._ForceState, I[0]);
  dart.setStaticFieldSignature(force_press._ForceState, () => ['values', 'ready', 'possible', 'accepted', 'started', 'peaked']);
  dart.defineLazy(force_press._ForceState, {
    /*force_press._ForceState.values*/get values() {
      return C[0] || CT.C0;
    },
    /*force_press._ForceState.ready*/get ready() {
      return C[1] || CT.C1;
    },
    /*force_press._ForceState.possible*/get possible() {
      return C[2] || CT.C2;
    },
    /*force_press._ForceState.accepted*/get accepted() {
      return C[3] || CT.C3;
    },
    /*force_press._ForceState.started*/get started() {
      return C[4] || CT.C4;
    },
    /*force_press._ForceState.peaked*/get peaked() {
      return C[5] || CT.C5;
    }
  }, false);
  var globalPosition$ = dart.privateName(force_press, "ForcePressDetails.globalPosition");
  var localPosition$ = dart.privateName(force_press, "ForcePressDetails.localPosition");
  var pressure$ = dart.privateName(force_press, "ForcePressDetails.pressure");
  force_press.ForcePressDetails = class ForcePressDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    static ['_#new#tearOff'](opts) {
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      return new force_press.ForcePressDetails.new({globalPosition: globalPosition, localPosition: localPosition, pressure: pressure});
    }
  };
  (force_press.ForcePressDetails.new = function(opts) {
    let t$362;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let pressure = opts && 'pressure' in opts ? opts.pressure : null;
    this[globalPosition$] = globalPosition;
    this[pressure$] = pressure;
    this[localPosition$] = (t$362 = localPosition, t$362 == null ? globalPosition : t$362);
    ;
  }).prototype = force_press.ForcePressDetails.prototype;
  dart.addTypeTests(force_press.ForcePressDetails);
  dart.addRtiResources(force_press.ForcePressDetails, ["flutter__src__gestures__force_press|ForcePressDetails"]);
  dart.addTypeCaches(force_press.ForcePressDetails);
  dart.setLibraryUri(force_press.ForcePressDetails, I[0]);
  dart.setFieldSignature(force_press.ForcePressDetails, () => dart.global.Object.setPrototypeOf({
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    pressure: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(force_press.ForcePressDetails))));
  var onStart = dart.privateName(force_press, "ForcePressGestureRecognizer.onStart");
  var onUpdate = dart.privateName(force_press, "ForcePressGestureRecognizer.onUpdate");
  var onPeak = dart.privateName(force_press, "ForcePressGestureRecognizer.onPeak");
  var onEnd = dart.privateName(force_press, "ForcePressGestureRecognizer.onEnd");
  var startPressure$ = dart.privateName(force_press, "ForcePressGestureRecognizer.startPressure");
  var peakPressure$ = dart.privateName(force_press, "ForcePressGestureRecognizer.peakPressure");
  var interpolation$ = dart.privateName(force_press, "ForcePressGestureRecognizer.interpolation");
  var __ForcePressGestureRecognizer__lastPosition = dart.privateName(force_press, "_#ForcePressGestureRecognizer#_lastPosition");
  var __ForcePressGestureRecognizer__lastPressure = dart.privateName(force_press, "_#ForcePressGestureRecognizer#_lastPressure");
  var _state = dart.privateName(force_press, "_state");
  var _lastPosition = dart.privateName(force_press, "_lastPosition");
  var _lastPressure = dart.privateName(force_press, "_lastPressure");
  var _is = dart.privateName(dart_rti, "_is");
  force_press.ForcePressGestureRecognizer = class ForcePressGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    get onUpdate() {
      return this[onUpdate];
    }
    set onUpdate(value) {
      this[onUpdate] = value;
    }
    get onPeak() {
      return this[onPeak];
    }
    set onPeak(value) {
      this[onPeak] = value;
    }
    get onEnd() {
      return this[onEnd];
    }
    set onEnd(value) {
      this[onEnd] = value;
    }
    get startPressure() {
      return this[startPressure$];
    }
    set startPressure(value) {
      super.startPressure = value;
    }
    get peakPressure() {
      return this[peakPressure$];
    }
    set peakPressure(value) {
      super.peakPressure = value;
    }
    get interpolation() {
      return this[interpolation$];
    }
    set interpolation(value) {
      super.interpolation = value;
    }
    static ['_#new#tearOff'](opts) {
      let startPressure = opts && 'startPressure' in opts ? opts.startPressure : 0.4;
      let peakPressure = opts && 'peakPressure' in opts ? opts.peakPressure : 0.85;
      let interpolation = opts && 'interpolation' in opts ? opts.interpolation : C[6] || CT.C6;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new force_press.ForcePressGestureRecognizer.new({startPressure: startPressure, peakPressure: peakPressure, interpolation: interpolation, debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    get [_lastPosition]() {
      let t$362;
      t$362 = this[__ForcePressGestureRecognizer__lastPosition];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_lastPosition")) : t$362;
    }
    set [_lastPosition](_lastPosition$35param) {
      this[__ForcePressGestureRecognizer__lastPosition] = _lastPosition$35param;
    }
    get [_lastPressure]() {
      let t$362;
      t$362 = this[__ForcePressGestureRecognizer__lastPressure];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_lastPressure")) : t$362;
    }
    set [_lastPressure](_lastPressure$35param) {
      this[__ForcePressGestureRecognizer__lastPressure] = _lastPressure$35param;
    }
    addAllowedPointer(event) {
      if (event.pressureMax <= 1.0) {
        this.resolve(arena.GestureDisposition.rejected);
      } else {
        super.addAllowedPointer(event);
        if (this[_state] === force_press._ForceState.ready) {
          this[_state] = force_press._ForceState.possible;
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        }
      }
    }
    handleEvent(event) {
      let t$364, t$363, t$362;
      if (!(this[_state] !== force_press._ForceState.ready)) dart.assertFailed(null, I[3], 225, 12, "_state != _ForceState.ready");
      if (T.PointerMoveEvent()[_is](event) || T.PointerDownEvent()[_is](event)) {
        let pressure = (t$362 = event.pressureMin, t$363 = event.pressureMax, t$364 = event.pressure, this.interpolation(t$362, t$363, t$364));
        if (!(pressure >= 0.0 && pressure <= 1.0 || pressure[$isNaN])) dart.assertFailed(null, I[3], 230, 9, "(pressure >= 0.0 && pressure <= 1.0) || // Interpolated pressure must be between 1.0 and 0.0...\r\n        pressure.isNaN");
        this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_lastPressure] = pressure;
        if (this[_state] === force_press._ForceState.possible) {
          if (pressure > this.startPressure) {
            this[_state] = force_press._ForceState.started;
            this.resolve(arena.GestureDisposition.accepted);
          } else if (event.delta.distanceSquared > events.computeHitSlop(event.kind, this.gestureSettings)) {
            this.resolve(arena.GestureDisposition.rejected);
          }
        }
        if (pressure > this.startPressure && this[_state] === force_press._ForceState.accepted) {
          this[_state] = force_press._ForceState.started;
          if (this.onStart != null) {
            this.invokeCallback(T.void(), "onStart", dart.fn(() => dart.nullCheck(this.onStart)(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), T.VoidTovoid()));
          }
        }
        if (this.onPeak != null && pressure > this.peakPressure && this[_state] === force_press._ForceState.started) {
          this[_state] = force_press._ForceState.peaked;
          if (this.onPeak != null) {
            this.invokeCallback(T.void(), "onPeak", dart.fn(() => dart.nullCheck(this.onPeak)(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), T.VoidTovoid()));
          }
        }
        if (this.onUpdate != null && !pressure[$isNaN] && (this[_state] === force_press._ForceState.started || this[_state] === force_press._ForceState.peaked)) {
          if (this.onUpdate != null) {
            this.invokeCallback(T.void(), "onUpdate", dart.fn(() => dart.nullCheck(this.onUpdate)(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), T.VoidTovoid()));
          }
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (this[_state] === force_press._ForceState.possible) {
        this[_state] = force_press._ForceState.accepted;
      }
      if (this.onStart != null && this[_state] === force_press._ForceState.started) {
        this.invokeCallback(T.void(), "onStart", dart.fn(() => dart.nullCheck(this.onStart)(new force_press.ForcePressDetails.new({pressure: this[_lastPressure], globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), T.VoidTovoid()));
      }
    }
    didStopTrackingLastPointer(pointer) {
      let wasAccepted = this[_state] === force_press._ForceState.started || this[_state] === force_press._ForceState.peaked;
      if (this[_state] === force_press._ForceState.possible) {
        this.resolve(arena.GestureDisposition.rejected);
        return;
      }
      if (wasAccepted && this.onEnd != null) {
        if (this.onEnd != null) {
          this.invokeCallback(T.void(), "onEnd", dart.fn(() => dart.nullCheck(this.onEnd)(new force_press.ForcePressDetails.new({pressure: 0.0, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), T.VoidTovoid()));
        }
      }
      this[_state] = force_press._ForceState.ready;
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
      this.didStopTrackingLastPointer(pointer);
    }
    static _inverseLerp(min, max, t) {
      if (!(min <= max)) dart.assertFailed(null, I[3], 323, 12, "min <= max");
      let value = (t - min) / (max - min);
      if (!value[$isNaN]) {
        value = ui.clampDouble(value, 0.0, 1.0);
      }
      return value;
    }
    get debugDescription() {
      return "force press";
    }
  };
  (force_press.ForcePressGestureRecognizer.new = function(opts) {
    let startPressure = opts && 'startPressure' in opts ? opts.startPressure : 0.4;
    let peakPressure = opts && 'peakPressure' in opts ? opts.peakPressure : 0.85;
    let interpolation = opts && 'interpolation' in opts ? opts.interpolation : C[6] || CT.C6;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onStart] = null;
    this[onUpdate] = null;
    this[onPeak] = null;
    this[onEnd] = null;
    this[__ForcePressGestureRecognizer__lastPosition] = null;
    this[__ForcePressGestureRecognizer__lastPressure] = null;
    this[_state] = force_press._ForceState.ready;
    this[startPressure$] = startPressure;
    this[peakPressure$] = peakPressure;
    this[interpolation$] = interpolation;
    if (!(peakPressure > startPressure)) dart.assertFailed(null, I[3], 128, 15, "peakPressure > startPressure");
    dart.global.Object.getPrototypeOf(force_press.ForcePressGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = force_press.ForcePressGestureRecognizer.prototype;
  dart.addTypeTests(force_press.ForcePressGestureRecognizer);
  dart.addRtiResources(force_press.ForcePressGestureRecognizer, ["flutter__src__gestures__force_press|ForcePressGestureRecognizer"]);
  dart.addTypeCaches(force_press.ForcePressGestureRecognizer);
  dart.setMethodSignature(force_press.ForcePressGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    handleEvent: T.PointerEventTovoid(),
    didStopTrackingLastPointer: T.intTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(force_press.ForcePressGestureRecognizer))));
  dart.setStaticMethodSignature(force_press.ForcePressGestureRecognizer, () => ['_inverseLerp']);
  dart.setGetterSignature(force_press.ForcePressGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_lastPosition]: T.OffsetPair(),
    [_lastPressure]: T.double(),
    debugDescription: T.String()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(force_press.ForcePressGestureRecognizer))));
  dart.setSetterSignature(force_press.ForcePressGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_lastPosition]: T.OffsetPair(),
    [_lastPressure]: T.double()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(force_press.ForcePressGestureRecognizer))));
  dart.setLibraryUri(force_press.ForcePressGestureRecognizer, I[0]);
  dart.setFieldSignature(force_press.ForcePressGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onStart: {type: T.ForcePressDetailsToNvoid(), isConst: false, isFinal: false},
    onUpdate: {type: T.ForcePressDetailsToNvoid(), isConst: false, isFinal: false},
    onPeak: {type: T.ForcePressDetailsToNvoid(), isConst: false, isFinal: false},
    onEnd: {type: T.ForcePressDetailsToNvoid(), isConst: false, isFinal: false},
    startPressure: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    peakPressure: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    interpolation: {type: T.doubleAnddoubleAnddoubleTodouble(), isConst: false, isFinal: true},
    [__ForcePressGestureRecognizer__lastPosition]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [__ForcePressGestureRecognizer__lastPressure]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_state]: {type: T._ForceState(), isConst: false, isFinal: false, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(force_press.ForcePressGestureRecognizer))));
  dart.moduleConstCaches.set("packages/flutter/src/gestures/force_press.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__force_press|_ForceState":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"ui|Offset":{"ui|OffsetBase":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__gestures__force_press|ForcePressGestureRecognizer":{"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/force_press.dart", {
    "package:flutter/src/gestures/force_press.dart": force_press
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["force_press.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/force_press.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__force_press: force_press
  };
}));

//# sourceMappingURL=force_press.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/physics/friction_simulation.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/physics/simulation.dart'], (function load__packages__flutter__src__physics__friction_simulation_dart(dart_sdk, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__physics__simulation$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  var friction_simulation = Object.create(dart.library);
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    doubleTodouble: () => (T.doubleTodouble = dart.constFn(dart_rti.findType("core|double(core|double)")))(),
    doubleAnddoubleAnddouble__ToFrictionSimulation: () => (T.doubleAnddoubleAnddouble__ToFrictionSimulation = dart.constFn(dart_rti.findType("flutter__src__physics__friction_simulation|FrictionSimulation(core|double,core|double,core|double,core|double)")))(),
    doubleAnddoubleAnddouble__Todouble: () => (T.doubleAnddoubleAnddouble__Todouble = dart.constFn(dart_rti.findType("core|double(core|double,core|double,core|double,core|double)")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart_rti.findType("core|bool(core|double)")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Tolerance_velocity]: 0.001,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.001
      }, tolerance.Tolerance.prototype));
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/physics/friction_simulation.dart",
    "package:flutter/src/physics/friction_simulation.dart",
    "dart:core"
  ];
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  var _finalTime = dart.privateName(friction_simulation, "_finalTime");
  var _drag = dart.privateName(friction_simulation, "_drag");
  var _dragLog = dart.privateName(friction_simulation, "_dragLog");
  var _x = dart.privateName(friction_simulation, "_x");
  var _v = dart.privateName(friction_simulation, "_v");
  var _constantDeceleration = dart.privateName(friction_simulation, "_constantDeceleration");
  friction_simulation.FrictionSimulation = class FrictionSimulation extends simulation.Simulation {
    static ['_#new#tearOff'](drag, position, velocity, opts) {
      let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
      let constantDeceleration = opts && 'constantDeceleration' in opts ? opts.constantDeceleration : 0;
      return new friction_simulation.FrictionSimulation.new(drag, position, velocity, {tolerance: tolerance, constantDeceleration: constantDeceleration});
    }
    static through(startPosition, endPosition, startVelocity, endVelocity) {
      if (!(startVelocity === 0.0 || endVelocity === 0.0 || startVelocity[$sign] === endVelocity[$sign])) dart.assertFailed(null, I[0], 72, 12, "startVelocity == 0.0 || endVelocity == 0.0 || startVelocity.sign == endVelocity.sign");
      if (!(startVelocity[$abs]() >= endVelocity[$abs]())) dart.assertFailed(null, I[0], 73, 12, "startVelocity.abs() >= endVelocity.abs()");
      if (!((endPosition - startPosition)[$sign] === startVelocity[$sign])) dart.assertFailed(null, I[0], 74, 12, "(endPosition - startPosition).sign == startVelocity.sign");
      return new friction_simulation.FrictionSimulation.new(friction_simulation.FrictionSimulation._dragFor(startPosition, endPosition, startVelocity, endVelocity), startPosition, startVelocity, {tolerance: new tolerance.Tolerance.new({velocity: endVelocity[$abs]()})});
    }
    static ['_#through#tearOff'](startPosition, endPosition, startVelocity, endVelocity) {
      return friction_simulation.FrictionSimulation.through(startPosition, endPosition, startVelocity, endVelocity);
    }
    static _dragFor(startPosition, endPosition, startVelocity, endVelocity) {
      return math.pow(2.718281828459045, (startVelocity - endVelocity) / (startPosition - endPosition));
    }
    x(time) {
      if (time > this[_finalTime]) {
        return this.finalX;
      }
      return this[_x] + this[_v] * math.pow(this[_drag], time) / this[_dragLog] - this[_v] / this[_dragLog] - this[_constantDeceleration] / 2 * time * time;
    }
    dx(time) {
      if (time > this[_finalTime]) {
        return 0.0;
      }
      return this[_v] * math.pow(this[_drag], time) - this[_constantDeceleration] * time;
    }
    get finalX() {
      if (this[_constantDeceleration] === 0) {
        return this[_x] - this[_v] / this[_dragLog];
      }
      return this.x(this[_finalTime]);
    }
    timeAtX(x) {
      if (x === this[_x]) {
        return 0.0;
      }
      if (this[_v] === 0.0 || (this[_v] > 0 ? x < this[_x] || x > this.finalX : x > this[_x] || x < this.finalX)) {
        return 1 / 0;
      }
      return friction_simulation._newtonsMethod({target: x, initialGuess: 0.0, f: dart.bind(this, 'x'), df: dart.bind(this, 'dx'), iterations: 10});
    }
    isDone(time) {
      return this.dx(time)[$abs]() < this.tolerance.velocity;
    }
    toString() {
      return object.objectRuntimeType(this, "FrictionSimulation") + "(cₓ: " + this[_drag][$toStringAsFixed](1) + ", x₀: " + this[_x][$toStringAsFixed](1) + ", dx₀: " + this[_v][$toStringAsFixed](1) + ")";
    }
  };
  (friction_simulation.FrictionSimulation.new = function(drag, position, velocity, opts) {
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
    let constantDeceleration = opts && 'constantDeceleration' in opts ? opts.constantDeceleration : 0;
    this[_finalTime] = 1 / 0;
    this[_drag] = drag;
    this[_dragLog] = math.log(drag);
    this[_x] = position;
    this[_v] = velocity;
    this[_constantDeceleration] = constantDeceleration * velocity[$sign];
    dart.global.Object.getPrototypeOf(friction_simulation.FrictionSimulation).new.call(this, {tolerance: tolerance});
    this[_finalTime] = friction_simulation._newtonsMethod({initialGuess: 0.0, target: 0.0, f: dart.bind(this, 'dx'), df: dart.fn(time => this[_v] * math.pow(this[_drag], time) * this[_dragLog] - this[_constantDeceleration], T.doubleTodouble()), iterations: 10});
  }).prototype = friction_simulation.FrictionSimulation.prototype;
  dart.addTypeTests(friction_simulation.FrictionSimulation);
  dart.addRtiResources(friction_simulation.FrictionSimulation, ["flutter__src__physics__friction_simulation|FrictionSimulation"]);
  dart.addTypeCaches(friction_simulation.FrictionSimulation);
  dart.setMethodSignature(friction_simulation.FrictionSimulation, () => dart.global.Object.setPrototypeOf({
    x: T.doubleTodouble(),
    dx: T.doubleTodouble(),
    timeAtX: T.doubleTodouble(),
    isDone: T.doubleTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(friction_simulation.FrictionSimulation))));
  dart.setStaticMethodSignature(friction_simulation.FrictionSimulation, () => ['through', '_dragFor']);
  dart.setGetterSignature(friction_simulation.FrictionSimulation, () => dart.global.Object.setPrototypeOf({finalX: T.double()}, dart.getGetters(dart.global.Object.getPrototypeOf(friction_simulation.FrictionSimulation))));
  dart.setLibraryUri(friction_simulation.FrictionSimulation, I[1]);
  dart.setFieldSignature(friction_simulation.FrictionSimulation, () => dart.global.Object.setPrototypeOf({
    [_drag]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_dragLog]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_x]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_v]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_constantDeceleration]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_finalTime]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(friction_simulation.FrictionSimulation))));
  dart.defineExtensionMethods(friction_simulation.FrictionSimulation, ['toString']);
  var _minX$ = dart.privateName(friction_simulation, "_minX");
  var _maxX$ = dart.privateName(friction_simulation, "_maxX");
  friction_simulation.BoundedFrictionSimulation = class BoundedFrictionSimulation extends friction_simulation.FrictionSimulation {
    static ['_#new#tearOff'](drag, position, velocity, _minX, _maxX) {
      return new friction_simulation.BoundedFrictionSimulation.new(drag, position, velocity, _minX, _maxX);
    }
    x(time) {
      return ui.clampDouble(super.x(time), this[_minX$], this[_maxX$]);
    }
    isDone(time) {
      return super.isDone(time) || (this.x(time) - this[_minX$])[$abs]() < this.tolerance.distance || (this.x(time) - this[_maxX$])[$abs]() < this.tolerance.distance;
    }
    toString() {
      return object.objectRuntimeType(this, "BoundedFrictionSimulation") + "(cₓ: " + this[_drag][$toStringAsFixed](1) + ", x₀: " + this[_x][$toStringAsFixed](1) + ", dx₀: " + this[_v][$toStringAsFixed](1) + ", x: " + this[_minX$][$toStringAsFixed](1) + ".." + this[_maxX$][$toStringAsFixed](1) + ")";
    }
  };
  (friction_simulation.BoundedFrictionSimulation.new = function(drag, position, velocity, _minX, _maxX) {
    this[_minX$] = _minX;
    this[_maxX$] = _maxX;
    if (!(ui.clampDouble(position, _minX, _maxX) === position)) dart.assertFailed(null, I[0], 176, 14, "clampDouble(position, _minX, _maxX) == position");
    dart.global.Object.getPrototypeOf(friction_simulation.BoundedFrictionSimulation).new.call(this, drag, position, velocity);
    ;
  }).prototype = friction_simulation.BoundedFrictionSimulation.prototype;
  dart.addTypeTests(friction_simulation.BoundedFrictionSimulation);
  dart.addRtiResources(friction_simulation.BoundedFrictionSimulation, ["flutter__src__physics__friction_simulation|BoundedFrictionSimulation"]);
  dart.addTypeCaches(friction_simulation.BoundedFrictionSimulation);
  dart.setLibraryUri(friction_simulation.BoundedFrictionSimulation, I[1]);
  dart.setFieldSignature(friction_simulation.BoundedFrictionSimulation, () => dart.global.Object.setPrototypeOf({
    [_minX$]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_maxX$]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(friction_simulation.BoundedFrictionSimulation))));
  dart.defineExtensionMethods(friction_simulation.BoundedFrictionSimulation, ['toString']);
  friction_simulation._newtonsMethod = function _newtonsMethod(opts) {
    let initialGuess = opts && 'initialGuess' in opts ? opts.initialGuess : null;
    let target = opts && 'target' in opts ? opts.target : null;
    let f = opts && 'f' in opts ? opts.f : null;
    let df = opts && 'df' in opts ? opts.df : null;
    let iterations = opts && 'iterations' in opts ? opts.iterations : null;
    let guess = initialGuess;
    for (let i = 0; i < iterations; i = i + 1) {
      guess = guess - (f(guess) - target) / df(guess);
    }
    return guess;
  };
  dart.moduleConstCaches.set("packages/flutter/src/physics/friction_simulation.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__physics__friction_simulation|FrictionSimulation":{"flutter__src__physics__simulation|Simulation":[]},"flutter__src__physics__friction_simulation|BoundedFrictionSimulation":{"flutter__src__physics__friction_simulation|FrictionSimulation":[],"flutter__src__physics__simulation|Simulation":[]}}'));
  dart.trackLibraries("packages/flutter/src/physics/friction_simulation.dart", {
    "package:flutter/src/physics/friction_simulation.dart": friction_simulation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["friction_simulation.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/physics/friction_simulation.dart.lib.js"}');
  // Exports:
  return {
    src__physics__friction_simulation: friction_simulation
  };
}));

//# sourceMappingURL=friction_simulation.dart.lib.js.map

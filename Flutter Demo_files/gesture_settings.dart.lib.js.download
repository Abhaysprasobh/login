// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/gesture_settings.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__gestures__gesture_settings_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var gesture_settings = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    DeviceGestureSettings: () => (T.DeviceGestureSettings = dart.constFn(dart_rti.findType("flutter__src__gestures__gesture_settings|DeviceGestureSettings")))(),
    FlutterViewToDeviceGestureSettings: () => (T.FlutterViewToDeviceGestureSettings = dart.constFn(dart_rti.findType("flutter__src__gestures__gesture_settings|DeviceGestureSettings(ui|FlutterView)")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/gestures/gesture_settings.dart",
    "dart:core"
  ];
  var touchSlop$ = dart.privateName(gesture_settings, "DeviceGestureSettings.touchSlop");
  var _is = dart.privateName(dart_rti, "_is");
  gesture_settings.DeviceGestureSettings = class DeviceGestureSettings extends core.Object {
    get touchSlop() {
      return this[touchSlop$];
    }
    set touchSlop(value) {
      super.touchSlop = value;
    }
    static ['_#new#tearOff'](opts) {
      let touchSlop = opts && 'touchSlop' in opts ? opts.touchSlop : null;
      return new gesture_settings.DeviceGestureSettings.new({touchSlop: touchSlop});
    }
    static fromView(view) {
      let physicalTouchSlop = view.gestureSettings.physicalTouchSlop;
      return new gesture_settings.DeviceGestureSettings.new({touchSlop: physicalTouchSlop == null ? null : dart.notNull(physicalTouchSlop) / view.devicePixelRatio});
    }
    static ['_#fromView#tearOff'](view) {
      return gesture_settings.DeviceGestureSettings.fromView(view);
    }
    get panSlop() {
      return this.touchSlop != null ? dart.nullCheck(this.touchSlop) * 2 : null;
    }
    get hashCode() {
      return core.Object.hash(this.touchSlop, 23);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.DeviceGestureSettings()[_is](other) && other.touchSlop == this.touchSlop;
    }
    toString() {
      return "DeviceGestureSettings(touchSlop: " + dart.str(this.touchSlop) + ")";
    }
  };
  (gesture_settings.DeviceGestureSettings.new = function(opts) {
    let touchSlop = opts && 'touchSlop' in opts ? opts.touchSlop : null;
    this[touchSlop$] = touchSlop;
    ;
  }).prototype = gesture_settings.DeviceGestureSettings.prototype;
  dart.addTypeTests(gesture_settings.DeviceGestureSettings);
  dart.addRtiResources(gesture_settings.DeviceGestureSettings, ["flutter__src__gestures__gesture_settings|DeviceGestureSettings"]);
  dart.addTypeCaches(gesture_settings.DeviceGestureSettings);
  dart.setStaticMethodSignature(gesture_settings.DeviceGestureSettings, () => ['fromView']);
  dart.setGetterSignature(gesture_settings.DeviceGestureSettings, () => dart.global.Object.setPrototypeOf({panSlop: T.doubleN()}, dart.getGetters(dart.global.Object.getPrototypeOf(gesture_settings.DeviceGestureSettings))));
  dart.setLibraryUri(gesture_settings.DeviceGestureSettings, I[0]);
  dart.setFieldSignature(gesture_settings.DeviceGestureSettings, () => dart.global.Object.setPrototypeOf({touchSlop: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(gesture_settings.DeviceGestureSettings))));
  dart.defineExtensionMethods(gesture_settings.DeviceGestureSettings, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gesture_settings.DeviceGestureSettings, ['hashCode']);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"}}'));
  dart.trackLibraries("packages/flutter/src/gestures/gesture_settings.dart", {
    "package:flutter/src/gestures/gesture_settings.dart": gesture_settings
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gesture_settings.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmCgB;;;;;;;;;;oBARwC;AACtC,8BAAoB,AAAK,AAAgB,IAAjB;AACtC,YAAO,4DACM,AAAkB,iBAAD,WAAW,OAAyB,aAAlB,iBAAiB,IAAG,AAAK,IAAD;IAE1E;;;;;AAOuB,YAAA,AAAU,0BAAoB,AAAE,eAAX,kBAAa,IAAK;IAAI;;AAG9C,YAAO,kBAAK,gBAAW;IAAG;YAGtB;;AACtB,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AACX,gCADK,KAAK,KACP,AAAM,AAAU,KAAX,cAAc;IAC1B;;AAGqB,YAAA,AAA8C,gDAAX,kBAAS;IAAE;;;QA/B5D;;;EACL","file":"../../../../../../../../F:/packages/flutter/src/gestures/gesture_settings.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__gesture_settings: gesture_settings
  };
}));

//# sourceMappingURL=gesture_settings.dart.lib.js.map

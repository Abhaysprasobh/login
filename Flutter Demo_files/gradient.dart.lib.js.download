// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/gradient.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/foundation/collections.dart'], (function load__packages__flutter__src__painting__gradient_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__foundation__collections$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const debug = packages__flutter__src__foundation__debug$46dart.src__foundation__debug;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  var gradient = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $length = dartx.length;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $join = dartx.join;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $last = dartx.last;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    ListOfColor: () => (T.ListOfColor = dart.constFn(dart_rti.findType("core|List<ui|Color>")))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>")))(),
    GradientRotation: () => (T.GradientRotation = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|GradientRotation")))(),
    Rect__ToMatrix4: () => (T.Rect__ToMatrix4 = dart.constFn(dart_rti.findType("vector_math__vector_math_64|Matrix4(ui|Rect{textDirection:ui|TextDirection?})")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    intTodouble: () => (T.intTodouble = dart.constFn(dart_rti.findType("core|double(core|int)")))(),
    VoidToListOfdouble: () => (T.VoidToListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>()")))(),
    GradientNAnddoubleToGradientN: () => (T.GradientNAnddoubleToGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|Gradient?(flutter__src__painting__gradient|Gradient?,core|double)")))(),
    GradientNAndGradientNAnddoubleToGradientN: () => (T.GradientNAndGradientNAnddoubleToGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|Gradient?(flutter__src__painting__gradient|Gradient?,flutter__src__painting__gradient|Gradient?,core|double)")))(),
    RectAndTextDirectionNToFloat64ListN: () => (T.RectAndTextDirectionNToFloat64ListN = dart.constFn(dart_rti.findType("typed_data|Float64List?(ui|Rect,ui|TextDirection?)")))(),
    ListNOfdouble: () => (T.ListNOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>?")))(),
    GradientTransformN: () => (T.GradientTransformN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|GradientTransform?")))(),
    Color: () => (T.Color = dart.constFn(dart_rti.findType("ui|Color")))(),
    ColorToColor: () => (T.ColorToColor = dart.constFn(dart_rti.findType("ui|Color(ui|Color)")))(),
    LinearGradient: () => (T.LinearGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|LinearGradient")))(),
    LinearGradientN: () => (T.LinearGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|LinearGradient?")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    Rect__ToShader: () => (T.Rect__ToShader = dart.constFn(dart_rti.findType("ui|Shader(ui|Rect{textDirection:ui|TextDirection?})")))(),
    doubleToLinearGradient: () => (T.doubleToLinearGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|LinearGradient(core|double)")))(),
    LinearGradientNAndLinearGradientNAnddoubleToLinearGradientN: () => (T.LinearGradientNAndLinearGradientNAnddoubleToLinearGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|LinearGradient?(flutter__src__painting__gradient|LinearGradient?,flutter__src__painting__gradient|LinearGradient?,core|double)")))(),
    AlignmentGeometry: () => (T.AlignmentGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentGeometry")))(),
    TileMode: () => (T.TileMode = dart.constFn(dart_rti.findType("ui|TileMode")))(),
    RadialGradient: () => (T.RadialGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|RadialGradient")))(),
    RadialGradientN: () => (T.RadialGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|RadialGradient?")))(),
    doubleToRadialGradient: () => (T.doubleToRadialGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|RadialGradient(core|double)")))(),
    RadialGradientNAndRadialGradientNAnddoubleToRadialGradientN: () => (T.RadialGradientNAndRadialGradientNAnddoubleToRadialGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|RadialGradient?(flutter__src__painting__gradient|RadialGradient?,flutter__src__painting__gradient|RadialGradient?,core|double)")))(),
    AlignmentGeometryN: () => (T.AlignmentGeometryN = dart.constFn(dart_rti.findType("flutter__src__painting__alignment|AlignmentGeometry?")))(),
    SweepGradient: () => (T.SweepGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|SweepGradient")))(),
    SweepGradientN: () => (T.SweepGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|SweepGradient?")))(),
    doubleToSweepGradient: () => (T.doubleToSweepGradient = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|SweepGradient(core|double)")))(),
    SweepGradientNAndSweepGradientNAnddoubleToSweepGradientN: () => (T.SweepGradientNAndSweepGradientNAnddoubleToSweepGradientN = dart.constFn(dart_rti.findType("flutter__src__painting__gradient|SweepGradient?(flutter__src__painting__gradient|SweepGradient?,flutter__src__painting__gradient|SweepGradient?,core|double)")))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart_rti.findType("core|bool(core|double)")))(),
    doubleToColor: () => (T.doubleToColor = dart.constFn(dart_rti.findType("ui|Color(core|double)")))()
  };
  var G = {
    ListOfdouble: () => (G.ListOfdouble = dart.constFn(core.List$(T.double())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))(),
    SplayTreeSetOfdouble: () => (G.SplayTreeSetOfdouble = dart.constFn(collection.SplayTreeSet$(T.double())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Alignment_y]: 0,
        [Alignment_x]: -1
      }, alignment.Alignment.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [Alignment_y]: 0,
        [Alignment_x]: 1
      }, alignment.Alignment.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "clamp",
        [_Enum_index]: 0
      }, ui.TileMode.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [Alignment_y]: 0,
        [Alignment_x]: 0
      }, alignment.Alignment.prototype));
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:flutter/src/painting/gradient.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/gradient.dart",
    "package:flutter/src/painting/alignment.dart",
    "dart:ui"
  ];
  gradient._ColorsAndStops = class _ColorsAndStops extends core.Object {
    static ['_#new#tearOff'](colors, stops) {
      return new gradient._ColorsAndStops.new(colors, stops);
    }
  };
  (gradient._ColorsAndStops.new = function(colors, stops) {
    this.colors = colors;
    this.stops = stops;
    ;
  }).prototype = gradient._ColorsAndStops.prototype;
  dart.addTypeTests(gradient._ColorsAndStops);
  dart.addRtiResources(gradient._ColorsAndStops, ["flutter__src__painting__gradient|_ColorsAndStops"]);
  dart.addTypeCaches(gradient._ColorsAndStops);
  dart.setLibraryUri(gradient._ColorsAndStops, I[0]);
  dart.setFieldSignature(gradient._ColorsAndStops, () => dart.global.Object.setPrototypeOf({
    colors: {type: T.ListOfColor(), isConst: false, isFinal: true, libraryUri: I[1]},
    stops: {type: T.ListOfdouble(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(gradient._ColorsAndStops))));
  gradient.GradientTransform = class GradientTransform extends core.Object {};
  (gradient.GradientTransform.new = function() {
    ;
  }).prototype = gradient.GradientTransform.prototype;
  dart.addTypeTests(gradient.GradientTransform);
  dart.addRtiResources(gradient.GradientTransform, ["flutter__src__painting__gradient|GradientTransform"]);
  dart.addTypeCaches(gradient.GradientTransform);
  dart.setLibraryUri(gradient.GradientTransform, I[0]);
  var radians$ = dart.privateName(gradient, "GradientRotation.radians");
  var _is = dart.privateName(dart_rti, "_is");
  gradient.GradientRotation = class GradientRotation extends gradient.GradientTransform {
    get radians() {
      return this[radians$];
    }
    set radians(value) {
      super.radians = value;
    }
    static ['_#new#tearOff'](radians) {
      return new gradient.GradientRotation.new(radians);
    }
    transform(bounds, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let sinRadians = math.sin(this.radians);
      let oneMinusCosRadians = 1 - math.cos(this.radians);
      let center = bounds.center;
      let originX = sinRadians * center.dy + oneMinusCosRadians * center.dx;
      let originY = -sinRadians * center.dx + oneMinusCosRadians * center.dy;
      t$360 = vector_math_64.Matrix4.identity();
      return (() => {
        t$360.translate(originX, originY);
        t$360.rotateZ(this.radians);
        return t$360;
      })();
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.GradientRotation()[_is](other) && other.radians === this.radians;
    }
    get hashCode() {
      return this.radians[$hashCode];
    }
    toString() {
      return object.objectRuntimeType(this, "GradientRotation") + "(radians: " + debug.debugFormatDouble(this.radians) + ")";
    }
  };
  (gradient.GradientRotation.new = function(radians) {
    this[radians$] = radians;
    dart.global.Object.getPrototypeOf(gradient.GradientRotation).new.call(this);
    ;
  }).prototype = gradient.GradientRotation.prototype;
  dart.addTypeTests(gradient.GradientRotation);
  dart.addRtiResources(gradient.GradientRotation, ["flutter__src__painting__gradient|GradientRotation"]);
  dart.addTypeCaches(gradient.GradientRotation);
  dart.setMethodSignature(gradient.GradientRotation, () => dart.global.Object.setPrototypeOf({transform: T.Rect__ToMatrix4()}, dart.getMethods(dart.global.Object.getPrototypeOf(gradient.GradientRotation))));
  dart.setLibraryUri(gradient.GradientRotation, I[0]);
  dart.setFieldSignature(gradient.GradientRotation, () => dart.global.Object.setPrototypeOf({radians: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(gradient.GradientRotation))));
  dart.defineExtensionMethods(gradient.GradientRotation, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.GradientRotation, ['hashCode']);
  var colors$ = dart.privateName(gradient, "Gradient.colors");
  var stops$ = dart.privateName(gradient, "Gradient.stops");
  var transform$ = dart.privateName(gradient, "Gradient.transform");
  var _impliedStops = dart.privateName(gradient, "_impliedStops");
  var _resolveTransform = dart.privateName(gradient, "_resolveTransform");
  gradient.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    [_impliedStops]() {
      if (this.stops != null) {
        return dart.nullCheck(this.stops);
      }
      if (!(this.colors[$length] >= 2)) dart.assertFailed("colors list must have at least two colors", I[2], 207, 12, "colors.length >= 2");
      let separation = 1.0 / (this.colors[$length] - 1);
      return G.ListOfdouble().generate(this.colors[$length], dart.fn(index => index * separation, T.intTodouble()), {growable: false});
    }
    lerpFrom(a, t) {
      if (a == null) {
        return this.scale(t);
      }
      return null;
    }
    lerpTo(b, t) {
      if (b == null) {
        return this.scale(1.0 - t);
      }
      return null;
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      let result = null;
      if (b != null) {
        result = b.lerpFrom(a, t);
      }
      if (result == null && a != null) {
        result = a.lerpTo(b, t);
      }
      if (result != null) {
        return result;
      }
      if (!(a != null && b != null)) dart.assertFailed(null, I[2], 323, 12, "a != null && b != null");
      return t < 0.5 ? dart.nullCheck(a).scale(1.0 - t * 2.0) : dart.nullCheck(b).scale((t - 0.5) * 2.0);
    }
    [_resolveTransform](bounds, textDirection) {
      let t$361, t$360;
      t$360 = this.transform;
      return t$360 == null ? null : (t$361 = t$360.transform(bounds, {textDirection: textDirection}), t$361 == null ? null : t$361.storage);
    }
  };
  (gradient.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[colors$] = colors;
    this[stops$] = stops;
    this[transform$] = transform;
    ;
  }).prototype = gradient.Gradient.prototype;
  dart.addTypeTests(gradient.Gradient);
  dart.addRtiResources(gradient.Gradient, ["flutter__src__painting__gradient|Gradient"]);
  dart.addTypeCaches(gradient.Gradient);
  dart.setMethodSignature(gradient.Gradient, () => dart.global.Object.setPrototypeOf({
    [_impliedStops]: T.VoidToListOfdouble(),
    lerpFrom: T.GradientNAnddoubleToGradientN(),
    lerpTo: T.GradientNAnddoubleToGradientN(),
    [_resolveTransform]: T.RectAndTextDirectionNToFloat64ListN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(gradient.Gradient))));
  dart.setStaticMethodSignature(gradient.Gradient, () => ['lerp']);
  dart.setLibraryUri(gradient.Gradient, I[0]);
  dart.setFieldSignature(gradient.Gradient, () => dart.global.Object.setPrototypeOf({
    colors: {type: T.ListOfColor(), isConst: false, isFinal: true, libraryUri: I[1]},
    stops: {type: T.ListNOfdouble(), isConst: false, isFinal: true, libraryUri: I[1]},
    transform: {type: T.GradientTransformN(), isConst: false, isFinal: true, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(gradient.Gradient))));
  var begin$ = dart.privateName(gradient, "LinearGradient.begin");
  var end$ = dart.privateName(gradient, "LinearGradient.end");
  var tileMode$ = dart.privateName(gradient, "LinearGradient.tileMode");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _as = dart.privateName(dart_rti, "_as");
  gradient.LinearGradient = class LinearGradient extends gradient.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let begin = opts && 'begin' in opts ? opts.begin : C[0] || CT.C0;
      let end = opts && 'end' in opts ? opts.end : C[1] || CT.C1;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stops = opts && 'stops' in opts ? opts.stops : null;
      let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new gradient.LinearGradient.new({begin: begin, end: end, colors: colors, stops: stops, tileMode: tileMode, transform: transform});
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.linear(this.begin.resolve(textDirection).withinRect(rect), this.end.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.LinearGradient.new({begin: this.begin, end: this.end, colors: this.colors[$map](T.Color(), dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || T.LinearGradient()[_is](a)) {
        return gradient.LinearGradient.lerp(T.LinearGradientN()[_as](a), this, t);
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || T.LinearGradient()[_is](b)) {
        return gradient.LinearGradient.lerp(this, T.LinearGradientN()[_as](b), t);
      }
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.LinearGradient.new({begin: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.begin, b.begin, t)), end: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.end, b.end, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.LinearGradient()[_is](other) && dart.equals(other.begin, this.begin) && dart.equals(other.end, this.end) && other.tileMode === this.tileMode && dart.equals(other.transform, this.transform) && collections.listEquals(T.Color(), other.colors, this.colors) && collections.listEquals(T.double(), other.stops, this.stops);
    }
    get hashCode() {
      return core.Object.hash(this.begin, this.end, this.tileMode, this.transform, core.Object.hashAll(this.colors), this.stops == null ? null : core.Object.hashAll(dart.nullCheck(this.stops)));
    }
    toString() {
      let description = (() => {
        let t$360 = G.JSArrayOfString().of(["begin: " + dart.str(this.begin), "end: " + dart.str(this.end), "colors: " + dart.str(this.colors)]);
        if (this.stops != null) t$360.push("stops: " + dart.str(this.stops));
        t$360.push("tileMode: " + dart.str(this.tileMode));
        if (this.transform != null) t$360.push("transform: " + dart.str(this.transform));
        return t$360;
      })();
      return object.objectRuntimeType(this, "LinearGradient") + "(" + description[$join](", ") + ")";
    }
  };
  (gradient.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C[0] || CT.C0;
    let end = opts && 'end' in opts ? opts.end : C[1] || CT.C1;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    dart.global.Object.getPrototypeOf(gradient.LinearGradient).new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.LinearGradient.prototype;
  dart.addTypeTests(gradient.LinearGradient);
  dart.addRtiResources(gradient.LinearGradient, ["flutter__src__painting__gradient|LinearGradient"]);
  dart.addTypeCaches(gradient.LinearGradient);
  dart.setMethodSignature(gradient.LinearGradient, () => dart.global.Object.setPrototypeOf({
    createShader: T.Rect__ToShader(),
    scale: T.doubleToLinearGradient()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(gradient.LinearGradient))));
  dart.setStaticMethodSignature(gradient.LinearGradient, () => ['lerp']);
  dart.setLibraryUri(gradient.LinearGradient, I[0]);
  dart.setFieldSignature(gradient.LinearGradient, () => dart.global.Object.setPrototypeOf({
    begin: {type: T.AlignmentGeometry(), isConst: false, isFinal: true, libraryUri: I[3]},
    end: {type: T.AlignmentGeometry(), isConst: false, isFinal: true, libraryUri: I[3]},
    tileMode: {type: T.TileMode(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(gradient.LinearGradient))));
  dart.defineExtensionMethods(gradient.LinearGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.LinearGradient, ['hashCode']);
  var center$ = dart.privateName(gradient, "RadialGradient.center");
  var radius$ = dart.privateName(gradient, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(gradient, "RadialGradient.tileMode");
  var focal$ = dart.privateName(gradient, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(gradient, "RadialGradient.focalRadius");
  gradient.RadialGradient = class RadialGradient extends gradient.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
      let radius = opts && 'radius' in opts ? opts.radius : 0.5;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stops = opts && 'stops' in opts ? opts.stops : null;
      let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
      let focal = opts && 'focal' in opts ? opts.focal : null;
      let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new gradient.RadialGradient.new({center: center, radius: radius, colors: colors, stops: stops, tileMode: tileMode, focal: focal, focalRadius: focalRadius, transform: transform});
    }
    createShader(rect, opts) {
      let t$361;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.radial(this.center.resolve(textDirection).withinRect(rect), this.radius * rect.shortestSide, this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection), (t$361 = this.focal, t$361 == null ? null : t$361.resolve(textDirection).withinRect(rect)), this.focalRadius * rect.shortestSide);
    }
    scale(factor) {
      return new gradient.RadialGradient.new({center: this.center, radius: this.radius, colors: this.colors[$map](T.Color(), dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode, focal: this.focal, focalRadius: this.focalRadius});
    }
    lerpFrom(a, t) {
      if (a == null || T.RadialGradient()[_is](a)) {
        return gradient.RadialGradient.lerp(T.RadialGradientN()[_as](a), this, t);
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || T.RadialGradient()[_is](b)) {
        return gradient.RadialGradient.lerp(this, T.RadialGradientN()[_as](b), t);
      }
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.RadialGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), radius: math.max(T.double(), 0.0, dart.nullCheck(ui.lerpDouble(a.radius, b.radius, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode, focal: alignment.AlignmentGeometry.lerp(a.focal, b.focal, t), focalRadius: math.max(T.double(), 0.0, dart.nullCheck(ui.lerpDouble(a.focalRadius, b.focalRadius, t)))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.RadialGradient()[_is](other) && dart.equals(other.center, this.center) && other.radius === this.radius && other.tileMode === this.tileMode && dart.equals(other.transform, this.transform) && collections.listEquals(T.Color(), other.colors, this.colors) && collections.listEquals(T.double(), other.stops, this.stops) && dart.equals(other.focal, this.focal) && other.focalRadius === this.focalRadius;
    }
    get hashCode() {
      return core.Object.hash(this.center, this.radius, this.tileMode, this.transform, core.Object.hashAll(this.colors), this.stops == null ? null : core.Object.hashAll(dart.nullCheck(this.stops)), this.focal, this.focalRadius);
    }
    toString() {
      let description = (() => {
        let t$361 = G.JSArrayOfString().of(["center: " + dart.str(this.center), "radius: " + debug.debugFormatDouble(this.radius), "colors: " + dart.str(this.colors)]);
        if (this.stops != null) t$361.push("stops: " + dart.str(this.stops));
        t$361.push("tileMode: " + dart.str(this.tileMode));
        if (this.focal != null) t$361.push("focal: " + dart.str(this.focal));
        t$361.push("focalRadius: " + debug.debugFormatDouble(this.focalRadius));
        if (this.transform != null) t$361.push("transform: " + dart.str(this.transform));
        return t$361;
      })();
      return object.objectRuntimeType(this, "RadialGradient") + "(" + description[$join](", ") + ")";
    }
  };
  (gradient.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    dart.global.Object.getPrototypeOf(gradient.RadialGradient).new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.RadialGradient.prototype;
  dart.addTypeTests(gradient.RadialGradient);
  dart.addRtiResources(gradient.RadialGradient, ["flutter__src__painting__gradient|RadialGradient"]);
  dart.addTypeCaches(gradient.RadialGradient);
  dart.setMethodSignature(gradient.RadialGradient, () => dart.global.Object.setPrototypeOf({
    createShader: T.Rect__ToShader(),
    scale: T.doubleToRadialGradient()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(gradient.RadialGradient))));
  dart.setStaticMethodSignature(gradient.RadialGradient, () => ['lerp']);
  dart.setLibraryUri(gradient.RadialGradient, I[0]);
  dart.setFieldSignature(gradient.RadialGradient, () => dart.global.Object.setPrototypeOf({
    center: {type: T.AlignmentGeometry(), isConst: false, isFinal: true, libraryUri: I[3]},
    radius: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    tileMode: {type: T.TileMode(), isConst: false, isFinal: true, libraryUri: I[4]},
    focal: {type: T.AlignmentGeometryN(), isConst: false, isFinal: true, libraryUri: I[3]},
    focalRadius: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(gradient.RadialGradient))));
  dart.defineExtensionMethods(gradient.RadialGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.RadialGradient, ['hashCode']);
  var center$0 = dart.privateName(gradient, "SweepGradient.center");
  var startAngle$ = dart.privateName(gradient, "SweepGradient.startAngle");
  var endAngle$ = dart.privateName(gradient, "SweepGradient.endAngle");
  var tileMode$1 = dart.privateName(gradient, "SweepGradient.tileMode");
  gradient.SweepGradient = class SweepGradient extends gradient.Gradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : 6.283185307179586;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stops = opts && 'stops' in opts ? opts.stops : null;
      let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new gradient.SweepGradient.new({center: center, startAngle: startAngle, endAngle: endAngle, colors: colors, stops: stops, tileMode: tileMode, transform: transform});
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.sweep(this.center.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this.startAngle, this.endAngle, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.SweepGradient.new({center: this.center, startAngle: this.startAngle, endAngle: this.endAngle, colors: this.colors[$map](T.Color(), dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || T.SweepGradient()[_is](a)) {
        return gradient.SweepGradient.lerp(T.SweepGradientN()[_as](a), this, t);
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || T.SweepGradient()[_is](b)) {
        return gradient.SweepGradient.lerp(this, T.SweepGradientN()[_as](b), t);
      }
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.SweepGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), startAngle: math.max(T.double(), 0.0, dart.nullCheck(ui.lerpDouble(a.startAngle, b.startAngle, t))), endAngle: math.max(T.double(), 0.0, dart.nullCheck(ui.lerpDouble(a.endAngle, b.endAngle, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.SweepGradient()[_is](other) && dart.equals(other.center, this.center) && other.startAngle === this.startAngle && other.endAngle === this.endAngle && other.tileMode === this.tileMode && dart.equals(other.transform, this.transform) && collections.listEquals(T.Color(), other.colors, this.colors) && collections.listEquals(T.double(), other.stops, this.stops);
    }
    get hashCode() {
      return core.Object.hash(this.center, this.startAngle, this.endAngle, this.tileMode, this.transform, core.Object.hashAll(this.colors), this.stops == null ? null : core.Object.hashAll(dart.nullCheck(this.stops)));
    }
    toString() {
      let description = (() => {
        let t$362 = G.JSArrayOfString().of(["center: " + dart.str(this.center), "startAngle: " + debug.debugFormatDouble(this.startAngle), "endAngle: " + debug.debugFormatDouble(this.endAngle), "colors: " + dart.str(this.colors)]);
        if (this.stops != null) t$362.push("stops: " + dart.str(this.stops));
        t$362.push("tileMode: " + dart.str(this.tileMode));
        if (this.transform != null) t$362.push("transform: " + dart.str(this.transform));
        return t$362;
      })();
      return object.objectRuntimeType(this, "SweepGradient") + "(" + description[$join](", ") + ")";
    }
  };
  (gradient.SweepGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    let endAngle = opts && 'endAngle' in opts ? opts.endAngle : 6.283185307179586;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$0] = center;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[tileMode$1] = tileMode;
    dart.global.Object.getPrototypeOf(gradient.SweepGradient).new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.SweepGradient.prototype;
  dart.addTypeTests(gradient.SweepGradient);
  dart.addRtiResources(gradient.SweepGradient, ["flutter__src__painting__gradient|SweepGradient"]);
  dart.addTypeCaches(gradient.SweepGradient);
  dart.setMethodSignature(gradient.SweepGradient, () => dart.global.Object.setPrototypeOf({
    createShader: T.Rect__ToShader(),
    scale: T.doubleToSweepGradient()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(gradient.SweepGradient))));
  dart.setStaticMethodSignature(gradient.SweepGradient, () => ['lerp']);
  dart.setLibraryUri(gradient.SweepGradient, I[0]);
  dart.setFieldSignature(gradient.SweepGradient, () => dart.global.Object.setPrototypeOf({
    center: {type: T.AlignmentGeometry(), isConst: false, isFinal: true, libraryUri: I[3]},
    startAngle: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    endAngle: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    tileMode: {type: T.TileMode(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(gradient.SweepGradient))));
  dart.defineExtensionMethods(gradient.SweepGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.SweepGradient, ['hashCode']);
  gradient._sample = function _sample(colors, stops, t) {
    if (!colors[$isNotEmpty]) dart.assertFailed(null, I[2], 23, 10, "colors.isNotEmpty");
    if (!stops[$isNotEmpty]) dart.assertFailed(null, I[2], 24, 10, "stops.isNotEmpty");
    if (t <= stops[$first]) {
      return colors[$first];
    }
    if (t >= stops[$last]) {
      return colors[$last];
    }
    let index = stops[$lastIndexWhere](dart.fn(s => s <= t, T.doubleTobool()));
    if (!(index !== -1)) dart.assertFailed(null, I[2], 32, 10, "index != -1");
    return dart.nullCheck(ui.Color.lerp(colors[$_get](index), colors[$_get](index + 1), (t - stops[$_get](index)) / (stops[$_get](index + 1) - stops[$_get](index))));
  };
  gradient._interpolateColorsAndStops = function _interpolateColorsAndStops(aColors, aStops, bColors, bStops, t) {
    let t$363;
    if (!(aColors[$length] >= 2)) dart.assertFailed(null, I[2], 46, 10, "aColors.length >= 2");
    if (!(bColors[$length] >= 2)) dart.assertFailed(null, I[2], 47, 10, "bColors.length >= 2");
    if (!(aStops[$length] === aColors[$length])) dart.assertFailed(null, I[2], 48, 10, "aStops.length == aColors.length");
    if (!(bStops[$length] === bColors[$length])) dart.assertFailed(null, I[2], 49, 10, "bStops.length == bColors.length");
    let stops = (t$363 = new (G.SplayTreeSetOfdouble()).new(), (() => {
      t$363.addAll(aStops);
      t$363.addAll(bStops);
      return t$363;
    })());
    let interpolatedStops = stops.toList({growable: false});
    let interpolatedColors = interpolatedStops[$map](T.Color(), dart.fn(stop => dart.nullCheck(ui.Color.lerp(gradient._sample(aColors, aStops, stop), gradient._sample(bColors, bStops, stop), t)), T.doubleToColor()))[$toList]({growable: false});
    return new gradient._ColorsAndStops.new(interpolatedColors, interpolatedStops);
  };
  dart.moduleConstCaches.set("packages/flutter/src/painting/gradient.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__gradient|GradientRotation":{"flutter__src__painting__gradient|GradientTransform":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"typed_data|Float64List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"typed_data|_TypedFloatList":{"typed_data|TypedData":[]},"flutter__src__painting__gradient|LinearGradient":{"flutter__src__painting__gradient|Gradient":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"ui|TileMode":{"core|_Enum":[],"core|Enum":[]},"flutter__src__painting__gradient|RadialGradient":{"flutter__src__painting__gradient|Gradient":[]},"flutter__src__painting__gradient|SweepGradient":{"flutter__src__painting__gradient|Gradient":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/gradient.dart", {
    "package:flutter/src/painting/gradient.dart": gradient
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gradient.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAeuB,QAAa;IAAb;IAAa;;EAAM;;;;;;;;;;;;EAsDf;;;;;;;;IAiCZ;;;;;;;;;cAGU;;UAAwB;AAChC,uBAAkB,SAAI;AACtB,+BAAqB,AAAE,IAAO,SAAI;AAClC,mBAAS,AAAO,MAAD;AACf,oBAAU,AAAW,AAAY,UAAb,GAAG,AAAO,MAAD,MAAM,AAAmB,kBAAD,GAAG,AAAO,MAAD;AAC9D,oBAAU,AAAY,AAAY,CAAvB,UAAU,GAAG,AAAO,MAAD,MAAM,AAAmB,kBAAD,GAAG,AAAO,MAAD;AAE5E,cAAe;;AACX,wBAAU,OAAO,EAAE,OAAO;AAC1B,sBAAQ;;;IACd;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AACT,2BADG,KAAK,KACL,AAAM,AAAQ,KAAT,aAAY;IAC1B;;AAGoB,YAAA,AAAQ;IAAQ;;AAIlC,YAAU,AAAqF,0BAAnE,MAAM,sBAAoB,eAAY,wBAAkB,gBAAS;IAC/F;;;IApC4B;AAAtB;;EAA8B;;;;;;;;;;;;;;;IA6ElB;;;;;;IAkBE;;;;;;IAMK;;;;;;;AAGvB,UAAI;AACF,cAAY,gBAAL;;AAET,YAAO,AAAO,AAAO,wBAAG,sBAAG;AACd,uBAAa,AAAI,OAAG,AAAO,AAAO,uBAAE;AACjD,YAAO,2BACL,AAAO,sBACP,QAAK,SAAU,AAAM,KAAD,GAAG,UAAU,+BACvB;IAEd;aAgD6B,GAAU;AACrC,UAAI,AAAE,CAAD;AACH,cAAO,YAAM,CAAC;;AAEhB,YAAO;IACT;WA2B2B,GAAU;AACnC,UAAI,AAAE,CAAD;AACH,cAAO,YAAM,AAAI,MAAE,CAAC;;AAEtB,YAAO;IACT;gBAUgC,GAAa,GAAU;AACrD,UAAI,AAAU,CAAC,IAAE,CAAC;AAChB,cAAO,EAAC;;AAEA;AACV,UAAI,CAAC;AACH,iBAAS,AAAE,CAAD,UAAU,CAAC,EAAE,CAAC;;AAE1B,UAAI,AAAO,MAAD,YAAY,CAAC;AACrB,iBAAS,AAAE,CAAD,QAAQ,CAAC,EAAE,CAAC;;AAExB,UAAI,MAAM;AACR,cAAO,OAAM;;AAEf,YAAO,AAAU,CAAT,YAAY,CAAC;AACrB,YAAO,AAAE,EAAD,GAAG,MAAO,AAAE,eAAH,CAAC,QAAQ,AAAI,MAAG,AAAE,CAAD,GAAG,OAAS,AAAE,eAAH,CAAC,QAAkB,CAAT,AAAE,CAAD,GAAG,OAAO;IACpE;wBAEoC,QAAuB;;AACzD,cAAO;6CAAW,gBAAU,MAAM,kBAAiB,aAAa,oBAAzD,OAA4D;IACrE;;;QAnKgB;QACT;QACA;IAFS;IACT;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;IAuOsB;;;;;;IAeA;;;;;;IAWT;;;;;;;;;;;;;;;iBAGU;UAAuB;AAC9C,YAAmB,oBACjB,AAAM,AAAuB,mBAAf,aAAa,aAAa,IAAI,GAC5C,AAAI,AAAuB,iBAAf,aAAa,aAAa,IAAI,GAC1C,aAAQ,uBAAiB,eAAU,wBAAkB,IAAI,EAAE,aAAa;IAE5E;UAO4B;AAC1B,YAAO,yCACE,iBACF,kBACG,AAAO,AAA8D,6BAAnD,QAAO,SAAyC,eAAzB,cAAK,MAAM,KAAK,EAAE,MAAM,0CAClE,sBACG;IAEd;aAG6B,GAAU;AACrC,UAAI,AAAE,CAAD,YAAe,wBAAF,CAAC;AACjB,cAAsB,8BAAO,yBAAF,CAAC,GAAqB,MAAM,CAAC;;AAE1D,YAAa,gBAAS,CAAC,EAAE,CAAC;IAC5B;WAG2B,GAAU;AACnC,UAAI,AAAE,CAAD,YAAe,wBAAF,CAAC;AACjB,cAAsB,8BAAK,MAAQ,yBAAF,CAAC,GAAqB,CAAC;;AAE1D,YAAa,cAAO,CAAC,EAAE,CAAC;IAC1B;gBAqB4C,GAAmB,GAAU;AACvE,UAAI,AAAU,CAAC,IAAE,CAAC;AAChB,cAAO,EAAC;;AAEV,UAAI,AAAE,CAAD;AACH,cAAQ,AAAE,gBAAH,CAAC,QAAQ,CAAC;;AAEnB,UAAI,AAAE,CAAD;AACH,cAAO,AAAE,EAAD,OAAO,AAAI,MAAE,CAAC;;AAEF,yBAAe,oCACjC,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,CAAC;AAEL,YAAO,yCAC6C,eAAzB,iCAAK,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,SACL,eAArB,iCAAK,AAAE,CAAD,MAAM,AAAE,CAAD,MAAM,CAAC,YACnC,AAAa,YAAD,gBACb,AAAa,YAAD,kBACT,AAAE,CAAD,GAAG,MAAM,AAAE,CAAD,YAAY,AAAE,CAAD;IAEtC;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AAMT,yBANG,KAAK,KACO,YAAZ,AAAM,KAAD,QAAU,eACL,YAAV,AAAM,KAAD,MAAQ,aACb,AAAM,AAAS,KAAV,cAAa,iBACF,YAAhB,AAAM,KAAD,YAAc,mBACnB,kCAAkB,AAAM,KAAD,SAAS,gBAChC,mCAAmB,AAAM,KAAD,QAAQ;IACzC;;AAGoB,YAAO,kBACzB,YACA,UACA,eACA,gBACO,oBAAQ,cACf,AAAM,qBAAU,OAAc,oBAAa,eAAL;IACvC;;AAIoB,wBAAsB;4CACvC,AAAe,qBAAN,aACT,AAAW,mBAAJ,WACP,AAAiB,sBAAP;AACV,YAAI,oBAA8B,WAAf,qBAAS;AACP,mBAArB,wBAAY;AACZ,YAAI,wBAA0C,WAAvB,yBAAa;;;AAGtC,YAAU,AAAsE,0BAApD,MAAM,oBAAkB,MAAG,AAAY,WAAD,QAAM,QAAM;IAChF;;;QA7KO;QACA;QACU;QACT;QACD;QACC;IALD;IACA;IAGA;AALD,uFAGW,MAAM,SACf,KAAK,aAEL,SAAS;;EACf;;;;;;;;;;;;;;;;;;;;;;;IA4QsB;;;;;;IAQX;;;;;;IAgBE;;;;;;IAUU;;;;;;IAYZ;;;;;;;;;;;;;;;;;iBAGY;;UAAuB;AAC9C,YAAmB,oBACjB,AAAO,AAAuB,oBAAf,aAAa,aAAa,IAAI,GAC7C,AAAO,cAAE,AAAK,IAAD,eACb,aAAQ,uBAAiB,eACzB,wBAAkB,IAAI,EAAE,aAAa,wCACrC,OAAO,AAAuB,cAAf,aAAa,aAAa,IAAI,IAC7C,AAAY,mBAAE,AAAK,IAAD;IAEtB;UAO4B;AAC1B,YAAO,0CACG,qBACA,qBACA,AAAO,AAA8D,6BAAnD,QAAO,SAAyC,eAAzB,cAAK,MAAM,KAAK,EAAE,MAAM,0CAClE,sBACG,sBACH,yBACM;IAEjB;aAG6B,GAAU;AACrC,UAAI,AAAE,CAAD,YAAe,wBAAF,CAAC;AACjB,cAAsB,8BAAO,yBAAF,CAAC,GAAqB,MAAM,CAAC;;AAE1D,YAAa,gBAAS,CAAC,EAAE,CAAC;IAC5B;WAG2B,GAAU;AACnC,UAAI,AAAE,CAAD,YAAe,wBAAF,CAAC;AACjB,cAAsB,8BAAK,MAAQ,yBAAF,CAAC,GAAqB,CAAC;;AAE1D,YAAa,cAAO,CAAC,EAAE,CAAC;IAC1B;gBAqB4C,GAAmB,GAAU;AACvE,UAAI,AAAU,CAAC,IAAE,CAAC;AAChB,cAAO,EAAC;;AAEV,UAAI,AAAE,CAAD;AACH,cAAQ,AAAE,gBAAH,CAAC,QAAQ,CAAC;;AAEnB,UAAI,AAAE,CAAD;AACH,cAAO,AAAE,EAAD,OAAO,AAAI,MAAE,CAAC;;AAEF,yBAAe,oCACjC,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,CAAC;AAEL,YAAO,0CACgD,eAA3B,iCAAK,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,YACvC,qBAAI,KAAyC,eAAjC,cAAW,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,aACjD,AAAa,YAAD,gBACb,AAAa,YAAD,kBACT,AAAE,CAAD,GAAG,MAAM,AAAE,CAAD,YAAY,AAAE,CAAD,kBACT,iCAAK,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,gBAC/B,qBAAI,KAAmD,eAA3C,cAAW,AAAE,CAAD,cAAc,AAAE,CAAD,cAAc,CAAC;IAE5E;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AAQT,yBARG,KAAK,KACQ,YAAb,AAAM,KAAD,SAAW,gBAChB,AAAM,AAAO,KAAR,YAAW,eAChB,AAAM,AAAS,KAAV,cAAa,iBACF,YAAhB,AAAM,KAAD,YAAc,mBACnB,kCAAkB,AAAM,KAAD,SAAS,gBAChC,mCAAmB,AAAM,KAAD,QAAQ,eACpB,YAAZ,AAAM,KAAD,QAAU,eACf,AAAM,AAAY,KAAb,iBAAgB;IAC9B;;AAGoB,YAAO,kBACzB,aACA,aACA,eACA,gBACO,oBAAQ,cACf,AAAM,qBAAU,OAAc,oBAAa,eAAL,cACtC,YACA;IACD;;AAIoB,wBAAsB;4CACvC,AAAiB,sBAAP,cACV,AAAsC,aAA3B,wBAAkB,cAC7B,AAAiB,sBAAP;AACV,YAAI,oBAA8B,WAAf,qBAAS;AACP,mBAArB,wBAAY;AACZ,YAAI,oBAA8B,WAAf,qBAAS;AACoB,mBAAhD,kBAAgB,wBAAkB;AAClC,YAAI,wBAA0C,WAAvB,yBAAa;;;AAGtC,YAAU,AAAsE,0BAApD,MAAM,oBAAkB,MAAG,AAAY,WAAD,QAAM,QAAM;IAChF;;;QAjNO;QACA;QACU;QACT;QACD;QACA;QACA;QACC;IAPD;IACA;IAGA;IACA;IACA;AAPD,uFAGW,MAAM,SACf,KAAK,aAIL,SAAS;;EACf;;;;;;;;;;;;;;;;;;;;;;;;IAsTsB;;;;;;IAKX;;;;;;IAKA;;;;;;IAWE;;;;;;;;;;;;;;;;iBAGU;UAAuB;AAC9C,YAAmB,mBACjB,AAAO,AAAuB,oBAAf,aAAa,aAAa,IAAI,GAC7C,aAAQ,uBAAiB,eACzB,iBACA,eACA,wBAAkB,IAAI,EAAE,aAAa;IAEzC;UAO2B;AACzB,YAAO,yCACG,yBACI,2BACF,uBACF,AAAO,AAA8D,6BAAnD,QAAO,SAAyC,eAAzB,cAAK,MAAM,KAAK,EAAE,MAAM,0CAClE,sBACG;IAEd;aAG6B,GAAU;AACrC,UAAI,AAAE,CAAD,YAAe,uBAAF,CAAC;AACjB,cAAqB,6BAAO,wBAAF,CAAC,GAAoB,MAAM,CAAC;;AAExD,YAAa,gBAAS,CAAC,EAAE,CAAC;IAC5B;WAG2B,GAAU;AACnC,UAAI,AAAE,CAAD,YAAe,uBAAF,CAAC;AACjB,cAAqB,6BAAK,MAAQ,wBAAF,CAAC,GAAoB,CAAC;;AAExD,YAAa,cAAO,CAAC,EAAE,CAAC;IAC1B;gBAoB0C,GAAkB,GAAU;AACpE,UAAI,AAAU,CAAC,IAAE,CAAC;AAChB,cAAO,EAAC;;AAEV,UAAI,AAAE,CAAD;AACH,cAAQ,AAAE,gBAAH,CAAC,QAAQ,CAAC;;AAEnB,UAAI,AAAE,CAAD;AACH,cAAO,AAAE,EAAD,OAAO,AAAI,MAAE,CAAC;;AAEF,yBAAe,oCACjC,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,AAAE,CAAD,SACD,AAAE,CAAD,mBACD,CAAC;AAEL,YAAO,yCACgD,eAA3B,iCAAK,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,gBACnC,qBAAI,KAAiD,eAAzC,cAAW,AAAE,CAAD,aAAa,AAAE,CAAD,aAAa,CAAC,eACtD,qBAAI,KAA6C,eAArC,cAAW,AAAE,CAAD,WAAW,AAAE,CAAD,WAAW,CAAC,aACvD,AAAa,YAAD,gBACb,AAAa,YAAD,kBACT,AAAE,CAAD,GAAG,MAAM,AAAE,CAAD,YAAY,AAAE,CAAD;IAEtC;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AAOT,wBAPG,KAAK,KACQ,YAAb,AAAM,KAAD,SAAW,gBAChB,AAAM,AAAW,KAAZ,gBAAe,mBACpB,AAAM,AAAS,KAAV,cAAa,iBAClB,AAAM,AAAS,KAAV,cAAa,iBACF,YAAhB,AAAM,KAAD,YAAc,mBACnB,kCAAkB,AAAM,KAAD,SAAS,gBAChC,mCAAmB,AAAM,KAAD,QAAQ;IACzC;;AAGoB,YAAO,kBACzB,aACA,iBACA,eACA,eACA,gBACO,oBAAQ,cACf,AAAM,qBAAU,OAAc,oBAAa,eAAL;IACvC;;AAIoB,wBAAsB;4CACvC,AAAiB,sBAAP,cACV,AAA8C,iBAA/B,wBAAkB,kBACjC,AAA0C,eAA7B,wBAAkB,gBAC/B,AAAiB,sBAAP;AACV,YAAI,oBAA8B,WAAf,qBAAS;AACP,mBAArB,wBAAY;AACZ,YAAI,wBAA0C,WAAvB,yBAAa;;;AAGtC,YAAU,AAAqE,0BAAnD,MAAM,mBAAiB,MAAG,AAAY,WAAD,QAAM,QAAM;IAC/E;;;QAhLO;QACA;QACA;QACU;QACT;QACD;QACC;IAND;IACA;IACA;IAGA;AAND,sFAIW,MAAM,SACf,KAAK,aAEL,SAAS;;EACf;;;;;;;;;;;;;;;;;;sCA74BsB,QAAqB,OAAc;AAC3D,SAAO,AAAO,MAAD;AACb,SAAO,AAAM,KAAD;AACZ,QAAI,AAAE,CAAD,IAAI,AAAM,KAAD;AACZ,YAAO,AAAO,OAAD;;AAEf,QAAI,AAAE,CAAD,IAAI,AAAM,KAAD;AACZ,YAAO,AAAO,OAAD;;AAEL,gBAAQ,AAAM,KAAD,kBAAgB,QAAQ,KAAM,AAAE,CAAD,IAAI,CAAC;AAC3D,UAAO,AAAM,KAAD,KAAI,CAAC;AACjB,UAGC,gBAHY,cACT,AAAM,MAAA,QAAC,KAAK,GAAG,AAAM,MAAA,QAAC,AAAM,KAAD,GAAG,IACX,CAAlB,AAAE,CAAD,GAAG,AAAK,KAAA,QAAC,KAAK,MAAM,AAAK,AAAY,KAAZ,QAAC,AAAM,KAAD,GAAG,KAAK,AAAK,KAAA,QAAC,KAAK;EAE1D;4EAGc,SACC,QACD,SACC,QACN;;AAEP,UAAO,AAAQ,AAAO,OAAR,aAAW;AACzB,UAAO,AAAQ,AAAO,OAAR,aAAW;AACzB,UAAO,AAAO,AAAO,MAAR,cAAW,AAAQ,OAAD;AAC/B,UAAO,AAAO,AAAO,MAAR,cAAW,AAAQ,OAAD;AACJ,+DAAQ;AAC/B,mBAAO,MAAM;AACb,mBAAO,MAAM;;;AACE,4BAAoB,AAAM,KAAD,mBAAkB;AAC5C,6BAAqB,AAAkB,AAEvD,iBAFsD,kBAChD,QAAQ,QAAsF,eAAvE,cAAK,iBAAQ,OAAO,EAAE,MAAM,EAAE,IAAI,GAAG,iBAAQ,OAAO,EAAE,MAAM,EAAE,IAAI,GAAG,CAAC,4CAClF;AACnB,UAAO,kCAAgB,kBAAkB,EAAE,iBAAiB;EAC9D","file":"../../../../../../../../F:/packages/flutter/src/painting/gradient.dart.lib.js"}');
  // Exports:
  return {
    src__painting__gradient: gradient
  };
}));

//# sourceMappingURL=gradient.dart.lib.js.map

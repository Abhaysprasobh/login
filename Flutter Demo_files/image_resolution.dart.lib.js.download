// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/image_resolution.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/services/asset_manifest.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__image_resolution_dart(dart_sdk, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__services__asset_manifest$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const asset_bundle = packages__flutter__src__services__text_editing_delta$46dart.src__services__asset_bundle;
  const asset_manifest = packages__flutter__src__services__asset_manifest$46dart.src__services__asset_manifest;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var image_resolution = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    AssetImage: () => (T.AssetImage = dart.constFn(dart_rti.findType("flutter__src__painting__image_resolution|AssetImage")))(),
    Null: () => (T.Null = dart.constFn(dart_rti.findType("core|Null")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    AssetBundleImageKey: () => (T.AssetBundleImageKey = dart.constFn(dart_rti.findType("flutter__src__painting__image_provider|AssetBundleImageKey")))(),
    AssetManifestToNull: () => (T.AssetManifestToNull = dart.constFn(dart_rti.findType("core|Null(flutter__src__services__asset_manifest|AssetManifest)")))(),
    ObjectAndStackTraceToNull: () => (T.ObjectAndStackTraceToNull = dart.constFn(dart_rti.findType("core|Null(core|Object,core|StackTrace)")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    AssetMetadata: () => (T.AssetMetadata = dart.constFn(dart_rti.findType("flutter__src__services__asset_manifest|AssetMetadata")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    ImageConfigurationToFutureOfAssetBundleImageKey: () => (T.ImageConfigurationToFutureOfAssetBundleImageKey = dart.constFn(dart_rti.findType("async|Future<flutter__src__painting__image_provider|AssetBundleImageKey>(flutter__src__painting__image_provider|ImageConfiguration)")))(),
    StringAndImageConfigurationAndIterableNOfAssetMetadataToAssetMetadata: () => (T.StringAndImageConfigurationAndIterableNOfAssetMetadataToAssetMetadata = dart.constFn(dart_rti.findType("flutter__src__services__asset_manifest|AssetMetadata(core|String,flutter__src__painting__image_provider|ImageConfiguration,core|Iterable<flutter__src__services__asset_manifest|AssetMetadata>?)")))(),
    SplayTreeMapOfdouble$AssetMetadataAnddoubleToAssetMetadata: () => (T.SplayTreeMapOfdouble$AssetMetadataAnddoubleToAssetMetadata = dart.constFn(dart_rti.findType("flutter__src__services__asset_manifest|AssetMetadata(collection|SplayTreeMap<core|double,flutter__src__services__asset_manifest|AssetMetadata>,core|double)")))(),
    AssetBundleN: () => (T.AssetBundleN = dart.constFn(dart_rti.findType("flutter__src__services__asset_bundle|AssetBundle?")))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti.findType("core|String?")))()
  };
  var G = {
    SynchronousFutureOfAssetBundleImageKey: () => (G.SynchronousFutureOfAssetBundleImageKey = dart.constFn(synchronous_future.SynchronousFuture$(T.AssetBundleImageKey())))(),
    CompleterOfAssetBundleImageKey: () => (G.CompleterOfAssetBundleImageKey = dart.constFn(async.Completer$(T.AssetBundleImageKey())))(),
    SplayTreeMapOfdouble$AssetMetadata: () => (G.SplayTreeMapOfdouble$AssetMetadata = dart.constFn(collection.SplayTreeMap$(T.double(), T.AssetMetadata())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/image_resolution.dart",
    "package:flutter/src/painting/image_resolution.dart",
    "dart:core",
    "package:flutter/src/services/asset_bundle.dart"
  ];
  var assetName$ = dart.privateName(image_resolution, "AssetImage.assetName");
  var bundle$ = dart.privateName(image_resolution, "AssetImage.bundle");
  var $package$ = dart.privateName(image_resolution, "AssetImage.package");
  var _chooseVariant = dart.privateName(image_resolution, "_chooseVariant");
  var _findBestVariant = dart.privateName(image_resolution, "_findBestVariant");
  var _is = dart.privateName(dart_rti, "_is");
  image_resolution.AssetImage = class AssetImage extends image_provider.AssetBundleImageProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    static ['_#new#tearOff'](assetName, opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new image_resolution.AssetImage.new(assetName, {bundle: bundle, package: $package});
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + this.assetName;
    }
    obtainKey(configuration) {
      let t$360, t$360$;
      let chosenBundle = (t$360$ = (t$360 = this.bundle, t$360 == null ? configuration.bundle : t$360), t$360$ == null ? asset_bundle.rootBundle : t$360$);
      let completer = null;
      let result = null;
      async['FutureExtensions|onError'](T.Null(), T.Object(), asset_manifest.AssetManifest.loadFromAssetBundle(chosenBundle).then(T.Null(), dart.fn(manifest => {
        let t$360;
        let candidateVariants = manifest.getAssetVariants(this.keyName);
        let chosenVariant = this[_chooseVariant](this.keyName, configuration, candidateVariants);
        let key = new image_provider.AssetBundleImageKey.new({bundle: chosenBundle, name: chosenVariant.key, scale: (t$360 = chosenVariant.targetDevicePixelRatio, t$360 == null ? 1 : t$360)});
        if (completer != null) {
          completer.complete(key);
        } else {
          result = new (G.SynchronousFutureOfAssetBundleImageKey()).new(key);
        }
      }, T.AssetManifestToNull())), dart.fn((error, stack) => {
        if (!(completer != null)) dart.assertFailed(null, I[0], 313, 16, "completer != null");
        if (!(result == null)) dart.assertFailed(null, I[0], 314, 16, "result == null");
        dart.nullCheck(completer).completeError(error, stack);
      }, T.ObjectAndStackTraceToNull()));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = G.CompleterOfAssetBundleImageKey().new();
      return completer.future;
    }
    [_chooseVariant](mainAssetKey, config, candidateVariants) {
      let t$360;
      if (candidateVariants == null || candidateVariants[$isEmpty] || config.devicePixelRatio == null) {
        return new asset_manifest.AssetMetadata.new({key: mainAssetKey, targetDevicePixelRatio: null, main: true});
      }
      let candidatesByDevicePixelRatio = new (G.SplayTreeMapOfdouble$AssetMetadata()).new();
      for (let candidate of candidateVariants) {
        candidatesByDevicePixelRatio._set((t$360 = candidate.targetDevicePixelRatio, t$360 == null ? 1 : t$360), candidate);
      }
      return this[_findBestVariant](candidatesByDevicePixelRatio, dart.nullCheck(config.devicePixelRatio));
    }
    [_findBestVariant](candidatesByDpr, value) {
      if (candidatesByDpr.containsKey(value)) {
        return dart.nullCheck(candidatesByDpr._get(value));
      }
      let lower = candidatesByDpr.lastKeyBefore(value);
      let upper = candidatesByDpr.firstKeyAfter(value);
      if (lower == null) {
        return dart.nullCheck(candidatesByDpr._get(upper));
      }
      if (upper == null) {
        return dart.nullCheck(candidatesByDpr._get(lower));
      }
      if (value < 2 || value > (dart.notNull(lower) + dart.notNull(upper)) / 2) {
        return dart.nullCheck(candidatesByDpr._get(upper));
      } else {
        return dart.nullCheck(candidatesByDpr._get(lower));
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.AssetImage()[_is](other) && other.keyName === this.keyName && dart.equals(other.bundle, this.bundle);
    }
    get hashCode() {
      return core.Object.hash(this.keyName, this.bundle);
    }
    toString() {
      return object.objectRuntimeType(this, "AssetImage") + "(bundle: " + dart.str(this.bundle) + ", name: \"" + this.keyName + "\")";
    }
  };
  (image_resolution.AssetImage.new = function(assetName, opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[assetName$] = assetName;
    this[bundle$] = bundle;
    this[$package$] = $package;
    this.$ti = this.$ti || T.AssetImage();
    dart.global.Object.getPrototypeOf(image_resolution.AssetImage).new.call(this);
    ;
  }).prototype = image_resolution.AssetImage.prototype;
  dart.addTypeTests(image_resolution.AssetImage);
  dart.addRtiResources(image_resolution.AssetImage, ["flutter__src__painting__image_resolution|AssetImage"]);
  dart.addTypeCaches(image_resolution.AssetImage);
  dart.setMethodSignature(image_resolution.AssetImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: T.ImageConfigurationToFutureOfAssetBundleImageKey(),
    [_chooseVariant]: T.StringAndImageConfigurationAndIterableNOfAssetMetadataToAssetMetadata(),
    [_findBestVariant]: T.SplayTreeMapOfdouble$AssetMetadataAnddoubleToAssetMetadata()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_resolution.AssetImage))));
  dart.setGetterSignature(image_resolution.AssetImage, () => dart.global.Object.setPrototypeOf({keyName: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(image_resolution.AssetImage))));
  dart.setLibraryUri(image_resolution.AssetImage, I[1]);
  dart.setFieldSignature(image_resolution.AssetImage, () => dart.global.Object.setPrototypeOf({
    assetName: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    bundle: {type: T.AssetBundleN(), isConst: false, isFinal: true, libraryUri: I[3]},
    package: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_resolution.AssetImage))));
  dart.setStaticFieldSignature(image_resolution.AssetImage, () => ['_naturalResolution']);
  dart.defineExtensionMethods(image_resolution.AssetImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_resolution.AssetImage, ['hashCode']);
  dart.defineLazy(image_resolution.AssetImage, {
    /*image_resolution.AssetImage._naturalResolution*/get _naturalResolution() {
      return 1;
    }
  }, false);
  dart.defineLazy(image_resolution, {
    /*image_resolution._kLowDprLimit*/get _kLowDprLimit() {
      return 2;
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting__image_resolution|AssetImage":{"flutter__src__painting__image_provider|AssetBundleImageProvider":[],"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__painting__image_provider|AssetBundleImageProvider":{"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__painting__image_provider|ImageProvider":{"ImageProvider.T":"1"},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"async|Future":{"Future.T":"1"},"core|Iterable":{"Iterable.E":"1"},"collection|SplayTreeMap":{"SplayTreeMap.K":"1","SplayTreeMap.V":"2","_SplayTree.K":"1","_SplayTree.Node":"collection|_SplayTreeMapNode<1,2>","collection|_SplayTree":["1","collection|_SplayTreeMapNode<1,2>"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|_SplayTree":{"_SplayTree.K":"1","_SplayTree.Node":"2"},"collection|_SplayTreeMapNode":{"_SplayTreeMapNode.K":"1","_SplayTreeMapNode.V":"2","_SplayTreeNode.K":"1","_SplayTreeNode.Node":"collection|_SplayTreeMapNode<1,2>","collection|_SplayTreeNode":["1","collection|_SplayTreeMapNode<1,2>"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|_SplayTreeNode":{"_SplayTreeNode.K":"1","_SplayTreeNode.Node":"2"},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/flutter/src/painting/image_resolution.dart", {
    "package:flutter/src/painting/image_resolution.dart": image_resolution
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_resolution.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuPe;;;;;;IAeM;;;;;;IAIL;;;;;;;;;;;;AAdQ,YAAA,AAAQ,wBAAU,iBAAY,AAA8B,uBAAnB,gBAAO,MAAE;IAAU;cAoBzB;;AAOrC,0BAA8C,UAAxB,qBAAP,gBAAU,AAAc,aAAD,kBAAhB,iBAA2B;AACnC;AACH;AA4B1B,8DA1BW,AACX,iDAD+B,YAAY,iBACtC,QAAe;;AACY,gCAAoB,AAAS,QAAD,kBAAkB;AACzD,4BAAgB,qBAClC,cACA,aAAa,EACb,iBAAiB;AAEO,kBAAM,oDACtB,YAAY,QACd,AAAc,aAAD,cACyB,QAArC,AAAc,aAAD,yBAAC;AAEvB,YAAI,SAAS;AAID,UAAV,SAAS,UAAU,GAAG;;AAMtB,mBAAS,qDAAuC,GAAG;;oCAG9C,SAAQ,OAAkB;AAGjC,cAAO,AAAU,SAAD;AAChB,cAAO,AAAO,MAAD;AACF,QAAF,eAAT,SAAS,gBAAgB,KAAK,EAAE,KAAK;;AAGzC,UAAI,MAAM;AAGR,cAAa,gBAAN,MAAM;;AAIf,kBAAY;AACZ,YAAO,AAAU,UAAD;IAClB;qBAEoC,cAAiC,QAAiC;;AACpG,UAAI,AAAkB,iBAAD,YAAY,AAAkB,iBAAD,cAAY,AAAO,AAAiB,MAAlB;AAClE,cAAO,4CAAmB,YAAY,0BAA0B,YAAY;;AAGpC,yCACxC;AACF,eAAyB,YAAa,kBAAiB;AACzB,QAA5B,4BAA4B,OAAkC,QAAjC,AAAU,SAAD,yBAAC,4BAAgD,SAAS;;AAKlG,YAAO,wBAAiB,4BAA4B,EAAyB,eAAvB,AAAO,MAAD;IAC9D;uBAcmE,iBAAwB;AACzF,UAAI,AAAgB,eAAD,aAAa,KAAK;AACnC,cAA6B,gBAAtB,AAAe,eAAA,MAAC,KAAK;;AAEhB,kBAAQ,AAAgB,eAAD,eAAe,KAAK;AAC3C,kBAAQ,AAAgB,eAAD,eAAe,KAAK;AACzD,UAAI,AAAM,KAAD;AACP,cAA6B,gBAAtB,AAAe,eAAA,MAAC,KAAK;;AAE9B,UAAI,AAAM,KAAD;AACP,cAA6B,gBAAtB,AAAe,eAAA,MAAC,KAAK;;AAO9B,UAAI,AAAM,KAAD,QAAoB,AAAM,KAAD,GAAmB,CAAT,aAAN,KAAK,iBAAG,KAAK,KAAI;AACrD,cAA6B,gBAAtB,AAAe,eAAA,MAAC,KAAK;;AAE5B,cAA6B,gBAAtB,AAAe,eAAA,MAAC,KAAK;;IAEhC;YAGwB;;AACtB,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AAET,qBAFG,KAAK,KACL,AAAM,AAAQ,KAAT,aAAY,gBACJ,YAAb,AAAM,KAAD,SAAW;IACzB;;AAGoB,YAAO,kBAAK,cAAS;IAAO;;AAG3B,YAAG,AAA0E,0BAAxD,MAAM,gBAAc,uBAAU,eAAM,eAAU,eAAO;IAAG;;8CA1J3F;QACA;QACA;IAFA;IACA;IACA;;AAHD;;EAIJ;;;;;;;;;;;;;;;;;;;;MA0BkB,8CAAkB;;;;;MA9P3B,8BAAa","file":"../../../../../../../../F:/packages/flutter/src/painting/image_resolution.dart.lib.js"}');
  // Exports:
  return {
    src__painting__image_resolution: image_resolution
  };
}));

//# sourceMappingURL=image_resolution.dart.lib.js.map

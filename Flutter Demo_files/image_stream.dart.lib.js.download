// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/image_stream.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/scheduler/binding.dart'], (function load__packages__flutter__src__painting__image_stream_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__scheduler__binding$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__foundation__debug$46dart.src__foundation__debug;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  var image_stream = Object.create(dart.library);
  var $length = dartx.length;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  var $_get = dartx._get;
  var $removeAt = dartx.removeAt;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $toList = dartx.toList;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $map = dartx.map;
  var $whereType = dartx.whereType;
  var $addAll = dartx.addAll;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    ImageInfo: () => (T.ImageInfo = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageInfo")))(),
    VoidToImageInfo: () => (T.VoidToImageInfo = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageInfo()")))(),
    ImageInfoTobool: () => (T.ImageInfoTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__painting__image_stream|ImageInfo)")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    Image: () => (T.Image = dart.constFn(dart_rti.findType("ui|Image")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    ImageStreamListener: () => (T.ImageStreamListener = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamListener")))(),
    ImageInfoAndboolTovoid: () => (T.ImageInfoAndboolTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageInfo,core|bool)")))(),
    ImageChunkEventToNvoid: () => (T.ImageChunkEventToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageChunkEvent)?")))(),
    ObjectAndStackTraceNToNvoid: () => (T.ObjectAndStackTraceNToNvoid = dart.constFn(dart_rti.findType("~(core|Object,core|StackTrace?)?")))(),
    intN: () => (T.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    ImageStreamCompleter: () => (T.ImageStreamCompleter = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleter")))(),
    ListOfImageStreamListener: () => (T.ListOfImageStreamListener = dart.constFn(dart_rti.findType("core|List<flutter__src__painting__image_stream|ImageStreamListener>")))(),
    ImageStreamCompleterN: () => (T.ImageStreamCompleterN = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleter?")))(),
    ImageStreamCompleterTovoid: () => (T.ImageStreamCompleterTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageStreamCompleter)")))(),
    ImageStreamListenerTovoid: () => (T.ImageStreamListenerTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageStreamListener)")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    ListNOfImageStreamListener: () => (T.ListNOfImageStreamListener = dart.constFn(dart_rti.findType("core|List<flutter__src__painting__image_stream|ImageStreamListener>?")))(),
    ImageStreamCompleterHandle: () => (T.ImageStreamCompleterHandle = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleterHandle")))(),
    ObjectAndStackTraceNTovoid: () => (T.ObjectAndStackTraceNTovoid = dart.constFn(dart_rti.findType("~(core|Object,core|StackTrace?)")))(),
    ImageStreamListenerToFn: () => (T.ImageStreamListenerToFn = dart.constFn(dart_rti.findType("~(core|Object,core|StackTrace?)?(flutter__src__painting__image_stream|ImageStreamListener)")))(),
    ImageStreamListenerToFn$1: () => (T.ImageStreamListenerToFn$1 = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageChunkEvent)?(flutter__src__painting__image_stream|ImageStreamListener)")))(),
    ImageChunkEventTovoid: () => (T.ImageChunkEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageChunkEvent)")))(),
    ListOfObjectAndStackTraceNTovoid: () => (T.ListOfObjectAndStackTraceNTovoid = dart.constFn(dart_rti.findType("core|List<~(core|Object,core|StackTrace?)>")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(~(core|Object,core|StackTrace?))")))(),
    VoidToImageStreamCompleterHandle: () => (T.VoidToImageStreamCompleterHandle = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageStreamCompleterHandle()")))(),
    FnTovoid$1: () => (T.FnTovoid$1 = dart.constFn(dart_rti.findType("~(~())")))(),
    ImageInfoTovoid: () => (T.ImageInfoTovoid = dart.constFn(dart_rti.findType("~(flutter__src__painting__image_stream|ImageInfo)")))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti.findType("~({context:flutter__src__foundation__diagnostics|DiagnosticsNode?,exception!core|Object,informationCollector:core|Iterable<flutter__src__foundation__diagnostics|DiagnosticsNode>()?,silent:core|bool,stack:core|StackTrace?})")))(),
    ImageInfoN: () => (T.ImageInfoN = dart.constFn(dart_rti.findType("flutter__src__painting__image_stream|ImageInfo?")))(),
    FlutterErrorDetailsN: () => (T.FlutterErrorDetailsN = dart.constFn(dart_rti.findType("flutter__src__foundation__assertions|FlutterErrorDetails?")))(),
    ListOfVoidTovoid: () => (T.ListOfVoidTovoid = dart.constFn(dart_rti.findType("core|List<~()>")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    ObjectAndStackTraceToNull: () => (T.ObjectAndStackTraceToNull = dart.constFn(dart_rti.findType("core|Null(core|Object,core|StackTrace)")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    CodecTovoid: () => (T.CodecTovoid = dart.constFn(dart_rti.findType("~(ui|Codec)")))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart_rti.findType("~(core|Duration)")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    DurationTobool: () => (T.DurationTobool = dart.constFn(dart_rti.findType("core|bool(core|Duration)")))(),
    VoidToFutureOfvoid: () => (T.VoidToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>()")))(),
    StreamSubscriptionNOfImageChunkEvent: () => (T.StreamSubscriptionNOfImageChunkEvent = dart.constFn(dart_rti.findType("async|StreamSubscription<flutter__src__painting__image_stream|ImageChunkEvent>?")))(),
    CodecN: () => (T.CodecN = dart.constFn(dart_rti.findType("ui|Codec?")))(),
    VoidToNIterableOfDiagnosticsNode: () => (T.VoidToNIterableOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|Iterable<flutter__src__foundation__diagnostics|DiagnosticsNode>()?")))(),
    FrameInfoN: () => (T.FrameInfoN = dart.constFn(dart_rti.findType("ui|FrameInfo?")))(),
    DurationN: () => (T.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))()
  };
  var G = {
    JSArrayOfImageStreamListener: () => (G.JSArrayOfImageStreamListener = dart.constFn(_interceptors.JSArray$(T.ImageStreamListener())))(),
    ObjectFlagPropertyOfImageStreamCompleter: () => (G.ObjectFlagPropertyOfImageStreamCompleter = dart.constFn(diagnostics.ObjectFlagProperty$(T.ImageStreamCompleter())))(),
    ObjectFlagPropertyOfListOfImageStreamListener: () => (G.ObjectFlagPropertyOfListOfImageStreamListener = dart.constFn(diagnostics.ObjectFlagProperty$(T.ListOfImageStreamListener())))(),
    JSArrayOfObjectAndStackTraceNTovoid: () => (G.JSArrayOfObjectAndStackTraceNTovoid = dart.constFn(_interceptors.JSArray$(T.ObjectAndStackTraceNTovoid())))(),
    JSArrayOfVoidTovoid: () => (G.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T.VoidTovoid())))(),
    ListOfImageStreamListener: () => (G.ListOfImageStreamListener = dart.constFn(core.List$(T.ImageStreamListener())))(),
    ListOfObjectAndStackTraceNTovoid: () => (G.ListOfObjectAndStackTraceNTovoid = dart.constFn(core.List$(T.ObjectAndStackTraceNTovoid())))(),
    DiagnosticsPropertyOfImageInfo: () => (G.DiagnosticsPropertyOfImageInfo = dart.constFn(diagnostics.DiagnosticsProperty$(T.ImageInfo())))(),
    ObjectFlagPropertyOfListOfObjectAndStackTraceNTovoid: () => (G.ObjectFlagPropertyOfListOfObjectAndStackTraceNTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(T.ListOfObjectAndStackTraceNTovoid())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/image_stream.dart",
    "package:flutter/src/painting/image_stream.dart",
    "dart:ui",
    "dart:core",
    "package:flutter/src/foundation/assertions.dart",
    "dart:async"
  ];
  var image$ = dart.privateName(image_stream, "ImageInfo.image");
  var scale$ = dart.privateName(image_stream, "ImageInfo.scale");
  var debugLabel$ = dart.privateName(image_stream, "ImageInfo.debugLabel");
  var _is = dart.privateName(dart_rti, "_is");
  image_stream.ImageInfo = class ImageInfo extends core.Object {
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#new#tearOff'](opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      return new image_stream.ImageInfo.new({image: image, scale: scale, debugLabel: debugLabel});
    }
    clone() {
      return new image_stream.ImageInfo.new({image: this.image.clone(), scale: this.scale, debugLabel: this.debugLabel});
    }
    isCloneOf(other) {
      return other.image.isCloneOf(this.image) && this.scale === this.scale && other.debugLabel == this.debugLabel;
    }
    get sizeBytes() {
      return this.image.height * this.image.width * 4;
    }
    dispose() {
      let t$360, t$360$;
      if (!(dart.notNull((t$360$ = (t$360 = this.image.debugGetOpenHandleStackTraces(), t$360 == null ? null : t$360[$length]), t$360$ == null ? 1 : t$360$)) > 0)) dart.assertFailed(null, I[0], 127, 12, "(image.debugGetOpenHandleStackTraces()?.length ?? 1) > 0");
      this.image.dispose();
    }
    toString() {
      return (this.debugLabel != null ? dart.str(this.debugLabel) + " " : "") + dart.str(this.image) + " @ " + debug.debugFormatDouble(this.scale) + "x";
    }
    get hashCode() {
      return core.Object.hash(this.image, this.scale, this.debugLabel);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.ImageInfo()[_is](other) && dart.equals(other.image, this.image) && other.scale === this.scale && other.debugLabel == this.debugLabel;
    }
  };
  (image_stream.ImageInfo.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[image$] = image;
    this[scale$] = scale;
    this[debugLabel$] = debugLabel;
    ;
  }).prototype = image_stream.ImageInfo.prototype;
  dart.addTypeTests(image_stream.ImageInfo);
  dart.addRtiResources(image_stream.ImageInfo, ["flutter__src__painting__image_stream|ImageInfo"]);
  dart.addTypeCaches(image_stream.ImageInfo);
  dart.setMethodSignature(image_stream.ImageInfo, () => dart.global.Object.setPrototypeOf({
    clone: T.VoidToImageInfo(),
    isCloneOf: T.ImageInfoTobool(),
    dispose: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_stream.ImageInfo))));
  dart.setGetterSignature(image_stream.ImageInfo, () => dart.global.Object.setPrototypeOf({sizeBytes: T.int()}, dart.getGetters(dart.global.Object.getPrototypeOf(image_stream.ImageInfo))));
  dart.setLibraryUri(image_stream.ImageInfo, I[1]);
  dart.setFieldSignature(image_stream.ImageInfo, () => dart.global.Object.setPrototypeOf({
    image: {type: T.Image(), isConst: false, isFinal: true, libraryUri: I[2]},
    scale: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[3]},
    debugLabel: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageInfo))));
  dart.defineExtensionMethods(image_stream.ImageInfo, ['toString', '_equals']);
  dart.defineExtensionAccessors(image_stream.ImageInfo, ['hashCode']);
  var onImage$ = dart.privateName(image_stream, "ImageStreamListener.onImage");
  var onChunk$ = dart.privateName(image_stream, "ImageStreamListener.onChunk");
  var onError$ = dart.privateName(image_stream, "ImageStreamListener.onError");
  image_stream.ImageStreamListener = class ImageStreamListener extends core.Object {
    get onImage() {
      return this[onImage$];
    }
    set onImage(value) {
      super.onImage = value;
    }
    get onChunk() {
      return this[onChunk$];
    }
    set onChunk(value) {
      super.onChunk = value;
    }
    get onError() {
      return this[onError$];
    }
    set onError(value) {
      super.onError = value;
    }
    static ['_#new#tearOff'](onImage, opts) {
      let onChunk = opts && 'onChunk' in opts ? opts.onChunk : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new image_stream.ImageStreamListener.new(onImage, {onChunk: onChunk, onError: onError});
    }
    get hashCode() {
      return core.Object.hash(this.onImage, this.onChunk, this.onError);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.ImageStreamListener()[_is](other) && other.onImage[$_equals](this.onImage) && dart.equals(other.onChunk, this.onChunk) && dart.equals(other.onError, this.onError);
    }
  };
  (image_stream.ImageStreamListener.new = function(onImage, opts) {
    let onChunk = opts && 'onChunk' in opts ? opts.onChunk : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[onImage$] = onImage;
    this[onChunk$] = onChunk;
    this[onError$] = onError;
    ;
  }).prototype = image_stream.ImageStreamListener.prototype;
  dart.addTypeTests(image_stream.ImageStreamListener);
  dart.addRtiResources(image_stream.ImageStreamListener, ["flutter__src__painting__image_stream|ImageStreamListener"]);
  dart.addTypeCaches(image_stream.ImageStreamListener);
  dart.setLibraryUri(image_stream.ImageStreamListener, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamListener, () => dart.global.Object.setPrototypeOf({
    onImage: {type: T.ImageInfoAndboolTovoid(), isConst: false, isFinal: true},
    onChunk: {type: T.ImageChunkEventToNvoid(), isConst: false, isFinal: true},
    onError: {type: T.ObjectAndStackTraceNToNvoid(), isConst: false, isFinal: true}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageStreamListener))));
  dart.defineExtensionMethods(image_stream.ImageStreamListener, ['_equals']);
  dart.defineExtensionAccessors(image_stream.ImageStreamListener, ['hashCode']);
  var cumulativeBytesLoaded$ = dart.privateName(image_stream, "ImageChunkEvent.cumulativeBytesLoaded");
  var expectedTotalBytes$ = dart.privateName(image_stream, "ImageChunkEvent.expectedTotalBytes");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  image_stream.ImageChunkEvent = class ImageChunkEvent extends Object_Diagnosticable$36 {
    get cumulativeBytesLoaded() {
      return this[cumulativeBytesLoaded$];
    }
    set cumulativeBytesLoaded(value) {
      super.cumulativeBytesLoaded = value;
    }
    get expectedTotalBytes() {
      return this[expectedTotalBytes$];
    }
    set expectedTotalBytes(value) {
      super.expectedTotalBytes = value;
    }
    static ['_#new#tearOff'](opts) {
      let cumulativeBytesLoaded = opts && 'cumulativeBytesLoaded' in opts ? opts.cumulativeBytesLoaded : null;
      let expectedTotalBytes = opts && 'expectedTotalBytes' in opts ? opts.expectedTotalBytes : null;
      return new image_stream.ImageChunkEvent.new({cumulativeBytesLoaded: cumulativeBytesLoaded, expectedTotalBytes: expectedTotalBytes});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.IntProperty.new("cumulativeBytesLoaded", this.cumulativeBytesLoaded));
      properties.add(new diagnostics.IntProperty.new("expectedTotalBytes", this.expectedTotalBytes));
    }
  };
  (image_stream.ImageChunkEvent.new = function(opts) {
    let cumulativeBytesLoaded = opts && 'cumulativeBytesLoaded' in opts ? opts.cumulativeBytesLoaded : null;
    let expectedTotalBytes = opts && 'expectedTotalBytes' in opts ? opts.expectedTotalBytes : null;
    this[cumulativeBytesLoaded$] = cumulativeBytesLoaded;
    this[expectedTotalBytes$] = expectedTotalBytes;
    if (!(cumulativeBytesLoaded >= 0)) dart.assertFailed(null, I[0], 269, 15, "cumulativeBytesLoaded >= 0");
    if (!(expectedTotalBytes == null || dart.notNull(expectedTotalBytes) >= 0)) dart.assertFailed(null, I[0], 270, 15, "expectedTotalBytes == null || expectedTotalBytes >= 0");
    ;
  }).prototype = image_stream.ImageChunkEvent.prototype;
  dart.addTypeTests(image_stream.ImageChunkEvent);
  dart.addRtiResources(image_stream.ImageChunkEvent, ["flutter__src__painting__image_stream|ImageChunkEvent"]);
  dart.addTypeCaches(image_stream.ImageChunkEvent);
  dart.setLibraryUri(image_stream.ImageChunkEvent, I[1]);
  dart.setFieldSignature(image_stream.ImageChunkEvent, () => dart.global.Object.setPrototypeOf({
    cumulativeBytesLoaded: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[3]},
    expectedTotalBytes: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageChunkEvent))));
  var _completer$ = dart.privateName(image_stream, "_completer");
  var _listeners = dart.privateName(image_stream, "_listeners");
  var _addingInitialListeners = dart.privateName(image_stream, "_addingInitialListeners");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  image_stream.ImageStream = class ImageStream extends Object_Diagnosticable$36$ {
    static ['_#new#tearOff']() {
      return new image_stream.ImageStream.new();
    }
    get completer() {
      return this[_completer$];
    }
    setCompleter(value) {
      if (!(this[_completer$] == null)) dart.assertFailed(null, I[0], 340, 12, "_completer == null");
      this[_completer$] = value;
      if (this[_listeners] != null) {
        let initialListeners = dart.nullCheck(this[_listeners]);
        this[_listeners] = null;
        dart.nullCheck(this[_completer$])[_addingInitialListeners] = true;
        initialListeners[$forEach](dart.bind(dart.nullCheck(this[_completer$]), 'addListener'));
        dart.nullCheck(this[_completer$])[_addingInitialListeners] = false;
      }
    }
    addListener(listener) {
      if (this[_completer$] != null) {
        return dart.nullCheck(this[_completer$]).addListener(listener);
      }
      this[_listeners] == null ? this[_listeners] = G.JSArrayOfImageStreamListener().of([]) : null;
      dart.nullCheck(this[_listeners])[$add](listener);
    }
    removeListener(listener) {
      if (this[_completer$] != null) {
        return dart.nullCheck(this[_completer$]).removeListener(listener);
      }
      if (!(this[_listeners] != null)) dart.assertFailed(null, I[0], 388, 12, "_listeners != null");
      for (let i = 0; i < dart.nullCheck(this[_listeners])[$length]; i = i + 1) {
        if (dart.equals(dart.nullCheck(this[_listeners])[$_get](i), listener)) {
          dart.nullCheck(this[_listeners])[$removeAt](i);
          break;
        }
      }
    }
    get key() {
      let t$360;
      t$360 = this[_completer$];
      return t$360 == null ? this : t$360;
    }
    debugFillProperties(properties) {
      let t$360, t$360$, t$360$0, t$360$1;
      super.debugFillProperties(properties);
      properties.add(new (G.ObjectFlagPropertyOfImageStreamCompleter()).new("completer", this[_completer$], {ifPresent: (t$360 = this[_completer$], t$360 == null ? null : t$360.toStringShort()), ifNull: "unresolved"}));
      properties.add(new (G.ObjectFlagPropertyOfListOfImageStreamListener()).new("listeners", this[_listeners], {ifPresent: dart.str((t$360$ = this[_listeners], t$360$ == null ? null : t$360$[$length])) + " listener" + ((t$360$0 = this[_listeners], t$360$0 == null ? null : t$360$0[$length]) === 1 ? "" : "s"), ifNull: "no listeners", level: this[_completer$] != null ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      t$360$1 = this[_completer$];
      t$360$1 == null ? null : t$360$1.debugFillProperties(properties);
    }
  };
  (image_stream.ImageStream.new = function() {
    this[_completer$] = null;
    this[_listeners] = null;
    ;
  }).prototype = image_stream.ImageStream.prototype;
  dart.addTypeTests(image_stream.ImageStream);
  dart.addRtiResources(image_stream.ImageStream, ["flutter__src__painting__image_stream|ImageStream"]);
  dart.addTypeCaches(image_stream.ImageStream);
  dart.setMethodSignature(image_stream.ImageStream, () => dart.global.Object.setPrototypeOf({
    setCompleter: T.ImageStreamCompleterTovoid(),
    addListener: T.ImageStreamListenerTovoid(),
    removeListener: T.ImageStreamListenerTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_stream.ImageStream))));
  dart.setGetterSignature(image_stream.ImageStream, () => dart.global.Object.setPrototypeOf({
    completer: T.ImageStreamCompleterN(),
    key: T.Object()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(image_stream.ImageStream))));
  dart.setLibraryUri(image_stream.ImageStream, I[1]);
  dart.setFieldSignature(image_stream.ImageStream, () => dart.global.Object.setPrototypeOf({
    [_completer$]: {type: T.ImageStreamCompleterN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_listeners]: {type: T.ListNOfImageStreamListener(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageStream))));
  var _keepAliveHandles = dart.privateName(image_stream, "_keepAliveHandles");
  var _disposed = dart.privateName(image_stream, "_disposed");
  var _maybeDispose = dart.privateName(image_stream, "_maybeDispose");
  image_stream.ImageStreamCompleterHandle = class ImageStreamCompleterHandle extends core.Object {
    static ['_#_#tearOff'](_completer) {
      return new image_stream.ImageStreamCompleterHandle.__(_completer);
    }
    dispose() {
      let t$360;
      if (!(this[_completer$] != null)) dart.assertFailed(null, I[0], 460, 12, "_completer != null");
      if (!(dart.nullCheck(this[_completer$])[_keepAliveHandles] > 0)) dart.assertFailed(null, I[0], 461, 12, "_completer!._keepAliveHandles > 0");
      if (!!dart.nullCheck(this[_completer$])[_disposed]) dart.assertFailed(null, I[0], 462, 12, "!_completer!._disposed");
      t$360 = dart.nullCheck(this[_completer$]);
      t$360[_keepAliveHandles] = t$360[_keepAliveHandles] - 1;
      dart.nullCheck(this[_completer$])[_maybeDispose]();
      this[_completer$] = null;
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
    }
  };
  (image_stream.ImageStreamCompleterHandle.__ = function(_completer) {
    let t$360;
    this[_completer$] = _completer;
    t$360 = dart.nullCheck(this[_completer$]);
    t$360[_keepAliveHandles] = t$360[_keepAliveHandles] + 1;
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/widgets.dart", className: dart.strSafe(dart_rti.createRuntimeType(T.ImageStreamCompleterHandle())), object: this});
    }
  }).prototype = image_stream.ImageStreamCompleterHandle.prototype;
  dart.addTypeTests(image_stream.ImageStreamCompleterHandle);
  dart.addRtiResources(image_stream.ImageStreamCompleterHandle, ["flutter__src__painting__image_stream|ImageStreamCompleterHandle"]);
  dart.addTypeCaches(image_stream.ImageStreamCompleterHandle);
  dart.setMethodSignature(image_stream.ImageStreamCompleterHandle, () => dart.global.Object.setPrototypeOf({dispose: T.VoidTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(image_stream.ImageStreamCompleterHandle))));
  dart.setLibraryUri(image_stream.ImageStreamCompleterHandle, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamCompleterHandle, () => dart.global.Object.setPrototypeOf({[_completer$]: {type: T.ImageStreamCompleterN(), isConst: false, isFinal: false, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageStreamCompleterHandle))));
  var debugLabel = dart.privateName(image_stream, "ImageStreamCompleter.debugLabel");
  var _ephemeralErrorListeners = dart.privateName(image_stream, "_ephemeralErrorListeners");
  var _currentImage = dart.privateName(image_stream, "_currentImage");
  var _currentError = dart.privateName(image_stream, "_currentError");
  var _hadAtLeastOneListener = dart.privateName(image_stream, "_hadAtLeastOneListener");
  var _onLastListenerRemovedCallbacks = dart.privateName(image_stream, "_onLastListenerRemovedCallbacks");
  var _checkDisposed = dart.privateName(image_stream, "_checkDisposed");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  image_stream.ImageStreamCompleter = class ImageStreamCompleter extends Object_Diagnosticable$36$0 {
    get debugLabel() {
      return this[debugLabel];
    }
    set debugLabel(value) {
      this[debugLabel] = value;
    }
    get hasListeners() {
      return this[_listeners][$isNotEmpty];
    }
    addListener(listener) {
      let t$362, t$361, t$360;
      this[_checkDisposed]();
      this[_hadAtLeastOneListener] = true;
      this[_listeners][$add](listener);
      if (this[_currentImage] != null) {
        try {
          t$360 = listener;
          t$361 = dart.nullCheck(this[_currentImage]).clone();
          t$362 = !this[_addingInitialListeners];
          t$360.onImage(t$361, t$362);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("by a synchronously-called image listener"), exception: exception, stack: stack});
          } else
            throw t$36$35e;
        }
      }
      if (this[_currentError] != null && listener.onError != null) {
        try {
          dart.nullCheck(listener.onError)(dart.nullCheck(this[_currentError]).exception, dart.nullCheck(this[_currentError]).stack);
        } catch (t$36$35e$) {
          let newException = dart.getThrown(t$36$35e$);
          let newStack = dart.stackTrace(t$36$35e$);
          if (T.Object()[_is](newException)) {
            if (!dart.equals(newException, dart.nullCheck(this[_currentError]).exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: newException, library: "image resource service", context: new assertions.ErrorDescription.new("by a synchronously-called image error listener"), stack: newStack}));
            }
          } else
            throw t$36$35e$;
        }
      }
    }
    addEphemeralErrorListener(listener) {
      this[_checkDisposed]();
      if (this[_currentError] != null) {
        try {
          listener(dart.nullCheck(this[_currentError]).exception, dart.nullCheck(this[_currentError]).stack);
        } catch (t$36$35e) {
          let newException = dart.getThrown(t$36$35e);
          let newStack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](newException)) {
            if (!dart.equals(newException, dart.nullCheck(this[_currentError]).exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: newException, library: "image resource service", context: new assertions.ErrorDescription.new("by a synchronously-called image error listener"), stack: newStack}));
            }
          } else
            throw t$36$35e;
        }
      } else if (this[_currentImage] == null) {
        this[_ephemeralErrorListeners][$add](listener);
      }
    }
    keepAlive() {
      this[_checkDisposed]();
      return new image_stream.ImageStreamCompleterHandle.__(this);
    }
    removeListener(listener) {
      this[_checkDisposed]();
      for (let i = 0; i < this[_listeners][$length]; i = i + 1) {
        if (dart.equals(this[_listeners][$_get](i), listener)) {
          this[_listeners][$removeAt](i);
          break;
        }
      }
      if (this[_listeners][$isEmpty]) {
        let callbacks = this[_onLastListenerRemovedCallbacks][$toList]();
        for (let callback of callbacks) {
          callback();
        }
        this[_onLastListenerRemovedCallbacks][$clear]();
        this[_maybeDispose]();
      }
    }
    [_maybeDispose]() {
      let t$363;
      if (!this[_hadAtLeastOneListener] || this[_disposed] || this[_listeners][$isNotEmpty] || this[_keepAliveHandles] !== 0) {
        return;
      }
      this[_ephemeralErrorListeners][$clear]();
      t$363 = this[_currentImage];
      t$363 == null ? null : t$363.dispose();
      this[_currentImage] = null;
      this[_disposed] = true;
    }
    [_checkDisposed]() {
      if (this[_disposed]) {
        dart.throw(new core.StateError.new("Stream has been disposed.\nAn ImageStream is considered disposed once at least one listener has been added and subsequently all listeners have been removed and no handles are outstanding from the keepAlive method.\nTo resolve this error, maintain at least one listener on the stream, or create an ImageStreamCompleterHandle from the keepAlive method, or create a new stream for the image."));
      }
    }
    addOnLastListenerRemovedCallback(callback) {
      this[_checkDisposed]();
      this[_onLastListenerRemovedCallbacks][$add](callback);
    }
    removeOnLastListenerRemovedCallback(callback) {
      this[_checkDisposed]();
      this[_onLastListenerRemovedCallbacks][$remove](callback);
    }
    setImage(image) {
      let t$363, t$365, t$364, t$363$;
      this[_checkDisposed]();
      t$363 = this[_currentImage];
      t$363 == null ? null : t$363.dispose();
      this[_currentImage] = image;
      this[_ephemeralErrorListeners][$clear]();
      if (this[_listeners][$isEmpty]) {
        return;
      }
      let localListeners = G.ListOfImageStreamListener().of(this[_listeners]);
      for (let listener of localListeners) {
        try {
          t$363$ = listener;
          t$364 = image.clone();
          t$365 = false;
          t$363$.onImage(t$364, t$365);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("by an image listener"), exception: exception, stack: stack});
          } else
            throw t$36$35e;
        }
      }
    }
    reportError(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let stack = opts && 'stack' in opts ? opts.stack : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      let silent = opts && 'silent' in opts ? opts.silent : false;
      this[_currentError] = new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "image resource service", context: context, informationCollector: informationCollector, silent: silent});
      let localErrorListeners = (() => {
        let t$364 = G.ListOfObjectAndStackTraceNTovoid().of(this[_listeners][$map](T.ObjectAndStackTraceNToNvoid(), dart.fn(listener => listener.onError, T.ImageStreamListenerToFn()))[$whereType](T.ObjectAndStackTraceNTovoid()));
        t$364[$addAll](this[_ephemeralErrorListeners]);
        return t$364;
      })();
      this[_ephemeralErrorListeners][$clear]();
      let handled = false;
      for (let errorListener of localErrorListeners) {
        try {
          errorListener(exception, stack);
          handled = true;
        } catch (t$36$35e) {
          let newException = dart.getThrown(t$36$35e);
          let newStack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](newException)) {
            if (!dart.equals(newException, exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("when reporting an error to an image listener"), library: "image resource service", exception: newException, stack: newStack}));
            }
          } else
            throw t$36$35e;
        }
      }
      if (!handled) {
        assertions.FlutterError.reportError(dart.nullCheck(this[_currentError]));
      }
    }
    reportImageChunkEvent(event) {
      this[_checkDisposed]();
      if (this.hasListeners) {
        let localListeners = this[_listeners][$map](T.ImageChunkEventToNvoid(), dart.fn(listener => listener.onChunk, T.ImageStreamListenerToFn$1()))[$whereType](T.ImageChunkEventTovoid())[$toList]();
        for (let listener of localListeners) {
          listener(event);
        }
      }
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (G.DiagnosticsPropertyOfImageInfo()).new("current", this[_currentImage], {ifNull: "unresolved", showName: false}));
      description.add(new (G.ObjectFlagPropertyOfListOfImageStreamListener()).new("listeners", this[_listeners], {ifPresent: dart.strSafe(this[_listeners][$length]) + " listener" + (this[_listeners][$length] === 1 ? "" : "s")}));
      description.add(new (G.ObjectFlagPropertyOfListOfObjectAndStackTraceNTovoid()).new("ephemeralErrorListeners", this[_ephemeralErrorListeners], {ifPresent: dart.strSafe(this[_ephemeralErrorListeners][$length]) + " ephemeralErrorListener" + (this[_ephemeralErrorListeners][$length] === 1 ? "" : "s")}));
      description.add(new diagnostics.FlagProperty.new("disposed", {value: this[_disposed], ifTrue: "<disposed>"}));
    }
  };
  (image_stream.ImageStreamCompleter.new = function() {
    this[_listeners] = G.JSArrayOfImageStreamListener().of([]);
    this[_ephemeralErrorListeners] = G.JSArrayOfObjectAndStackTraceNTovoid().of([]);
    this[_currentImage] = null;
    this[_currentError] = null;
    this[debugLabel] = null;
    this[_hadAtLeastOneListener] = false;
    this[_addingInitialListeners] = false;
    this[_keepAliveHandles] = 0;
    this[_disposed] = false;
    this[_onLastListenerRemovedCallbacks] = G.JSArrayOfVoidTovoid().of([]);
    ;
  }).prototype = image_stream.ImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.ImageStreamCompleter);
  dart.addRtiResources(image_stream.ImageStreamCompleter, ["flutter__src__painting__image_stream|ImageStreamCompleter"]);
  dart.addTypeCaches(image_stream.ImageStreamCompleter);
  dart.setMethodSignature(image_stream.ImageStreamCompleter, () => dart.global.Object.setPrototypeOf({
    addListener: T.ImageStreamListenerTovoid(),
    addEphemeralErrorListener: T.FnTovoid(),
    keepAlive: T.VoidToImageStreamCompleterHandle(),
    removeListener: T.ImageStreamListenerTovoid(),
    [_maybeDispose]: T.VoidTovoid(),
    [_checkDisposed]: T.VoidTovoid(),
    addOnLastListenerRemovedCallback: T.FnTovoid$1(),
    removeOnLastListenerRemovedCallback: T.FnTovoid$1(),
    setImage: T.ImageInfoTovoid(),
    reportError: T.__Tovoid(),
    reportImageChunkEvent: T.ImageChunkEventTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_stream.ImageStreamCompleter))));
  dart.setGetterSignature(image_stream.ImageStreamCompleter, () => dart.global.Object.setPrototypeOf({hasListeners: T.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(image_stream.ImageStreamCompleter))));
  dart.setLibraryUri(image_stream.ImageStreamCompleter, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamCompleter, () => dart.global.Object.setPrototypeOf({
    [_listeners]: {type: T.ListOfImageStreamListener(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_ephemeralErrorListeners]: {type: T.ListOfObjectAndStackTraceNTovoid(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_currentImage]: {type: T.ImageInfoN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_currentError]: {type: T.FlutterErrorDetailsN(), isConst: false, isFinal: false, libraryUri: I[4]},
    debugLabel: {type: T.StringN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_hadAtLeastOneListener]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_addingInitialListeners]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_keepAliveHandles]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_disposed]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_onLastListenerRemovedCallbacks]: {type: T.ListOfVoidTovoid(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.ImageStreamCompleter))));
  image_stream.OneFrameImageStreamCompleter = class OneFrameImageStreamCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff'](image, opts) {
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      return new image_stream.OneFrameImageStreamCompleter.new(image, {informationCollector: informationCollector});
    }
  };
  (image_stream.OneFrameImageStreamCompleter.new = function(image, opts) {
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    dart.global.Object.getPrototypeOf(image_stream.OneFrameImageStreamCompleter).new.call(this);
    image.then(T.void(), dart.bind(this, 'setImage'), {onError: dart.fn((error, stack) => {
        this.reportError({context: new assertions.ErrorDescription.new("resolving a single-frame image stream"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
      }, T.ObjectAndStackTraceToNull())});
  }).prototype = image_stream.OneFrameImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.OneFrameImageStreamCompleter);
  dart.addRtiResources(image_stream.OneFrameImageStreamCompleter, ["flutter__src__painting__image_stream|OneFrameImageStreamCompleter"]);
  dart.addTypeCaches(image_stream.OneFrameImageStreamCompleter);
  dart.setLibraryUri(image_stream.OneFrameImageStreamCompleter, I[1]);
  var _chunkSubscription = dart.privateName(image_stream, "_chunkSubscription");
  var _codec = dart.privateName(image_stream, "_codec");
  var _nextFrame = dart.privateName(image_stream, "_nextFrame");
  var __MultiFrameImageStreamCompleter__shownTimestamp = dart.privateName(image_stream, "_#MultiFrameImageStreamCompleter#_shownTimestamp");
  var _frameDuration = dart.privateName(image_stream, "_frameDuration");
  var _framesEmitted = dart.privateName(image_stream, "_framesEmitted");
  var _timer = dart.privateName(image_stream, "_timer");
  var _frameCallbackScheduled = dart.privateName(image_stream, "_frameCallbackScheduled");
  var _informationCollector = dart.privateName(image_stream, "_informationCollector");
  var _scale = dart.privateName(image_stream, "_scale");
  var _handleCodecReady = dart.privateName(image_stream, "_handleCodecReady");
  var _shownTimestamp = dart.privateName(image_stream, "_shownTimestamp");
  var _decodeNextFrameAndSchedule = dart.privateName(image_stream, "_decodeNextFrameAndSchedule");
  var _isFirstFrame = dart.privateName(image_stream, "_isFirstFrame");
  var _hasFrameDurationPassed = dart.privateName(image_stream, "_hasFrameDurationPassed");
  var _emitFrame = dart.privateName(image_stream, "_emitFrame");
  var _scheduleAppFrame = dart.privateName(image_stream, "_scheduleAppFrame");
  var _handleAppFrame = dart.privateName(image_stream, "_handleAppFrame");
  image_stream.MultiFrameImageStreamCompleter = class MultiFrameImageStreamCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff'](opts) {
      let codec = opts && 'codec' in opts ? opts.codec : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let chunkEvents = opts && 'chunkEvents' in opts ? opts.chunkEvents : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: codec, scale: scale, debugLabel: debugLabel, chunkEvents: chunkEvents, informationCollector: informationCollector});
    }
    get [_shownTimestamp]() {
      let t$366;
      t$366 = this[__MultiFrameImageStreamCompleter__shownTimestamp];
      return t$366 == null ? dart.throw(new _internal.LateError.fieldNI("_shownTimestamp")) : t$366;
    }
    set [_shownTimestamp](_shownTimestamp$35param) {
      this[__MultiFrameImageStreamCompleter__shownTimestamp] = _shownTimestamp$35param;
    }
    [_handleCodecReady](codec) {
      this[_codec] = codec;
      if (!(this[_codec] != null)) dart.assertFailed(null, I[0], 987, 12, "_codec != null");
      if (this.hasListeners) {
        this[_decodeNextFrameAndSchedule]();
      }
    }
    [_handleAppFrame](timestamp) {
      this[_frameCallbackScheduled] = false;
      if (!this.hasListeners) {
        return;
      }
      if (!(this[_nextFrame] != null)) dart.assertFailed(null, I[0], 999, 12, "_nextFrame != null");
      if (this[_isFirstFrame]() || this[_hasFrameDurationPassed](timestamp)) {
        this[_emitFrame](new image_stream.ImageInfo.new({image: dart.nullCheck(this[_nextFrame]).image.clone(), scale: this[_scale], debugLabel: this.debugLabel}));
        this[_shownTimestamp] = timestamp;
        this[_frameDuration] = dart.nullCheck(this[_nextFrame]).duration;
        dart.nullCheck(this[_nextFrame]).image.dispose();
        this[_nextFrame] = null;
        let completedCycles = (this[_framesEmitted] / dart.nullCheck(this[_codec]).frameCount)[$truncate]();
        if (dart.nullCheck(this[_codec]).repetitionCount === -1 || completedCycles <= dart.nullCheck(this[_codec]).repetitionCount) {
          this[_decodeNextFrameAndSchedule]();
        }
        return;
      }
      let delay = dart.nullCheck(this[_frameDuration])['-'](timestamp['-'](this[_shownTimestamp]));
      this[_timer] = async.Timer.new(delay['*'](binding.timeDilation), dart.fn(() => {
        this[_scheduleAppFrame]();
      }, T.VoidTovoid()));
    }
    [_isFirstFrame]() {
      return this[_frameDuration] == null;
    }
    [_hasFrameDurationPassed](timestamp) {
      return timestamp['-'](this[_shownTimestamp])['>='](dart.nullCheck(this[_frameDuration]));
    }
    [_decodeNextFrameAndSchedule]() {
      return async.async(T.void(), (function* _decodeNextFrameAndSchedule() {
        let t$366;
        t$366 = this[_nextFrame];
        t$366 == null ? null : t$366.image.dispose();
        this[_nextFrame] = null;
        try {
          this[_nextFrame] = (yield dart.nullCheck(this[_codec]).getNextFrame());
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("resolving an image frame"), exception: exception, stack: stack, informationCollector: this[_informationCollector], silent: true});
            return;
          } else
            throw t$36$35e;
        }
        if (dart.nullCheck(this[_codec]).frameCount === 1) {
          if (!this.hasListeners) {
            return;
          }
          this[_emitFrame](new image_stream.ImageInfo.new({image: dart.nullCheck(this[_nextFrame]).image.clone(), scale: this[_scale], debugLabel: this.debugLabel}));
          dart.nullCheck(this[_nextFrame]).image.dispose();
          this[_nextFrame] = null;
          return;
        }
        this[_scheduleAppFrame]();
      }).bind(this));
    }
    [_scheduleAppFrame]() {
      if (this[_frameCallbackScheduled]) {
        return;
      }
      this[_frameCallbackScheduled] = true;
      binding.SchedulerBinding.instance.scheduleFrameCallback(dart.bind(this, _handleAppFrame));
    }
    [_emitFrame](imageInfo) {
      this.setImage(imageInfo);
      this[_framesEmitted] = this[_framesEmitted] + 1;
    }
    addListener(listener) {
      if (!this.hasListeners && this[_codec] != null && (this[_currentImage] == null || dart.nullCheck(this[_codec]).frameCount > 1)) {
        this[_decodeNextFrameAndSchedule]();
      }
      super.addListener(listener);
    }
    removeListener(listener) {
      let t$367;
      super.removeListener(listener);
      if (!this.hasListeners) {
        t$367 = this[_timer];
        t$367 == null ? null : t$367.cancel();
        this[_timer] = null;
      }
    }
    [_maybeDispose]() {
      let t$367, t$367$;
      super[_maybeDispose]();
      if (this[_disposed]) {
        t$367 = this[_chunkSubscription];
        t$367 == null ? null : t$367.onData(null);
        t$367$ = this[_chunkSubscription];
        t$367$ == null ? null : t$367$.cancel();
        this[_chunkSubscription] = null;
      }
    }
  };
  (image_stream.MultiFrameImageStreamCompleter.new = function(opts) {
    let codec = opts && 'codec' in opts ? opts.codec : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let chunkEvents = opts && 'chunkEvents' in opts ? opts.chunkEvents : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    this[_chunkSubscription] = null;
    this[_codec] = null;
    this[_nextFrame] = null;
    this[__MultiFrameImageStreamCompleter__shownTimestamp] = null;
    this[_frameDuration] = null;
    this[_framesEmitted] = 0;
    this[_timer] = null;
    this[_frameCallbackScheduled] = false;
    this[_informationCollector] = informationCollector;
    this[_scale] = scale;
    dart.global.Object.getPrototypeOf(image_stream.MultiFrameImageStreamCompleter).new.call(this);
    this.debugLabel = debugLabel;
    codec.then(T.void(), dart.bind(this, _handleCodecReady), {onError: dart.fn((error, stack) => {
        this.reportError({context: new assertions.ErrorDescription.new("resolving an image codec"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
      }, T.ObjectAndStackTraceToNull())});
    if (chunkEvents != null) {
      this[_chunkSubscription] = chunkEvents.listen(dart.bind(this, 'reportImageChunkEvent'), {onError: dart.fn((error, stack) => {
          this.reportError({context: new assertions.ErrorDescription.new("loading an image"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
        }, T.ObjectAndStackTraceToNull())});
    }
  }).prototype = image_stream.MultiFrameImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.MultiFrameImageStreamCompleter);
  dart.addRtiResources(image_stream.MultiFrameImageStreamCompleter, ["flutter__src__painting__image_stream|MultiFrameImageStreamCompleter"]);
  dart.addTypeCaches(image_stream.MultiFrameImageStreamCompleter);
  dart.setMethodSignature(image_stream.MultiFrameImageStreamCompleter, () => dart.global.Object.setPrototypeOf({
    [_handleCodecReady]: T.CodecTovoid(),
    [_handleAppFrame]: T.DurationTovoid(),
    [_isFirstFrame]: T.VoidTobool(),
    [_hasFrameDurationPassed]: T.DurationTobool(),
    [_decodeNextFrameAndSchedule]: T.VoidToFutureOfvoid(),
    [_scheduleAppFrame]: T.VoidTovoid(),
    [_emitFrame]: T.ImageInfoTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_stream.MultiFrameImageStreamCompleter))));
  dart.setGetterSignature(image_stream.MultiFrameImageStreamCompleter, () => dart.global.Object.setPrototypeOf({[_shownTimestamp]: T.Duration()}, dart.getGetters(dart.global.Object.getPrototypeOf(image_stream.MultiFrameImageStreamCompleter))));
  dart.setSetterSignature(image_stream.MultiFrameImageStreamCompleter, () => dart.global.Object.setPrototypeOf({[_shownTimestamp]: T.Duration()}, dart.getSetters(dart.global.Object.getPrototypeOf(image_stream.MultiFrameImageStreamCompleter))));
  dart.setLibraryUri(image_stream.MultiFrameImageStreamCompleter, I[1]);
  dart.setFieldSignature(image_stream.MultiFrameImageStreamCompleter, () => dart.global.Object.setPrototypeOf({
    [_chunkSubscription]: {type: T.StreamSubscriptionNOfImageChunkEvent(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_codec]: {type: T.CodecN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_scale]: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_informationCollector]: {type: T.VoidToNIterableOfDiagnosticsNode(), isConst: false, isFinal: true},
    [_nextFrame]: {type: T.FrameInfoN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [__MultiFrameImageStreamCompleter__shownTimestamp]: {type: T.DurationN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_frameDuration]: {type: T.DurationN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_framesEmitted]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_timer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_frameCallbackScheduled]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_stream.MultiFrameImageStreamCompleter))));
  dart.defineLazy(image_stream, {
    /*image_stream._flutterWidgetsLibrary*/get _flutterWidgetsLibrary() {
      return "package:flutter/widgets.dart";
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"flutter__src__painting__image_stream|ImageChunkEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_stream|ImageStreamCompleter":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__foundation__assertions|FlutterErrorDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"async|Future":{"Future.T":"1"},"async|StreamSubscription":{"StreamSubscription.T":"1"},"flutter__src__painting__image_stream|ImageStream":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_stream|OneFrameImageStreamCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_stream|MultiFrameImageStreamCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/image_stream.dart", {
    "package:flutter/src/painting/image_stream.dart": image_stream
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_stream.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/image_stream.dart.lib.js"}');
  // Exports:
  return {
    src__painting__image_stream: image_stream
  };
}));

//# sourceMappingURL=image_stream.dart.lib.js.map

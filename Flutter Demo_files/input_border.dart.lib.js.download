// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/material/input_border.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/box_border.dart'], (function load__packages__flutter__src__material__input_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__box_border$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  var input_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    InputBorder: () => (T.InputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|InputBorder")))(),
    BorderSide: () => (T.BorderSide = dart.constFn(dart_rti.findType("flutter__src__painting__borders|BorderSide")))(),
    __To_NoInputBorder: () => (T.__To_NoInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|_NoInputBorder({borderSide:flutter__src__painting__borders|BorderSide?})")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    EdgeInsetsGeometry: () => (T.EdgeInsetsGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__edge_insets|EdgeInsetsGeometry")))(),
    doubleTo_NoInputBorder: () => (T.doubleTo_NoInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|_NoInputBorder(core|double)")))(),
    Rect__ToPath: () => (T.Rect__ToPath = dart.constFn(dart_rti.findType("ui|Path(ui|Rect{textDirection:ui|TextDirection?})")))(),
    CanvasAndRect__Tovoid: () => (T.CanvasAndRect__Tovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect{gapExtent:core|double,gapPercentage:core|double,gapStart:core|double?,textDirection:ui|TextDirection?})")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    UnderlineInputBorder: () => (T.UnderlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|UnderlineInputBorder")))(),
    __ToUnderlineInputBorder: () => (T.__ToUnderlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|UnderlineInputBorder({borderRadius:flutter__src__painting__border_radius|BorderRadius?,borderSide:flutter__src__painting__borders|BorderSide?})")))(),
    doubleToUnderlineInputBorder: () => (T.doubleToUnderlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|UnderlineInputBorder(core|double)")))(),
    BorderRadius: () => (T.BorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius")))(),
    OutlineInputBorder: () => (T.OutlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|OutlineInputBorder")))(),
    BorderRadiusTobool: () => (T.BorderRadiusTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__painting__border_radius|BorderRadius)")))(),
    __ToOutlineInputBorder: () => (T.__ToOutlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|OutlineInputBorder({borderRadius:flutter__src__painting__border_radius|BorderRadius?,borderSide:flutter__src__painting__borders|BorderSide?,gapPadding:core|double?})")))(),
    doubleToOutlineInputBorder: () => (T.doubleToOutlineInputBorder = dart.constFn(dart_rti.findType("flutter__src__material__input_border|OutlineInputBorder(core|double)")))(),
    CanvasAndRRectAnddouble__ToPath: () => (T.CanvasAndRRectAnddouble__ToPath = dart.constFn(dart_rti.findType("ui|Path(ui|Canvas,ui|RRect,core|double,core|double)")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 0
      }, borders.BorderStyle.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [Color_value]: 4278190080.0
      }, ui.Color.prototype));
    },
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[1] || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[2] || CT.C2
      }, borders.BorderSide.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [borderSide$]: C[0] || CT.C0
      }, input_border._NoInputBorder.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      }, borders.BorderStyle.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[5] || CT.C5,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[2] || CT.C2
      }, borders.BorderSide.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [Radius_y]: 0,
        [Radius_x]: 0
      }, ui.Radius.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [Radius_y]: 4,
        [Radius_x]: 4
      }, ui.Radius.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [BorderRadius_bottomRight]: C[7] || CT.C7,
        [BorderRadius_bottomLeft]: C[7] || CT.C7,
        [BorderRadius_topRight]: C[8] || CT.C8,
        [BorderRadius_topLeft]: C[8] || CT.C8
      }, border_radius.BorderRadius.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [BorderRadius_bottomRight]: C[8] || CT.C8,
        [BorderRadius_bottomLeft]: C[8] || CT.C8,
        [BorderRadius_topRight]: C[8] || CT.C8,
        [BorderRadius_topLeft]: C[8] || CT.C8
      }, border_radius.BorderRadius.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    }
  }, false);
  var C = Array(12).fill(void 0);
  var I = [
    "package:flutter/src/material/input_border.dart",
    "package:flutter/src/painting/borders.dart",
    "package:flutter/src/painting/border_radius.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/material/input_border.dart",
    "dart:core"
  ];
  var borderSide$ = dart.privateName(input_border, "InputBorder.borderSide");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  input_border.InputBorder = class InputBorder extends borders.ShapeBorder {
    get borderSide() {
      return this[borderSide$];
    }
    set borderSide(value) {
      super.borderSide = value;
    }
  };
  (input_border.InputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C[0] || CT.C0;
    this[borderSide$] = borderSide;
    dart.global.Object.getPrototypeOf(input_border.InputBorder).new.call(this);
    ;
  }).prototype = input_border.InputBorder.prototype;
  dart.addTypeTests(input_border.InputBorder);
  dart.addRtiResources(input_border.InputBorder, ["flutter__src__material__input_border|InputBorder"]);
  dart.addTypeCaches(input_border.InputBorder);
  dart.setLibraryUri(input_border.InputBorder, I[0]);
  dart.setFieldSignature(input_border.InputBorder, () => dart.global.Object.setPrototypeOf({borderSide: {type: T.BorderSide(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(input_border.InputBorder))));
  dart.setStaticFieldSignature(input_border.InputBorder, () => ['none']);
  dart.defineLazy(input_border.InputBorder, {
    /*input_border.InputBorder.none*/get none() {
      return C[3] || CT.C3;
    }
  }, false);
  input_border._NoInputBorder = class _NoInputBorder extends input_border.InputBorder {
    static ['_#new#tearOff']() {
      return new input_border._NoInputBorder.new();
    }
    copyWith(opts) {
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      return C[3] || CT.C3;
    }
    get isOutline() {
      return false;
    }
    get dimensions() {
      return edge_insets.EdgeInsets.zero;
    }
    scale(t) {
      return C[3] || CT.C3;
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRect(rect);
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRect(rect);
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      canvas.drawRect(rect, paint);
    }
    get preferPaintInterior() {
      return true;
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    }
  };
  (input_border._NoInputBorder.new = function() {
    dart.global.Object.getPrototypeOf(input_border._NoInputBorder).new.call(this, {borderSide: borders.BorderSide.none});
    ;
  }).prototype = input_border._NoInputBorder.prototype;
  dart.addTypeTests(input_border._NoInputBorder);
  dart.addRtiResources(input_border._NoInputBorder, ["flutter__src__material__input_border|_NoInputBorder"]);
  dart.addTypeCaches(input_border._NoInputBorder);
  dart.setMethodSignature(input_border._NoInputBorder, () => dart.global.Object.setPrototypeOf({
    copyWith: T.__To_NoInputBorder(),
    scale: T.doubleTo_NoInputBorder(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(input_border._NoInputBorder))));
  dart.setGetterSignature(input_border._NoInputBorder, () => dart.global.Object.setPrototypeOf({
    isOutline: T.bool(),
    dimensions: T.EdgeInsetsGeometry()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(input_border._NoInputBorder))));
  dart.setLibraryUri(input_border._NoInputBorder, I[0]);
  var borderRadius$ = dart.privateName(input_border, "UnderlineInputBorder.borderRadius");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var _is = dart.privateName(dart_rti, "_is");
  input_border.UnderlineInputBorder = class UnderlineInputBorder extends input_border.InputBorder {
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C[4] || CT.C4;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[6] || CT.C6;
      return new input_border.UnderlineInputBorder.new({borderSide: borderSide, borderRadius: borderRadius});
    }
    get isOutline() {
      return false;
    }
    copyWith(opts) {
      let t$360, t$360$;
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      return new input_border.UnderlineInputBorder.new({borderSide: (t$360 = borderSide, t$360 == null ? this.borderSide : t$360), borderRadius: (t$360$ = borderRadius, t$360$ == null ? this.borderRadius : t$360$)});
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.only({bottom: this.borderSide.width});
    }
    scale(t) {
      return new input_border.UnderlineInputBorder.new({borderSide: this.borderSide.scale(t)});
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRect(new ui.Rect.fromLTWH(rect.left, rect.top, rect.width, math.max(T.double(), 0.0, rect.height - this.borderSide.width)));
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      canvas.drawRRect(this.borderRadius.resolve(textDirection).toRRect(rect), paint);
    }
    get preferPaintInterior() {
      return true;
    }
    lerpFrom(a, t) {
      if (T.UnderlineInputBorder()[_is](a)) {
        return new input_border.UnderlineInputBorder.new({borderSide: borders.BorderSide.lerp(a.borderSide, this.borderSide, t), borderRadius: dart.nullCheck(border_radius.BorderRadius.lerp(a.borderRadius, this.borderRadius, t))});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.UnderlineInputBorder()[_is](b)) {
        return new input_border.UnderlineInputBorder.new({borderSide: borders.BorderSide.lerp(this.borderSide, b.borderSide, t), borderRadius: dart.nullCheck(border_radius.BorderRadius.lerp(this.borderRadius, b.borderRadius, t))});
      }
      return super.lerpTo(b, t);
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!dart.equals(this.borderRadius.bottomLeft, ui.Radius.zero) || !dart.equals(this.borderRadius.bottomRight, ui.Radius.zero)) {
        let updatedBorderRadius = new border_radius.BorderRadius.only({bottomLeft: this.borderRadius.bottomLeft.clamp({maximum: new ui.Radius.circular(rect.height / 2)}), bottomRight: this.borderRadius.bottomRight.clamp({maximum: new ui.Radius.circular(rect.height / 2)})});
        box_border.BoxBorder.paintNonUniformBorder(canvas, rect, {textDirection: textDirection, borderRadius: updatedBorderRadius, bottom: this.borderSide.copyWith({strokeAlign: 0}), color: this.borderSide.color});
      } else {
        canvas.drawLine(rect.bottomLeft, rect.bottomRight, this.borderSide.toPaint());
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.UnderlineInputBorder()[_is](other) && dart.equals(other.borderSide, this.borderSide) && dart.equals(other.borderRadius, this.borderRadius);
    }
    get hashCode() {
      return core.Object.hash(this.borderSide, this.borderRadius);
    }
  };
  (input_border.UnderlineInputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C[4] || CT.C4;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[6] || CT.C6;
    this[borderRadius$] = borderRadius;
    dart.global.Object.getPrototypeOf(input_border.UnderlineInputBorder).new.call(this, {borderSide: borderSide});
    ;
  }).prototype = input_border.UnderlineInputBorder.prototype;
  dart.addTypeTests(input_border.UnderlineInputBorder);
  dart.addRtiResources(input_border.UnderlineInputBorder, ["flutter__src__material__input_border|UnderlineInputBorder"]);
  dart.addTypeCaches(input_border.UnderlineInputBorder);
  dart.setMethodSignature(input_border.UnderlineInputBorder, () => dart.global.Object.setPrototypeOf({
    copyWith: T.__ToUnderlineInputBorder(),
    scale: T.doubleToUnderlineInputBorder(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(input_border.UnderlineInputBorder))));
  dart.setGetterSignature(input_border.UnderlineInputBorder, () => dart.global.Object.setPrototypeOf({
    isOutline: T.bool(),
    dimensions: T.EdgeInsetsGeometry()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(input_border.UnderlineInputBorder))));
  dart.setLibraryUri(input_border.UnderlineInputBorder, I[0]);
  dart.setFieldSignature(input_border.UnderlineInputBorder, () => dart.global.Object.setPrototypeOf({borderRadius: {type: T.BorderRadius(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(input_border.UnderlineInputBorder))));
  dart.defineExtensionMethods(input_border.UnderlineInputBorder, ['_equals']);
  dart.defineExtensionAccessors(input_border.UnderlineInputBorder, ['hashCode']);
  var gapPadding$ = dart.privateName(input_border, "OutlineInputBorder.gapPadding");
  var borderRadius$0 = dart.privateName(input_border, "OutlineInputBorder.borderRadius");
  var _gapBorderPath = dart.privateName(input_border, "_gapBorderPath");
  input_border.OutlineInputBorder = class OutlineInputBorder extends input_border.InputBorder {
    get gapPadding() {
      return this[gapPadding$];
    }
    set gapPadding(value) {
      super.gapPadding = value;
    }
    get borderRadius() {
      return this[borderRadius$0];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C[4] || CT.C4;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[9] || CT.C9;
      let gapPadding = opts && 'gapPadding' in opts ? opts.gapPadding : 4;
      return new input_border.OutlineInputBorder.new({borderSide: borderSide, borderRadius: borderRadius, gapPadding: gapPadding});
    }
    static _cornersAreCircular(borderRadius) {
      return borderRadius.topLeft.x === borderRadius.topLeft.y && borderRadius.bottomLeft.x === borderRadius.bottomLeft.y && borderRadius.topRight.x === borderRadius.topRight.y && borderRadius.bottomRight.x === borderRadius.bottomRight.y;
    }
    get isOutline() {
      return true;
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0;
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let gapPadding = opts && 'gapPadding' in opts ? opts.gapPadding : null;
      return new input_border.OutlineInputBorder.new({borderSide: (t$360 = borderSide, t$360 == null ? this.borderSide : t$360), borderRadius: (t$360$ = borderRadius, t$360$ == null ? this.borderRadius : t$360$), gapPadding: (t$360$0 = gapPadding, t$360$0 == null ? this.gapPadding : t$360$0)});
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.all(this.borderSide.width);
    }
    scale(t) {
      return new input_border.OutlineInputBorder.new({borderSide: this.borderSide.scale(t), borderRadius: this.borderRadius['*'](t), gapPadding: this.gapPadding * t});
    }
    lerpFrom(a, t) {
      if (T.OutlineInputBorder()[_is](a)) {
        let outline = a;
        return new input_border.OutlineInputBorder.new({borderRadius: dart.nullCheck(border_radius.BorderRadius.lerp(outline.borderRadius, this.borderRadius, t)), borderSide: borders.BorderSide.lerp(outline.borderSide, this.borderSide, t), gapPadding: outline.gapPadding});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.OutlineInputBorder()[_is](b)) {
        let outline = b;
        return new input_border.OutlineInputBorder.new({borderRadius: dart.nullCheck(border_radius.BorderRadius.lerp(this.borderRadius, outline.borderRadius, t)), borderSide: borders.BorderSide.lerp(this.borderSide, outline.borderSide, t), gapPadding: outline.gapPadding});
      }
      return super.lerpTo(b, t);
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect).deflate(this.borderSide.width));
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      canvas.drawRRect(this.borderRadius.resolve(textDirection).toRRect(rect), paint);
    }
    get preferPaintInterior() {
      return true;
    }
    [_gapBorderPath](canvas, center, start, extent) {
      let scaledRRect = center.scaleRadii();
      let tlCorner = new ui.Rect.fromLTWH(scaledRRect.left, scaledRRect.top, scaledRRect.tlRadiusX * 2.0, scaledRRect.tlRadiusY * 2.0);
      let trCorner = new ui.Rect.fromLTWH(scaledRRect.right - scaledRRect.trRadiusX * 2.0, scaledRRect.top, scaledRRect.trRadiusX * 2.0, scaledRRect.trRadiusY * 2.0);
      let brCorner = new ui.Rect.fromLTWH(scaledRRect.right - scaledRRect.brRadiusX * 2.0, scaledRRect.bottom - scaledRRect.brRadiusY * 2.0, scaledRRect.brRadiusX * 2.0, scaledRRect.brRadiusY * 2.0);
      let blCorner = new ui.Rect.fromLTWH(scaledRRect.left, scaledRRect.bottom - scaledRRect.blRadiusY * 2.0, scaledRRect.blRadiusX * 2.0, scaledRRect.blRadiusY * 2.0);
      let path = ui.Path.new();
      if (!dart.equals(scaledRRect.tlRadius, ui.Radius.zero)) {
        let tlCornerArcSweep = math.acos(ui.clampDouble(1 - start / scaledRRect.tlRadiusX, 0.0, 1.0));
        path.addArc(tlCorner, 3.141592653589793, tlCornerArcSweep);
      } else {
        path.moveTo(scaledRRect.left - this.borderSide.width / 2, scaledRRect.top);
      }
      if (start > scaledRRect.tlRadiusX) {
        path.lineTo(scaledRRect.left + start, scaledRRect.top);
      }
      if (start + extent < scaledRRect.width - scaledRRect.trRadiusX) {
        path.moveTo(scaledRRect.left + start + extent, scaledRRect.top);
        path.lineTo(scaledRRect.right - scaledRRect.trRadiusX, scaledRRect.top);
        if (!dart.equals(scaledRRect.trRadius, ui.Radius.zero)) {
          path.addArc(trCorner, 4.71238898038469, 1.5707963267948966);
        }
      } else if (start + extent < scaledRRect.width) {
        let dx = scaledRRect.width - (start + extent);
        let sweep = math.asin(ui.clampDouble(1 - dx / scaledRRect.trRadiusX, 0.0, 1.0));
        path.addArc(trCorner, 4.71238898038469 + sweep, 1.5707963267948966 - sweep);
      }
      if (!dart.equals(scaledRRect.brRadius, ui.Radius.zero)) {
        path.moveTo(scaledRRect.right, scaledRRect.top + scaledRRect.trRadiusY);
      }
      path.lineTo(scaledRRect.right, scaledRRect.bottom - scaledRRect.brRadiusY);
      if (!dart.equals(scaledRRect.brRadius, ui.Radius.zero)) {
        path.addArc(brCorner, 0.0, 1.5707963267948966);
      }
      path.lineTo(scaledRRect.left + scaledRRect.blRadiusX, scaledRRect.bottom);
      if (!dart.equals(scaledRRect.blRadius, ui.Radius.zero)) {
        path.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
      }
      path.lineTo(scaledRRect.left, scaledRRect.top + scaledRRect.tlRadiusY);
      return path;
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(gapPercentage >= 0.0 && gapPercentage <= 1.0)) dart.assertFailed(null, I[3], 528, 12, "gapPercentage >= 0.0 && gapPercentage <= 1.0");
      if (!input_border.OutlineInputBorder._cornersAreCircular(this.borderRadius)) dart.assertFailed(null, I[3], 529, 12, "_cornersAreCircular(borderRadius)");
      let paint = this.borderSide.toPaint();
      let outer = this.borderRadius.toRRect(rect);
      let center = outer.deflate(this.borderSide.width / 2.0);
      if (gapStart == null || gapExtent <= 0.0 || gapPercentage === 0.0) {
        canvas.drawRRect(center, paint);
      } else {
        let extent = dart.nullCheck(ui.lerpDouble(0.0, gapExtent + this.gapPadding * 2.0, gapPercentage));
        switch (dart.nullCheck(textDirection)) {
          case C[10] || CT.C10:
            {
              let path = this[_gapBorderPath](canvas, center, math.max(T.double(), 0.0, dart.notNull(gapStart) + this.gapPadding - extent), extent);
              canvas.drawPath(path, paint);
              break;
            }
          case C[11] || CT.C11:
            {
              let path = this[_gapBorderPath](canvas, center, math.max(T.double(), 0.0, dart.notNull(gapStart) - this.gapPadding), extent);
              canvas.drawPath(path, paint);
            }
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.OutlineInputBorder()[_is](other) && dart.equals(other.borderSide, this.borderSide) && dart.equals(other.borderRadius, this.borderRadius) && other.gapPadding === this.gapPadding;
    }
    get hashCode() {
      return core.Object.hash(this.borderSide, this.borderRadius, this.gapPadding);
    }
  };
  (input_border.OutlineInputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C[4] || CT.C4;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[9] || CT.C9;
    let gapPadding = opts && 'gapPadding' in opts ? opts.gapPadding : 4;
    this[borderRadius$0] = borderRadius;
    this[gapPadding$] = gapPadding;
    if (!(gapPadding >= 0.0)) dart.assertFailed(null, I[3], 321, 15, "gapPadding >= 0.0");
    dart.global.Object.getPrototypeOf(input_border.OutlineInputBorder).new.call(this, {borderSide: borderSide});
    ;
  }).prototype = input_border.OutlineInputBorder.prototype;
  dart.addTypeTests(input_border.OutlineInputBorder);
  dart.addRtiResources(input_border.OutlineInputBorder, ["flutter__src__material__input_border|OutlineInputBorder"]);
  dart.addTypeCaches(input_border.OutlineInputBorder);
  dart.setMethodSignature(input_border.OutlineInputBorder, () => dart.global.Object.setPrototypeOf({
    copyWith: T.__ToOutlineInputBorder(),
    scale: T.doubleToOutlineInputBorder(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    [_gapBorderPath]: T.CanvasAndRRectAnddouble__ToPath(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(input_border.OutlineInputBorder))));
  dart.setStaticMethodSignature(input_border.OutlineInputBorder, () => ['_cornersAreCircular']);
  dart.setGetterSignature(input_border.OutlineInputBorder, () => dart.global.Object.setPrototypeOf({
    isOutline: T.bool(),
    dimensions: T.EdgeInsetsGeometry()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(input_border.OutlineInputBorder))));
  dart.setLibraryUri(input_border.OutlineInputBorder, I[0]);
  dart.setFieldSignature(input_border.OutlineInputBorder, () => dart.global.Object.setPrototypeOf({
    gapPadding: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[4]},
    borderRadius: {type: T.BorderRadius(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(input_border.OutlineInputBorder))));
  dart.defineExtensionMethods(input_border.OutlineInputBorder, ['_equals']);
  dart.defineExtensionAccessors(input_border.OutlineInputBorder, ['hashCode']);
  dart.moduleConstCaches.set("packages/flutter/src/material/input_border.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__material__input_border|InputBorder":{"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__borders|BorderSide":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__material__input_border|_NoInputBorder":{"flutter__src__material__input_border|InputBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__material__input_border|UnderlineInputBorder":{"flutter__src__material__input_border|InputBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__border_radius|BorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]},"flutter__src__material__input_border|OutlineInputBorder":{"flutter__src__material__input_border|InputBorder":[],"flutter__src__painting__borders|ShapeBorder":[]}}'));
  dart.trackLibraries("packages/flutter/src/material/input_border.dart", {
    "package:flutter/src/material/input_border.dart": input_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["input_border.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/material/input_border.dart.lib.js"}');
  // Exports:
  return {
    src__material__input_border: input_border
  };
}));

//# sourceMappingURL=input_border.dart.lib.js.map

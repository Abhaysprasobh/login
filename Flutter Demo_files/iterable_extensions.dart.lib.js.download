// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/collection/src/iterable_extensions.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/collection/src/algorithms.dart', 'packages/collection/src/utils.dart', 'packages/collection/src/functions.dart'], (function load__packages__collection__src__iterable_extensions_dart(dart_sdk, packages__collection__src__algorithms$46dart, packages__collection__src__utils$46dart, packages__collection__src__functions$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const algorithms = packages__collection__src__algorithms$46dart.src__algorithms;
  const utils = packages__collection__src__utils$46dart.src__utils;
  const functions = packages__collection__src__functions$46dart.src__functions;
  var iterable_extensions = Object.create(dart.library);
  var $iterator = dartx.iterator;
  var $add = dartx.add;
  var $_set = dartx._set;
  var $where = dartx.where;
  var $sort = dartx.sort;
  var $compareTo = dartx.compareTo;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $skip = dartx.skip;
  var $_get = dartx._get;
  var $isNaN = dartx.isNaN;
  var $truncate = dartx.truncate;
  var $remainder = dartx.remainder;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    TAndTToint: () => (T$.TAndTToint = dart.constFn(dart_rti.findType("core|int(0^,0^)<core|Comparable<0^>>")))(),
    Comparable: () => (T$.Comparable = dart.constFn(dart_rti.findType("core|Comparable<@>")))(),
    dynamic: () => (T$.dynamic = dart.constFn(dart_rti.findType("@")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.gFn(utils.compareComparable, T$.TAndTToint(), dart.constList([T$.Comparable()], T$.dynamic()));
    }
  }, false);
  var C = [void 0];
  var _eval = dart.privateName(dart_rti, "_eval");
  iterable_extensions['IterableExtension|sample'] = function IterableExtension$124sample(T, $this, count, random = null) {
    core.RangeError.checkNotNegative(count, "count");
    let iterator = $this[$iterator];
    let chosen = _interceptors.JSArray$(T).of([]);
    for (let i = 0; i < count; i = i + 1) {
      if (iterator.moveNext()) {
        chosen[$add](iterator.current);
      } else {
        return chosen;
      }
    }
    let index = count;
    random == null ? random = math.Random.new() : null;
    while (iterator.moveNext()) {
      index = index + 1;
      let position = random.nextInt(index);
      if (position < count) chosen[$_set](position, iterator.current);
    }
    return chosen;
  };
  iterable_extensions['IterableExtension|get#sample'] = function IterableExtension$124get$35sample(T, $this) {
    return dart.fn((count, random = null) => iterable_extensions['IterableExtension|sample'](T, $this, count, random), T[_eval]("core|List<0>(core|int[math|Random?])"));
  };
  iterable_extensions['IterableExtension|whereNot'] = function IterableExtension$124whereNot(T, $this, test) {
    return $this[$where](dart.fn(element => !test(element), T[_eval]("core|bool(0)")));
  };
  iterable_extensions['IterableExtension|get#whereNot'] = function IterableExtension$124get$35whereNot(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereNot'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|sorted'] = function IterableExtension$124sorted(T, $this, compare) {
    let t$366;
    t$366 = (() => {
      let t$365 = core.List$(T).of($this);
      return t$365;
    })();
    return (() => {
      t$366[$sort](compare);
      return t$366;
    })();
  };
  iterable_extensions['IterableExtension|get#sorted'] = function IterableExtension$124get$35sorted(T, $this) {
    return dart.fn(compare => iterable_extensions['IterableExtension|sorted'](T, $this, compare), T[_eval]("core|List<0>(core|int(0,0))"));
  };
  iterable_extensions['IterableExtension|sortedBy'] = function IterableExtension$124sortedBy(T, K, $this, keyOf) {
    let elements = (() => {
      let t$368 = core.List$(T).of($this);
      return t$368;
    })();
    algorithms.mergeSortBy(T, K, elements, keyOf, dart.gbind(C[0] || CT.C0, K));
    return elements;
  };
  iterable_extensions['IterableExtension|get#sortedBy'] = function IterableExtension$124get$35sortedBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|sortedBy'](T, K, $this, keyOf), T[_eval]("core|List<0>(0^(0))<core|Comparable<0^>>"), dart.constList([T$.Comparable()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|sortedByCompare'] = function IterableExtension$124sortedByCompare(T, K, $this, keyOf, compare) {
    let elements = (() => {
      let t$3611 = core.List$(T).of($this);
      return t$3611;
    })();
    algorithms.mergeSortBy(T, K, elements, keyOf, compare);
    return elements;
  };
  iterable_extensions['IterableExtension|get#sortedByCompare'] = function IterableExtension$124get$35sortedByCompare(T, $this) {
    return dart.gFn((K, keyOf, compare) => iterable_extensions['IterableExtension|sortedByCompare'](T, K, $this, keyOf, compare), T[_eval]("core|List<0>(0^(0),core|int(0^,0^))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|get#isSorted'] = function IterableExtension$124get$35isSorted(T, $this) {
    return dart.fn(compare => iterable_extensions['IterableExtension|isSorted'](T, $this, compare), T[_eval]("core|bool(core|int(0,0))"));
  };
  iterable_extensions['IterableExtension|isSorted'] = function IterableExtension$124isSorted(T, $this, compare) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousElement = iterator.current;
    while (iterator.moveNext()) {
      let element = iterator.current;
      if (compare(previousElement, element) > 0) return false;
      previousElement = element;
    }
    return true;
  };
  iterable_extensions['IterableExtension|isSortedBy'] = function IterableExtension$124isSortedBy(T, K, $this, keyOf) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousKey = keyOf(iterator.current);
    while (iterator.moveNext()) {
      let key = keyOf(iterator.current);
      if (previousKey[$compareTo](key) > 0) return false;
      previousKey = key;
    }
    return true;
  };
  iterable_extensions['IterableExtension|get#isSortedBy'] = function IterableExtension$124get$35isSortedBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|isSortedBy'](T, K, $this, keyOf), T[_eval]("core|bool(0^(0))<core|Comparable<0^>>"), dart.constList([T$.Comparable()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|isSortedByCompare'] = function IterableExtension$124isSortedByCompare(T, K, $this, keyOf, compare) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousKey = keyOf(iterator.current);
    while (iterator.moveNext()) {
      let key = keyOf(iterator.current);
      if (compare(previousKey, key) > 0) return false;
      previousKey = key;
    }
    return true;
  };
  iterable_extensions['IterableExtension|get#isSortedByCompare'] = function IterableExtension$124get$35isSortedByCompare(T, $this) {
    return dart.gFn((K, keyOf, compare) => iterable_extensions['IterableExtension|isSortedByCompare'](T, K, $this, keyOf, compare), T[_eval]("core|bool(0^(0),core|int(0^,0^))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|forEachIndexed'] = function IterableExtension$124forEachIndexed(T, $this, action) {
    let t$3620;
    let index = 0;
    for (let element of $this) {
      action((t$3620 = index, index = t$3620 + 1, t$3620), element);
    }
  };
  iterable_extensions['IterableExtension|get#forEachIndexed'] = function IterableExtension$124get$35forEachIndexed(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachIndexed'](T, $this, action), T[_eval]("~(~(core|int,0))"));
  };
  iterable_extensions['IterableExtension|forEachWhile'] = function IterableExtension$124forEachWhile(T, $this, action) {
    for (let element of $this) {
      if (!action(element)) break;
    }
  };
  iterable_extensions['IterableExtension|get#forEachWhile'] = function IterableExtension$124get$35forEachWhile(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachWhile'](T, $this, action), T[_eval]("~(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|forEachIndexedWhile'] = function IterableExtension$124forEachIndexedWhile(T, $this, action) {
    let t$3624;
    let index = 0;
    for (let element of $this) {
      if (!action((t$3624 = index, index = t$3624 + 1, t$3624), element)) break;
    }
  };
  iterable_extensions['IterableExtension|get#forEachIndexedWhile'] = function IterableExtension$124get$35forEachIndexedWhile(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachIndexedWhile'](T, $this, action), T[_eval]("~(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|mapIndexed'] = function IterableExtension$124mapIndexed(T, R, $this, convert) {
    return new (_js_helper.SyncIterable$(R)).new(function* IterableExtension$124mapIndexed() {
      let t$3626;
      let index = 0;
      for (let element of $this) {
        yield convert((t$3626 = index, index = t$3626 + 1, t$3626), element);
      }
    });
  };
  iterable_extensions['IterableExtension|get#mapIndexed'] = function IterableExtension$124get$35mapIndexed(T, $this) {
    return dart.gFn((R, convert) => iterable_extensions['IterableExtension|mapIndexed'](T, R, $this, convert), T[_eval]("core|Iterable<0^>(0^(core|int,0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|whereIndexed'] = function IterableExtension$124whereIndexed(T, $this, test) {
    return new (_js_helper.SyncIterable$(T)).new(function* IterableExtension$124whereIndexed() {
      let t$3628;
      let index = 0;
      for (let element of $this) {
        if (test((t$3628 = index, index = t$3628 + 1, t$3628), element)) yield element;
      }
    });
  };
  iterable_extensions['IterableExtension|get#whereIndexed'] = function IterableExtension$124get$35whereIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereIndexed'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|whereNotIndexed'] = function IterableExtension$124whereNotIndexed(T, $this, test) {
    return new (_js_helper.SyncIterable$(T)).new(function* IterableExtension$124whereNotIndexed() {
      let t$3630;
      let index = 0;
      for (let element of $this) {
        if (!test((t$3630 = index, index = t$3630 + 1, t$3630), element)) yield element;
      }
    });
  };
  iterable_extensions['IterableExtension|get#whereNotIndexed'] = function IterableExtension$124get$35whereNotIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereNotIndexed'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|expandIndexed'] = function IterableExtension$124expandIndexed(T, R, $this, expand) {
    return new (_js_helper.SyncIterable$(R)).new(function* IterableExtension$124expandIndexed() {
      let t$3632;
      let index = 0;
      for (let element of $this) {
        yield* expand((t$3632 = index, index = t$3632 + 1, t$3632), element);
      }
    });
  };
  iterable_extensions['IterableExtension|get#expandIndexed'] = function IterableExtension$124get$35expandIndexed(T, $this) {
    return dart.gFn((R, expand) => iterable_extensions['IterableExtension|expandIndexed'](T, R, $this, expand), T[_eval]("core|Iterable<0^>(core|Iterable<0^>(core|int,0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|reduceIndexed'] = function IterableExtension$124reduceIndexed(T, $this, combine) {
    let t$3634;
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) {
      dart.throw(new core.StateError.new("no elements"));
    }
    let index = 1;
    let result = iterator.current;
    while (iterator.moveNext()) {
      result = combine((t$3634 = index, index = t$3634 + 1, t$3634), result, iterator.current);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#reduceIndexed'] = function IterableExtension$124get$35reduceIndexed(T, $this) {
    return dart.fn(combine => iterable_extensions['IterableExtension|reduceIndexed'](T, $this, combine), T[_eval]("0(0(core|int,0,0))"));
  };
  iterable_extensions['IterableExtension|foldIndexed'] = function IterableExtension$124foldIndexed(T, R, $this, initialValue, combine) {
    let t$3636;
    let result = initialValue;
    let index = 0;
    for (let element of $this) {
      result = combine((t$3636 = index, index = t$3636 + 1, t$3636), result, element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#foldIndexed'] = function IterableExtension$124get$35foldIndexed(T, $this) {
    return dart.gFn((R, initialValue, combine) => iterable_extensions['IterableExtension|foldIndexed'](T, R, $this, initialValue, combine), T[_eval]("0^(0^,0^(core|int,0^,0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|get#firstWhereOrNull'] = function IterableExtension$124get$35firstWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|firstWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|firstWhereOrNull'] = function IterableExtension$124firstWhereOrNull(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return element;
    }
    return null;
  };
  iterable_extensions['IterableExtension|firstWhereIndexedOrNull'] = function IterableExtension$124firstWhereIndexedOrNull(T, $this, test) {
    let t$3640;
    let index = 0;
    for (let element of $this) {
      if (test((t$3640 = index, index = t$3640 + 1, t$3640), element)) return element;
    }
    return null;
  };
  iterable_extensions['IterableExtension|get#firstWhereIndexedOrNull'] = function IterableExtension$124get$35firstWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|firstWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|get#firstOrNull'] = function IterableExtension$124get$35firstOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) return iterator.current;
    return null;
  };
  iterable_extensions['IterableExtension|lastWhereOrNull'] = function IterableExtension$124lastWhereOrNull(T, $this, test) {
    let result = null;
    for (let element of $this) {
      if (test(element)) result = element;
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#lastWhereOrNull'] = function IterableExtension$124get$35lastWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|lastWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|lastWhereIndexedOrNull'] = function IterableExtension$124lastWhereIndexedOrNull(T, $this, test) {
    let t$3645;
    let result = null;
    let index = 0;
    for (let element of $this) {
      if (test((t$3645 = index, index = t$3645 + 1, t$3645), element)) result = element;
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#lastWhereIndexedOrNull'] = function IterableExtension$124get$35lastWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|lastWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|get#lastOrNull'] = function IterableExtension$124get$35lastOrNull(T, $this) {
    if ($this[$isEmpty]) return null;
    return $this[$last];
  };
  iterable_extensions['IterableExtension|singleWhereOrNull'] = function IterableExtension$124singleWhereOrNull(T, $this, test) {
    let result = null;
    let found = false;
    for (let element of $this) {
      if (test(element)) {
        if (!found) {
          result = element;
          found = true;
        } else {
          return null;
        }
      }
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#singleWhereOrNull'] = function IterableExtension$124get$35singleWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|singleWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|get#singleWhereIndexedOrNull'] = function IterableExtension$124get$35singleWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|singleWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|singleWhereIndexedOrNull'] = function IterableExtension$124singleWhereIndexedOrNull(T, $this, test) {
    let t$3651;
    let result = null;
    let found = false;
    let index = 0;
    for (let element of $this) {
      if (test((t$3651 = index, index = t$3651 + 1, t$3651), element)) {
        if (!found) {
          result = element;
          found = true;
        } else {
          return null;
        }
      }
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#singleOrNull'] = function IterableExtension$124get$35singleOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let result = iterator.current;
      if (!iterator.moveNext()) {
        return result;
      }
    }
    return null;
  };
  iterable_extensions['IterableExtension|elementAtOrNull'] = function IterableExtension$124elementAtOrNull(T, $this, index) {
    return iterable_extensions['IterableExtension|get#firstOrNull'](T, $this[$skip](index));
  };
  iterable_extensions['IterableExtension|get#elementAtOrNull'] = function IterableExtension$124get$35elementAtOrNull(T, $this) {
    return dart.fn(index => iterable_extensions['IterableExtension|elementAtOrNull'](T, $this, index), T[_eval]("0?(core|int)"));
  };
  iterable_extensions['IterableExtension|lastBy'] = function IterableExtension$124lastBy(T, K, $this, key) {
    return functions.lastBy(T, K, $this, key);
  };
  iterable_extensions['IterableExtension|get#lastBy'] = function IterableExtension$124get$35lastBy(T, $this) {
    return dart.gFn((K, key) => iterable_extensions['IterableExtension|lastBy'](T, K, $this, key), T[_eval]("core|Map<0^,0>(0^(0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|groupFoldBy'] = function IterableExtension$124groupFoldBy(T, K, G, $this, keyOf, combine) {
    let result = new (_js_helper.LinkedMap$(K, G)).new();
    for (let element of $this) {
      let key = keyOf(element);
      result[$_set](key, combine(result[$_get](key), element));
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupFoldBy'] = function IterableExtension$124get$35groupFoldBy(T, $this) {
    return dart.gFn((K, G, keyOf, combine) => iterable_extensions['IterableExtension|groupFoldBy'](T, K, G, $this, keyOf, combine), T[_eval]("core|Map<0^,1^>(0^(0),1^(1^?,0))<core|Object?,core|Object?>"), dart.constList([T$.dynamic(), T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|groupSetsBy'] = function IterableExtension$124groupSetsBy(T, K, $this, keyOf) {
    let t$3662, t$3661, t$3660, t$3659;
    let result = new (_js_helper.LinkedMap$(K, T[_eval]("core|Set<0>"))).new();
    for (let element of $this) {
      (t$3659 = result, t$3660 = keyOf(element), t$3661 = t$3659[$_get](t$3660), t$3661 == null ? (t$3662 = collection.LinkedHashSet$(T).new(), t$3659[$_set](t$3660, t$3662), t$3662) : t$3661).add(element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupSetsBy'] = function IterableExtension$124get$35groupSetsBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|groupSetsBy'](T, K, $this, keyOf), T[_eval]("core|Map<0^,core|Set<0>>(0^(0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|groupListsBy'] = function IterableExtension$124groupListsBy(T, K, $this, keyOf) {
    let t$3664, t$3663, t$3662, t$3661;
    let result = new (_js_helper.LinkedMap$(K, T[_eval]("core|List<0>"))).new();
    for (let element of $this) {
      (t$3661 = result, t$3662 = keyOf(element), t$3663 = t$3661[$_get](t$3662), t$3663 == null ? (t$3664 = _interceptors.JSArray$(T).of([]), t$3661[$_set](t$3662, t$3664), t$3664) : t$3663)[$add](element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupListsBy'] = function IterableExtension$124get$35groupListsBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|groupListsBy'](T, K, $this, keyOf), T[_eval]("core|Map<0^,core|List<0>>(0^(0))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['IterableExtension|get#splitBefore'] = function IterableExtension$124get$35splitBefore(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBefore'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|splitBefore'] = function IterableExtension$124splitBefore(T, $this, test) {
    return iterable_extensions['IterableExtension|splitBeforeIndexed'](T, $this, dart.fn((_, element) => test(element), T[_eval]("core|bool(core|int,0)")));
  };
  iterable_extensions['IterableExtension|splitAfter'] = function IterableExtension$124splitAfter(T, $this, test) {
    return iterable_extensions['IterableExtension|splitAfterIndexed'](T, $this, dart.fn((_, element) => test(element), T[_eval]("core|bool(core|int,0)")));
  };
  iterable_extensions['IterableExtension|get#splitAfter'] = function IterableExtension$124get$35splitAfter(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitAfter'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|splitBetween'] = function IterableExtension$124splitBetween(T, $this, test) {
    return iterable_extensions['IterableExtension|splitBetweenIndexed'](T, $this, dart.fn((_, first, second) => test(first, second), T[_eval]("core|bool(core|int,0,0)")));
  };
  iterable_extensions['IterableExtension|get#splitBetween'] = function IterableExtension$124get$35splitBetween(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBetween'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0,0))"));
  };
  iterable_extensions['IterableExtension|splitBeforeIndexed'] = function IterableExtension$124splitBeforeIndexed(T, $this, test) {
    return new (_js_helper.SyncIterable$(T[_eval]("core|List<0>"))).new(function* IterableExtension$124splitBeforeIndexed() {
      let t$3669;
      let iterator = $this[$iterator];
      if (!iterator.moveNext()) {
        return;
      }
      let index = 1;
      let chunk = _interceptors.JSArray$(T).of([iterator.current]);
      while (iterator.moveNext()) {
        let element = iterator.current;
        if (test((t$3669 = index, index = t$3669 + 1, t$3669), element)) {
          yield chunk;
          chunk = _interceptors.JSArray$(T).of([]);
        }
        chunk[$add](element);
      }
      yield chunk;
    });
  };
  iterable_extensions['IterableExtension|get#splitBeforeIndexed'] = function IterableExtension$124get$35splitBeforeIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBeforeIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|splitAfterIndexed'] = function IterableExtension$124splitAfterIndexed(T, $this, test) {
    return new (_js_helper.SyncIterable$(T[_eval]("core|List<0>"))).new(function* IterableExtension$124splitAfterIndexed() {
      let t$3671, t$3671$;
      let index = 0;
      let chunk = null;
      for (let element of $this) {
        (t$3671 = chunk, t$3671 == null ? chunk = _interceptors.JSArray$(T).of([]) : t$3671)[$add](element);
        if (test((t$3671$ = index, index = t$3671$ + 1, t$3671$), element)) {
          yield chunk;
          chunk = null;
        }
      }
      if (chunk != null) yield chunk;
    });
  };
  iterable_extensions['IterableExtension|get#splitAfterIndexed'] = function IterableExtension$124get$35splitAfterIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitAfterIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|splitBetweenIndexed'] = function IterableExtension$124splitBetweenIndexed(T, $this, test) {
    return new (_js_helper.SyncIterable$(T[_eval]("core|List<0>"))).new(function* IterableExtension$124splitBetweenIndexed() {
      let t$3673;
      let iterator = $this[$iterator];
      if (!iterator.moveNext()) return;
      let previous = iterator.current;
      let chunk = _interceptors.JSArray$(T).of([previous]);
      let index = 1;
      while (iterator.moveNext()) {
        let element = iterator.current;
        if (test((t$3673 = index, index = t$3673 + 1, t$3673), previous, element)) {
          yield chunk;
          chunk = _interceptors.JSArray$(T).of([]);
        }
        chunk[$add](element);
        previous = element;
      }
      yield chunk;
    });
  };
  iterable_extensions['IterableExtension|get#splitBetweenIndexed'] = function IterableExtension$124get$35splitBetweenIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBetweenIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0,0))"));
  };
  iterable_extensions['IterableExtension|get#none'] = function IterableExtension$124get$35none(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|none'](T, $this, test), T[_eval]("core|bool(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|none'] = function IterableExtension$124none(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return false;
    }
    return true;
  };
  iterable_extensions['IterableExtension|slices'] = function IterableExtension$124slices(T, $this, length) {
    return new (_js_helper.SyncIterable$(T[_eval]("core|List<0>"))).new(function* IterableExtension$124slices() {
      if (length < 1) dart.throw(new core.RangeError.range(length, 1, null, "length"));
      let iterator = $this[$iterator];
      while (iterator.moveNext()) {
        let slice = _interceptors.JSArray$(T).of([iterator.current]);
        for (let i = 1; i < length && iterator.moveNext(); i = i + 1) {
          slice[$add](iterator.current);
        }
        yield slice;
      }
    });
  };
  iterable_extensions['IterableExtension|get#slices'] = function IterableExtension$124get$35slices(T, $this) {
    return dart.fn(length => iterable_extensions['IterableExtension|slices'](T, $this, length), T[_eval]("core|Iterable<core|List<0>>(core|int)"));
  };
  iterable_extensions['IterableNullableExtension|whereNotNull'] = function IterableNullableExtension$124whereNotNull(T, $this) {
    return new (_js_helper.SyncIterable$(T)).new(function* IterableNullableExtension$124whereNotNull() {
      for (let element of $this) {
        if (element != null) yield element;
      }
    });
  };
  iterable_extensions['IterableNullableExtension|get#whereNotNull'] = function IterableNullableExtension$124get$35whereNotNull(T, $this) {
    return dart.fn(() => iterable_extensions['IterableNullableExtension|whereNotNull'](T, $this), T[_eval]("core|Iterable<0>()"));
  };
  iterable_extensions['IterableNumberExtension|get#minOrNull'] = function IterableNumberExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableNumberExtension|get#min'] = function IterableNumberExtension$124get$35min($this) {
    let t$3682;
    t$3682 = iterable_extensions['IterableNumberExtension|get#minOrNull']($this);
    return t$3682 == null ? dart.throw(new core.StateError.new("No element")) : t$3682;
  };
  iterable_extensions['IterableNumberExtension|get#maxOrNull'] = function IterableNumberExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableNumberExtension|get#max'] = function IterableNumberExtension$124get$35max($this) {
    let t$3684;
    t$3684 = iterable_extensions['IterableNumberExtension|get#maxOrNull']($this);
    return t$3684 == null ? dart.throw(new core.StateError.new("No element")) : t$3684;
  };
  iterable_extensions['IterableNumberExtension|get#sum'] = function IterableNumberExtension$124get$35sum($this) {
    let result = 0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableNumberExtension|get#average'] = function IterableNumberExtension$124get$35average($this) {
    let result = 0.0;
    let count = 0;
    for (let value of $this) {
      count = count + 1;
      result = result + (value - result) / count;
    }
    if (count === 0) dart.throw(new core.StateError.new("No elements"));
    return result;
  };
  iterable_extensions['IterableIntegerExtension|get#minOrNull'] = function IterableIntegerExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableIntegerExtension|get#min'] = function IterableIntegerExtension$124get$35min($this) {
    let t$3688;
    t$3688 = iterable_extensions['IterableIntegerExtension|get#minOrNull']($this);
    return t$3688 == null ? dart.throw(new core.StateError.new("No element")) : t$3688;
  };
  iterable_extensions['IterableIntegerExtension|get#maxOrNull'] = function IterableIntegerExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableIntegerExtension|get#max'] = function IterableIntegerExtension$124get$35max($this) {
    let t$3690;
    t$3690 = iterable_extensions['IterableIntegerExtension|get#maxOrNull']($this);
    return t$3690 == null ? dart.throw(new core.StateError.new("No element")) : t$3690;
  };
  iterable_extensions['IterableIntegerExtension|get#sum'] = function IterableIntegerExtension$124get$35sum($this) {
    let result = 0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableIntegerExtension|get#average'] = function IterableIntegerExtension$124get$35average($this) {
    let average = 0;
    let remainder = 0;
    let count = 0;
    for (let value of $this) {
      count = count + 1;
      let delta = value - average + remainder;
      average = average + (delta / count)[$truncate]();
      remainder = delta[$remainder](count);
    }
    if (count === 0) dart.throw(new core.StateError.new("No elements"));
    return average + remainder / count;
  };
  iterable_extensions['IterableDoubleExtension|get#minOrNull'] = function IterableDoubleExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableDoubleExtension|get#min'] = function IterableDoubleExtension$124get$35min($this) {
    let t$3694;
    t$3694 = iterable_extensions['IterableDoubleExtension|get#minOrNull']($this);
    return t$3694 == null ? dart.throw(new core.StateError.new("No element")) : t$3694;
  };
  iterable_extensions['IterableDoubleExtension|get#maxOrNull'] = function IterableDoubleExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableDoubleExtension|get#max'] = function IterableDoubleExtension$124get$35max($this) {
    let t$3696;
    t$3696 = iterable_extensions['IterableDoubleExtension|get#maxOrNull']($this);
    return t$3696 == null ? dart.throw(new core.StateError.new("No element")) : t$3696;
  };
  iterable_extensions['IterableDoubleExtension|get#sum'] = function IterableDoubleExtension$124get$35sum($this) {
    let result = 0.0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableIterableExtension|get#flattened'] = function IterableIterableExtension$124get$35flattened(T, $this) {
    return new (_js_helper.SyncIterable$(T)).new(function* IterableIterableExtension$124get$35flattened() {
      for (let elements of $this) {
        yield* elements;
      }
    });
  };
  iterable_extensions['IterableComparableExtension|get#minOrNull'] = function IterableComparableExtension$124get$35minOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (value[$compareTo](newValue) > 0) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableComparableExtension|get#min'] = function IterableComparableExtension$124get$35min(T, $this) {
    let t$36100;
    t$36100 = iterable_extensions['IterableComparableExtension|get#minOrNull'](T, $this);
    return t$36100 == null ? dart.throw(new core.StateError.new("No element")) : t$36100;
  };
  iterable_extensions['IterableComparableExtension|get#maxOrNull'] = function IterableComparableExtension$124get$35maxOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (value[$compareTo](newValue) < 0) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableComparableExtension|get#max'] = function IterableComparableExtension$124get$35max(T, $this) {
    let t$36102;
    t$36102 = iterable_extensions['IterableComparableExtension|get#maxOrNull'](T, $this);
    return t$36102 == null ? dart.throw(new core.StateError.new("No element")) : t$36102;
  };
  iterable_extensions['IterableComparableExtension|sorted'] = function IterableComparableExtension$124sorted(T, $this, compare = null) {
    let t$36104;
    t$36104 = (() => {
      let t$36103 = core.List$(T).of($this);
      return t$36103;
    })();
    return (() => {
      t$36104[$sort](compare);
      return t$36104;
    })();
  };
  iterable_extensions['IterableComparableExtension|get#sorted'] = function IterableComparableExtension$124get$35sorted(T, $this) {
    return dart.fn((compare = null) => iterable_extensions['IterableComparableExtension|sorted'](T, $this, compare), T[_eval]("core|List<0>([core|int(0,0)?])"));
  };
  iterable_extensions['IterableComparableExtension|isSorted'] = function IterableComparableExtension$124isSorted(T, $this, compare = null) {
    if (compare != null) {
      return iterable_extensions['IterableExtension|isSorted'](T, $this, compare);
    }
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousElement = iterator.current;
    while (iterator.moveNext()) {
      let element = iterator.current;
      if (previousElement[$compareTo](element) > 0) return false;
      previousElement = element;
    }
    return true;
  };
  iterable_extensions['IterableComparableExtension|get#isSorted'] = function IterableComparableExtension$124get$35isSorted(T, $this) {
    return dart.fn((compare = null) => iterable_extensions['IterableComparableExtension|isSorted'](T, $this, compare), T[_eval]("core|bool([core|int(0,0)?])"));
  };
  iterable_extensions['ComparatorExtension|get#inverse'] = function ComparatorExtension$124get$35inverse(T, $this) {
    return dart.fn((a, b) => $this(b, a), T[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|compareBy'] = function ComparatorExtension$124compareBy(T, R, $this, keyOf) {
    return dart.fn((a, b) => $this(keyOf(a), keyOf(b)), R[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|get#compareBy'] = function ComparatorExtension$124get$35compareBy(T, $this) {
    return dart.gFn((R, keyOf) => iterable_extensions['ComparatorExtension|compareBy'](T, R, $this, keyOf), T[_eval]("core|int(0^,0^)(0(0^))<core|Object?>"), dart.constList([T$.dynamic()], T$.dynamic()));
  };
  iterable_extensions['ComparatorExtension|then'] = function ComparatorExtension$124then(T, $this, tieBreaker) {
    return dart.fn((a, b) => {
      let result = $this(a, b);
      if (result === 0) result = tieBreaker(a, b);
      return result;
    }, T[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|get#then'] = function ComparatorExtension$124get$35then(T, $this) {
    return dart.fn(tieBreaker => iterable_extensions['ComparatorExtension|then'](T, $this, tieBreaker), T[_eval]("core|int(0,0)(core|int(0,0))"));
  };
  dart.moduleConstCaches.set("packages/collection/src/iterable_extensions.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/collection/src/iterable_extensions.dart", {
    "package:collection/src/iterable_extensions.dart": iterable_extensions
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["iterable_extensions.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../F:/packages/collection/src/iterable_extensions.dart.lib.js"}');
  // Exports:
  return {
    src__iterable_extensions: iterable_extensions
  };
}));

//# sourceMappingURL=iterable_extensions.dart.lib.js.map

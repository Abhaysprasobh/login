// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/memory_allocations.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__foundation__memory_allocations_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var memory_allocations = Object.create(dart.library);
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $removeWhere = dartx.removeWhere;
  var $isEmpty = dartx.isEmpty;
  var $firstWhere = dartx.firstWhere;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(dart_rti.findType("core|Map<core|String,core|Object>")))(),
    VoidToMapOfObject$MapOfString$Object: () => (T.VoidToMapOfObject$MapOfString$Object = dart.constFn(dart_rti.findType("core|Map<core|Object,core|Map<core|String,core|Object>>()")))(),
    ObjectEventToNvoid: () => (T.ObjectEventToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__memory_allocations|ObjectEvent)?")))(),
    FnTobool: () => (T.FnTobool = dart.constFn(dart_rti.findType("core|bool(~(flutter__src__foundation__memory_allocations|ObjectEvent)?)")))(),
    DiagnosticsNode: () => (T.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    Image: () => (T.Image = dart.constFn(dart_rti.findType("ui|Image")))(),
    Picture: () => (T.Picture = dart.constFn(dart_rti.findType("ui|Picture")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(~(flutter__src__foundation__memory_allocations|ObjectEvent))")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ObjectEventTovoid: () => (T.ObjectEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__memory_allocations|ObjectEvent)")))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti.findType("~({className!core|String,library!core|String,object!core|Object})")))(),
    __Tovoid$1: () => (T.__Tovoid$1 = dart.constFn(dart_rti.findType("~({object!core|Object})")))(),
    ImageTovoid: () => (T.ImageTovoid = dart.constFn(dart_rti.findType("~(ui|Image)")))(),
    PictureTovoid: () => (T.PictureTovoid = dart.constFn(dart_rti.findType("~(ui|Picture)")))(),
    FlutterMemoryAllocations: () => (T.FlutterMemoryAllocations = dart.constFn(dart_rti.findType("flutter__src__foundation__memory_allocations|FlutterMemoryAllocations")))(),
    ListNOfObjectEventToNvoid: () => (T.ListNOfObjectEventToNvoid = dart.constFn(dart_rti.findType("core|List<~(flutter__src__foundation__memory_allocations|ObjectEvent)?>?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))()
  };
  var G = {
    IdentityMapOfString$Object: () => (G.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(T.String(), T.Object())))(),
    LinkedMapOfObject$MapOfString$Object: () => (G.LinkedMapOfObject$MapOfString$Object = dart.constFn(_js_helper.LinkedMap$(T.Object(), T.MapOfString$Object())))(),
    JSArrayOfObjectEventToNvoid: () => (G.JSArrayOfObjectEventToNvoid = dart.constFn(_interceptors.JSArray$(T.ObjectEventToNvoid())))(),
    DiagnosticsPropertyOfObject: () => (G.DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(T.Object())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNode())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/foundation/memory_allocations.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/memory_allocations.dart"
  ];
  memory_allocations._FieldNames = class _FieldNames extends core.Object {
    static ['_#new#tearOff']() {
      return new memory_allocations._FieldNames.new();
    }
  };
  (memory_allocations._FieldNames.new = function() {
    ;
  }).prototype = memory_allocations._FieldNames.prototype;
  dart.addTypeTests(memory_allocations._FieldNames);
  dart.addRtiResources(memory_allocations._FieldNames, ["flutter__src__foundation__memory_allocations|_FieldNames"]);
  dart.addTypeCaches(memory_allocations._FieldNames);
  dart.setLibraryUri(memory_allocations._FieldNames, I[0]);
  dart.setStaticFieldSignature(memory_allocations._FieldNames, () => ['eventType', 'libraryName', 'className']);
  dart.defineLazy(memory_allocations._FieldNames, {
    /*memory_allocations._FieldNames.eventType*/get eventType() {
      return "eventType";
    },
    /*memory_allocations._FieldNames.libraryName*/get libraryName() {
      return "libraryName";
    },
    /*memory_allocations._FieldNames.className*/get className() {
      return "className";
    }
  }, false);
  var object$ = dart.privateName(memory_allocations, "ObjectEvent.object");
  memory_allocations.ObjectEvent = class ObjectEvent extends core.Object {
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
  };
  (memory_allocations.ObjectEvent.new = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    this[object$] = object;
    ;
  }).prototype = memory_allocations.ObjectEvent.prototype;
  dart.addTypeTests(memory_allocations.ObjectEvent);
  dart.addRtiResources(memory_allocations.ObjectEvent, ["flutter__src__foundation__memory_allocations|ObjectEvent"]);
  dart.addTypeCaches(memory_allocations.ObjectEvent);
  dart.setLibraryUri(memory_allocations.ObjectEvent, I[0]);
  dart.setFieldSignature(memory_allocations.ObjectEvent, () => dart.global.Object.setPrototypeOf({object: {type: T.Object(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(memory_allocations.ObjectEvent))));
  var library$ = dart.privateName(memory_allocations, "ObjectCreated.library");
  var className$ = dart.privateName(memory_allocations, "ObjectCreated.className");
  memory_allocations.ObjectCreated = class ObjectCreated extends memory_allocations.ObjectEvent {
    get library() {
      return this[library$];
    }
    set library(value) {
      super.library = value;
    }
    get className() {
      return this[className$];
    }
    set className(value) {
      super.className = value;
    }
    static ['_#new#tearOff'](opts) {
      let library = opts && 'library' in opts ? opts.library : null;
      let className = opts && 'className' in opts ? opts.className : null;
      let object = opts && 'object' in opts ? opts.object : null;
      return new memory_allocations.ObjectCreated.new({library: library, className: className, object: object});
    }
    toMap() {
      return new (G.LinkedMapOfObject$MapOfString$Object()).from([this.object, new (G.IdentityMapOfString$Object()).from(["libraryName", this.library, "className", this.className, "eventType", "created"])]);
    }
  };
  (memory_allocations.ObjectCreated.new = function(opts) {
    let library = opts && 'library' in opts ? opts.library : null;
    let className = opts && 'className' in opts ? opts.className : null;
    let object = opts && 'object' in opts ? opts.object : null;
    this[library$] = library;
    this[className$] = className;
    dart.global.Object.getPrototypeOf(memory_allocations.ObjectCreated).new.call(this, {object: object});
    ;
  }).prototype = memory_allocations.ObjectCreated.prototype;
  dart.addTypeTests(memory_allocations.ObjectCreated);
  dart.addRtiResources(memory_allocations.ObjectCreated, ["flutter__src__foundation__memory_allocations|ObjectCreated"]);
  dart.addTypeCaches(memory_allocations.ObjectCreated);
  dart.setMethodSignature(memory_allocations.ObjectCreated, () => dart.global.Object.setPrototypeOf({toMap: T.VoidToMapOfObject$MapOfString$Object()}, dart.getMethods(dart.global.Object.getPrototypeOf(memory_allocations.ObjectCreated))));
  dart.setLibraryUri(memory_allocations.ObjectCreated, I[0]);
  dart.setFieldSignature(memory_allocations.ObjectCreated, () => dart.global.Object.setPrototypeOf({
    library: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    className: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(memory_allocations.ObjectCreated))));
  memory_allocations.ObjectDisposed = class ObjectDisposed extends memory_allocations.ObjectEvent {
    static ['_#new#tearOff'](opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      return new memory_allocations.ObjectDisposed.new({object: object});
    }
    toMap() {
      return new (G.LinkedMapOfObject$MapOfString$Object()).from([this.object, new (G.IdentityMapOfString$Object()).from(["eventType", "disposed"])]);
    }
  };
  (memory_allocations.ObjectDisposed.new = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    dart.global.Object.getPrototypeOf(memory_allocations.ObjectDisposed).new.call(this, {object: object});
    ;
  }).prototype = memory_allocations.ObjectDisposed.prototype;
  dart.addTypeTests(memory_allocations.ObjectDisposed);
  dart.addRtiResources(memory_allocations.ObjectDisposed, ["flutter__src__foundation__memory_allocations|ObjectDisposed"]);
  dart.addTypeCaches(memory_allocations.ObjectDisposed);
  dart.setMethodSignature(memory_allocations.ObjectDisposed, () => dart.global.Object.setPrototypeOf({toMap: T.VoidToMapOfObject$MapOfString$Object()}, dart.getMethods(dart.global.Object.getPrototypeOf(memory_allocations.ObjectDisposed))));
  dart.setLibraryUri(memory_allocations.ObjectDisposed, I[0]);
  var _listeners = dart.privateName(memory_allocations, "_listeners");
  var _activeDispatchLoops = dart.privateName(memory_allocations, "_activeDispatchLoops");
  var _listenersContainNulls = dart.privateName(memory_allocations, "_listenersContainNulls");
  var _subscribeToSdkObjects = dart.privateName(memory_allocations, "_subscribeToSdkObjects");
  var _checkListenersForEmptiness = dart.privateName(memory_allocations, "_checkListenersForEmptiness");
  var _tryDefragmentListeners = dart.privateName(memory_allocations, "_tryDefragmentListeners");
  var _unSubscribeFromSdkObjects = dart.privateName(memory_allocations, "_unSubscribeFromSdkObjects");
  var _is = dart.privateName(dart_rti, "_is");
  var _imageOnCreate = dart.privateName(memory_allocations, "_imageOnCreate");
  var _imageOnDispose = dart.privateName(memory_allocations, "_imageOnDispose");
  var _pictureOnCreate = dart.privateName(memory_allocations, "_pictureOnCreate");
  var _pictureOnDispose = dart.privateName(memory_allocations, "_pictureOnDispose");
  memory_allocations.FlutterMemoryAllocations = class FlutterMemoryAllocations extends core.Object {
    static ['_#_#tearOff']() {
      return new memory_allocations.FlutterMemoryAllocations.__();
    }
    addListener(listener) {
      ;
      if (this[_listeners] == null) {
        this[_listeners] = G.JSArrayOfObjectEventToNvoid().of([]);
        this[_subscribeToSdkObjects]();
      }
      dart.nullCheck(this[_listeners])[$add](listener);
    }
    removeListener(listener) {
      ;
      let listeners = this[_listeners];
      if (listeners == null) {
        return;
      }
      if (this[_activeDispatchLoops] > 0) {
        for (let i = 0; i < listeners[$length]; i = i + 1) {
          if (dart.equals(listeners[$_get](i), listener)) {
            listeners[$_set](i, null);
            this[_listenersContainNulls] = true;
          }
        }
      } else {
        listeners[$removeWhere](dart.fn(l => dart.equals(l, listener), T.FnTobool()));
        this[_checkListenersForEmptiness]();
      }
    }
    [_tryDefragmentListeners]() {
      let t$360;
      if (this[_activeDispatchLoops] > 0 || !this[_listenersContainNulls]) {
        return;
      }
      t$360 = this[_listeners];
      t$360 == null ? null : t$360[$removeWhere](dart.fn(e => e == null, T.FnTobool()));
      this[_listenersContainNulls] = false;
      this[_checkListenersForEmptiness]();
    }
    [_checkListenersForEmptiness]() {
      let t$360, t$360$;
      if (dart.test((t$360$ = (t$360 = this[_listeners], t$360 == null ? null : t$360[$isEmpty]), t$360$ == null ? false : t$360$))) {
        this[_listeners] = null;
        this[_unSubscribeFromSdkObjects]();
      }
    }
    get hasListeners() {
      let t$360, t$360$, t$360$0;
      ;
      if (this[_listenersContainNulls]) {
        return (t$360 = this[_listeners], t$360 == null ? null : t$360[$firstWhere](dart.fn(l => l != null, T.FnTobool()))) != null;
      }
      t$360$0 = (t$360$ = this[_listeners], t$360$ == null ? null : t$360$[$isNotEmpty]);
      return t$360$0 == null ? false : t$360$0;
    }
    dispatchObjectEvent(event) {
      let t$360;
      ;
      let listeners = this[_listeners];
      if (listeners == null || listeners[$isEmpty]) {
        return;
      }
      this[_activeDispatchLoops] = this[_activeDispatchLoops] + 1;
      let end = listeners[$length];
      for (let i = 0; i < end; i = i + 1) {
        try {
          t$360 = listeners[$_get](i);
          t$360 == null ? null : t$360(event);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T.Object()[_is](exception)) {
            let type = dart.toString(dart.runtimeType(event.object));
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "foundation library", context: new assertions.ErrorDescription.new("MemoryAllocations while " + "dispatching notifications for " + type), informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfObject()).new("The " + type + " sending notification was", event.object, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T.VoidToListOfDiagnosticsNode())}));
          } else
            throw t$36$35e;
        }
      }
      this[_activeDispatchLoops] = this[_activeDispatchLoops] - 1;
      this[_tryDefragmentListeners]();
    }
    dispatchObjectCreated(opts) {
      let library = opts && 'library' in opts ? opts.library : null;
      let className = opts && 'className' in opts ? opts.className : null;
      let object = opts && 'object' in opts ? opts.object : null;
      if (!this.hasListeners) {
        return;
      }
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: library, className: className, object: object}));
    }
    dispatchObjectDisposed(opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      if (!this.hasListeners) {
        return;
      }
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: object}));
    }
    [_subscribeToSdkObjects]() {
      if (!(ui.Image.onCreate == null)) dart.assertFailed(null, I[2], 301, 12, "ui.Image.onCreate == null");
      if (!(ui.Image.onDispose == null)) dart.assertFailed(null, I[2], 302, 12, "ui.Image.onDispose == null");
      if (!(ui.Picture.onCreate == null)) dart.assertFailed(null, I[2], 303, 12, "ui.Picture.onCreate == null");
      if (!(ui.Picture.onDispose == null)) dart.assertFailed(null, I[2], 304, 12, "ui.Picture.onDispose == null");
      ui.Image.onCreate = dart.bind(this, _imageOnCreate);
      ui.Image.onDispose = dart.bind(this, _imageOnDispose);
      ui.Picture.onCreate = dart.bind(this, _pictureOnCreate);
      ui.Picture.onDispose = dart.bind(this, _pictureOnDispose);
    }
    [_unSubscribeFromSdkObjects]() {
      if (!dart.equals(ui.Image.onCreate, dart.bind(this, _imageOnCreate))) dart.assertFailed(null, I[2], 312, 12, "ui.Image.onCreate == _imageOnCreate");
      if (!dart.equals(ui.Image.onDispose, dart.bind(this, _imageOnDispose))) dart.assertFailed(null, I[2], 313, 12, "ui.Image.onDispose == _imageOnDispose");
      if (!dart.equals(ui.Picture.onCreate, dart.bind(this, _pictureOnCreate))) dart.assertFailed(null, I[2], 314, 12, "ui.Picture.onCreate == _pictureOnCreate");
      if (!dart.equals(ui.Picture.onDispose, dart.bind(this, _pictureOnDispose))) dart.assertFailed(null, I[2], 315, 12, "ui.Picture.onDispose == _pictureOnDispose");
      ui.Image.onCreate = null;
      ui.Image.onDispose = null;
      ui.Picture.onCreate = null;
      ui.Picture.onDispose = null;
    }
    [_imageOnCreate](image) {
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: "dart:ui", className: dart.strSafe(dart_rti.createRuntimeType(T.Image())), object: image}));
    }
    [_pictureOnCreate](picture) {
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: "dart:ui", className: dart.strSafe(dart_rti.createRuntimeType(T.Picture())), object: picture}));
    }
    [_imageOnDispose](image) {
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: image}));
    }
    [_pictureOnDispose](picture) {
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: picture}));
    }
  };
  (memory_allocations.FlutterMemoryAllocations.__ = function() {
    this[_listeners] = null;
    this[_activeDispatchLoops] = 0;
    this[_listenersContainNulls] = false;
    ;
  }).prototype = memory_allocations.FlutterMemoryAllocations.prototype;
  dart.addTypeTests(memory_allocations.FlutterMemoryAllocations);
  dart.addRtiResources(memory_allocations.FlutterMemoryAllocations, ["flutter__src__foundation__memory_allocations|FlutterMemoryAllocations"]);
  dart.addTypeCaches(memory_allocations.FlutterMemoryAllocations);
  dart.setMethodSignature(memory_allocations.FlutterMemoryAllocations, () => dart.global.Object.setPrototypeOf({
    addListener: T.FnTovoid(),
    removeListener: T.FnTovoid(),
    [_tryDefragmentListeners]: T.VoidTovoid(),
    [_checkListenersForEmptiness]: T.VoidTovoid(),
    dispatchObjectEvent: T.ObjectEventTovoid(),
    dispatchObjectCreated: T.__Tovoid(),
    dispatchObjectDisposed: T.__Tovoid$1(),
    [_subscribeToSdkObjects]: T.VoidTovoid(),
    [_unSubscribeFromSdkObjects]: T.VoidTovoid(),
    [_imageOnCreate]: T.ImageTovoid(),
    [_pictureOnCreate]: T.PictureTovoid(),
    [_imageOnDispose]: T.ImageTovoid(),
    [_pictureOnDispose]: T.PictureTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(memory_allocations.FlutterMemoryAllocations))));
  dart.setGetterSignature(memory_allocations.FlutterMemoryAllocations, () => dart.global.Object.setPrototypeOf({hasListeners: T.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(memory_allocations.FlutterMemoryAllocations))));
  dart.setLibraryUri(memory_allocations.FlutterMemoryAllocations, I[0]);
  dart.setFieldSignature(memory_allocations.FlutterMemoryAllocations, () => dart.global.Object.setPrototypeOf({
    [_listeners]: {type: T.ListNOfObjectEventToNvoid(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_activeDispatchLoops]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_listenersContainNulls]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(memory_allocations.FlutterMemoryAllocations))));
  dart.setStaticFieldSignature(memory_allocations.FlutterMemoryAllocations, () => ['instance']);
  dart.defineLazy(memory_allocations.FlutterMemoryAllocations, {
    /*memory_allocations.FlutterMemoryAllocations.instance*/get instance() {
      return new memory_allocations.FlutterMemoryAllocations.__();
    }
  }, false);
  dart.defineLazy(memory_allocations, {
    /*memory_allocations._kMemoryAllocations*/get _kMemoryAllocations() {
      return false;
    },
    /*memory_allocations.kFlutterMemoryAllocationsEnabled*/get kFlutterMemoryAllocationsEnabled() {
      return true;
    },
    /*memory_allocations._dartUiLibrary*/get _dartUiLibrary() {
      return "dart:ui";
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__foundation__memory_allocations|ObjectCreated":{"flutter__src__foundation__memory_allocations|ObjectEvent":[]},"flutter__src__foundation__memory_allocations|ObjectDisposed":{"flutter__src__foundation__memory_allocations|ObjectEvent":[]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/memory_allocations.dart", {
    "package:flutter/src/foundation/memory_allocations.dart": memory_allocations
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["memory_allocations.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/foundation/memory_allocations.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__memory_allocations: memory_allocations
  };
}));

//# sourceMappingURL=memory_allocations.dart.lib.js.map

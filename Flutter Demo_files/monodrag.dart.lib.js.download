// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/monodrag.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__monodrag_dart(dart_sdk, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__gestures__arena$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var monodrag = Object.create(dart.library);
  var $_set = dartx._set;
  var $length = dartx.length;
  var $last = dartx.last;
  var $_get = dartx._get;
  var $sign = dartx.sign;
  var $contains = dartx.contains;
  var $add = dartx.add;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOf_DragState: () => (T.ListOf_DragState = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__monodrag|_DragState>")))(),
    _DragState: () => (T._DragState = dart.constFn(dart_rti.findType("flutter__src__gestures__monodrag|_DragState")))(),
    PointerEventToVelocityTracker: () => (T.PointerEventToVelocityTracker = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|VelocityTracker(flutter__src__gestures__events|PointerEvent)")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    VelocityTracker: () => (T.VelocityTracker = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|VelocityTracker")))(),
    intTobool: () => (T.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerPanZoomStartEvent: () => (T.PointerPanZoomStartEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomStartEvent")))(),
    PointerPanZoomUpdateEvent: () => (T.PointerPanZoomUpdateEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomUpdateEvent")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerCancelEvent: () => (T.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerPanZoomEndEvent: () => (T.PointerPanZoomEndEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomEndEvent")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    DragStartBehavior: () => (T.DragStartBehavior = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|DragStartBehavior")))(),
    OffsetPair: () => (T.OffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair")))(),
    DurationN: () => (T.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    PointerEventTobool: () => (T.PointerEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerEvent)")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    DurationNAndintTovoid: () => (T.DurationNAndintTovoid = dart.constFn(dart_rti.findType("~(core|Duration?,core|int)")))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti.findType("~({delta!ui|Offset,globalPosition!ui|Offset,localPosition:ui|Offset?,primaryDelta:core|double?,sourceTimeStamp:core|Duration?})")))(),
    MultitouchDragStrategy: () => (T.MultitouchDragStrategy = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|MultitouchDragStrategy")))(),
    DragDownDetailsToNvoid: () => (T.DragDownDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag_details|DragDownDetails)?")))(),
    DragStartDetailsToNvoid: () => (T.DragStartDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag_details|DragStartDetails)?")))(),
    DragUpdateDetailsToNvoid: () => (T.DragUpdateDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag_details|DragUpdateDetails)?")))(),
    DragEndDetailsToNvoid: () => (T.DragEndDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag_details|DragEndDetails)?")))(),
    VoidToNvoid: () => (T.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    OffsetPairN: () => (T.OffsetPairN = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair?")))(),
    intN: () => (T.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    Matrix4N: () => (T.Matrix4N = dart.constFn(dart_rti.findType("vector_math__vector_math_64|Matrix4?")))(),
    MapOfint$VelocityTracker: () => (T.MapOfint$VelocityTracker = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__velocity_tracker|VelocityTracker>")))(),
    ListOfint: () => (T.ListOfint = dart.constFn(dart_rti.findType("core|List<core|int>")))(),
    VelocityEstimateAndPointerDeviceKindTobool: () => (T.VelocityEstimateAndPointerDeviceKindTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__velocity_tracker|VelocityEstimate,ui|PointerDeviceKind)")))(),
    VelocityEstimateAndPointerDeviceKindToDragEndDetailsN: () => (T.VelocityEstimateAndPointerDeviceKindToDragEndDetailsN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag_details|DragEndDetails?(flutter__src__gestures__velocity_tracker|VelocityEstimate,ui|PointerDeviceKind)")))(),
    PointerDeviceKindAnddoubleNTobool: () => (T.PointerDeviceKindAnddoubleNTobool = dart.constFn(dart_rti.findType("core|bool(ui|PointerDeviceKind,core|double?)")))(),
    OffsetToOffset: () => (T.OffsetToOffset = dart.constFn(dart_rti.findType("ui|Offset(ui|Offset)")))(),
    OffsetTodouble: () => (T.OffsetTodouble = dart.constFn(dart_rti.findType("core|double(ui|Offset)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    OffsetTodoubleN: () => (T.OffsetTodoubleN = dart.constFn(dart_rti.findType("core|double?(ui|Offset)")))()
  };
  var G = {
    IdentityMapOfint$VelocityTracker: () => (G.IdentityMapOfint$VelocityTracker = dart.constFn(_js_helper.IdentityMap$(T.int(), T.VelocityTracker())))(),
    JSArrayOfint: () => (G.JSArrayOfint = dart.constFn(_interceptors.JSArray$(T.int())))(),
    EnumPropertyOfDragStartBehavior: () => (G.EnumPropertyOfDragStartBehavior = dart.constFn(diagnostics.EnumProperty$(T.DragStartBehavior())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ready",
        [_Enum_index]: 0
      }, monodrag._DragState.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "possible",
        [_Enum_index]: 1
      }, monodrag._DragState.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "accepted",
        [_Enum_index]: 2
      }, monodrag._DragState.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], T._DragState());
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "start",
        [_Enum_index]: 1
      }, recognizer.DragStartBehavior.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "latestPointer",
        [_Enum_index]: 0
      }, recognizer.MultitouchDragStrategy.prototype));
    },
    get C6() {
      return C[6] = dart.fn(monodrag.DragGestureRecognizer._defaultBuilder, T.PointerEventToVelocityTracker());
    },
    get C7() {
      return C[7] = dart.fn(monodrag.DragGestureRecognizer._defaultButtonAcceptBehavior, T.intTobool());
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "sumAllPointers",
        [_Enum_index]: 1
      }, recognizer.MultitouchDragStrategy.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "down",
        [_Enum_index]: 0
      }, recognizer.DragStartBehavior.prototype));
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:flutter/src/gestures/monodrag.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/monodrag.dart",
    "package:flutter/src/gestures/recognizer.dart",
    "package:vector_math/vector_math_64.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  monodrag._DragState = class _DragState extends core._Enum {
    [_enumToString]() {
      return "_DragState." + this[_name];
    }
  };
  (monodrag._DragState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(monodrag._DragState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = monodrag._DragState.prototype;
  dart.addTypeTests(monodrag._DragState);
  dart.addRtiResources(monodrag._DragState, ["flutter__src__gestures__monodrag|_DragState"]);
  dart.addTypeCaches(monodrag._DragState);
  dart.setMethodSignature(monodrag._DragState, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(monodrag._DragState))));
  dart.setLibraryUri(monodrag._DragState, I[0]);
  dart.setStaticFieldSignature(monodrag._DragState, () => ['values', 'ready', 'possible', 'accepted']);
  dart.defineLazy(monodrag._DragState, {
    /*monodrag._DragState.values*/get values() {
      return C[0] || CT.C0;
    },
    /*monodrag._DragState.ready*/get ready() {
      return C[1] || CT.C1;
    },
    /*monodrag._DragState.possible*/get possible() {
      return C[2] || CT.C2;
    },
    /*monodrag._DragState.accepted*/get accepted() {
      return C[3] || CT.C3;
    }
  }, false);
  var dragStartBehavior$ = dart.privateName(monodrag, "DragGestureRecognizer.dragStartBehavior");
  var multitouchDragStrategy$ = dart.privateName(monodrag, "DragGestureRecognizer.multitouchDragStrategy");
  var onDown = dart.privateName(monodrag, "DragGestureRecognizer.onDown");
  var onStart = dart.privateName(monodrag, "DragGestureRecognizer.onStart");
  var onUpdate = dart.privateName(monodrag, "DragGestureRecognizer.onUpdate");
  var onEnd = dart.privateName(monodrag, "DragGestureRecognizer.onEnd");
  var onCancel = dart.privateName(monodrag, "DragGestureRecognizer.onCancel");
  var minFlingDistance = dart.privateName(monodrag, "DragGestureRecognizer.minFlingDistance");
  var minFlingVelocity = dart.privateName(monodrag, "DragGestureRecognizer.minFlingVelocity");
  var maxFlingVelocity = dart.privateName(monodrag, "DragGestureRecognizer.maxFlingVelocity");
  var onlyAcceptDragOnThreshold$ = dart.privateName(monodrag, "DragGestureRecognizer.onlyAcceptDragOnThreshold");
  var velocityTrackerBuilder$ = dart.privateName(monodrag, "DragGestureRecognizer.velocityTrackerBuilder");
  var _state = dart.privateName(monodrag, "_state");
  var __DragGestureRecognizer__initialPosition = dart.privateName(monodrag, "_#DragGestureRecognizer#_initialPosition");
  var __DragGestureRecognizer__pendingDragOffset = dart.privateName(monodrag, "_#DragGestureRecognizer#_pendingDragOffset");
  var _lastPendingEventTimestamp = dart.privateName(monodrag, "_lastPendingEventTimestamp");
  var _initialButtons = dart.privateName(monodrag, "_initialButtons");
  var _lastTransform = dart.privateName(monodrag, "_lastTransform");
  var __DragGestureRecognizer__globalDistanceMoved = dart.privateName(monodrag, "_#DragGestureRecognizer#_globalDistanceMoved");
  var _hasDragThresholdBeenMet = dart.privateName(monodrag, "_hasDragThresholdBeenMet");
  var _velocityTrackers = dart.privateName(monodrag, "_velocityTrackers");
  var _acceptedActivePointers = dart.privateName(monodrag, "_acceptedActivePointers");
  var _initialPosition = dart.privateName(monodrag, "_initialPosition");
  var _pendingDragOffset = dart.privateName(monodrag, "_pendingDragOffset");
  var _globalDistanceMoved = dart.privateName(monodrag, "_globalDistanceMoved");
  var _as = dart.privateName(dart_rti, "_as");
  var _checkDown = dart.privateName(monodrag, "_checkDown");
  var _addPointer = dart.privateName(monodrag, "_addPointer");
  var _shouldTrackMoveEvent = dart.privateName(monodrag, "_shouldTrackMoveEvent");
  var _is = dart.privateName(dart_rti, "_is");
  var _giveUpPointer = dart.privateName(monodrag, "_giveUpPointer");
  var _getDeltaForDetails = dart.privateName(monodrag, "_getDeltaForDetails");
  var _getPrimaryValueFromOffset = dart.privateName(monodrag, "_getPrimaryValueFromOffset");
  var _checkUpdate = dart.privateName(monodrag, "_checkUpdate");
  var _hasSufficientGlobalDistanceToAccept = dart.privateName(monodrag, "_hasSufficientGlobalDistanceToAccept");
  var _checkDrag = dart.privateName(monodrag, "_checkDrag");
  var _checkCancel = dart.privateName(monodrag, "_checkCancel");
  var _checkEnd = dart.privateName(monodrag, "_checkEnd");
  var _checkStart = dart.privateName(monodrag, "_checkStart");
  var _considerFling = dart.privateName(monodrag, "_considerFling");
  monodrag.DragGestureRecognizer = class DragGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      this[dragStartBehavior$] = value;
    }
    get multitouchDragStrategy() {
      return this[multitouchDragStrategy$];
    }
    set multitouchDragStrategy(value) {
      this[multitouchDragStrategy$] = value;
    }
    get onDown() {
      return this[onDown];
    }
    set onDown(value) {
      this[onDown] = value;
    }
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    get onUpdate() {
      return this[onUpdate];
    }
    set onUpdate(value) {
      this[onUpdate] = value;
    }
    get onEnd() {
      return this[onEnd];
    }
    set onEnd(value) {
      this[onEnd] = value;
    }
    get onCancel() {
      return this[onCancel];
    }
    set onCancel(value) {
      this[onCancel] = value;
    }
    get minFlingDistance() {
      return this[minFlingDistance];
    }
    set minFlingDistance(value) {
      this[minFlingDistance] = value;
    }
    get minFlingVelocity() {
      return this[minFlingVelocity];
    }
    set minFlingVelocity(value) {
      this[minFlingVelocity] = value;
    }
    get maxFlingVelocity() {
      return this[maxFlingVelocity];
    }
    set maxFlingVelocity(value) {
      this[maxFlingVelocity] = value;
    }
    get onlyAcceptDragOnThreshold() {
      return this[onlyAcceptDragOnThreshold$];
    }
    set onlyAcceptDragOnThreshold(value) {
      this[onlyAcceptDragOnThreshold$] = value;
    }
    get velocityTrackerBuilder() {
      return this[velocityTrackerBuilder$];
    }
    set velocityTrackerBuilder(value) {
      this[velocityTrackerBuilder$] = value;
    }
    static _defaultBuilder(event) {
      return new velocity_tracker.VelocityTracker.withKind(event.kind);
    }
    static _defaultButtonAcceptBehavior(buttons) {
      return buttons === 1;
    }
    get [_initialPosition]() {
      let t$362;
      t$362 = this[__DragGestureRecognizer__initialPosition];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_initialPosition")) : t$362;
    }
    set [_initialPosition](_initialPosition$35param) {
      this[__DragGestureRecognizer__initialPosition] = _initialPosition$35param;
    }
    get [_pendingDragOffset]() {
      let t$362;
      t$362 = this[__DragGestureRecognizer__pendingDragOffset];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_pendingDragOffset")) : t$362;
    }
    set [_pendingDragOffset](_pendingDragOffset$35param) {
      this[__DragGestureRecognizer__pendingDragOffset] = _pendingDragOffset$35param;
    }
    get debugLastPendingEventTimestamp() {
      let lastPendingEventTimestamp = null;
      if (!dart.fn(() => {
        lastPendingEventTimestamp = this[_lastPendingEventTimestamp];
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 291, 12, "() {\r\n      lastPendingEventTimestamp = _lastPendingEventTimestamp;\r\n      return true;\r\n    }()");
      return lastPendingEventTimestamp;
    }
    get [_globalDistanceMoved]() {
      let t$362;
      t$362 = this[__DragGestureRecognizer__globalDistanceMoved];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_globalDistanceMoved")) : t$362;
    }
    set [_globalDistanceMoved](_globalDistanceMoved$35param) {
      this[__DragGestureRecognizer__globalDistanceMoved] = _globalDistanceMoved$35param;
    }
    isPointerAllowed(event) {
      if (this[_initialButtons] == null) {
        if (this.onDown == null && this.onStart == null && this.onUpdate == null && this.onEnd == null && this.onCancel == null) {
          return false;
        }
      } else {
        if (event.buttons !== this[_initialButtons]) {
          return false;
        }
      }
      return super.isPointerAllowed(T.PointerDownEvent()[_as](event));
    }
    [_addPointer](event) {
      let t$362;
      this[_velocityTrackers][$_set](event.pointer, (t$362 = event, this.velocityTrackerBuilder(t$362)));
      if (this[_state] === monodrag._DragState.ready) {
        this[_state] = monodrag._DragState.possible;
        this[_initialPosition] = new recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_pendingDragOffset] = recognizer.OffsetPair.zero;
        this[_globalDistanceMoved] = 0.0;
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this[_lastTransform] = event.transform;
        this[_checkDown]();
      } else if (this[_state] === monodrag._DragState.accepted) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    addAllowedPointer(event) {
      super.addAllowedPointer(event);
      if (this[_state] === monodrag._DragState.ready) {
        this[_initialButtons] = event.buttons;
      }
      this[_addPointer](event);
    }
    addAllowedPointerPanZoom(event) {
      super.addAllowedPointerPanZoom(event);
      this.startTrackingPointer(event.pointer, event.transform);
      if (this[_state] === monodrag._DragState.ready) {
        this[_initialButtons] = 1;
      }
      this[_addPointer](event);
    }
    [_shouldTrackMoveEvent](pointer) {
      let result = null;
      switch (this.multitouchDragStrategy) {
        case C[8] || CT.C8:
          {
            result = true;
            break;
          }
        case C[5] || CT.C5:
          {
            result = this[_acceptedActivePointers][$length] <= 1 || pointer === this[_acceptedActivePointers][$last];
          }
      }
      return result;
    }
    handleEvent(event) {
      let t$362, t$362$;
      if (!(this[_state] !== monodrag._DragState.ready)) dart.assertFailed(null, I[2], 396, 12, "_state != _DragState.ready");
      if (!event.synthesized && (T.PointerDownEvent()[_is](event) || T.PointerMoveEvent()[_is](event) || T.PointerPanZoomStartEvent()[_is](event) || T.PointerPanZoomUpdateEvent()[_is](event))) {
        let tracker = dart.nullCheck(this[_velocityTrackers][$_get](event.pointer));
        if (T.PointerPanZoomStartEvent()[_is](event)) {
          tracker.addPosition(event.timeStamp, ui.Offset.zero);
        } else if (T.PointerPanZoomUpdateEvent()[_is](event)) {
          tracker.addPosition(event.timeStamp, event.pan);
        } else {
          tracker.addPosition(event.timeStamp, event.localPosition);
        }
      }
      if (T.PointerMoveEvent()[_is](event) && event.buttons !== this[_initialButtons]) {
        this[_giveUpPointer](event.pointer);
        return;
      }
      if ((T.PointerMoveEvent()[_is](event) || T.PointerPanZoomUpdateEvent()[_is](event)) && this[_shouldTrackMoveEvent](event.pointer)) {
        let delta = T.PointerMoveEvent()[_is](event) ? event.delta : T.PointerPanZoomUpdateEvent()[_as](event).panDelta;
        let localDelta = T.PointerMoveEvent()[_is](event) ? event.localDelta : T.PointerPanZoomUpdateEvent()[_as](event).localPanDelta;
        let position = T.PointerMoveEvent()[_is](event) ? event.position : event.position['+'](T.PointerPanZoomUpdateEvent()[_as](event).pan);
        let localPosition = T.PointerMoveEvent()[_is](event) ? event.localPosition : event.localPosition['+'](T.PointerPanZoomUpdateEvent()[_as](event).localPan);
        if (this[_state] === monodrag._DragState.accepted) {
          this[_checkUpdate]({sourceTimeStamp: event.timeStamp, delta: this[_getDeltaForDetails](localDelta), primaryDelta: this[_getPrimaryValueFromOffset](localDelta), globalPosition: position, localPosition: localPosition});
        } else {
          this[_pendingDragOffset] = this[_pendingDragOffset]['+'](new recognizer.OffsetPair.new({local: localDelta, global: delta}));
          this[_lastPendingEventTimestamp] = event.timeStamp;
          this[_lastTransform] = event.transform;
          let movedLocally = this[_getDeltaForDetails](localDelta);
          let localToGlobalTransform = event.transform == null ? null : vector_math_64.Matrix4.tryInvert(dart.nullCheck(event.transform));
          this[_globalDistanceMoved] = this[_globalDistanceMoved] + events.PointerEvent.transformDeltaViaPositions({transform: localToGlobalTransform, untransformedDelta: movedLocally, untransformedEndPosition: localPosition}).distance * (t$362 = this[_getPrimaryValueFromOffset](movedLocally), t$362 == null ? 1.0 : t$362)[$sign];
          if (this[_hasSufficientGlobalDistanceToAccept](event.kind, (t$362$ = this.gestureSettings, t$362$ == null ? null : t$362$.touchSlop))) {
            this[_hasDragThresholdBeenMet] = true;
            if (this[_acceptedActivePointers][$contains](event.pointer)) {
              this[_checkDrag](event.pointer);
            } else {
              this.resolve(arena.GestureDisposition.accepted);
            }
          }
        }
      }
      if (T.PointerUpEvent()[_is](event) || T.PointerCancelEvent()[_is](event) || T.PointerPanZoomEndEvent()[_is](event)) {
        this[_giveUpPointer](event.pointer);
      }
    }
    acceptGesture(pointer) {
      if (!!this[_acceptedActivePointers][$contains](pointer)) dart.assertFailed(null, I[2], 459, 12, "!_acceptedActivePointers.contains(pointer)");
      this[_acceptedActivePointers][$add](pointer);
      if (!this.onlyAcceptDragOnThreshold || this[_hasDragThresholdBeenMet]) {
        this[_checkDrag](pointer);
      }
    }
    rejectGesture(pointer) {
      this[_giveUpPointer](pointer);
    }
    didStopTrackingLastPointer(pointer) {
      if (!(this[_state] !== monodrag._DragState.ready)) dart.assertFailed(null, I[2], 473, 12, "_state != _DragState.ready");
      switch (this[_state]) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[2] || CT.C2:
          {
            this.resolve(arena.GestureDisposition.rejected);
            this[_checkCancel]();
            break;
          }
        case C[3] || CT.C3:
          {
            this[_checkEnd](pointer);
          }
      }
      this[_hasDragThresholdBeenMet] = false;
      this[_velocityTrackers][$clear]();
      this[_initialButtons] = null;
      this[_state] = monodrag._DragState.ready;
    }
    [_giveUpPointer](pointer) {
      this.stopTrackingPointer(pointer);
      if (!this[_acceptedActivePointers][$remove](pointer)) {
        this.resolvePointer(pointer, arena.GestureDisposition.rejected);
      }
    }
    [_checkDown]() {
      if (this.onDown != null) {
        let details = new drag_details.DragDownDetails.new({globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local});
        this.invokeCallback(T.void(), "onDown", dart.fn(() => dart.nullCheck(this.onDown)(details), T.VoidTovoid()));
      }
    }
    [_checkDrag](pointer) {
      if (this[_state] === monodrag._DragState.accepted) {
        return;
      }
      this[_state] = monodrag._DragState.accepted;
      let delta = this[_pendingDragOffset];
      let timestamp = this[_lastPendingEventTimestamp];
      let transform = this[_lastTransform];
      let localUpdateDelta = null;
      switch (this.dragStartBehavior) {
        case C[4] || CT.C4:
          {
            this[_initialPosition] = this[_initialPosition]['+'](delta);
            localUpdateDelta = ui.Offset.zero;
            break;
          }
        case C[9] || CT.C9:
          {
            localUpdateDelta = this[_getDeltaForDetails](delta.local);
          }
      }
      this[_pendingDragOffset] = recognizer.OffsetPair.zero;
      this[_lastPendingEventTimestamp] = null;
      this[_lastTransform] = null;
      this[_checkStart](timestamp, pointer);
      if (!dart.equals(localUpdateDelta, ui.Offset.zero) && this.onUpdate != null) {
        let localToGlobal = transform != null ? vector_math_64.Matrix4.tryInvert(transform) : null;
        let correctedLocalPosition = this[_initialPosition].local['+'](localUpdateDelta);
        let globalUpdateDelta = events.PointerEvent.transformDeltaViaPositions({untransformedEndPosition: correctedLocalPosition, untransformedDelta: localUpdateDelta, transform: localToGlobal});
        let updateDelta = new recognizer.OffsetPair.new({local: localUpdateDelta, global: globalUpdateDelta});
        let correctedPosition = this[_initialPosition]['+'](updateDelta);
        this[_checkUpdate]({sourceTimeStamp: timestamp, delta: localUpdateDelta, primaryDelta: this[_getPrimaryValueFromOffset](localUpdateDelta), globalPosition: correctedPosition.global, localPosition: correctedPosition.local});
      }
      this.resolve(arena.GestureDisposition.accepted);
    }
    [_checkStart](timestamp, pointer) {
      if (this.onStart != null) {
        let details = new drag_details.DragStartDetails.new({sourceTimeStamp: timestamp, globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local, kind: this.getKindForPointer(pointer)});
        this.invokeCallback(T.void(), "onStart", dart.fn(() => dart.nullCheck(this.onStart)(details), T.VoidTovoid()));
      }
    }
    [_checkUpdate](opts) {
      let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      if (this.onUpdate != null) {
        let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: sourceTimeStamp, delta: delta, primaryDelta: primaryDelta, globalPosition: globalPosition, localPosition: localPosition});
        this.invokeCallback(T.void(), "onUpdate", dart.fn(() => dart.nullCheck(this.onUpdate)(details), T.VoidTovoid()));
      }
    }
    [_checkEnd](pointer) {
      if (this.onEnd == null) {
        return;
      }
      let tracker = dart.nullCheck(this[_velocityTrackers][$_get](pointer));
      let estimate = tracker.getVelocityEstimate();
      let details = null;
      let debugReport = null;
      if (estimate == null) {
        debugReport = dart.fn(() => "Could not estimate velocity.", T.VoidToString());
      } else {
        details = this[_considerFling](estimate, tracker.kind);
        debugReport = details != null ? dart.fn(() => dart.str(estimate) + "; fling at " + dart.str(dart.nullCheck(details).velocity) + ".", T.VoidToString()) : dart.fn(() => dart.str(estimate) + "; judged to not be a fling.", T.VoidToString());
      }
      details == null ? details = new drag_details.DragEndDetails.new({primaryVelocity: 0.0}) : null;
      this.invokeCallback(T.void(), "onEnd", dart.fn(() => dart.nullCheck(this.onEnd)(dart.nullCheck(details)), T.VoidTovoid()), {debugReport: debugReport});
    }
    [_checkCancel]() {
      if (this.onCancel != null) {
        this.invokeCallback(T.void(), "onCancel", dart.nullCheck(this.onCancel));
      }
    }
    dispose() {
      this[_velocityTrackers][$clear]();
      super.dispose();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.EnumPropertyOfDragStartBehavior()).new("start behavior", this.dragStartBehavior));
    }
  };
  (monodrag.DragGestureRecognizer.new = function(opts) {
    let t$362;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[4] || CT.C4;
    let multitouchDragStrategy = opts && 'multitouchDragStrategy' in opts ? opts.multitouchDragStrategy : C[5] || CT.C5;
    let velocityTrackerBuilder = opts && 'velocityTrackerBuilder' in opts ? opts.velocityTrackerBuilder : C[6] || CT.C6;
    let onlyAcceptDragOnThreshold = opts && 'onlyAcceptDragOnThreshold' in opts ? opts.onlyAcceptDragOnThreshold : false;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onDown] = null;
    this[onStart] = null;
    this[onUpdate] = null;
    this[onEnd] = null;
    this[onCancel] = null;
    this[minFlingDistance] = null;
    this[minFlingVelocity] = null;
    this[maxFlingVelocity] = null;
    this[_state] = monodrag._DragState.ready;
    this[__DragGestureRecognizer__initialPosition] = null;
    this[__DragGestureRecognizer__pendingDragOffset] = null;
    this[_lastPendingEventTimestamp] = null;
    this[_initialButtons] = null;
    this[_lastTransform] = null;
    this[__DragGestureRecognizer__globalDistanceMoved] = null;
    this[_hasDragThresholdBeenMet] = false;
    this[_velocityTrackers] = new (G.IdentityMapOfint$VelocityTracker()).new();
    this[_acceptedActivePointers] = G.JSArrayOfint().of([]);
    this[dragStartBehavior$] = dragStartBehavior;
    this[multitouchDragStrategy$] = multitouchDragStrategy;
    this[velocityTrackerBuilder$] = velocityTrackerBuilder;
    this[onlyAcceptDragOnThreshold$] = onlyAcceptDragOnThreshold;
    dart.global.Object.getPrototypeOf(monodrag.DragGestureRecognizer).new.call(this, {allowedButtonsFilter: (t$362 = allowedButtonsFilter, t$362 == null ? C[7] || CT.C7 : t$362), debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = monodrag.DragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.DragGestureRecognizer);
  dart.addRtiResources(monodrag.DragGestureRecognizer, ["flutter__src__gestures__monodrag|DragGestureRecognizer"]);
  dart.addTypeCaches(monodrag.DragGestureRecognizer);
  dart.setMethodSignature(monodrag.DragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    isPointerAllowed: T.PointerEventTobool(),
    [_addPointer]: T.PointerEventTovoid(),
    [_shouldTrackMoveEvent]: T.intTobool(),
    handleEvent: T.PointerEventTovoid(),
    didStopTrackingLastPointer: T.intTovoid(),
    [_giveUpPointer]: T.intTovoid(),
    [_checkDown]: T.VoidTovoid(),
    [_checkDrag]: T.intTovoid(),
    [_checkStart]: T.DurationNAndintTovoid(),
    [_checkUpdate]: T.__Tovoid(),
    [_checkEnd]: T.intTovoid(),
    [_checkCancel]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(monodrag.DragGestureRecognizer))));
  dart.setStaticMethodSignature(monodrag.DragGestureRecognizer, () => ['_defaultBuilder', '_defaultButtonAcceptBehavior']);
  dart.setGetterSignature(monodrag.DragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_initialPosition]: T.OffsetPair(),
    [_pendingDragOffset]: T.OffsetPair(),
    debugLastPendingEventTimestamp: T.DurationN(),
    [_globalDistanceMoved]: T.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(monodrag.DragGestureRecognizer))));
  dart.setSetterSignature(monodrag.DragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_initialPosition]: T.OffsetPair(),
    [_pendingDragOffset]: T.OffsetPair(),
    [_globalDistanceMoved]: T.double()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(monodrag.DragGestureRecognizer))));
  dart.setLibraryUri(monodrag.DragGestureRecognizer, I[0]);
  dart.setFieldSignature(monodrag.DragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    dragStartBehavior: {type: T.DragStartBehavior(), isConst: false, isFinal: false, libraryUri: I[3]},
    multitouchDragStrategy: {type: T.MultitouchDragStrategy(), isConst: false, isFinal: false, libraryUri: I[3]},
    onDown: {type: T.DragDownDetailsToNvoid(), isConst: false, isFinal: false},
    onStart: {type: T.DragStartDetailsToNvoid(), isConst: false, isFinal: false},
    onUpdate: {type: T.DragUpdateDetailsToNvoid(), isConst: false, isFinal: false},
    onEnd: {type: T.DragEndDetailsToNvoid(), isConst: false, isFinal: false},
    onCancel: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    minFlingDistance: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    minFlingVelocity: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    maxFlingVelocity: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    onlyAcceptDragOnThreshold: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    velocityTrackerBuilder: {type: T.PointerEventToVelocityTracker(), isConst: false, isFinal: false},
    [_state]: {type: T._DragState(), isConst: false, isFinal: false, libraryUri: I[0]},
    [__DragGestureRecognizer__initialPosition]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [__DragGestureRecognizer__pendingDragOffset]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_lastPendingEventTimestamp]: {type: T.DurationN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_initialButtons]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_lastTransform]: {type: T.Matrix4N(), isConst: false, isFinal: false, libraryUri: I[4]},
    [__DragGestureRecognizer__globalDistanceMoved]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_hasDragThresholdBeenMet]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_velocityTrackers]: {type: T.MapOfint$VelocityTracker(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_acceptedActivePointers]: {type: T.ListOfint(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(monodrag.DragGestureRecognizer))));
  monodrag.VerticalDragGestureRecognizer = class VerticalDragGestureRecognizer extends monodrag.DragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new monodrag.VerticalDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    isFlingGesture(estimate, kind) {
      let t$362, t$362$;
      let minVelocity = (t$362 = this.minFlingVelocity, t$362 == null ? 50 : t$362);
      let minDistance = (t$362$ = this.minFlingDistance, t$362$ == null ? events.computeHitSlop(kind, this.gestureSettings) : t$362$);
      return estimate.pixelsPerSecond.dy[$abs]() > minVelocity && estimate.offset.dy[$abs]() > minDistance;
    }
    [_considerFling](estimate, kind) {
      let t$362;
      if (!this.isFlingGesture(estimate, kind)) {
        return null;
      }
      let maxVelocity = (t$362 = this.maxFlingVelocity, t$362 == null ? 8000 : t$362);
      let dy = ui.clampDouble(estimate.pixelsPerSecond.dy, -maxVelocity, maxVelocity);
      return new drag_details.DragEndDetails.new({velocity: new velocity_tracker.Velocity.new({pixelsPerSecond: new ui.Offset.new(0.0, dy)}), primaryVelocity: dy});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind, deviceTouchSlop) {
      return this[_globalDistanceMoved][$abs]() > events.computeHitSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return new ui.Offset.new(0.0, delta.dy);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dy;
    }
    get debugDescription() {
      return "vertical drag";
    }
  };
  (monodrag.VerticalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(monodrag.VerticalDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = monodrag.VerticalDragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.VerticalDragGestureRecognizer);
  dart.addRtiResources(monodrag.VerticalDragGestureRecognizer, ["flutter__src__gestures__monodrag|VerticalDragGestureRecognizer"]);
  dart.addTypeCaches(monodrag.VerticalDragGestureRecognizer);
  dart.setMethodSignature(monodrag.VerticalDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    isFlingGesture: T.VelocityEstimateAndPointerDeviceKindTobool(),
    [_considerFling]: T.VelocityEstimateAndPointerDeviceKindToDragEndDetailsN(),
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindAnddoubleNTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodouble()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(monodrag.VerticalDragGestureRecognizer))));
  dart.setGetterSignature(monodrag.VerticalDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(monodrag.VerticalDragGestureRecognizer))));
  dart.setLibraryUri(monodrag.VerticalDragGestureRecognizer, I[0]);
  monodrag.HorizontalDragGestureRecognizer = class HorizontalDragGestureRecognizer extends monodrag.DragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new monodrag.HorizontalDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    isFlingGesture(estimate, kind) {
      let t$362, t$362$;
      let minVelocity = (t$362 = this.minFlingVelocity, t$362 == null ? 50 : t$362);
      let minDistance = (t$362$ = this.minFlingDistance, t$362$ == null ? events.computeHitSlop(kind, this.gestureSettings) : t$362$);
      return estimate.pixelsPerSecond.dx[$abs]() > minVelocity && estimate.offset.dx[$abs]() > minDistance;
    }
    [_considerFling](estimate, kind) {
      let t$362;
      if (!this.isFlingGesture(estimate, kind)) {
        return null;
      }
      let maxVelocity = (t$362 = this.maxFlingVelocity, t$362 == null ? 8000 : t$362);
      let dx = ui.clampDouble(estimate.pixelsPerSecond.dx, -maxVelocity, maxVelocity);
      return new drag_details.DragEndDetails.new({velocity: new velocity_tracker.Velocity.new({pixelsPerSecond: new ui.Offset.new(dx, 0.0)}), primaryVelocity: dx});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind, deviceTouchSlop) {
      return this[_globalDistanceMoved][$abs]() > events.computeHitSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return new ui.Offset.new(delta.dx, 0.0);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dx;
    }
    get debugDescription() {
      return "horizontal drag";
    }
  };
  (monodrag.HorizontalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(monodrag.HorizontalDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = monodrag.HorizontalDragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.HorizontalDragGestureRecognizer);
  dart.addRtiResources(monodrag.HorizontalDragGestureRecognizer, ["flutter__src__gestures__monodrag|HorizontalDragGestureRecognizer"]);
  dart.addTypeCaches(monodrag.HorizontalDragGestureRecognizer);
  dart.setMethodSignature(monodrag.HorizontalDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    isFlingGesture: T.VelocityEstimateAndPointerDeviceKindTobool(),
    [_considerFling]: T.VelocityEstimateAndPointerDeviceKindToDragEndDetailsN(),
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindAnddoubleNTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodouble()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(monodrag.HorizontalDragGestureRecognizer))));
  dart.setGetterSignature(monodrag.HorizontalDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(monodrag.HorizontalDragGestureRecognizer))));
  dart.setLibraryUri(monodrag.HorizontalDragGestureRecognizer, I[0]);
  monodrag.PanGestureRecognizer = class PanGestureRecognizer extends monodrag.DragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new monodrag.PanGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    isFlingGesture(estimate, kind) {
      let t$362, t$362$;
      let minVelocity = (t$362 = this.minFlingVelocity, t$362 == null ? 50 : t$362);
      let minDistance = (t$362$ = this.minFlingDistance, t$362$ == null ? events.computeHitSlop(kind, this.gestureSettings) : t$362$);
      return estimate.pixelsPerSecond.distanceSquared > minVelocity * minVelocity && estimate.offset.distanceSquared > minDistance * minDistance;
    }
    [_considerFling](estimate, kind) {
      let t$362, t$362$;
      if (!this.isFlingGesture(estimate, kind)) {
        return null;
      }
      let velocity = new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond}).clampMagnitude((t$362 = this.minFlingVelocity, t$362 == null ? 50 : t$362), (t$362$ = this.maxFlingVelocity, t$362$ == null ? 8000 : t$362$));
      return new drag_details.DragEndDetails.new({velocity: velocity});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind, deviceTouchSlop) {
      return this[_globalDistanceMoved][$abs]() > events.computePanSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return delta;
    }
    [_getPrimaryValueFromOffset](value) {
      return null;
    }
    get debugDescription() {
      return "pan";
    }
  };
  (monodrag.PanGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(monodrag.PanGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = monodrag.PanGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.PanGestureRecognizer);
  dart.addRtiResources(monodrag.PanGestureRecognizer, ["flutter__src__gestures__monodrag|PanGestureRecognizer"]);
  dart.addTypeCaches(monodrag.PanGestureRecognizer);
  dart.setMethodSignature(monodrag.PanGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    isFlingGesture: T.VelocityEstimateAndPointerDeviceKindTobool(),
    [_considerFling]: T.VelocityEstimateAndPointerDeviceKindToDragEndDetailsN(),
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindAnddoubleNTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodoubleN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(monodrag.PanGestureRecognizer))));
  dart.setGetterSignature(monodrag.PanGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(monodrag.PanGestureRecognizer))));
  dart.setLibraryUri(monodrag.PanGestureRecognizer, I[0]);
  dart.moduleConstCaches.set("packages/flutter/src/gestures/monodrag.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__monodrag|_DragState":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomStartEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomUpdateEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomUpdateEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomUpdateEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomEndEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|DragStartBehavior":{"core|_Enum":[],"core|Enum":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__gestures__recognizer|MultitouchDragStrategy":{"core|_Enum":[],"core|Enum":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"flutter__src__gestures__monodrag|DragGestureRecognizer":{"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__monodrag|VerticalDragGestureRecognizer":{"flutter__src__gestures__monodrag|DragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__monodrag|HorizontalDragGestureRecognizer":{"flutter__src__gestures__monodrag|DragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__monodrag|PanGestureRecognizer":{"flutter__src__gestures__monodrag|DragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/monodrag.dart", {
    "package:flutter/src/gestures/monodrag.dart": monodrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["monodrag.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/monodrag.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__monodrag: monodrag
  };
}));

//# sourceMappingURL=monodrag.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/multidrag.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/events.dart'], (function load__packages__flutter__src__gestures__multidrag_dart(dart_sdk, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__events$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  var multidrag = Object.create(dart.library);
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    MultiDragPointerState: () => (T.MultiDragPointerState = dart.constFn(dart_rti.findType("flutter__src__gestures__multidrag|MultiDragPointerState")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart_rti.findType("ui|Offset?")))(),
    GestureArenaEntryTovoid: () => (T.GestureArenaEntryTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__arena|GestureArenaEntry)")))(),
    GestureDispositionTovoid: () => (T.GestureDispositionTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__arena|GestureDisposition)")))(),
    PointerMoveEventTovoid: () => (T.PointerMoveEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerMoveEvent)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    DragTovoid: () => (T.DragTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag|Drag)")))(),
    DeviceGestureSettingsN: () => (T.DeviceGestureSettingsN = dart.constFn(dart_rti.findType("flutter__src__gestures__gesture_settings|DeviceGestureSettings?")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    VelocityTracker: () => (T.VelocityTracker = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|VelocityTracker")))(),
    PointerDeviceKind: () => (T.PointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind")))(),
    DragN: () => (T.DragN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag|Drag?")))(),
    DurationN: () => (T.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    GestureArenaEntryN: () => (T.GestureArenaEntryN = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaEntry?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    intTobool: () => (T.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerCancelEvent: () => (T.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    OffsetToDragN: () => (T.OffsetToDragN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag|Drag?(ui|Offset)")))(),
    VoidToDragN: () => (T.VoidToDragN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag|Drag?()")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    OffsetAndintToDragN: () => (T.OffsetAndintToDragN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag|Drag?(ui|Offset,core|int)")))(),
    OffsetToNDragN: () => (T.OffsetToNDragN = dart.constFn(dart_rti.findType("flutter__src__gestures__drag|Drag?(ui|Offset)?")))(),
    MapNOfint$MultiDragPointerState: () => (T.MapNOfint$MultiDragPointerState = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__multidrag|MultiDragPointerState>?")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__drag|Drag?(ui|Offset))")))(),
    PointerDownEventToMultiDragPointerState: () => (T.PointerDownEventToMultiDragPointerState = dart.constFn(dart_rti.findType("flutter__src__gestures__multidrag|MultiDragPointerState(flutter__src__gestures__events|PointerDownEvent)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))()
  };
  var G = {
    IdentityMapOfint$MultiDragPointerState: () => (G.IdentityMapOfint$MultiDragPointerState = dart.constFn(_js_helper.IdentityMap$(T.int(), T.MultiDragPointerState())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(multidrag.MultiDragGestureRecognizer._defaultButtonAcceptBehavior, T.intTobool());
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 500000
      }, core.Duration.prototype));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/multidrag.dart",
    "package:flutter/src/gestures/multidrag.dart",
    "package:flutter/src/gestures/gesture_settings.dart",
    "dart:ui",
    "package:flutter/src/gestures/velocity_tracker.dart",
    "package:flutter/src/gestures/drag.dart",
    "dart:core",
    "package:flutter/src/gestures/arena.dart",
    "dart:async"
  ];
  var gestureSettings$ = dart.privateName(multidrag, "MultiDragPointerState.gestureSettings");
  var initialPosition$ = dart.privateName(multidrag, "MultiDragPointerState.initialPosition");
  var kind$ = dart.privateName(multidrag, "MultiDragPointerState.kind");
  var _client = dart.privateName(multidrag, "_client");
  var _pendingDelta = dart.privateName(multidrag, "_pendingDelta");
  var _lastPendingEventTimestamp = dart.privateName(multidrag, "_lastPendingEventTimestamp");
  var _arenaEntry = dart.privateName(multidrag, "_arenaEntry");
  var _velocityTracker = dart.privateName(multidrag, "_velocityTracker");
  var _setArenaEntry = dart.privateName(multidrag, "_setArenaEntry");
  var _move = dart.privateName(multidrag, "_move");
  var _startDrag = dart.privateName(multidrag, "_startDrag");
  var _up = dart.privateName(multidrag, "_up");
  var _cancel = dart.privateName(multidrag, "_cancel");
  multidrag.MultiDragPointerState = class MultiDragPointerState extends core.Object {
    get gestureSettings() {
      return this[gestureSettings$];
    }
    set gestureSettings(value) {
      super.gestureSettings = value;
    }
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get pendingDelta() {
      return this[_pendingDelta];
    }
    [_setArenaEntry](entry) {
      if (!(this[_arenaEntry] == null)) dart.assertFailed(null, I[0], 79, 12, "_arenaEntry == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 80, 12, "pendingDelta != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 81, 12, "_client == null");
      this[_arenaEntry] = entry;
    }
    resolve(disposition) {
      dart.nullCheck(this[_arenaEntry]).resolve(disposition);
    }
    [_move](event) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 93, 12, "_arenaEntry != null");
      if (!event.synthesized) {
        this[_velocityTracker].addPosition(event.timeStamp, event.position);
      }
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 98, 14, "pendingDelta == null");
        dart.nullCheck(this[_client]).update(new drag_details.DragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.delta, globalPosition: event.position}));
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 106, 14, "pendingDelta != null");
        this[_pendingDelta] = dart.nullCheck(this[_pendingDelta])['+'](event.delta);
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this.checkForResolutionAfterMove();
      }
    }
    checkForResolutionAfterMove() {
    }
    rejected() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 132, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 133, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 134, 12, "pendingDelta != null");
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_arenaEntry] = null;
    }
    [_startDrag](client) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 141, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 142, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 143, 12, "pendingDelta != null");
      this[_client] = client;
      let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: this[_lastPendingEventTimestamp], delta: dart.nullCheck(this.pendingDelta), globalPosition: this.initialPosition});
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      dart.nullCheck(this[_client]).update(details);
    }
    [_up]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 157, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 159, 14, "pendingDelta == null");
        let details = new drag_details.DragEndDetails.new({velocity: this[_velocityTracker].getVelocity()});
        let client = dart.nullCheck(this[_client]);
        this[_client] = null;
        client.end(details);
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 166, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    [_cancel]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 173, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 175, 14, "pendingDelta == null");
        let client = dart.nullCheck(this[_client]);
        this[_client] = null;
        client.cancel();
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 181, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    dispose() {
      let t$360;
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      t$360 = this[_arenaEntry];
      t$360 == null ? null : t$360.resolve(arena.GestureDisposition.rejected);
      this[_arenaEntry] = null;
      if (!dart.fn(() => {
        this[_pendingDelta] = null;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 198, 12, "() {\r\n      _pendingDelta = null;\r\n      return true;\r\n    }()");
    }
  };
  (multidrag.MultiDragPointerState.new = function(initialPosition, kind, gestureSettings) {
    this[_client] = null;
    this[_pendingDelta] = ui.Offset.zero;
    this[_lastPendingEventTimestamp] = null;
    this[_arenaEntry] = null;
    this[initialPosition$] = initialPosition;
    this[kind$] = kind;
    this[gestureSettings$] = gestureSettings;
    this[_velocityTracker] = new velocity_tracker.VelocityTracker.withKind(kind);
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/gestures.dart", className: dart.strSafe(dart_rti.createRuntimeType(T.MultiDragPointerState())), object: this});
    }
  }).prototype = multidrag.MultiDragPointerState.prototype;
  dart.addTypeTests(multidrag.MultiDragPointerState);
  dart.addRtiResources(multidrag.MultiDragPointerState, ["flutter__src__gestures__multidrag|MultiDragPointerState"]);
  dart.addTypeCaches(multidrag.MultiDragPointerState);
  dart.setMethodSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({
    [_setArenaEntry]: T.GestureArenaEntryTovoid(),
    resolve: T.GestureDispositionTovoid(),
    [_move]: T.PointerMoveEventTovoid(),
    checkForResolutionAfterMove: T.VoidTovoid(),
    rejected: T.VoidTovoid(),
    [_startDrag]: T.DragTovoid(),
    [_up]: T.VoidTovoid(),
    [_cancel]: T.VoidTovoid(),
    dispose: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  dart.setGetterSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({pendingDelta: T.OffsetN()}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  dart.setLibraryUri(multidrag.MultiDragPointerState, I[1]);
  dart.setFieldSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({
    gestureSettings: {type: T.DeviceGestureSettingsN(), isConst: false, isFinal: true, libraryUri: I[2]},
    initialPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_velocityTracker]: {type: T.VelocityTracker(), isConst: false, isFinal: true, libraryUri: I[4]},
    kind: {type: T.PointerDeviceKind(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_client]: {type: T.DragN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_pendingDelta]: {type: T.OffsetN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_lastPendingEventTimestamp]: {type: T.DurationN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_arenaEntry]: {type: T.GestureArenaEntryN(), isConst: false, isFinal: false, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  var onStart = dart.privateName(multidrag, "MultiDragGestureRecognizer.onStart");
  var _pointers = dart.privateName(multidrag, "_pointers");
  var _handleEvent = dart.privateName(multidrag, "_handleEvent");
  var _is = dart.privateName(dart_rti, "_is");
  var _removeState = dart.privateName(multidrag, "_removeState");
  multidrag.MultiDragGestureRecognizer = class MultiDragGestureRecognizer extends recognizer.GestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    static _defaultButtonAcceptBehavior(buttons) {
      return buttons === 1;
    }
    addAllowedPointer(event) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 248, 12, "_pointers != null");
      if (!!dart.nullCheck(this[_pointers])[$containsKey](event.pointer)) dart.assertFailed(null, I[0], 249, 12, "!_pointers!.containsKey(event.pointer)");
      let state = this.createNewPointerState(event);
      dart.nullCheck(this[_pointers])[$_set](event.pointer, state);
      binding.GestureBinding.instance.pointerRouter.addRoute(event.pointer, dart.bind(this, _handleEvent));
      state[_setArenaEntry](binding.GestureBinding.instance.gestureArena.add(event.pointer, this));
    }
    [_handleEvent](event) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 263, 12, "_pointers != null");
      if (!dart.nullCheck(this[_pointers])[$containsKey](event.pointer)) dart.assertFailed(null, I[0], 264, 12, "_pointers!.containsKey(event.pointer)");
      let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](event.pointer));
      if (T.PointerMoveEvent()[_is](event)) {
        state[_move](event);
      } else if (T.PointerUpEvent()[_is](event)) {
        if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, I[0], 270, 14, "event.delta == Offset.zero");
        state[_up]();
        this[_removeState](event.pointer);
      } else if (T.PointerCancelEvent()[_is](event)) {
        if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, I[0], 275, 14, "event.delta == Offset.zero");
        state[_cancel]();
        this[_removeState](event.pointer);
      } else if (!T.PointerDownEvent()[_is](event)) {
        if (!false) dart.assertFailed(null, I[0], 283, 14, "false");
      }
    }
    acceptGesture(pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 289, 12, "_pointers != null");
      let state = dart.nullCheck(this[_pointers])[$_get](pointer);
      if (state == null) {
        return;
      }
      state.accepted(dart.fn(initialPosition => this[_startDrag](initialPosition, pointer), T.OffsetToDragN()));
    }
    [_startDrag](initialPosition, pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 298, 12, "_pointers != null");
      let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](pointer));
      if (!(state[_pendingDelta] != null)) dart.assertFailed(null, I[0], 300, 12, "state._pendingDelta != null");
      let drag = null;
      if (this.onStart != null) {
        drag = this.invokeCallback(T.DragN(), "onStart", dart.fn(() => dart.nullCheck(this.onStart)(initialPosition), T.VoidToDragN()));
      }
      if (drag != null) {
        state[_startDrag](drag);
      } else {
        this[_removeState](pointer);
      }
      return drag;
    }
    rejectGesture(pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 315, 12, "_pointers != null");
      if (dart.nullCheck(this[_pointers])[$containsKey](pointer)) {
        let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](pointer));
        state.rejected();
        this[_removeState](pointer);
      }
    }
    [_removeState](pointer) {
      if (this[_pointers] == null) {
        return;
      }
      if (!dart.nullCheck(this[_pointers])[$containsKey](pointer)) dart.assertFailed(null, I[0], 329, 12, "_pointers!.containsKey(pointer)");
      binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, _handleEvent));
      dart.nullCheck(dart.nullCheck(this[_pointers])[$remove](pointer)).dispose();
    }
    dispose() {
      dart.nullCheck(this[_pointers])[$keys][$toList]()[$forEach](dart.bind(this, _removeState));
      if (!dart.nullCheck(this[_pointers])[$isEmpty]) dart.assertFailed(null, I[0], 337, 12, "_pointers!.isEmpty");
      this[_pointers] = null;
      super.dispose();
    }
  };
  (multidrag.MultiDragGestureRecognizer.new = function(opts) {
    let t$360;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onStart] = null;
    this[_pointers] = new (G.IdentityMapOfint$MultiDragPointerState()).new();
    dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer).new.call(this, {allowedButtonsFilter: (t$360 = allowedButtonsFilter, t$360 == null ? C[0] || CT.C0 : t$360), debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = multidrag.MultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.MultiDragGestureRecognizer);
  dart.addRtiResources(multidrag.MultiDragGestureRecognizer, ["flutter__src__gestures__multidrag|MultiDragGestureRecognizer"]);
  dart.addTypeCaches(multidrag.MultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.MultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_handleEvent]: T.PointerEventTovoid(),
    acceptGesture: T.intTovoid(),
    [_startDrag]: T.OffsetAndintToDragN(),
    rejectGesture: T.intTovoid(),
    [_removeState]: T.intTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer))));
  dart.setStaticMethodSignature(multidrag.MultiDragGestureRecognizer, () => ['_defaultButtonAcceptBehavior']);
  dart.setLibraryUri(multidrag.MultiDragGestureRecognizer, I[1]);
  dart.setFieldSignature(multidrag.MultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onStart: {type: T.OffsetToNDragN(), isConst: false, isFinal: false},
    [_pointers]: {type: T.MapNOfint$MultiDragPointerState(), isConst: false, isFinal: false, libraryUri: I[6]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer))));
  multidrag._ImmediatePointerState = class _ImmediatePointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._ImmediatePointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 348, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).distance > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._ImmediatePointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._ImmediatePointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._ImmediatePointerState.prototype;
  dart.addTypeTests(multidrag._ImmediatePointerState);
  dart.addRtiResources(multidrag._ImmediatePointerState, ["flutter__src__gestures__multidrag|_ImmediatePointerState"]);
  dart.addTypeCaches(multidrag._ImmediatePointerState);
  dart.setMethodSignature(multidrag._ImmediatePointerState, () => dart.global.Object.setPrototypeOf({accepted: T.FnTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._ImmediatePointerState))));
  dart.setLibraryUri(multidrag._ImmediatePointerState, I[1]);
  multidrag.ImmediateMultiDragGestureRecognizer = class ImmediateMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.ImmediateMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._ImmediatePointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "multidrag";
    }
  };
  (multidrag.ImmediateMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.ImmediateMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.addRtiResources(multidrag.ImmediateMultiDragGestureRecognizer, ["flutter__src__gestures__multidrag|ImmediateMultiDragGestureRecognizer"]);
  dart.addTypeCaches(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: T.PointerDownEventToMultiDragPointerState()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.ImmediateMultiDragGestureRecognizer, I[1]);
  multidrag._HorizontalPointerState = class _HorizontalPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._HorizontalPointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 401, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).dx[$abs]() > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._HorizontalPointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._HorizontalPointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._HorizontalPointerState.prototype;
  dart.addTypeTests(multidrag._HorizontalPointerState);
  dart.addRtiResources(multidrag._HorizontalPointerState, ["flutter__src__gestures__multidrag|_HorizontalPointerState"]);
  dart.addTypeCaches(multidrag._HorizontalPointerState);
  dart.setMethodSignature(multidrag._HorizontalPointerState, () => dart.global.Object.setPrototypeOf({accepted: T.FnTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._HorizontalPointerState))));
  dart.setLibraryUri(multidrag._HorizontalPointerState, I[1]);
  multidrag.HorizontalMultiDragGestureRecognizer = class HorizontalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.HorizontalMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._HorizontalPointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "horizontal multidrag";
    }
  };
  (multidrag.HorizontalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.HorizontalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.addRtiResources(multidrag.HorizontalMultiDragGestureRecognizer, ["flutter__src__gestures__multidrag|HorizontalMultiDragGestureRecognizer"]);
  dart.addTypeCaches(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: T.PointerDownEventToMultiDragPointerState()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.HorizontalMultiDragGestureRecognizer, I[1]);
  multidrag._VerticalPointerState = class _VerticalPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._VerticalPointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 454, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).dy[$abs]() > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._VerticalPointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._VerticalPointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._VerticalPointerState.prototype;
  dart.addTypeTests(multidrag._VerticalPointerState);
  dart.addRtiResources(multidrag._VerticalPointerState, ["flutter__src__gestures__multidrag|_VerticalPointerState"]);
  dart.addTypeCaches(multidrag._VerticalPointerState);
  dart.setMethodSignature(multidrag._VerticalPointerState, () => dart.global.Object.setPrototypeOf({accepted: T.FnTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._VerticalPointerState))));
  dart.setLibraryUri(multidrag._VerticalPointerState, I[1]);
  multidrag.VerticalMultiDragGestureRecognizer = class VerticalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.VerticalMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._VerticalPointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "vertical multidrag";
    }
  };
  (multidrag.VerticalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.VerticalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.VerticalMultiDragGestureRecognizer);
  dart.addRtiResources(multidrag.VerticalMultiDragGestureRecognizer, ["flutter__src__gestures__multidrag|VerticalMultiDragGestureRecognizer"]);
  dart.addTypeCaches(multidrag.VerticalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.VerticalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: T.PointerDownEventToMultiDragPointerState()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.VerticalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.VerticalMultiDragGestureRecognizer, I[1]);
  var _timer = dart.privateName(multidrag, "_timer");
  var _starter = dart.privateName(multidrag, "_starter");
  var _delayPassed = dart.privateName(multidrag, "_delayPassed");
  var _ensureTimerStopped = dart.privateName(multidrag, "_ensureTimerStopped");
  multidrag._DelayedPointerState = class _DelayedPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, delay, kind, gestureSettings) {
      return new multidrag._DelayedPointerState.new(initialPosition, delay, kind, gestureSettings);
    }
    [_delayPassed]() {
      if (!(this[_timer] != null)) dart.assertFailed(null, I[0], 510, 12, "_timer != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 511, 12, "pendingDelta != null");
      if (!(dart.nullCheck(this.pendingDelta).distance <= events.computeHitSlop(this.kind, this.gestureSettings))) dart.assertFailed(null, I[0], 512, 12, "pendingDelta!.distance <= computeHitSlop(kind, gestureSettings)");
      this[_timer] = null;
      if (this[_starter] != null) {
        dart.nullCheck(this[_starter])(this.initialPosition);
        this[_starter] = null;
      } else {
        this.resolve(arena.GestureDisposition.accepted);
      }
      if (!(this[_starter] == null)) dart.assertFailed(null, I[0], 520, 12, "_starter == null");
    }
    [_ensureTimerStopped]() {
      let t$360;
      t$360 = this[_timer];
      t$360 == null ? null : t$360.cancel();
      this[_timer] = null;
    }
    accepted(starter) {
      if (!(this[_starter] == null)) dart.assertFailed(null, I[0], 530, 12, "_starter == null");
      if (this[_timer] == null) {
        starter(this.initialPosition);
      } else {
        this[_starter] = starter;
      }
    }
    checkForResolutionAfterMove() {
      if (this[_timer] == null) {
        if (!(this[_starter] != null)) dart.assertFailed(null, I[0], 546, 14, "_starter != null");
        return;
      }
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 549, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).distance > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.rejected);
        this[_ensureTimerStopped]();
      }
    }
    dispose() {
      this[_ensureTimerStopped]();
      super.dispose();
    }
  };
  (multidrag._DelayedPointerState.new = function(initialPosition, delay, kind, gestureSettings) {
    this[_timer] = null;
    this[_starter] = null;
    dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState).new.call(this, initialPosition, kind, gestureSettings);
    this[_timer] = async.Timer.new(delay, dart.bind(this, _delayPassed));
  }).prototype = multidrag._DelayedPointerState.prototype;
  dart.addTypeTests(multidrag._DelayedPointerState);
  dart.addRtiResources(multidrag._DelayedPointerState, ["flutter__src__gestures__multidrag|_DelayedPointerState"]);
  dart.addTypeCaches(multidrag._DelayedPointerState);
  dart.setMethodSignature(multidrag._DelayedPointerState, () => dart.global.Object.setPrototypeOf({
    [_delayPassed]: T.VoidTovoid(),
    [_ensureTimerStopped]: T.VoidTovoid(),
    accepted: T.FnTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState))));
  dart.setLibraryUri(multidrag._DelayedPointerState, I[1]);
  dart.setFieldSignature(multidrag._DelayedPointerState, () => dart.global.Object.setPrototypeOf({
    [_timer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[8]},
    [_starter]: {type: T.OffsetToNDragN(), isConst: false, isFinal: false}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState))));
  var delay$ = dart.privateName(multidrag, "DelayedMultiDragGestureRecognizer.delay");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  multidrag.DelayedMultiDragGestureRecognizer = class DelayedMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      super.delay = value;
    }
    static ['_#new#tearOff'](opts) {
      let delay = opts && 'delay' in opts ? opts.delay : C[1] || CT.C1;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.DelayedMultiDragGestureRecognizer.new({delay: delay, debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._DelayedPointerState.new(event.position, this.delay, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "long multidrag";
    }
  };
  (multidrag.DelayedMultiDragGestureRecognizer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : C[1] || CT.C1;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[delay$] = delay;
    dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.DelayedMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.DelayedMultiDragGestureRecognizer);
  dart.addRtiResources(multidrag.DelayedMultiDragGestureRecognizer, ["flutter__src__gestures__multidrag|DelayedMultiDragGestureRecognizer"]);
  dart.addTypeCaches(multidrag.DelayedMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: T.PointerDownEventToMultiDragPointerState()}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.DelayedMultiDragGestureRecognizer, I[1]);
  dart.setFieldSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({delay: {type: T.Duration(), isConst: false, isFinal: true, libraryUri: I[6]}}, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.moduleConstCaches.set("packages/flutter/src/gestures/multidrag.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__gestures__arena|GestureDisposition":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"flutter__src__gestures__multidrag|MultiDragGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multidrag|_ImmediatePointerState":{"flutter__src__gestures__multidrag|MultiDragPointerState":[]},"flutter__src__gestures__multidrag|ImmediateMultiDragGestureRecognizer":{"flutter__src__gestures__multidrag|MultiDragGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multidrag|_HorizontalPointerState":{"flutter__src__gestures__multidrag|MultiDragPointerState":[]},"flutter__src__gestures__multidrag|HorizontalMultiDragGestureRecognizer":{"flutter__src__gestures__multidrag|MultiDragGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multidrag|_VerticalPointerState":{"flutter__src__gestures__multidrag|MultiDragPointerState":[]},"flutter__src__gestures__multidrag|VerticalMultiDragGestureRecognizer":{"flutter__src__gestures__multidrag|MultiDragGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multidrag|_DelayedPointerState":{"flutter__src__gestures__multidrag|MultiDragPointerState":[]},"flutter__src__gestures__multidrag|DelayedMultiDragGestureRecognizer":{"flutter__src__gestures__multidrag|MultiDragGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/multidrag.dart", {
    "package:flutter/src/gestures/multidrag.dart": multidrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multidrag.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/multidrag.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multidrag: multidrag
  };
}));

//# sourceMappingURL=multidrag.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/multitap.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/constants.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/events.dart'], (function load__packages__flutter__src__gestures__multitap_dart(dart_sdk, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__constants$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__events$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const constants = packages__flutter__src__gestures__constants$46dart.src__gestures__constants;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  var multitap = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $last = dartx.last;
  var $length = dartx.length;
  var $clear = dartx.clear;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    FnAndMatrix4NTovoid: () => (T.FnAndMatrix4NTovoid = dart.constFn(dart_rti.findType("~(~(flutter__src__gestures__events|PointerEvent),vector_math__vector_math_64|Matrix4?)")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(~(flutter__src__gestures__events|PointerEvent))")))(),
    PointerEventAnddoubleTobool: () => (T.PointerEventAnddoubleTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerEvent,core|double)")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    PointerDownEventTobool: () => (T.PointerDownEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerDownEvent)")))(),
    DeviceGestureSettingsN: () => (T.DeviceGestureSettingsN = dart.constFn(dart_rti.findType("flutter__src__gestures__gesture_settings|DeviceGestureSettings?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    GestureArenaEntry: () => (T.GestureArenaEntry = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaEntry")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    _CountdownZoned: () => (T._CountdownZoned = dart.constFn(dart_rti.findType("flutter__src__gestures__multitap|_CountdownZoned")))(),
    _TapTracker: () => (T._TapTracker = dart.constFn(dart_rti.findType("flutter__src__gestures__multitap|_TapTracker")))(),
    intTobool: () => (T.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerCancelEvent: () => (T.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerDownEventTovoid: () => (T.PointerDownEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerDownEvent)")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    _TapTrackerTovoid: () => (T._TapTrackerTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__multitap|_TapTracker)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    TapDownDetailsToNvoid: () => (T.TapDownDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap|TapDownDetails)?")))(),
    VoidToNvoid: () => (T.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))(),
    _TapTrackerN: () => (T._TapTrackerN = dart.constFn(dart_rti.findType("flutter__src__gestures__multitap|_TapTracker?")))(),
    MapOfint$_TapTracker: () => (T.MapOfint$_TapTracker = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__multitap|_TapTracker>")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    MultiTapGestureRecognizer: () => (T.MultiTapGestureRecognizer = dart.constFn(dart_rti.findType("flutter__src__gestures__multitap|MultiTapGestureRecognizer")))(),
    OffsetPair: () => (T.OffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair")))(),
    OffsetPairN: () => (T.OffsetPairN = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair?")))(),
    _TapGesture: () => (T._TapGesture = dart.constFn(dart_rti.findType("flutter__src__gestures__multitap|_TapGesture")))(),
    intAndOffsetPairTovoid: () => (T.intAndOffsetPairTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__recognizer|OffsetPair)")))(),
    intAndTapDownDetailsToNvoid: () => (T.intAndTapDownDetailsToNvoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__tap|TapDownDetails)?")))(),
    intAndTapUpDetailsToNvoid: () => (T.intAndTapUpDetailsToNvoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__tap|TapUpDetails)?")))(),
    intToNvoid: () => (T.intToNvoid = dart.constFn(dart_rti.findType("~(core|int)?")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    MapOfint$_TapGesture: () => (T.MapOfint$_TapGesture = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__multitap|_TapGesture>")))(),
    PointerDeviceKind: () => (T.PointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind")))(),
    PointerDeviceKindN: () => (T.PointerDeviceKindN = dart.constFn(dart_rti.findType("ui|PointerDeviceKind?")))(),
    GestureDisposition: () => (T.GestureDisposition = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureDisposition")))(),
    _TapTrackerAndPointerDownEventTobool: () => (T._TapTrackerAndPointerDownEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__multitap|_TapTracker,flutter__src__gestures__events|PointerDownEvent)")))(),
    PointerUpEventAnd_TapTrackerTovoid: () => (T.PointerUpEventAnd_TapTrackerTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerUpEvent,flutter__src__gestures__multitap|_TapTracker)")))(),
    SerialTapDownDetailsToNvoid: () => (T.SerialTapDownDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__multitap|SerialTapDownDetails)?")))(),
    SerialTapCancelDetailsToNvoid: () => (T.SerialTapCancelDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__multitap|SerialTapCancelDetails)?")))(),
    SerialTapUpDetailsToNvoid: () => (T.SerialTapUpDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__multitap|SerialTapUpDetails)?")))(),
    ListOf_TapTracker: () => (T.ListOf_TapTracker = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__multitap|_TapTracker>")))(),
    MapOfint$GestureDisposition: () => (T.MapOfint$GestureDisposition = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__arena|GestureDisposition>")))()
  };
  var G = {
    IdentityMapOfint$_TapTracker: () => (G.IdentityMapOfint$_TapTracker = dart.constFn(_js_helper.IdentityMap$(T.int(), T._TapTracker())))(),
    IdentityMapOfint$_TapGesture: () => (G.IdentityMapOfint$_TapGesture = dart.constFn(_js_helper.IdentityMap$(T.int(), T._TapGesture())))(),
    ListOf_TapGesture: () => (G.ListOf_TapGesture = dart.constFn(core.List$(T._TapGesture())))(),
    JSArrayOf_TapTracker: () => (G.JSArrayOf_TapTracker = dart.constFn(_interceptors.JSArray$(T._TapTracker())))(),
    IdentityMapOfint$GestureDisposition: () => (G.IdentityMapOfint$GestureDisposition = dart.constFn(_js_helper.IdentityMap$(T.int(), T.GestureDisposition())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(multitap.DoubleTapGestureRecognizer._defaultButtonAcceptBehavior, T.intTobool());
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 0
      }, core.Duration.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Offset.prototype));
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/gestures/multitap.dart",
    "dart:core",
    "package:flutter/src/gestures/gesture_settings.dart",
    "package:flutter/src/gestures/arena.dart",
    "dart:ui",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/multitap.dart",
    "dart:async",
    "package:flutter/src/gestures/recognizer.dart"
  ];
  var _timeout = dart.privateName(multitap, "_timeout");
  var _onTimeout = dart.privateName(multitap, "_onTimeout");
  multitap._CountdownZoned = class _CountdownZoned extends core.Object {
    static ['_#new#tearOff'](opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      return new multitap._CountdownZoned.new({duration: duration});
    }
    get timeout() {
      return this[_timeout];
    }
    [_onTimeout]() {
      this[_timeout] = true;
    }
  };
  (multitap._CountdownZoned.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[_timeout] = false;
    async.Timer.new(duration, dart.bind(this, _onTimeout));
  }).prototype = multitap._CountdownZoned.prototype;
  dart.addTypeTests(multitap._CountdownZoned);
  dart.addRtiResources(multitap._CountdownZoned, ["flutter__src__gestures__multitap|_CountdownZoned"]);
  dart.addTypeCaches(multitap._CountdownZoned);
  dart.setMethodSignature(multitap._CountdownZoned, () => dart.global.Object.setPrototypeOf({[_onTimeout]: T.VoidTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(multitap._CountdownZoned))));
  dart.setGetterSignature(multitap._CountdownZoned, () => dart.global.Object.setPrototypeOf({timeout: T.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(multitap._CountdownZoned))));
  dart.setLibraryUri(multitap._CountdownZoned, I[0]);
  dart.setFieldSignature(multitap._CountdownZoned, () => dart.global.Object.setPrototypeOf({[_timeout]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(multitap._CountdownZoned))));
  var _isTrackingPointer = dart.privateName(multitap, "_isTrackingPointer");
  var _initialGlobalPosition = dart.privateName(multitap, "_initialGlobalPosition");
  var _doubleTapMinTimeCountdown = dart.privateName(multitap, "_doubleTapMinTimeCountdown");
  multitap._TapTracker = class _TapTracker extends core.Object {
    static ['_#new#tearOff'](opts) {
      let event = opts && 'event' in opts ? opts.event : null;
      let entry = opts && 'entry' in opts ? opts.entry : null;
      let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
      let gestureSettings = opts && 'gestureSettings' in opts ? opts.gestureSettings : null;
      return new multitap._TapTracker.new({event: event, entry: entry, doubleTapMinTime: doubleTapMinTime, gestureSettings: gestureSettings});
    }
    startTrackingPointer(route, transform) {
      if (!this[_isTrackingPointer]) {
        this[_isTrackingPointer] = true;
        binding.GestureBinding.instance.pointerRouter.addRoute(this.pointer, route, transform);
      }
    }
    stopTrackingPointer(route) {
      if (this[_isTrackingPointer]) {
        this[_isTrackingPointer] = false;
        binding.GestureBinding.instance.pointerRouter.removeRoute(this.pointer, route);
      }
    }
    isWithinGlobalTolerance(event, tolerance) {
      let offset = event.position['-'](this[_initialGlobalPosition]);
      return offset.distance <= tolerance;
    }
    hasElapsedMinTime() {
      return this[_doubleTapMinTimeCountdown].timeout;
    }
    hasSameButton(event) {
      return event.buttons === this.initialButtons;
    }
  };
  (multitap._TapTracker.new = function(opts) {
    let event = opts && 'event' in opts ? opts.event : null;
    let entry = opts && 'entry' in opts ? opts.entry : null;
    let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
    let gestureSettings = opts && 'gestureSettings' in opts ? opts.gestureSettings : null;
    this[_isTrackingPointer] = false;
    this.entry = entry;
    this.gestureSettings = gestureSettings;
    this.pointer = event.pointer;
    this[_initialGlobalPosition] = event.position;
    this.initialButtons = event.buttons;
    this[_doubleTapMinTimeCountdown] = new multitap._CountdownZoned.new({duration: doubleTapMinTime});
    ;
  }).prototype = multitap._TapTracker.prototype;
  dart.addTypeTests(multitap._TapTracker);
  dart.addRtiResources(multitap._TapTracker, ["flutter__src__gestures__multitap|_TapTracker"]);
  dart.addTypeCaches(multitap._TapTracker);
  dart.setMethodSignature(multitap._TapTracker, () => dart.global.Object.setPrototypeOf({
    startTrackingPointer: T.FnAndMatrix4NTovoid(),
    stopTrackingPointer: T.FnTovoid(),
    isWithinGlobalTolerance: T.PointerEventAnddoubleTobool(),
    hasElapsedMinTime: T.VoidTobool(),
    hasSameButton: T.PointerDownEventTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multitap._TapTracker))));
  dart.setLibraryUri(multitap._TapTracker, I[0]);
  dart.setFieldSignature(multitap._TapTracker, () => dart.global.Object.setPrototypeOf({
    gestureSettings: {type: T.DeviceGestureSettingsN(), isConst: false, isFinal: true, libraryUri: I[2]},
    pointer: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    entry: {type: T.GestureArenaEntry(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_initialGlobalPosition]: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[4]},
    initialButtons: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_doubleTapMinTimeCountdown]: {type: T._CountdownZoned(), isConst: false, isFinal: true, libraryUri: I[0]},
    [_isTrackingPointer]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap._TapTracker))));
  var onDoubleTapDown = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTapDown");
  var onDoubleTap = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTap");
  var onDoubleTapCancel = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTapCancel");
  var _doubleTapTimer = dart.privateName(multitap, "_doubleTapTimer");
  var _firstTap = dart.privateName(multitap, "_firstTap");
  var _trackers = dart.privateName(multitap, "_trackers");
  var _reset = dart.privateName(multitap, "_reset");
  var _trackTap = dart.privateName(multitap, "_trackTap");
  var _stopDoubleTapTimer = dart.privateName(multitap, "_stopDoubleTapTimer");
  var _handleEvent = dart.privateName(multitap, "_handleEvent");
  var _is = dart.privateName(dart_rti, "_is");
  var _registerFirstTap = dart.privateName(multitap, "_registerFirstTap");
  var _registerSecondTap = dart.privateName(multitap, "_registerSecondTap");
  var _reject = dart.privateName(multitap, "_reject");
  var _freezeTracker = dart.privateName(multitap, "_freezeTracker");
  var _checkCancel = dart.privateName(multitap, "_checkCancel");
  var _clearTrackers = dart.privateName(multitap, "_clearTrackers");
  var _startDoubleTapTimer = dart.privateName(multitap, "_startDoubleTapTimer");
  var _checkUp = dart.privateName(multitap, "_checkUp");
  multitap.DoubleTapGestureRecognizer = class DoubleTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onDoubleTapDown() {
      return this[onDoubleTapDown];
    }
    set onDoubleTapDown(value) {
      this[onDoubleTapDown] = value;
    }
    get onDoubleTap() {
      return this[onDoubleTap];
    }
    set onDoubleTap(value) {
      this[onDoubleTap] = value;
    }
    get onDoubleTapCancel() {
      return this[onDoubleTapCancel];
    }
    set onDoubleTapCancel(value) {
      this[onDoubleTapCancel] = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multitap.DoubleTapGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    static _defaultButtonAcceptBehavior(buttons) {
      return buttons === 1;
    }
    isPointerAllowed(event) {
      if (this[_firstTap] == null) {
        if (this.onDoubleTapDown == null && this.onDoubleTap == null && this.onDoubleTapCancel == null) {
          return false;
        }
      }
      let isPointerAllowed = super.isPointerAllowed(event);
      if (!isPointerAllowed) {
        this[_reset]();
      }
      return isPointerAllowed;
    }
    addAllowedPointer(event) {
      if (this[_firstTap] != null) {
        if (!dart.nullCheck(this[_firstTap]).isWithinGlobalTolerance(event, 100)) {
          return;
        } else if (!dart.nullCheck(this[_firstTap]).hasElapsedMinTime() || !dart.nullCheck(this[_firstTap]).hasSameButton(event)) {
          this[_reset]();
          return this[_trackTap](event);
        } else if (this.onDoubleTapDown != null) {
          let details = new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: this.getKindForPointer(event.pointer)});
          this.invokeCallback(T.void(), "onDoubleTapDown", dart.fn(() => dart.nullCheck(this.onDoubleTapDown)(details), T.VoidTovoid()));
        }
      }
      this[_trackTap](event);
    }
    [_trackTap](event) {
      this[_stopDoubleTapTimer]();
      let tracker = new multitap._TapTracker.new({event: event, entry: binding.GestureBinding.instance.gestureArena.add(event.pointer, this), doubleTapMinTime: constants.kDoubleTapMinTime, gestureSettings: this.gestureSettings});
      this[_trackers][$_set](event.pointer, tracker);
      tracker.startTrackingPointer(dart.bind(this, _handleEvent), event.transform);
    }
    [_handleEvent](event) {
      let tracker = dart.nullCheck(this[_trackers][$_get](event.pointer));
      if (T.PointerUpEvent()[_is](event)) {
        if (this[_firstTap] == null) {
          this[_registerFirstTap](tracker);
        } else {
          this[_registerSecondTap](tracker);
        }
      } else if (T.PointerMoveEvent()[_is](event)) {
        if (!tracker.isWithinGlobalTolerance(event, 18)) {
          this[_reject](tracker);
        }
      } else if (T.PointerCancelEvent()[_is](event)) {
        this[_reject](tracker);
      }
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
      let tracker = this[_trackers][$_get](pointer);
      if (tracker == null && this[_firstTap] != null && dart.nullCheck(this[_firstTap]).pointer === pointer) {
        tracker = this[_firstTap];
      }
      if (tracker != null) {
        this[_reject](tracker);
      }
    }
    [_reject](tracker) {
      this[_trackers][$remove](tracker.pointer);
      tracker.entry.resolve(arena.GestureDisposition.rejected);
      this[_freezeTracker](tracker);
      if (this[_firstTap] != null) {
        if (dart.equals(tracker, this[_firstTap])) {
          this[_reset]();
        } else {
          this[_checkCancel]();
          if (this[_trackers][$isEmpty]) {
            this[_reset]();
          }
        }
      }
    }
    dispose() {
      this[_reset]();
      super.dispose();
    }
    [_reset]() {
      this[_stopDoubleTapTimer]();
      if (this[_firstTap] != null) {
        if (this[_trackers][$isNotEmpty]) {
          this[_checkCancel]();
        }
        let tracker = dart.nullCheck(this[_firstTap]);
        this[_firstTap] = null;
        this[_reject](tracker);
        binding.GestureBinding.instance.gestureArena.release(tracker.pointer);
      }
      this[_clearTrackers]();
    }
    [_registerFirstTap](tracker) {
      this[_startDoubleTapTimer]();
      binding.GestureBinding.instance.gestureArena.hold(tracker.pointer);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_clearTrackers]();
      this[_firstTap] = tracker;
    }
    [_registerSecondTap](tracker) {
      dart.nullCheck(this[_firstTap]).entry.resolve(arena.GestureDisposition.accepted);
      tracker.entry.resolve(arena.GestureDisposition.accepted);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_checkUp](tracker.initialButtons);
      this[_reset]();
    }
    [_clearTrackers]() {
      this[_trackers][$values][$toList]()[$forEach](dart.bind(this, _reject));
      if (!this[_trackers][$isEmpty]) dart.assertFailed(null, I[5], 347, 12, "_trackers.isEmpty");
    }
    [_freezeTracker](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent));
    }
    [_startDoubleTapTimer]() {
      this[_doubleTapTimer] == null ? this[_doubleTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _reset)) : null;
    }
    [_stopDoubleTapTimer]() {
      if (this[_doubleTapTimer] != null) {
        dart.nullCheck(this[_doubleTapTimer]).cancel();
        this[_doubleTapTimer] = null;
      }
    }
    [_checkUp](buttons) {
      if (this.onDoubleTap != null) {
        this.invokeCallback(T.void(), "onDoubleTap", dart.nullCheck(this.onDoubleTap));
      }
    }
    [_checkCancel]() {
      if (this.onDoubleTapCancel != null) {
        this.invokeCallback(T.void(), "onDoubleTapCancel", dart.nullCheck(this.onDoubleTapCancel));
      }
    }
    get debugDescription() {
      return "double tap";
    }
  };
  (multitap.DoubleTapGestureRecognizer.new = function(opts) {
    let t$360;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onDoubleTapDown] = null;
    this[onDoubleTap] = null;
    this[onDoubleTapCancel] = null;
    this[_doubleTapTimer] = null;
    this[_firstTap] = null;
    this[_trackers] = new (G.IdentityMapOfint$_TapTracker()).new();
    dart.global.Object.getPrototypeOf(multitap.DoubleTapGestureRecognizer).new.call(this, {allowedButtonsFilter: (t$360 = allowedButtonsFilter, t$360 == null ? C[0] || CT.C0 : t$360), debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = multitap.DoubleTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.DoubleTapGestureRecognizer);
  dart.addRtiResources(multitap.DoubleTapGestureRecognizer, ["flutter__src__gestures__multitap|DoubleTapGestureRecognizer"]);
  dart.addTypeCaches(multitap.DoubleTapGestureRecognizer);
  dart.setMethodSignature(multitap.DoubleTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_trackTap]: T.PointerDownEventTovoid(),
    [_handleEvent]: T.PointerEventTovoid(),
    acceptGesture: T.intTovoid(),
    rejectGesture: T.intTovoid(),
    [_reject]: T._TapTrackerTovoid(),
    [_reset]: T.VoidTovoid(),
    [_registerFirstTap]: T._TapTrackerTovoid(),
    [_registerSecondTap]: T._TapTrackerTovoid(),
    [_clearTrackers]: T.VoidTovoid(),
    [_freezeTracker]: T._TapTrackerTovoid(),
    [_startDoubleTapTimer]: T.VoidTovoid(),
    [_stopDoubleTapTimer]: T.VoidTovoid(),
    [_checkUp]: T.intTovoid(),
    [_checkCancel]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multitap.DoubleTapGestureRecognizer))));
  dart.setStaticMethodSignature(multitap.DoubleTapGestureRecognizer, () => ['_defaultButtonAcceptBehavior']);
  dart.setGetterSignature(multitap.DoubleTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multitap.DoubleTapGestureRecognizer))));
  dart.setLibraryUri(multitap.DoubleTapGestureRecognizer, I[0]);
  dart.setFieldSignature(multitap.DoubleTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onDoubleTapDown: {type: T.TapDownDetailsToNvoid(), isConst: false, isFinal: false},
    onDoubleTap: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    onDoubleTapCancel: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_doubleTapTimer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_firstTap]: {type: T._TapTrackerN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_trackers]: {type: T.MapOfint$_TapTracker(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap.DoubleTapGestureRecognizer))));
  var _wonArena = dart.privateName(multitap, "_wonArena");
  var _timer = dart.privateName(multitap, "_timer");
  var _finalPosition = dart.privateName(multitap, "_finalPosition");
  var _lastPosition = dart.privateName(multitap, "_lastPosition");
  var _as = dart.privateName(dart_rti, "_as");
  var _dispatchLongTap = dart.privateName(multitap, "_dispatchLongTap");
  var _check = dart.privateName(multitap, "_check");
  var _dispatchCancel = dart.privateName(multitap, "_dispatchCancel");
  var _dispatchTap = dart.privateName(multitap, "_dispatchTap");
  multitap._TapGesture = class _TapGesture extends multitap._TapTracker {
    static ['_#new#tearOff'](opts) {
      let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
      let event = opts && 'event' in opts ? opts.event : null;
      let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
      let gestureSettings = opts && 'gestureSettings' in opts ? opts.gestureSettings : null;
      return new multitap._TapGesture.new({gestureRecognizer: gestureRecognizer, event: event, longTapDelay: longTapDelay, gestureSettings: gestureSettings});
    }
    handleEvent(event) {
      if (!(event.pointer === this.pointer)) dart.assertFailed(null, I[5], 415, 12, "event.pointer == pointer");
      if (T.PointerMoveEvent()[_is](event)) {
        if (!this.isWithinGlobalTolerance(event, events.computeHitSlop(event.kind, this.gestureSettings))) {
          this.cancel();
        } else {
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        }
      } else if (T.PointerCancelEvent()[_is](event)) {
        this.cancel();
      } else if (T.PointerUpEvent()[_is](event)) {
        this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
        this[_finalPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_check]();
      }
    }
    stopTrackingPointer(route) {
      let t$360;
      t$360 = this[_timer];
      t$360 == null ? null : t$360.cancel();
      this[_timer] = null;
      super.stopTrackingPointer(route);
    }
    accept() {
      this[_wonArena] = true;
      this[_check]();
    }
    reject() {
      this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
      this.gestureRecognizer[_dispatchCancel](this.pointer);
    }
    cancel() {
      if (this[_wonArena]) {
        this.reject();
      } else {
        this.entry.resolve(arena.GestureDisposition.rejected);
      }
    }
    [_check]() {
      if (this[_wonArena] && this[_finalPosition] != null) {
        this.gestureRecognizer[_dispatchTap](this.pointer, dart.nullCheck(this[_finalPosition]));
      }
    }
  };
  (multitap._TapGesture.new = function(opts) {
    let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
    let gestureSettings = opts && 'gestureSettings' in opts ? opts.gestureSettings : null;
    this[_wonArena] = false;
    this[_timer] = null;
    this[_finalPosition] = null;
    this.gestureRecognizer = gestureRecognizer;
    this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
    dart.global.Object.getPrototypeOf(multitap._TapGesture).new.call(this, {event: T.PointerDownEvent()[_as](event), entry: binding.GestureBinding.instance.gestureArena.add(event.pointer, gestureRecognizer), doubleTapMinTime: constants.kDoubleTapMinTime, gestureSettings: gestureSettings});
    this.startTrackingPointer(dart.bind(this, 'handleEvent'), event.transform);
    if (longTapDelay['>'](core.Duration.zero)) {
      this[_timer] = async.Timer.new(longTapDelay, dart.fn(() => {
        this[_timer] = null;
        this.gestureRecognizer[_dispatchLongTap](event.pointer, this[_lastPosition]);
      }, T.VoidTovoid()));
    }
  }).prototype = multitap._TapGesture.prototype;
  dart.addTypeTests(multitap._TapGesture);
  dart.addRtiResources(multitap._TapGesture, ["flutter__src__gestures__multitap|_TapGesture"]);
  dart.addTypeCaches(multitap._TapGesture);
  dart.setMethodSignature(multitap._TapGesture, () => dart.global.Object.setPrototypeOf({
    handleEvent: T.PointerEventTovoid(),
    accept: T.VoidTovoid(),
    reject: T.VoidTovoid(),
    cancel: T.VoidTovoid(),
    [_check]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multitap._TapGesture))));
  dart.setLibraryUri(multitap._TapGesture, I[0]);
  dart.setFieldSignature(multitap._TapGesture, () => dart.global.Object.setPrototypeOf({
    gestureRecognizer: {type: T.MultiTapGestureRecognizer(), isConst: false, isFinal: true, libraryUri: I[0]},
    [_wonArena]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_timer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_lastPosition]: {type: T.OffsetPair(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_finalPosition]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap._TapGesture))));
  var onTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapDown");
  var onTapUp = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapUp");
  var onTap = dart.privateName(multitap, "MultiTapGestureRecognizer.onTap");
  var onTapCancel = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapCancel");
  var longTapDelay$ = dart.privateName(multitap, "MultiTapGestureRecognizer.longTapDelay");
  var onLongTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onLongTapDown");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _gestureMap = dart.privateName(multitap, "_gestureMap");
  multitap.MultiTapGestureRecognizer = class MultiTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onTap() {
      return this[onTap];
    }
    set onTap(value) {
      this[onTap] = value;
    }
    get onTapCancel() {
      return this[onTapCancel];
    }
    set onTapCancel(value) {
      this[onTapCancel] = value;
    }
    get longTapDelay() {
      return this[longTapDelay$];
    }
    set longTapDelay(value) {
      this[longTapDelay$] = value;
    }
    get onLongTapDown() {
      return this[onLongTapDown];
    }
    set onLongTapDown(value) {
      this[onLongTapDown] = value;
    }
    static ['_#new#tearOff'](opts) {
      let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : C[1] || CT.C1;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multitap.MultiTapGestureRecognizer.new({longTapDelay: longTapDelay, debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    addAllowedPointer(event) {
      if (!!this[_gestureMap][$containsKey](event.pointer)) dart.assertFailed(null, I[5], 514, 12, "!_gestureMap.containsKey(event.pointer)");
      this[_gestureMap][$_set](event.pointer, new multitap._TapGesture.new({gestureRecognizer: this, event: event, longTapDelay: this.longTapDelay, gestureSettings: this.gestureSettings}));
      if (this.onTapDown != null) {
        this.invokeCallback(T.void(), "onTapDown", dart.fn(() => {
          dart.nullCheck(this.onTapDown)(event.pointer, new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: event.kind}));
        }, T.VoidTovoid()));
      }
    }
    acceptGesture(pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 534, 12, "_gestureMap.containsKey(pointer)");
      dart.nullCheck(this[_gestureMap][$_get](pointer)).accept();
    }
    rejectGesture(pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 540, 12, "_gestureMap.containsKey(pointer)");
      dart.nullCheck(this[_gestureMap][$_get](pointer)).reject();
      if (!!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 542, 12, "!_gestureMap.containsKey(pointer)");
    }
    [_dispatchCancel](pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 546, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapCancel != null) {
        this.invokeCallback(T.void(), "onTapCancel", dart.fn(() => dart.nullCheck(this.onTapCancel)(pointer), T.VoidTovoid()));
      }
    }
    [_dispatchTap](pointer, position) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 554, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapUp != null) {
        this.invokeCallback(T.void(), "onTapUp", dart.fn(() => {
          dart.nullCheck(this.onTapUp)(pointer, new tap.TapUpDetails.new({kind: this.getKindForPointer(pointer), localPosition: position.local, globalPosition: position.global}));
        }, T.VoidTovoid()));
      }
      if (this.onTap != null) {
        this.invokeCallback(T.void(), "onTap", dart.fn(() => dart.nullCheck(this.onTap)(pointer), T.VoidTovoid()));
      }
    }
    [_dispatchLongTap](pointer, lastPosition) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[5], 571, 12, "_gestureMap.containsKey(pointer)");
      if (this.onLongTapDown != null) {
        this.invokeCallback(T.void(), "onLongTapDown", dart.fn(() => {
          dart.nullCheck(this.onLongTapDown)(pointer, new tap.TapDownDetails.new({globalPosition: lastPosition.global, localPosition: lastPosition.local, kind: this.getKindForPointer(pointer)}));
        }, T.VoidTovoid()));
      }
    }
    dispose() {
      let localGestures = G.ListOf_TapGesture().of(this[_gestureMap][$values]);
      for (let gesture of localGestures) {
        gesture.cancel();
      }
      if (!this[_gestureMap][$isEmpty]) dart.assertFailed(null, I[5], 593, 12, "_gestureMap.isEmpty");
      super.dispose();
    }
    get debugDescription() {
      return "multitap";
    }
  };
  (multitap.MultiTapGestureRecognizer.new = function(opts) {
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : C[1] || CT.C1;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onTap] = null;
    this[onTapCancel] = null;
    this[onLongTapDown] = null;
    this[_gestureMap] = new (G.IdentityMapOfint$_TapGesture()).new();
    this[longTapDelay$] = longTapDelay;
    dart.global.Object.getPrototypeOf(multitap.MultiTapGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multitap.MultiTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.MultiTapGestureRecognizer);
  dart.addRtiResources(multitap.MultiTapGestureRecognizer, ["flutter__src__gestures__multitap|MultiTapGestureRecognizer"]);
  dart.addTypeCaches(multitap.MultiTapGestureRecognizer);
  dart.setMethodSignature(multitap.MultiTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    acceptGesture: T.intTovoid(),
    rejectGesture: T.intTovoid(),
    [_dispatchCancel]: T.intTovoid(),
    [_dispatchTap]: T.intAndOffsetPairTovoid(),
    [_dispatchLongTap]: T.intAndOffsetPairTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multitap.MultiTapGestureRecognizer))));
  dart.setGetterSignature(multitap.MultiTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: T.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(multitap.MultiTapGestureRecognizer))));
  dart.setLibraryUri(multitap.MultiTapGestureRecognizer, I[0]);
  dart.setFieldSignature(multitap.MultiTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onTapDown: {type: T.intAndTapDownDetailsToNvoid(), isConst: false, isFinal: false},
    onTapUp: {type: T.intAndTapUpDetailsToNvoid(), isConst: false, isFinal: false},
    onTap: {type: T.intToNvoid(), isConst: false, isFinal: false},
    onTapCancel: {type: T.intToNvoid(), isConst: false, isFinal: false},
    longTapDelay: {type: T.Duration(), isConst: false, isFinal: false, libraryUri: I[1]},
    onLongTapDown: {type: T.intAndTapDownDetailsToNvoid(), isConst: false, isFinal: false},
    [_gestureMap]: {type: T.MapOfint$_TapGesture(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap.MultiTapGestureRecognizer))));
  var globalPosition$ = dart.privateName(multitap, "SerialTapDownDetails.globalPosition");
  var localPosition$ = dart.privateName(multitap, "SerialTapDownDetails.localPosition");
  var kind$ = dart.privateName(multitap, "SerialTapDownDetails.kind");
  var buttons$ = dart.privateName(multitap, "SerialTapDownDetails.buttons");
  var count$ = dart.privateName(multitap, "SerialTapDownDetails.count");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  multitap.SerialTapDownDetails = class SerialTapDownDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get count() {
      return this[count$];
    }
    set count(value) {
      super.count = value;
    }
    static ['_#new#tearOff'](opts) {
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C[2] || CT.C2;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
      let count = opts && 'count' in opts ? opts.count : 1;
      return new multitap.SerialTapDownDetails.new({globalPosition: globalPosition, localPosition: localPosition, kind: kind, buttons: buttons, count: count});
    }
  };
  (multitap.SerialTapDownDetails.new = function(opts) {
    let t$360;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C[2] || CT.C2;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let count = opts && 'count' in opts ? opts.count : 1;
    this[globalPosition$] = globalPosition;
    this[kind$] = kind;
    this[buttons$] = buttons;
    this[count$] = count;
    if (!(count > 0)) dart.assertFailed(null, I[5], 623, 15, "count > 0");
    this[localPosition$] = (t$360 = localPosition, t$360 == null ? globalPosition : t$360);
    ;
  }).prototype = multitap.SerialTapDownDetails.prototype;
  dart.addTypeTests(multitap.SerialTapDownDetails);
  dart.addRtiResources(multitap.SerialTapDownDetails, ["flutter__src__gestures__multitap|SerialTapDownDetails"]);
  dart.addTypeCaches(multitap.SerialTapDownDetails);
  dart.setLibraryUri(multitap.SerialTapDownDetails, I[0]);
  dart.setFieldSignature(multitap.SerialTapDownDetails, () => dart.global.Object.setPrototypeOf({
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[4]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[4]},
    kind: {type: T.PointerDeviceKind(), isConst: false, isFinal: true, libraryUri: I[4]},
    buttons: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    count: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap.SerialTapDownDetails))));
  var count$0 = dart.privateName(multitap, "SerialTapCancelDetails.count");
  multitap.SerialTapCancelDetails = class SerialTapCancelDetails extends core.Object {
    get count() {
      return this[count$0];
    }
    set count(value) {
      super.count = value;
    }
    static ['_#new#tearOff'](opts) {
      let count = opts && 'count' in opts ? opts.count : 1;
      return new multitap.SerialTapCancelDetails.new({count: count});
    }
  };
  (multitap.SerialTapCancelDetails.new = function(opts) {
    let count = opts && 'count' in opts ? opts.count : 1;
    this[count$0] = count;
    if (!(count > 0)) dart.assertFailed(null, I[5], 673, 15, "count > 0");
    ;
  }).prototype = multitap.SerialTapCancelDetails.prototype;
  dart.addTypeTests(multitap.SerialTapCancelDetails);
  dart.addRtiResources(multitap.SerialTapCancelDetails, ["flutter__src__gestures__multitap|SerialTapCancelDetails"]);
  dart.addTypeCaches(multitap.SerialTapCancelDetails);
  dart.setLibraryUri(multitap.SerialTapCancelDetails, I[0]);
  dart.setFieldSignature(multitap.SerialTapCancelDetails, () => dart.global.Object.setPrototypeOf({count: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(multitap.SerialTapCancelDetails))));
  var globalPosition$0 = dart.privateName(multitap, "SerialTapUpDetails.globalPosition");
  var localPosition$0 = dart.privateName(multitap, "SerialTapUpDetails.localPosition");
  var kind$0 = dart.privateName(multitap, "SerialTapUpDetails.kind");
  var count$1 = dart.privateName(multitap, "SerialTapUpDetails.count");
  multitap.SerialTapUpDetails = class SerialTapUpDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$0];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$0];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$0];
    }
    set kind(value) {
      super.kind = value;
    }
    get count() {
      return this[count$1];
    }
    set count(value) {
      super.count = value;
    }
    static ['_#new#tearOff'](opts) {
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C[2] || CT.C2;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let count = opts && 'count' in opts ? opts.count : 1;
      return new multitap.SerialTapUpDetails.new({globalPosition: globalPosition, localPosition: localPosition, kind: kind, count: count});
    }
  };
  (multitap.SerialTapUpDetails.new = function(opts) {
    let t$360;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C[2] || CT.C2;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let count = opts && 'count' in opts ? opts.count : 1;
    this[globalPosition$0] = globalPosition;
    this[kind$0] = kind;
    this[count$1] = count;
    if (!(count > 0)) dart.assertFailed(null, I[5], 704, 15, "count > 0");
    this[localPosition$0] = (t$360 = localPosition, t$360 == null ? globalPosition : t$360);
    ;
  }).prototype = multitap.SerialTapUpDetails.prototype;
  dart.addTypeTests(multitap.SerialTapUpDetails);
  dart.addRtiResources(multitap.SerialTapUpDetails, ["flutter__src__gestures__multitap|SerialTapUpDetails"]);
  dart.addTypeCaches(multitap.SerialTapUpDetails);
  dart.setLibraryUri(multitap.SerialTapUpDetails, I[0]);
  dart.setFieldSignature(multitap.SerialTapUpDetails, () => dart.global.Object.setPrototypeOf({
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[4]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[4]},
    kind: {type: T.PointerDeviceKindN(), isConst: false, isFinal: true, libraryUri: I[4]},
    count: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap.SerialTapUpDetails))));
  var onSerialTapDown = dart.privateName(multitap, "SerialTapGestureRecognizer.onSerialTapDown");
  var onSerialTapCancel = dart.privateName(multitap, "SerialTapGestureRecognizer.onSerialTapCancel");
  var onSerialTapUp = dart.privateName(multitap, "SerialTapGestureRecognizer.onSerialTapUp");
  var _serialTapTimer = dart.privateName(multitap, "_serialTapTimer");
  var _completedTaps = dart.privateName(multitap, "_completedTaps");
  var _gestureResolutions = dart.privateName(multitap, "_gestureResolutions");
  var _pendingTap = dart.privateName(multitap, "_pendingTap");
  var _representsSameSeries = dart.privateName(multitap, "_representsSameSeries");
  var _stopSerialTapTimer = dart.privateName(multitap, "_stopSerialTapTimer");
  var _registerTap = dart.privateName(multitap, "_registerTap");
  var _stopTrackingPointer = dart.privateName(multitap, "_stopTrackingPointer");
  var _rejectPendingTap = dart.privateName(multitap, "_rejectPendingTap");
  var _startSerialTapTimer = dart.privateName(multitap, "_startSerialTapTimer");
  multitap.SerialTapGestureRecognizer = class SerialTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onSerialTapDown() {
      return this[onSerialTapDown];
    }
    set onSerialTapDown(value) {
      this[onSerialTapDown] = value;
    }
    get onSerialTapCancel() {
      return this[onSerialTapCancel];
    }
    set onSerialTapCancel(value) {
      this[onSerialTapCancel] = value;
    }
    get onSerialTapUp() {
      return this[onSerialTapUp];
    }
    set onSerialTapUp(value) {
      this[onSerialTapUp] = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multitap.SerialTapGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    get isTrackingPointer() {
      return this[_pendingTap] != null;
    }
    isPointerAllowed(event) {
      if (this.onSerialTapDown == null && this.onSerialTapCancel == null && this.onSerialTapUp == null) {
        return false;
      }
      return super.isPointerAllowed(event);
    }
    addAllowedPointer(event) {
      if (this[_completedTaps][$isNotEmpty] && !this[_representsSameSeries](this[_completedTaps][$last], event) || this[_pendingTap] != null) {
        this[_reset]();
      }
      this[_trackTap](event);
    }
    [_representsSameSeries](tap, event) {
      return tap.hasElapsedMinTime() && tap.hasSameButton(event) && tap.isWithinGlobalTolerance(event, 100);
    }
    [_trackTap](event) {
      this[_stopSerialTapTimer]();
      if (this.onSerialTapDown != null) {
        let details = new multitap.SerialTapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: this.getKindForPointer(event.pointer), buttons: event.buttons, count: this[_completedTaps][$length] + 1});
        this.invokeCallback(T.void(), "onSerialTapDown", dart.fn(() => dart.nullCheck(this.onSerialTapDown)(details), T.VoidTovoid()));
      }
      let tracker = new multitap._TapTracker.new({gestureSettings: this.gestureSettings, event: event, entry: binding.GestureBinding.instance.gestureArena.add(event.pointer, this), doubleTapMinTime: constants.kDoubleTapMinTime});
      if (!(this[_pendingTap] == null)) dart.assertFailed(null, I[5], 897, 12, "_pendingTap == null");
      this[_pendingTap] = tracker;
      tracker.startTrackingPointer(dart.bind(this, _handleEvent), event.transform);
    }
    [_handleEvent](event) {
      if (!(this[_pendingTap] != null)) dart.assertFailed(null, I[5], 903, 12, "_pendingTap != null");
      if (!(dart.nullCheck(this[_pendingTap]).pointer === event.pointer)) dart.assertFailed(null, I[5], 904, 12, "_pendingTap!.pointer == event.pointer");
      let tracker = dart.nullCheck(this[_pendingTap]);
      if (T.PointerUpEvent()[_is](event)) {
        this[_registerTap](event, tracker);
      } else if (T.PointerMoveEvent()[_is](event)) {
        if (!tracker.isWithinGlobalTolerance(event, 18)) {
          this[_reset]();
        }
      } else if (T.PointerCancelEvent()[_is](event)) {
        this[_reset]();
      }
    }
    acceptGesture(pointer) {
      if (!(this[_pendingTap] != null)) dart.assertFailed(null, I[5], 919, 12, "_pendingTap != null");
      if (!(dart.nullCheck(this[_pendingTap]).pointer === pointer)) dart.assertFailed(null, I[5], 920, 12, "_pendingTap!.pointer == pointer");
      this[_gestureResolutions][$_set](pointer, arena.GestureDisposition.accepted);
    }
    rejectGesture(pointer) {
      this[_gestureResolutions][$_set](pointer, arena.GestureDisposition.rejected);
      this[_reset]();
    }
    [_rejectPendingTap]() {
      if (!(this[_pendingTap] != null)) dart.assertFailed(null, I[5], 931, 12, "_pendingTap != null");
      let tracker = dart.nullCheck(this[_pendingTap]);
      this[_pendingTap] = null;
      this[_checkCancel](this[_completedTaps][$length] + 1);
      if (!this[_gestureResolutions][$containsKey](tracker.pointer)) {
        tracker.entry.resolve(arena.GestureDisposition.rejected);
      }
      this[_stopTrackingPointer](tracker);
    }
    dispose() {
      this[_reset]();
      super.dispose();
    }
    [_reset]() {
      if (this[_pendingTap] != null) {
        this[_rejectPendingTap]();
      }
      this[_pendingTap] = null;
      this[_completedTaps][$clear]();
      this[_gestureResolutions][$clear]();
      this[_stopSerialTapTimer]();
    }
    [_registerTap](event, tracker) {
      if (!dart.equals(tracker, this[_pendingTap])) dart.assertFailed(null, I[5], 961, 12, "tracker == _pendingTap");
      if (!(tracker.pointer === event.pointer)) dart.assertFailed(null, I[5], 962, 12, "tracker.pointer == event.pointer");
      this[_startSerialTapTimer]();
      if (!(this[_gestureResolutions][$_get](event.pointer) !== arena.GestureDisposition.rejected)) dart.assertFailed(null, I[5], 964, 12, "_gestureResolutions[event.pointer] != GestureDisposition.rejected");
      if (!this[_gestureResolutions][$containsKey](event.pointer)) {
        tracker.entry.resolve(arena.GestureDisposition.accepted);
      }
      if (!(this[_gestureResolutions][$_get](event.pointer) === arena.GestureDisposition.accepted)) dart.assertFailed(null, I[5], 968, 12, "_gestureResolutions[event.pointer] == GestureDisposition.accepted");
      this[_stopTrackingPointer](tracker);
      this[_pendingTap] = null;
      this[_checkUp](event, tracker);
      this[_completedTaps][$add](tracker);
    }
    [_stopTrackingPointer](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent));
    }
    [_startSerialTapTimer]() {
      this[_serialTapTimer] == null ? this[_serialTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _reset)) : null;
    }
    [_stopSerialTapTimer]() {
      if (this[_serialTapTimer] != null) {
        dart.nullCheck(this[_serialTapTimer]).cancel();
        this[_serialTapTimer] = null;
      }
    }
    [_checkUp](event, tracker) {
      if (this.onSerialTapUp != null) {
        let details = new multitap.SerialTapUpDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: this.getKindForPointer(tracker.pointer), count: this[_completedTaps][$length] + 1});
        this.invokeCallback(T.void(), "onSerialTapUp", dart.fn(() => dart.nullCheck(this.onSerialTapUp)(details), T.VoidTovoid()));
      }
    }
    [_checkCancel](count) {
      if (this.onSerialTapCancel != null) {
        let details = new multitap.SerialTapCancelDetails.new({count: count});
        this.invokeCallback(T.void(), "onSerialTapCancel", dart.fn(() => dart.nullCheck(this.onSerialTapCancel)(details), T.VoidTovoid()));
      }
    }
    get debugDescription() {
      return "serial tap";
    }
  };
  (multitap.SerialTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onSerialTapDown] = null;
    this[onSerialTapCancel] = null;
    this[onSerialTapUp] = null;
    this[_serialTapTimer] = null;
    this[_completedTaps] = G.JSArrayOf_TapTracker().of([]);
    this[_gestureResolutions] = new (G.IdentityMapOfint$GestureDisposition()).new();
    this[_pendingTap] = null;
    dart.global.Object.getPrototypeOf(multitap.SerialTapGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multitap.SerialTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.SerialTapGestureRecognizer);
  dart.addRtiResources(multitap.SerialTapGestureRecognizer, ["flutter__src__gestures__multitap|SerialTapGestureRecognizer"]);
  dart.addTypeCaches(multitap.SerialTapGestureRecognizer);
  dart.setMethodSignature(multitap.SerialTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_representsSameSeries]: T._TapTrackerAndPointerDownEventTobool(),
    [_trackTap]: T.PointerDownEventTovoid(),
    [_handleEvent]: T.PointerEventTovoid(),
    acceptGesture: T.intTovoid(),
    rejectGesture: T.intTovoid(),
    [_rejectPendingTap]: T.VoidTovoid(),
    [_reset]: T.VoidTovoid(),
    [_registerTap]: T.PointerUpEventAnd_TapTrackerTovoid(),
    [_stopTrackingPointer]: T._TapTrackerTovoid(),
    [_startSerialTapTimer]: T.VoidTovoid(),
    [_stopSerialTapTimer]: T.VoidTovoid(),
    [_checkUp]: T.PointerUpEventAnd_TapTrackerTovoid(),
    [_checkCancel]: T.intTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multitap.SerialTapGestureRecognizer))));
  dart.setGetterSignature(multitap.SerialTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    isTrackingPointer: T.bool(),
    debugDescription: T.String()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(multitap.SerialTapGestureRecognizer))));
  dart.setLibraryUri(multitap.SerialTapGestureRecognizer, I[0]);
  dart.setFieldSignature(multitap.SerialTapGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onSerialTapDown: {type: T.SerialTapDownDetailsToNvoid(), isConst: false, isFinal: false},
    onSerialTapCancel: {type: T.SerialTapCancelDetailsToNvoid(), isConst: false, isFinal: false},
    onSerialTapUp: {type: T.SerialTapUpDetailsToNvoid(), isConst: false, isFinal: false},
    [_serialTapTimer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_completedTaps]: {type: T.ListOf_TapTracker(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_gestureResolutions]: {type: T.MapOfint$GestureDisposition(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_pendingTap]: {type: T._TapTrackerN(), isConst: false, isFinal: false, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(multitap.SerialTapGestureRecognizer))));
  dart.moduleConstCaches.set("packages/flutter/src/gestures/multitap.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__gestures__multitap|MultiTapGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multitap|_TapGesture":{"flutter__src__gestures__multitap|_TapTracker":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__gestures__arena|GestureDisposition":{"core|_Enum":[],"core|Enum":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__multitap|DoubleTapGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__multitap|SerialTapGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/multitap.dart", {
    "package:flutter/src/gestures/multitap.dart": multitap
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multitap.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDsB;IAAQ;;AAG1B,uBAAW;IACb;;;QAVoC;IAI/B,iBAAW;AAHd,oBAAM,QAAQ,YAAE;EAClB;;;;;;;;;;;;;;;;;;;yBAiCuC,OAAgB;AACrD,WAAK;AACH,mCAAqB;AACiB,QAAvB,AAAS,uDAAuB,cAAS,KAAK,EAAE,SAAS;;IAE5E;wBAEsC;AACpC,UAAI;AACF,mCAAqB;AACiB,QAAvB,AAAS,0DAA0B,cAAS,KAAK;;IAEpE;4BAE0C,OAAc;AACzC,mBAAS,AAAM,AAAS,KAAV,eAAY;AACvC,YAAO,AAAO,AAAS,OAAV,aAAa,SAAS;IACrC;;AAGE,YAAO,AAA2B;IACpC;kBAEoC;AAClC,YAAO,AAAM,AAAQ,MAAT,aAAY;IAC1B;;;QA3C4B;QACZ;QACI;QACJ;IAaX,2BAAqB;IAfV;IAEA;IACH,eAAE,AAAM,KAAD;IACQ,+BAAE,AAAM,KAAD;IACf,sBAAE,AAAM,KAAD;IACK,mCAAE,4CAA0B,gBAAgB;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiGrD;;;;;;IAYE;;;;;;IAcA;;;;;;;;;;;;wCAlEmB;AAAY,YAAA,AAAQ,QAAD;IAAkB;qBAyE3C;AACrC,UAAI,AAAU;AACZ,YAAI,AAAgB,gCAChB,AAAY,4BACZ,AAAkB;AACpB,gBAAO;;;AAKA,6BAAyB,uBAAiB,KAAK;AAC1D,WAAK,gBAAgB;AACnB;;AAEF,YAAO,iBAAgB;IACzB;sBAGwC;AACtC,UAAI;AACF,aAAc,AAAE,eAAX,yCAAmC,KAAK;AAE3C;cACK,MAAc,AAAE,eAAX,yCAA4C,AAAE,eAAX,+BAAyB,KAAK;AAG3E;AACA,gBAAO,iBAAU,KAAK;cACjB,KAAI;AACY,wBAAU,4CACb,AAAM,KAAD,0BACN,AAAM,KAAD,sBACd,uBAAkB,AAAM,KAAD;AAE/B,wCAAqB,mBAAmB,cAAqB,AAAC,eAAhB,sBAAiB,OAAO;;;AAG1E,sBAAU,KAAK;IACjB;gBAEgC;AAC9B;AACkB,oBAAU,qCACnB,KAAK,SACU,AAAS,AAAa,iDAAI,AAAM,KAAD,UAAU,yBAC7C,8CACD;AAEV,MAAT,uBAAU,AAAM,KAAD,UAAY,OAAO;AAC1B,MAAR,OAAO,gCAAsB,qBAAc,AAAM,KAAD;IAClD;mBAE+B;AACX,oBAAkC,eAAxB,AAAS,uBAAC,AAAM,KAAD;AAC3C,UAAU,wBAAN,KAAK;AACP,YAAI,AAAU;AACZ,kCAAkB,OAAO;;AAEzB,mCAAmB,OAAO;;YAEvB,KAAU,0BAAN,KAAK;AACd,aAAK,AAAQ,OAAD,yBAAyB,KAAK;AACxC,wBAAQ,OAAO;;YAEZ,KAAU,4BAAN,KAAK;AACd,sBAAQ,OAAO;;IAEnB;kBAGuB;IAAW;kBAGX;AACR,oBAAU,AAAS,uBAAC,OAAO;AAExC,UAAI,AAAQ,OAAD,YACP,2BACS,AAAE,AAAQ,eAAnB,6BAAsB,OAAO;AAC/B,kBAAU;;AAGZ,UAAI,OAAO;AACT,sBAAQ,OAAO;;IAEnB;cAEyB;AACb,MAAV,yBAAiB,AAAQ,OAAD;AACV,MAAd,AAAQ,OAAD,eAAkC;AACzC,2BAAe,OAAO;AACtB,UAAI;AACF,YAAY,YAAR,OAAO,EAAI;AACb;;AAEA;AACA,cAAI,AAAU;AACZ;;;;IAIR;;AAIE;AACM;IACR;;AAGE;AACA,UAAI;AACF,YAAI,AAAU;AACZ;;AAIgB,sBAAmB,eAAT;AAC5B,0BAAY;AACZ,sBAAQ,OAAO;AACsB,QAAtB,AAAS,qDAAqB,AAAQ,OAAD;;AAEtD;IACF;wBAEmC;AACjC;AACqC,MAAtB,AAAS,kDAAkB,AAAQ,OAAD;AAGjD,2BAAe,OAAO;AACZ,MAAV,yBAAiB,AAAQ,OAAD;AACxB;AACA,wBAAY,OAAO;IACrB;yBAEoC;AACjB,MAAR,AAAE,eAAX,+BAA4C;AAC9B,MAAd,AAAQ,OAAD,eAAkC;AACzC,2BAAe,OAAO;AACZ,MAAV,yBAAiB,AAAQ,OAAD;AACxB,qBAAS,AAAQ,OAAD;AAChB;IACF;;AAG4B,MAA1B,AAAU,AAAO,wDAAiB;AAClC,WAAO,AAAU;IACnB;qBAEgC;AACtB,MAAR,OAAO,+BAAqB;IAC9B;;AAGkB,sCAAhB,wBAAoB,gBAAM,uCAAmB,iBAA7B;IAClB;;AAGE,UAAI;AACe,QAAF,eAAf;AACA,gCAAkB;;IAEtB;eAEkB;AAChB,UAAI;AACF,sCAAqB,eAA0B,eAAX;;IAExC;;AAGE,UAAI;AACF,sCAAqB,qBAAsC,eAAjB;;IAE9C;;AAG+B;IAAY;;;;QAlQnC;QACA;QACgB;IA6CA;IAYE;IAcA;IAEnB;IACM;IACe,kBAA8B;AA1ErD,kHAAiD,QAArB,oBAAoB,EAApB,oDAHzB,UAAU,oBACV,gBAAgB;;EAE8D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAmSxD;AAC5B,YAAO,AAAM,AAAQ,KAAT,aAAY;AACxB,UAAU,0BAAN,KAAK;AACP,aAAK,6BAAwB,KAAK,EAAE,sBAAe,AAAM,KAAD,OAAO;AAC7D;;AAEA,gCAA2B,wCAAkB,KAAK;;YAE/C,KAAU,4BAAN,KAAK;AACd;YACK,KAAU,wBAAN,KAAK;AACd,2CAAoB;AACpB,+BAA4B,wCAAkB,KAAK;AACnD;;IAEJ;wBAGsC;;AACpC;6BAAQ;AACR,qBAAS;AACH,gCAAoB,KAAK;IACjC;;AAGE,wBAAY;AACZ;IACF;;AAGE,yCAAoB;AACF,MAAlB,wCAAkC;IACpC;;AAKE,UAAI;AACF;;AAEM,QAAN,mBAAiC;;IAErC;;AAGE,UAAI,mBAAa;AACG,QAAlB,qCAA+B,cAAuB,eAAd;;IAE5C;;;QA3EgB;QACQ;QACJ;QACH;IAkBZ,kBAAY;IACV;IAGK;IAzBI;IAIG,sBAAa,wCAAkB,KAAK;AAClD,mFACU,0BAAN,KAAK,UACU,AAAS,AAAa,iDAAI,AAAM,KAAD,UAAU,iBAAiB,qBAC9D,8CALH,eAAe;AAO9B,wCAAqB,sBAAa,AAAM,KAAD;AACvC,QAAI,AAAa,YAAD,MAAY;AAC1B,qBAAS,gBAAM,YAAY,EAAE;AAC3B,uBAAS;AACS,QAAlB,yCAAmC,AAAM,KAAD,UAAU;;;EAGxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsF6B;;;;;;IAIF;;;;;;IAGF;;;;;;IAIM;;;;;;IAGtB;;;;;;IAIoB;;;;;;;;;;;;;sBAKW;AACtC,YAAQ,AAAY,gCAAY,AAAM,KAAD;AAC1B,MAAX,yBAAY,AAAM,KAAD,UAAY,iDACR,aACZ,KAAK,gBACE,oCACG;AAEnB,UAAI;AACF,sCAAqB,aAAa;AACtB,UAAD,eAAT,gBAAW,AAAM,KAAD,UAAU,4CACR,AAAM,KAAD,0BACN,AAAM,KAAD,sBACd,AAAM,KAAD;;;IAInB;kBAGuB;AACrB,WAAO,AAAY,gCAAY,OAAO;AAChB,MAAF,eAApB,AAAW,yBAAC,OAAO;IACrB;kBAGuB;AACrB,WAAO,AAAY,gCAAY,OAAO;AAChB,MAAF,eAApB,AAAW,yBAAC,OAAO;AACnB,YAAQ,AAAY,gCAAY,OAAO;IACzC;sBAEyB;AACvB,WAAO,AAAY,gCAAY,OAAO;AAC1B,MAAZ,2BAAmB,OAAO;AAC1B,UAAI;AACF,sCAAqB,eAAe,cAAiB,AAAC,eAAZ,kBAAa,OAAO;;IAElE;mBAEsB,SAAoB;AACxC,WAAO,AAAY,gCAAY,OAAO;AAC1B,MAAZ,2BAAmB,OAAO;AAC1B,UAAI;AACF,sCAAqB,WAAW;AACtB,UAAD,eAAP,cAAS,OAAO,EAAE,gCACV,uBAAkB,OAAO,kBAChB,AAAS,QAAD,wBACP,AAAS,QAAD;;;AAI9B,UAAI;AACF,sCAAqB,SAAS,cAAW,AAAC,eAAN,YAAO,OAAO;;IAEtD;uBAE0B,SAAoB;AAC5C,WAAO,AAAY,gCAAY,OAAO;AACtC,UAAI;AACF,sCAAqB,iBAAiB;AACtB,UAAD,eAAb,oBACE,OAAO,EACP,4CACkB,AAAa,YAAD,wBACb,AAAa,YAAD,cACrB,uBAAkB,OAAO;;;IAKzC;;AAI0B,0BAAgB,yBAAqB,AAAY;AACzE,eAAuB,UAAW,cAAa;AACrC,QAAR,OAAO;;AAGT,WAAO,AAAY;AACb;IACR;;AAG+B;IAAU;;;QApHlC;QACC;QACA;QACA;IAKqB;IAIF;IAGF;IAIM;IAOF;IAED,oBAAgC;IA5BrD;AADP,sGAEQ,UAAU,oBACV,gBAAgB,wBAChB,oBAAoB;;EAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6IW;;;;;;IAGA;;;;;;IAGW;;;;;;IAOd;;;;;;IAYA;;;;;;;;;;;;;;;;;QAlCH;QACG;QACM;QACT;QACA;IAJA;IAES;IACT;IACA;UACK,AAAM,KAAD,GAAG;IACD,wBAAgB,QAAd,aAAa,EAAb,gBAAiB,cAAc;;;;;;;;;;;;;;;;IAyD1C;;;;;;;;;;;;QATH;;UACK,AAAM,KAAD,GAAG;;EAAE;;;;;;;;;;;IAmCT;;;;;;IAGA;;;;;;IAGY;;;;;;IAYf;;;;;;;;;;;;;;;;QA1BH;QACG;QACH;QACA;IAHA;IAEA;IACA;UACK,AAAM,KAAD,GAAG;IACD,yBAAgB,QAAd,aAAa,EAAb,gBAAiB,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkHtB;;;;;;IAUE;;;;;;IAWJ;;;;;;;;;;;;;AAYE,YAAA,AAAY;IAAO;qBAGV;AACrC,UAAI,AAAgB,gCAChB,AAAkB,kCAClB,AAAc;AAChB,cAAO;;AAET,YAAa,wBAAiB,KAAK;IACrC;sBAGwC;AACtC,UAAK,AAAe,sCAAe,4BAAsB,AAAe,6BAAM,KAAK,KAC5E;AACL;;AAEF,sBAAU,KAAK;IACjB;4BAEuC,KAAsB;AAC3D,YAAO,AAAI,AAEP,IAFM,wBACH,AAAI,GAAD,eAAe,KAAK,KACvB,AAAI,GAAD,yBAAyB,KAAK;IAC1C;gBAEgC;AAC9B;AACA,UAAI;AACyB,sBAAU,uDACnB,AAAM,KAAD,0BACN,AAAM,KAAD,sBACd,uBAAkB,AAAM,KAAD,oBACpB,AAAM,KAAD,iBACP,AAAe,AAAO,gCAAE;AAEjC,sCAAqB,mBAAmB,cAAqB,AAAC,eAAhB,sBAAiB,OAAO;;AAEtD,oBAAU,+CACT,6BACV,KAAK,SACU,AAAS,AAAa,iDAAI,AAAM,KAAD,UAAU,yBAC7C;AAEpB,YAAO,AAAY;AACnB,0BAAc,OAAO;AACb,MAAR,OAAO,gCAAsB,qBAAc,AAAM,KAAD;IAClD;mBAE+B;AAC7B,YAAO,AAAY;AACnB,YAAkB,AAAE,AAAQ,eAArB,+BAAwB,AAAM,KAAD;AAClB,oBAAqB,eAAX;AAC5B,UAAU,wBAAN,KAAK;AACP,2BAAa,KAAK,EAAE,OAAO;YACtB,KAAU,0BAAN,KAAK;AACd,aAAK,AAAQ,OAAD,yBAAyB,KAAK;AACxC;;YAEG,KAAU,4BAAN,KAAK;AACd;;IAEJ;kBAGuB;AACrB,YAAO,AAAY;AACnB,YAAkB,AAAE,AAAQ,eAArB,+BAAwB,OAAO;AACnB,MAAnB,iCAAoB,OAAO,EAAuB;IACpD;kBAGuB;AACF,MAAnB,iCAAoB,OAAO,EAAuB;AAClD;IACF;;AAGE,YAAO,AAAY;AACD,oBAAqB,eAAX;AAC5B,0BAAc;AAId,yBAAa,AAAe,AAAO,gCAAE;AACrC,WAAK,AAAoB,wCAAY,AAAQ,OAAD;AAC5B,QAAd,AAAQ,OAAD,eAAkC;;AAE3C,iCAAqB,OAAO;IAC9B;;AAIE;AACM;IACR;;AAGE,UAAI;AACF;;AAEF,0BAAc;AACC,MAAf;AACoB,MAApB;AACA;IACF;mBAEiC,OAAmB;AAClD,WAAe,YAAR,OAAO,EAAI;AAClB,YAAO,AAAQ,AAAQ,OAAT,aAAY,AAAM,KAAD;AAC/B;AACA,YAAO,AAAmB,AAAgB,iCAAf,AAAM,KAAD,cAAgC;AAChE,WAAK,AAAoB,wCAAY,AAAM,KAAD;AAC1B,QAAd,AAAQ,OAAD,eAAkC;;AAE3C,YAAO,AAAmB,AAAgB,iCAAf,AAAM,KAAD,cAAgC;AAChE,iCAAqB,OAAO;AAG5B,0BAAc;AACd,qBAAS,KAAK,EAAE,OAAO;AACR,MAAf,2BAAmB,OAAO;IAC5B;2BAEsC;AAC5B,MAAR,OAAO,+BAAqB;IAC9B;;AAGkB,sCAAhB,wBAAoB,gBAAM,uCAAmB,iBAA7B;IAClB;;AAGE,UAAI;AACe,QAAF,eAAf;AACA,gCAAkB;;IAEtB;eAE6B,OAAmB;AAC9C,UAAI;AACuB,sBAAU,qDACjB,AAAM,KAAD,0BACN,AAAM,KAAD,sBACd,uBAAkB,AAAQ,OAAD,kBACxB,AAAe,AAAO,gCAAE;AAEjC,sCAAqB,iBAAiB,cAAmB,AAAC,eAAd,oBAAe,OAAO;;IAEtE;mBAEsB;AACpB,UAAI;AAC2B,sBAAU,gDAC9B,KAAK;AAEd,sCAAqB,qBAAqB,cAAuB,AAAC,eAAlB,wBAAmB,OAAO;;IAE9E;;AAG+B;IAAY;;;QAlNnC;QACA;QACA;IAasB;IAUE;IAWJ;IAErB;IACiB,uBAA8B;IACnB,4BAA+C;IACrE;AA1Cb,uGACQ,UAAU,oBACV,gBAAgB,wBAChB,oBAAoB;;EAC1B","file":"../../../../../../../../F:/packages/flutter/src/gestures/multitap.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multitap: multitap
  };
}));

//# sourceMappingURL=multitap.dart.lib.js.map

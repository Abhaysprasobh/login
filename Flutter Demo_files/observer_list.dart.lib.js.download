// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/observer_list.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__foundation__observer_list_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var observer_list = Object.create(dart.library);
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $iterator = dartx.iterator;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  var $toList = dartx.toList;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $keys = dartx.keys;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Object?)")))(),
    ObjectNTobool: () => (T$.ObjectNTobool = dart.constFn(dart_rti.findType("core|bool(core|Object?)")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/foundation/observer_list.dart",
    "dart:core",
    "dart:collection"
  ];
  var _list = dart.privateName(observer_list, "_list");
  var _isDirty = dart.privateName(observer_list, "_isDirty");
  var __ObserverList__set = dart.privateName(observer_list, "_#ObserverList#_set");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _set = dart.privateName(observer_list, "_set");
  var _as = dart.privateName(dart_rti, "_as");
  const _is_ObserverList_default = Symbol('_is_ObserverList_default');
  observer_list.ObserverList$ = dart.generic(T => {
    var __t$ObserverListOfT = () => (__t$ObserverListOfT = dart.constFn(T[_eval]("flutter__src__foundation__observer_list|ObserverList<0>")))();
    var __t$HashSetOfT = () => (__t$HashSetOfT = dart.constFn(T[_eval]("collection|HashSet<0>")))();
    var __t$IteratorOfT = () => (__t$IteratorOfT = dart.constFn(T[_eval]("core|Iterator<0>")))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(T[_eval]("core|List<0>")))();
    var __t$HashSetNOfT = () => (__t$HashSetNOfT = dart.constFn(T[_eval]("collection|HashSet<0>?")))();
    var __t$JSArrayOfT = () => (__t$JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var __t$_HashSetOfT = () => (__t$_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    class ObserverList extends core.Iterable$(T) {
      get [_set]() {
        let t$361, t$360;
        t$360 = this[__ObserverList__set];
        return t$360 == null ? (t$361 = new (__t$_HashSetOfT()).new(), this[__ObserverList__set] == null ? this[__ObserverList__set] = t$361 : dart.throw(new _internal.LateError.fieldADI("_set"))) : t$360;
      }
      add(item) {
        T[_as](item);
        this[_isDirty] = true;
        this[_list][$add](item);
      }
      remove(item) {
        T[_as](item);
        this[_isDirty] = true;
        this[_set].clear();
        return this[_list][$remove](item);
      }
      clear() {
        this[_isDirty] = false;
        this[_list][$clear]();
        this[_set].clear();
      }
      contains(element) {
        if (this[_list][$length] < 3) {
          return this[_list][$contains](element);
        }
        if (this[_isDirty]) {
          this[_set].addAll(this[_list]);
          this[_isDirty] = false;
        }
        return this[_set].contains(element);
      }
      get iterator() {
        return this[_list][$iterator];
      }
      get isEmpty() {
        return this[_list][$isEmpty];
      }
      get isNotEmpty() {
        return this[_list][$isNotEmpty];
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return this[_list][$toList]({growable: growable});
      }
      static ['_#new#tearOff'](T) {
        return new (observer_list.ObserverList$(T)).new();
      }
    }
    (ObserverList.new = function() {
      this[_list] = __t$JSArrayOfT().of([]);
      this[_isDirty] = false;
      this[__ObserverList__set] = null;
      this.$ti = this.$ti || __t$ObserverListOfT();
      dart.global.Object.getPrototypeOf(ObserverList).new.call(this);
      ;
    }).prototype = ObserverList.prototype;
    dart.addTypeTests(ObserverList);
    ObserverList.prototype[_is_ObserverList_default] = true;
    dart.addRtiResources(ObserverList, ["flutter__src__foundation__observer_list|ObserverList"]);
    dart.addTypeCaches(ObserverList);
    dart.setMethodSignature(ObserverList, () => dart.global.Object.setPrototypeOf({
      add: T$.ObjectNTovoid(),
      remove: T$.ObjectNTobool(),
      clear: T$.VoidTovoid()
    }, dart.getMethods(dart.global.Object.getPrototypeOf(ObserverList))));
    dart.setGetterSignature(ObserverList, () => dart.global.Object.setPrototypeOf({
      [_set]: __t$HashSetOfT(),
      iterator: __t$IteratorOfT(),
      [$iterator]: __t$IteratorOfT()
    }, dart.getGetters(dart.global.Object.getPrototypeOf(ObserverList))));
    dart.setLibraryUri(ObserverList, I[0]);
    dart.setFieldSignature(ObserverList, () => dart.global.Object.setPrototypeOf({
      [_list]: {type: __t$ListOfT(), isConst: false, isFinal: true, libraryUri: I[1]},
      [_isDirty]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
      [__ObserverList__set]: {type: __t$HashSetNOfT(), isConst: false, isFinal: false, libraryUri: I[2]}
    }, dart.getFields(dart.global.Object.getPrototypeOf(ObserverList))));
    dart.defineExtensionMethods(ObserverList, ['contains', 'toList']);
    dart.defineExtensionAccessors(ObserverList, ['iterator', 'isEmpty', 'isNotEmpty']);
    return ObserverList;
  });
  observer_list.ObserverList = observer_list.ObserverList$();
  dart.addTypeTests(observer_list.ObserverList, _is_ObserverList_default);
  var _map = dart.privateName(observer_list, "_map");
  const _is_HashedObserverList_default = Symbol('_is_HashedObserverList_default');
  observer_list.HashedObserverList$ = dart.generic(T => {
    var __t$HashedObserverListOfT = () => (__t$HashedObserverListOfT = dart.constFn(T[_eval]("flutter__src__foundation__observer_list|HashedObserverList<0>")))();
    var __t$IteratorOfT = () => (__t$IteratorOfT = dart.constFn(T[_eval]("core|Iterator<0>")))();
    var __t$LinkedHashMapOfT$int = () => (__t$LinkedHashMapOfT$int = dart.constFn(T[_eval]("collection|LinkedHashMap<0,core|int>")))();
    var __t$LinkedMapOfT$int = () => (__t$LinkedMapOfT$int = dart.constFn(_js_helper.LinkedMap$(T, T$.int())))();
    class HashedObserverList extends core.Iterable$(T) {
      add(item) {
        let t$360;
        T[_as](item);
        this[_map][$_set](item, dart.notNull((t$360 = this[_map][$_get](item), t$360 == null ? 0 : t$360)) + 1);
      }
      remove(item) {
        T[_as](item);
        let value = this[_map][$_get](item);
        if (value == null) {
          return false;
        }
        if (value === 1) {
          this[_map][$remove](item);
        } else {
          this[_map][$_set](item, dart.notNull(value) - 1);
        }
        return true;
      }
      contains(element) {
        return this[_map][$containsKey](element);
      }
      get iterator() {
        return this[_map][$keys][$iterator];
      }
      get isEmpty() {
        return this[_map][$isEmpty];
      }
      get isNotEmpty() {
        return this[_map][$isNotEmpty];
      }
      static ['_#new#tearOff'](T) {
        return new (observer_list.HashedObserverList$(T)).new();
      }
    }
    (HashedObserverList.new = function() {
      this[_map] = new (__t$LinkedMapOfT$int()).new();
      this.$ti = this.$ti || __t$HashedObserverListOfT();
      dart.global.Object.getPrototypeOf(HashedObserverList).new.call(this);
      ;
    }).prototype = HashedObserverList.prototype;
    dart.addTypeTests(HashedObserverList);
    HashedObserverList.prototype[_is_HashedObserverList_default] = true;
    dart.addRtiResources(HashedObserverList, ["flutter__src__foundation__observer_list|HashedObserverList"]);
    dart.addTypeCaches(HashedObserverList);
    dart.setMethodSignature(HashedObserverList, () => dart.global.Object.setPrototypeOf({
      add: T$.ObjectNTovoid(),
      remove: T$.ObjectNTobool()
    }, dart.getMethods(dart.global.Object.getPrototypeOf(HashedObserverList))));
    dart.setGetterSignature(HashedObserverList, () => dart.global.Object.setPrototypeOf({
      iterator: __t$IteratorOfT(),
      [$iterator]: __t$IteratorOfT()
    }, dart.getGetters(dart.global.Object.getPrototypeOf(HashedObserverList))));
    dart.setLibraryUri(HashedObserverList, I[0]);
    dart.setFieldSignature(HashedObserverList, () => dart.global.Object.setPrototypeOf({[_map]: {type: __t$LinkedHashMapOfT$int(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(HashedObserverList))));
    dart.defineExtensionMethods(HashedObserverList, ['contains']);
    dart.defineExtensionAccessors(HashedObserverList, ['iterator', 'isEmpty', 'isNotEmpty']);
    return HashedObserverList;
  });
  observer_list.HashedObserverList = observer_list.HashedObserverList$();
  dart.addTypeTests(observer_list.HashedObserverList, _is_HashedObserverList_default);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__foundation__observer_list|ObserverList":{"ObserverList.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"collection|HashSet":{"HashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|Iterator":{"Iterator.E":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__foundation__observer_list|HashedObserverList":{"HashedObserverList.T":"1","Iterable.E":"1","core|Iterable":["1"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/flutter/src/foundation/observer_list.dart", {
    "package:flutter/src/foundation/observer_list.dart": observer_list
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["observer_list.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BwB;wCAAO,mJAAP;MAAmB;UAK9B;;AACT,yBAAW;AACL,QAAN,kBAAU,IAAI;MAChB;aAOc;;AACZ,yBAAW;AACN,QAAL;AACA,cAAO,AAAM,sBAAO,IAAI;MAC1B;;AAIE,yBAAW;AACL,QAAN;AACK,QAAL;MACF;eAGsB;AACpB,YAAI,AAAM,AAAO,uBAAE;AACjB,gBAAO,AAAM,wBAAS,OAAO;;AAG/B,YAAI;AACG,UAAL,kBAAY;AACZ,2BAAW;;AAGb,cAAO,AAAK,qBAAS,OAAO;MAC9B;;AAG4B,cAAA,AAAM;MAAQ;;AAGtB,cAAA,AAAM;MAAO;;AAGV,cAAA,AAAM;MAAU;;YAGlB;AACnB,cAAO,AAAM,iCAAiB,QAAQ;MACxC;;;;;;MAxDc,cAAW;MACpB,iBAAW;kCACM;;;;IAuDxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsBa;;;AACL,QAAJ,kBAAK,IAAI,EAAsB,cAAN,QAAX,AAAI,kBAAC,IAAI,GAAL,gBAAU,cAAK;MACnC;aAOc;;AACD,oBAAQ,AAAI,kBAAC,IAAI;AAC5B,YAAI,AAAM,KAAD;AACP,gBAAO;;AAET,YAAI,AAAM,KAAD,KAAI;AACN,UAAL,oBAAY,IAAI;;AAEZ,UAAJ,kBAAK,IAAI,EAAU,aAAN,KAAK,IAAG;;AAEvB,cAAO;MACT;eAGsB;AAAY,cAAA,AAAK,0BAAY,OAAO;MAAC;;AAG/B,cAAA,AAAK,AAAK;MAAQ;;AAG1B,cAAA,AAAK;MAAO;;AAGT,cAAA,AAAK;MAAU;;;;;;MArCV,aAAO;;;;IAsCrC","file":"../../../../../../../../F:/packages/flutter/src/foundation/observer_list.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__observer_list: observer_list
  };
}));

//# sourceMappingURL=observer_list.dart.lib.js.map

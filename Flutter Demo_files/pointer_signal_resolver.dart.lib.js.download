// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/pointer_signal_resolver.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__pointer_signal_resolver_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var pointer_signal_resolver = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    PointerSignalEvent: () => (T.PointerSignalEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerSignalEvent")))(),
    DiagnosticsNode: () => (T.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    PointerSignalEventAndFnTovoid: () => (T.PointerSignalEventAndFnTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerSignalEvent,~(flutter__src__gestures__events|PointerSignalEvent))")))(),
    PointerSignalEventTovoid: () => (T.PointerSignalEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerSignalEvent)")))(),
    PointerSignalEventToNvoid: () => (T.PointerSignalEventToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerSignalEvent)?")))(),
    PointerSignalEventN: () => (T.PointerSignalEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerSignalEvent?")))()
  };
  var G = {
    DiagnosticsPropertyOfPointerSignalEvent: () => (G.DiagnosticsPropertyOfPointerSignalEvent = dart.constFn(diagnostics.DiagnosticsProperty$(T.PointerSignalEvent())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNode())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/pointer_signal_resolver.dart",
    "package:flutter/src/gestures/pointer_signal_resolver.dart",
    "package:flutter/src/gestures/events.dart"
  ];
  var _firstRegisteredCallback = dart.privateName(pointer_signal_resolver, "_firstRegisteredCallback");
  var _currentEvent = dart.privateName(pointer_signal_resolver, "_currentEvent");
  var _is = dart.privateName(dart_rti, "_is");
  pointer_signal_resolver.PointerSignalResolver = class PointerSignalResolver extends core.Object {
    register(event, callback) {
      if (!(this[_currentEvent] == null || pointer_signal_resolver._isSameEvent(dart.nullCheck(this[_currentEvent]), event))) dart.assertFailed(null, I[0], 82, 12, "_currentEvent == null || _isSameEvent(_currentEvent!, event)");
      if (this[_firstRegisteredCallback] != null) {
        return;
      }
      this[_currentEvent] = event;
      this[_firstRegisteredCallback] = callback;
    }
    resolve(event) {
      if (this[_firstRegisteredCallback] == null) {
        if (!(this[_currentEvent] == null)) dart.assertFailed(null, I[0], 98, 14, "_currentEvent == null");
        return;
      }
      if (!pointer_signal_resolver._isSameEvent(dart.nullCheck(this[_currentEvent]), event)) dart.assertFailed(null, I[0], 101, 12, "_isSameEvent(_currentEvent!, event)");
      try {
        dart.nullCheck(this[_firstRegisteredCallback])(dart.nullCheck(this[_currentEvent]));
      } catch (t$36$35e) {
        let exception = dart.getThrown(t$36$35e);
        let stack = dart.stackTrace(t$36$35e);
        if (T.Object()[_is](exception)) {
          let collector = null;
          if (!dart.fn(() => {
            collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfPointerSignalEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T.VoidToListOfDiagnosticsNode());
            return true;
          }, T.VoidTobool())()) dart.assertFailed(null, I[0], 106, 14, "() {\r\n        collector = () => <DiagnosticsNode>[\r\n          DiagnosticsProperty<PointerSignalEvent>('Event', event, style: DiagnosticsTreeStyle.errorProperty),\r\n        ];\r\n        return true;\r\n      }()");
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while resolving a PointerSignalEvent"), informationCollector: collector}));
        } else
          throw t$36$35e;
      }
      this[_firstRegisteredCallback] = null;
      this[_currentEvent] = null;
    }
    static ['_#new#tearOff']() {
      return new pointer_signal_resolver.PointerSignalResolver.new();
    }
  };
  (pointer_signal_resolver.PointerSignalResolver.new = function() {
    this[_firstRegisteredCallback] = null;
    this[_currentEvent] = null;
    ;
  }).prototype = pointer_signal_resolver.PointerSignalResolver.prototype;
  dart.addTypeTests(pointer_signal_resolver.PointerSignalResolver);
  dart.addRtiResources(pointer_signal_resolver.PointerSignalResolver, ["flutter__src__gestures__pointer_signal_resolver|PointerSignalResolver"]);
  dart.addTypeCaches(pointer_signal_resolver.PointerSignalResolver);
  dart.setMethodSignature(pointer_signal_resolver.PointerSignalResolver, () => dart.global.Object.setPrototypeOf({
    register: T.PointerSignalEventAndFnTovoid(),
    resolve: T.PointerSignalEventTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(pointer_signal_resolver.PointerSignalResolver))));
  dart.setLibraryUri(pointer_signal_resolver.PointerSignalResolver, I[1]);
  dart.setFieldSignature(pointer_signal_resolver.PointerSignalResolver, () => dart.global.Object.setPrototypeOf({
    [_firstRegisteredCallback]: {type: T.PointerSignalEventToNvoid(), isConst: false, isFinal: false},
    [_currentEvent]: {type: T.PointerSignalEventN(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(pointer_signal_resolver.PointerSignalResolver))));
  pointer_signal_resolver._isSameEvent = function _isSameEvent(event1, event2) {
    let t$361, t$361$;
    return dart.equals((t$361 = event1.original, t$361 == null ? event1 : t$361), (t$361$ = event2.original, t$361$ == null ? event2 : t$361$));
  };
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__gestures__events|PointerSignalEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/pointer_signal_resolver.dart", {
    "package:flutter/src/gestures/pointer_signal_resolver.dart": pointer_signal_resolver
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["pointer_signal_resolver.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAgFmC,OAAqC;AACpE,YAAO,AAAc,AAAQ,+BAAG,qCAA0B,eAAb,sBAAgB,KAAK;AAClE,UAAI;AACF;;AAEF,4BAAgB,KAAK;AACrB,uCAA2B,QAAQ;IACrC;YAQgC;AAC9B,UAAI,AAAyB;AAC3B,cAAO,AAAc;AACrB;;AAEF,WAAO,qCAA0B,eAAb,sBAAgB,KAAK;AACzC;AAC2B,QAAD,eAAxB,gCAAuC,eAAb;;YACnB;YAAW;AAAlB;AACsB;AACtB,eAAO,AAKN;AAJC,wBAAY,cAAuB,iCACjC,sDAAwC,SAAS,KAAK,UAA8B;AAEtF,kBAAO;;AAEI,8CAAY,mDACZ,SAAS,SACb,KAAK,WACH,4BACA,oCAAiB,+DACJ,SAAS;;;;AAGnC,uCAA2B;AAC3B,4BAAgB;IAClB;;;;;;IAhE+B;IAEX;;EA+DtB;;;;;;;;;;;;;+DA5GqC,QAA2B;;AAC9D,UAAmC,cAAX,QAAhB,AAAO,MAAD,WAAC,gBAAY,MAAM,YAAsB,SAAhB,AAAO,MAAD,WAAC,iBAAY,MAAM;EAClE","file":"../../../../../../../../F:/packages/flutter/src/gestures/pointer_signal_resolver.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__pointer_signal_resolver: pointer_signal_resolver
  };
}));

//# sourceMappingURL=pointer_signal_resolver.dart.lib.js.map

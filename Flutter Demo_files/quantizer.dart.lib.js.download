// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/material_color_utilities/quantize/quantizer.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__material_color_utilities__quantize__quantizer_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var quantizer = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    MapOfint$int: () => (T.MapOfint$int = dart.constFn(dart_rti.findType("core|Map<core|int,core|int>")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constMap(T.int(), T.int(), []);
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:material_color_utilities/quantize/quantizer.dart",
    "dart:core"
  ];
  quantizer.Quantizer = class Quantizer extends core.Object {};
  (quantizer.Quantizer.new = function() {
    ;
  }).prototype = quantizer.Quantizer.prototype;
  dart.addTypeTests(quantizer.Quantizer);
  dart.addRtiResources(quantizer.Quantizer, ["material_color_utilities__quantize__quantizer|Quantizer"]);
  dart.addTypeCaches(quantizer.Quantizer);
  dart.setLibraryUri(quantizer.Quantizer, I[0]);
  var colorToCount$ = dart.privateName(quantizer, "QuantizerResult.colorToCount");
  var inputPixelToClusterPixel$ = dart.privateName(quantizer, "QuantizerResult.inputPixelToClusterPixel");
  quantizer.QuantizerResult = class QuantizerResult extends core.Object {
    get colorToCount() {
      return this[colorToCount$];
    }
    set colorToCount(value) {
      super.colorToCount = value;
    }
    get inputPixelToClusterPixel() {
      return this[inputPixelToClusterPixel$];
    }
    set inputPixelToClusterPixel(value) {
      super.inputPixelToClusterPixel = value;
    }
    static ['_#new#tearOff'](colorToCount, opts) {
      let inputPixelToClusterPixel = opts && 'inputPixelToClusterPixel' in opts ? opts.inputPixelToClusterPixel : C[0] || CT.C0;
      return new quantizer.QuantizerResult.new(colorToCount, {inputPixelToClusterPixel: inputPixelToClusterPixel});
    }
  };
  (quantizer.QuantizerResult.new = function(colorToCount, opts) {
    let inputPixelToClusterPixel = opts && 'inputPixelToClusterPixel' in opts ? opts.inputPixelToClusterPixel : C[0] || CT.C0;
    this[colorToCount$] = colorToCount;
    this[inputPixelToClusterPixel$] = inputPixelToClusterPixel;
    ;
  }).prototype = quantizer.QuantizerResult.prototype;
  dart.addTypeTests(quantizer.QuantizerResult);
  dart.addRtiResources(quantizer.QuantizerResult, ["material_color_utilities__quantize__quantizer|QuantizerResult"]);
  dart.addTypeCaches(quantizer.QuantizerResult);
  dart.setLibraryUri(quantizer.QuantizerResult, I[0]);
  dart.setFieldSignature(quantizer.QuantizerResult, () => dart.global.Object.setPrototypeOf({
    colorToCount: {type: T.MapOfint$int(), isConst: false, isFinal: true, libraryUri: I[1]},
    inputPixelToClusterPixel: {type: T.MapOfint$int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(quantizer.QuantizerResult))));
  dart.moduleConstCaches.set("packages/material_color_utilities/quantize/quantizer.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/material_color_utilities/quantize/quantizer.dart", {
    "package:material_color_utilities/quantize/quantizer.dart": quantizer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["quantizer.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;IAGsB;;;;;;IAEA;;;;;;;;;;;4CACO;QACjB;IADiB;IACjB;;EAAqC","file":"../../../../../../../../../../../../F:/packages/material_color_utilities/quantize/quantizer.dart.lib.js"}');
  // Exports:
  return {
    quantize__quantizer: quantizer
  };
}));

//# sourceMappingURL=quantizer.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/material_color_utilities/quantize/quantizer_wu.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/quantize/quantizer_map.dart', 'packages/material_color_utilities/quantize/quantizer.dart', 'packages/material_color_utilities/utils/color_utils.dart'], (function load__packages__material_color_utilities__quantize__quantizer_wu_dart(dart_sdk, packages__material_color_utilities__quantize__quantizer_map$46dart, packages__material_color_utilities__quantize__quantizer$46dart, packages__material_color_utilities__utils__color_utils$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const quantizer_map = packages__material_color_utilities__quantize__quantizer_map$46dart.quantize__quantizer_map;
  const quantizer = packages__material_color_utilities__quantize__quantizer$46dart.quantize__quantizer;
  const color_utils = packages__material_color_utilities__utils__color_utils$46dart.utils__color_utils;
  var quantizer_wu = Object.create(dart.library);
  var $map = dartx.map;
  var $leftShift = dartx['<<'];
  var $entries = dartx.entries;
  var $rightShift = dartx['>>'];
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $round = dartx.round;
  var $add = dartx.add;
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    Box: () => (T.Box = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer_wu|Box")))(),
    MapEntryOfint$int: () => (T.MapEntryOfint$int = dart.constFn(dart_rti.findType("core|MapEntry<core|int,core|int>")))(),
    intToMapEntryOfint$int: () => (T.intToMapEntryOfint$int = dart.constFn(dart_rti.findType("core|MapEntry<core|int,core|int>(core|int)")))(),
    QuantizerResult: () => (T.QuantizerResult = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer|QuantizerResult")))(),
    intToBox: () => (T.intToBox = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer_wu|Box(core|int)")))(),
    IterableOfintAndintToFutureOfQuantizerResult: () => (T.IterableOfintAndintToFutureOfQuantizerResult = dart.constFn(dart_rti.findType("async|Future<material_color_utilities__quantize__quantizer|QuantizerResult>(core|Iterable<core|int>,core|int)")))(),
    intAndintAndintToint: () => (T.intAndintAndintToint = dart.constFn(dart_rti.findType("core|int(core|int,core|int,core|int)")))(),
    MapOfint$intTovoid: () => (T.MapOfint$intTovoid = dart.constFn(dart_rti.findType("~(core|Map<core|int,core|int>)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    intToCreateBoxesResult: () => (T.intToCreateBoxesResult = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer_wu|CreateBoxesResult(core|int)")))(),
    intToListOfint: () => (T.intToListOfint = dart.constFn(dart_rti.findType("core|List<core|int>(core|int)")))(),
    BoxTodouble: () => (T.BoxTodouble = dart.constFn(dart_rti.findType("core|double(material_color_utilities__quantize__quantizer_wu|Box)")))(),
    BoxAndBoxTobool: () => (T.BoxAndBoxTobool = dart.constFn(dart_rti.findType("core|bool(material_color_utilities__quantize__quantizer_wu|Box,material_color_utilities__quantize__quantizer_wu|Box)")))(),
    BoxAndDirectionAndint__ToMaximizeResult: () => (T.BoxAndDirectionAndint__ToMaximizeResult = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer_wu|MaximizeResult(material_color_utilities__quantize__quantizer_wu|Box,material_color_utilities__quantize__quantizer_wu|Direction,core|int,core|int,core|int,core|int,core|int,core|int)")))(),
    BoxAndListOfintToint: () => (T.BoxAndListOfintToint = dart.constFn(dart_rti.findType("core|int(material_color_utilities__quantize__quantizer_wu|Box,core|List<core|int>)")))(),
    BoxAndDirectionAndListOfintToint: () => (T.BoxAndDirectionAndListOfintToint = dart.constFn(dart_rti.findType("core|int(material_color_utilities__quantize__quantizer_wu|Box,material_color_utilities__quantize__quantizer_wu|Direction,core|List<core|int>)")))(),
    BoxAndDirectionAndint__Toint: () => (T.BoxAndDirectionAndint__Toint = dart.constFn(dart_rti.findType("core|int(material_color_utilities__quantize__quantizer_wu|Box,material_color_utilities__quantize__quantizer_wu|Direction,core|int,core|List<core|int>)")))(),
    ListOfint: () => (T.ListOfint = dart.constFn(dart_rti.findType("core|List<core|int>")))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(dart_rti.findType("core|List<core|double>")))(),
    ListOfBox: () => (T.ListOfBox = dart.constFn(dart_rti.findType("core|List<material_color_utilities__quantize__quantizer_wu|Box>")))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfDirection: () => (T.ListOfDirection = dart.constFn(dart_rti.findType("core|List<material_color_utilities__quantize__quantizer_wu|Direction>")))(),
    Direction: () => (T.Direction = dart.constFn(dart_rti.findType("material_color_utilities__quantize__quantizer_wu|Direction")))()
  };
  var G = {
    JSArrayOfint: () => (G.JSArrayOfint = dart.constFn(_interceptors.JSArray$(T.int())))(),
    JSArrayOfdouble: () => (G.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(T.double())))(),
    JSArrayOfBox: () => (G.JSArrayOfBox = dart.constFn(_interceptors.JSArray$(T.Box())))(),
    MapOfint$int: () => (G.MapOfint$int = dart.constFn(core.Map$(T.int(), T.int())))(),
    MapEntryOfint$int: () => (G.MapEntryOfint$int = dart.constFn(core.MapEntry$(T.int(), T.int())))(),
    ListOfint: () => (G.ListOfint = dart.constFn(core.List$(T.int())))(),
    ListOfdouble: () => (G.ListOfdouble = dart.constFn(core.List$(T.double())))(),
    ListOfBox: () => (G.ListOfBox = dart.constFn(core.List$(T.Box())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "red",
        [_Enum_index]: 0
      }, quantizer_wu.Direction.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "green",
        [_Enum_index]: 1
      }, quantizer_wu.Direction.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "blue",
        [_Enum_index]: 2
      }, quantizer_wu.Direction.prototype));
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.Direction());
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:material_color_utilities/quantize/quantizer_wu.dart",
    "dart:core"
  ];
  var weights = dart.privateName(quantizer_wu, "QuantizerWu.weights");
  var momentsR = dart.privateName(quantizer_wu, "QuantizerWu.momentsR");
  var momentsG = dart.privateName(quantizer_wu, "QuantizerWu.momentsG");
  var momentsB = dart.privateName(quantizer_wu, "QuantizerWu.momentsB");
  var moments = dart.privateName(quantizer_wu, "QuantizerWu.moments");
  var cubes = dart.privateName(quantizer_wu, "QuantizerWu.cubes");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  quantizer_wu.QuantizerWu = class QuantizerWu extends core.Object {
    get weights() {
      return this[weights];
    }
    set weights(value) {
      this[weights] = value;
    }
    get momentsR() {
      return this[momentsR];
    }
    set momentsR(value) {
      this[momentsR] = value;
    }
    get momentsG() {
      return this[momentsG];
    }
    set momentsG(value) {
      this[momentsG] = value;
    }
    get momentsB() {
      return this[momentsB];
    }
    set momentsB(value) {
      this[momentsB] = value;
    }
    get moments() {
      return this[moments];
    }
    set moments(value) {
      this[moments] = value;
    }
    get cubes() {
      return this[cubes];
    }
    set cubes(value) {
      this[cubes] = value;
    }
    quantize(pixels, colorCount) {
      return async.async(T.QuantizerResult(), (function* quantize() {
        let result = (yield new quantizer_map.QuantizerMap.new().quantize(pixels, colorCount));
        this.constructHistogram(result.colorToCount);
        this.computeMoments();
        let createBoxesResult = this.createBoxes(colorCount);
        let results = this.createResult(createBoxesResult.resultCount);
        return new quantizer.QuantizerResult.new(G.MapOfint$int().fromEntries(results[$map](T.MapEntryOfint$int(), dart.fn(e => new (G.MapEntryOfint$int()).__(e, 0), T.intToMapEntryOfint$int()))));
      }).bind(this));
    }
    static getIndex(r, g, b) {
      return r[$leftShift](5 * 2) + r[$leftShift](5 + 1) + g[$leftShift](5) + r + g + b;
    }
    constructHistogram(pixels) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2;
      this.weights = G.ListOfint().filled(quantizer_wu.QuantizerWu.totalSize, 0, {growable: false});
      this.momentsR = G.ListOfint().filled(quantizer_wu.QuantizerWu.totalSize, 0, {growable: false});
      this.momentsG = G.ListOfint().filled(quantizer_wu.QuantizerWu.totalSize, 0, {growable: false});
      this.momentsB = G.ListOfint().filled(quantizer_wu.QuantizerWu.totalSize, 0, {growable: false});
      this.moments = G.ListOfdouble().filled(quantizer_wu.QuantizerWu.totalSize, 0.0, {growable: false});
      for (let entry of pixels[$entries]) {
        let pixel = entry.key;
        let count = entry.value;
        let red = color_utils.ColorUtils.redFromArgb(pixel);
        let green = color_utils.ColorUtils.greenFromArgb(pixel);
        let blue = color_utils.ColorUtils.blueFromArgb(pixel);
        let bitsToRemove = 8 - 5;
        let iR = red[$rightShift](bitsToRemove) + 1;
        let iG = green[$rightShift](bitsToRemove) + 1;
        let iB = blue[$rightShift](bitsToRemove) + 1;
        let index = quantizer_wu.QuantizerWu.getIndex(iR, iG, iB);
        t$360 = this.weights;
        t$360[$_set](index, t$360[$_get](index) + count);
        t$360$ = this.momentsR;
        t$360$[$_set](index, t$360$[$_get](index) + red * count);
        t$360$0 = this.momentsG;
        t$360$0[$_set](index, t$360$0[$_get](index) + green * count);
        t$360$1 = this.momentsB;
        t$360$1[$_set](index, t$360$1[$_get](index) + blue * count);
        t$360$2 = this.moments;
        t$360$2[$_set](index, t$360$2[$_get](index) + count * (red * red + green * green + blue * blue));
      }
    }
    computeMoments() {
      let t$361, t$360, t$361$, t$360$, t$361$0, t$360$0, t$361$1, t$360$1, t$361$2, t$360$2;
      for (let r = 1; r < quantizer_wu.QuantizerWu.sideLength; r = r + 1) {
        let area = G.ListOfint().filled(quantizer_wu.QuantizerWu.sideLength, 0, {growable: false});
        let areaR = G.ListOfint().filled(quantizer_wu.QuantizerWu.sideLength, 0, {growable: false});
        let areaG = G.ListOfint().filled(quantizer_wu.QuantizerWu.sideLength, 0, {growable: false});
        let areaB = G.ListOfint().filled(quantizer_wu.QuantizerWu.sideLength, 0, {growable: false});
        let area2 = G.ListOfdouble().filled(quantizer_wu.QuantizerWu.sideLength, 0.0, {growable: false});
        for (let g = 1; g < quantizer_wu.QuantizerWu.sideLength; g = g + 1) {
          let line = 0;
          let lineR = 0;
          let lineG = 0;
          let lineB = 0;
          let line2 = 0.0;
          for (let b = 1; b < quantizer_wu.QuantizerWu.sideLength; b = b + 1) {
            let index = quantizer_wu.QuantizerWu.getIndex(r, g, b);
            line = line + this.weights[$_get](index);
            lineR = lineR + this.momentsR[$_get](index);
            lineG = lineG + this.momentsG[$_get](index);
            lineB = lineB + this.momentsB[$_get](index);
            line2 = line2 + this.moments[$_get](index);
            t$360 = area;
            t$361 = b;
            t$360[$_set](t$361, t$360[$_get](t$361) + line);
            t$360$ = areaR;
            t$361$ = b;
            t$360$[$_set](t$361$, t$360$[$_get](t$361$) + lineR);
            t$360$0 = areaG;
            t$361$0 = b;
            t$360$0[$_set](t$361$0, t$360$0[$_get](t$361$0) + lineG);
            t$360$1 = areaB;
            t$361$1 = b;
            t$360$1[$_set](t$361$1, t$360$1[$_get](t$361$1) + lineB);
            t$360$2 = area2;
            t$361$2 = b;
            t$360$2[$_set](t$361$2, t$360$2[$_get](t$361$2) + line2);
            let previousIndex = quantizer_wu.QuantizerWu.getIndex(r - 1, g, b);
            this.weights[$_set](index, this.weights[$_get](previousIndex) + area[$_get](b));
            this.momentsR[$_set](index, this.momentsR[$_get](previousIndex) + areaR[$_get](b));
            this.momentsG[$_set](index, this.momentsG[$_get](previousIndex) + areaG[$_get](b));
            this.momentsB[$_set](index, this.momentsB[$_get](previousIndex) + areaB[$_get](b));
            this.moments[$_set](index, this.moments[$_get](previousIndex) + area2[$_get](b));
          }
        }
      }
    }
    createBoxes(maxColorCount) {
      this.cubes = G.ListOfBox().generate(maxColorCount, dart.fn(index => new quantizer_wu.Box.new(), T.intToBox()));
      this.cubes[$_set](0, new quantizer_wu.Box.new({r0: 0, r1: quantizer_wu.QuantizerWu.maxIndex, g0: 0, g1: quantizer_wu.QuantizerWu.maxIndex, b0: 0, b1: quantizer_wu.QuantizerWu.maxIndex, vol: 0}));
      let volumeVariance = G.ListOfdouble().filled(maxColorCount, 0.0, {growable: false});
      let next = 0;
      let generatedColorCount = maxColorCount;
      for (let i = 1; i < maxColorCount; i = i + 1) {
        if (this.cut(this.cubes[$_get](next), this.cubes[$_get](i))) {
          volumeVariance[$_set](next, this.cubes[$_get](next).vol > 1 ? this.variance(this.cubes[$_get](next)) : 0.0);
          volumeVariance[$_set](i, this.cubes[$_get](i).vol > 1 ? this.variance(this.cubes[$_get](i)) : 0.0);
        } else {
          volumeVariance[$_set](next, 0.0);
          i = i - 1;
        }
        next = 0;
        let temp = volumeVariance[$_get](0);
        for (let j = 1; j <= i; j = j + 1) {
          if (volumeVariance[$_get](j) > temp) {
            temp = volumeVariance[$_get](j);
            next = j;
          }
        }
        if (temp <= 0.0) {
          generatedColorCount = i + 1;
          break;
        }
      }
      return new quantizer_wu.CreateBoxesResult.new({requestedCount: maxColorCount, resultCount: generatedColorCount});
    }
    createResult(colorCount) {
      let colors = G.JSArrayOfint().of([]);
      for (let i = 0; i < colorCount; i = i + 1) {
        let cube = this.cubes[$_get](i);
        let weight = quantizer_wu.QuantizerWu.volume(cube, this.weights);
        if (weight > 0) {
          let r = (quantizer_wu.QuantizerWu.volume(cube, this.momentsR) / weight)[$round]();
          let g = (quantizer_wu.QuantizerWu.volume(cube, this.momentsG) / weight)[$round]();
          let b = (quantizer_wu.QuantizerWu.volume(cube, this.momentsB) / weight)[$round]();
          let color = color_utils.ColorUtils.argbFromRgb(r, g, b);
          colors[$add](color);
        }
      }
      return colors;
    }
    variance(cube) {
      let dr = quantizer_wu.QuantizerWu.volume(cube, this.momentsR);
      let dg = quantizer_wu.QuantizerWu.volume(cube, this.momentsG);
      let db = quantizer_wu.QuantizerWu.volume(cube, this.momentsB);
      let xx = this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, cube.b1)) - this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, cube.b0)) - this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b1)) + this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b0)) - this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b1)) + this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b0)) + this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b1)) - this.moments[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b0));
      let hypotenuse = dr * dr + dg * dg + db * db;
      let volume_ = quantizer_wu.QuantizerWu.volume(cube, this.weights);
      return xx - hypotenuse / volume_;
    }
    cut(one, two) {
      let wholeR = quantizer_wu.QuantizerWu.volume(one, this.momentsR);
      let wholeG = quantizer_wu.QuantizerWu.volume(one, this.momentsG);
      let wholeB = quantizer_wu.QuantizerWu.volume(one, this.momentsB);
      let wholeW = quantizer_wu.QuantizerWu.volume(one, this.weights);
      let maxRResult = this.maximize(one, quantizer_wu.Direction.red, one.r0 + 1, one.r1, wholeR, wholeG, wholeB, wholeW);
      let maxGResult = this.maximize(one, quantizer_wu.Direction.green, one.g0 + 1, one.g1, wholeR, wholeG, wholeB, wholeW);
      let maxBResult = this.maximize(one, quantizer_wu.Direction.blue, one.b0 + 1, one.b1, wholeR, wholeG, wholeB, wholeW);
      let cutDirection = null;
      let maxR = maxRResult.maximum;
      let maxG = maxGResult.maximum;
      let maxB = maxBResult.maximum;
      if (maxR >= maxG && maxR >= maxB) {
        cutDirection = quantizer_wu.Direction.red;
        if (maxRResult.cutLocation < 0) {
          return false;
        }
      } else if (maxG >= maxR && maxG >= maxB) {
        cutDirection = quantizer_wu.Direction.green;
      } else {
        cutDirection = quantizer_wu.Direction.blue;
      }
      two.r1 = one.r1;
      two.g1 = one.g1;
      two.b1 = one.b1;
      switch (cutDirection) {
        case C[0] || CT.C0:
          {
            one.r1 = maxRResult.cutLocation;
            two.r0 = one.r1;
            two.g0 = one.g0;
            two.b0 = one.b0;
            break;
          }
        case C[1] || CT.C1:
          {
            one.g1 = maxGResult.cutLocation;
            two.r0 = one.r0;
            two.g0 = one.g1;
            two.b0 = one.b0;
            break;
          }
        case C[2] || CT.C2:
          {
            one.b1 = maxBResult.cutLocation;
            two.r0 = one.r0;
            two.g0 = one.g0;
            two.b0 = one.b1;
            break;
          }
        default:
          {
            dart.throw("unexpected direction " + dart.str(cutDirection));
          }
      }
      one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);
      two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);
      return true;
    }
    maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {
      let bottomR = quantizer_wu.QuantizerWu.bottom(cube, direction, this.momentsR);
      let bottomG = quantizer_wu.QuantizerWu.bottom(cube, direction, this.momentsG);
      let bottomB = quantizer_wu.QuantizerWu.bottom(cube, direction, this.momentsB);
      let bottomW = quantizer_wu.QuantizerWu.bottom(cube, direction, this.weights);
      let max = 0.0;
      let cut = -1;
      for (let i = first; i < last; i = i + 1) {
        let halfR = bottomR + quantizer_wu.QuantizerWu.top(cube, direction, i, this.momentsR);
        let halfG = bottomG + quantizer_wu.QuantizerWu.top(cube, direction, i, this.momentsG);
        let halfB = bottomB + quantizer_wu.QuantizerWu.top(cube, direction, i, this.momentsB);
        let halfW = bottomW + quantizer_wu.QuantizerWu.top(cube, direction, i, this.weights);
        if (halfW === 0) {
          continue;
        }
        let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB)[$toDouble]();
        let tempDenominator = halfW[$toDouble]();
        let temp = tempNumerator / tempDenominator;
        halfR = wholeR - halfR;
        halfG = wholeG - halfG;
        halfB = wholeB - halfB;
        halfW = wholeW - halfW;
        if (halfW === 0) {
          continue;
        }
        tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB)[$toDouble]();
        tempDenominator = halfW[$toDouble]();
        temp = temp + tempNumerator / tempDenominator;
        if (temp > max) {
          max = temp;
          cut = i;
        }
      }
      return new quantizer_wu.MaximizeResult.new({cutLocation: cut, maximum: max});
    }
    static volume(cube, moment) {
      return moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, cube.b0)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b0)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b0)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b0));
    }
    static bottom(cube, direction, moment) {
      switch (direction) {
        case C[0] || CT.C0:
          {
            return -moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b0)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b0));
          }
        case C[1] || CT.C1:
          {
            return -moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b0)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b0));
          }
        case C[2] || CT.C2:
          {
            return -moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, cube.b0)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, cube.b0)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, cube.b0)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, cube.b0));
          }
        default:
          {
            dart.throw("unexpected direction " + dart.str(direction));
          }
      }
    }
    static top(cube, direction, position, moment) {
      switch (direction) {
        case C[0] || CT.C0:
          {
            return moment[$_get](quantizer_wu.QuantizerWu.getIndex(position, cube.g1, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(position, cube.g1, cube.b0)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(position, cube.g0, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(position, cube.g0, cube.b0));
          }
        case C[1] || CT.C1:
          {
            return moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, position, cube.b1)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, position, cube.b0)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, position, cube.b1)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, position, cube.b0));
          }
        case C[2] || CT.C2:
          {
            return moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g1, position)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r1, cube.g0, position)) - moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g1, position)) + moment[$_get](quantizer_wu.QuantizerWu.getIndex(cube.r0, cube.g0, position));
          }
        default:
          {
            dart.throw("unexpected direction " + dart.str(direction));
          }
      }
    }
    static ['_#new#tearOff']() {
      return new quantizer_wu.QuantizerWu.new();
    }
  };
  (quantizer_wu.QuantizerWu.new = function() {
    this[weights] = G.JSArrayOfint().of([]);
    this[momentsR] = G.JSArrayOfint().of([]);
    this[momentsG] = G.JSArrayOfint().of([]);
    this[momentsB] = G.JSArrayOfint().of([]);
    this[moments] = G.JSArrayOfdouble().of([]);
    this[cubes] = G.JSArrayOfBox().of([]);
    ;
  }).prototype = quantizer_wu.QuantizerWu.prototype;
  dart.addTypeTests(quantizer_wu.QuantizerWu);
  dart.addRtiResources(quantizer_wu.QuantizerWu, ["material_color_utilities__quantize__quantizer_wu|QuantizerWu", "material_color_utilities__quantize__quantizer|Quantizer"]);
  dart.addTypeCaches(quantizer_wu.QuantizerWu);
  dart.setMethodSignature(quantizer_wu.QuantizerWu, () => dart.global.Object.setPrototypeOf({
    quantize: T.IterableOfintAndintToFutureOfQuantizerResult(),
    constructHistogram: T.MapOfint$intTovoid(),
    computeMoments: T.VoidTovoid(),
    createBoxes: T.intToCreateBoxesResult(),
    createResult: T.intToListOfint(),
    variance: T.BoxTodouble(),
    cut: T.BoxAndBoxTobool(),
    maximize: T.BoxAndDirectionAndint__ToMaximizeResult()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(quantizer_wu.QuantizerWu))));
  dart.setStaticMethodSignature(quantizer_wu.QuantizerWu, () => ['getIndex', 'volume', 'bottom', 'top']);
  dart.setLibraryUri(quantizer_wu.QuantizerWu, I[0]);
  dart.setFieldSignature(quantizer_wu.QuantizerWu, () => dart.global.Object.setPrototypeOf({
    weights: {type: T.ListOfint(), isConst: false, isFinal: false, libraryUri: I[1]},
    momentsR: {type: T.ListOfint(), isConst: false, isFinal: false, libraryUri: I[1]},
    momentsG: {type: T.ListOfint(), isConst: false, isFinal: false, libraryUri: I[1]},
    momentsB: {type: T.ListOfint(), isConst: false, isFinal: false, libraryUri: I[1]},
    moments: {type: T.ListOfdouble(), isConst: false, isFinal: false, libraryUri: I[1]},
    cubes: {type: T.ListOfBox(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(quantizer_wu.QuantizerWu))));
  dart.setStaticFieldSignature(quantizer_wu.QuantizerWu, () => ['indexBits', 'maxIndex', 'sideLength', 'totalSize']);
  dart.defineLazy(quantizer_wu.QuantizerWu, {
    /*quantizer_wu.QuantizerWu.indexBits*/get indexBits() {
      return 5;
    },
    /*quantizer_wu.QuantizerWu.maxIndex*/get maxIndex() {
      return 32;
    },
    /*quantizer_wu.QuantizerWu.sideLength*/get sideLength() {
      return 33;
    },
    /*quantizer_wu.QuantizerWu.totalSize*/get totalSize() {
      return 35937;
    }
  }, false);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  quantizer_wu.Direction = class Direction extends core._Enum {
    [_enumToString]() {
      return "Direction." + this[_name];
    }
  };
  (quantizer_wu.Direction.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(quantizer_wu.Direction).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = quantizer_wu.Direction.prototype;
  dart.addTypeTests(quantizer_wu.Direction);
  dart.addRtiResources(quantizer_wu.Direction, ["material_color_utilities__quantize__quantizer_wu|Direction"]);
  dart.addTypeCaches(quantizer_wu.Direction);
  dart.setMethodSignature(quantizer_wu.Direction, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(quantizer_wu.Direction))));
  dart.setLibraryUri(quantizer_wu.Direction, I[0]);
  dart.setStaticFieldSignature(quantizer_wu.Direction, () => ['values', 'red', 'green', 'blue']);
  dart.defineLazy(quantizer_wu.Direction, {
    /*quantizer_wu.Direction.values*/get values() {
      return C[3] || CT.C3;
    },
    /*quantizer_wu.Direction.red*/get red() {
      return C[0] || CT.C0;
    },
    /*quantizer_wu.Direction.green*/get green() {
      return C[1] || CT.C1;
    },
    /*quantizer_wu.Direction.blue*/get blue() {
      return C[2] || CT.C2;
    }
  }, false);
  var cutLocation$ = dart.privateName(quantizer_wu, "MaximizeResult.cutLocation");
  var maximum$ = dart.privateName(quantizer_wu, "MaximizeResult.maximum");
  quantizer_wu.MaximizeResult = class MaximizeResult extends core.Object {
    get cutLocation() {
      return this[cutLocation$];
    }
    set cutLocation(value) {
      this[cutLocation$] = value;
    }
    get maximum() {
      return this[maximum$];
    }
    set maximum(value) {
      this[maximum$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let cutLocation = opts && 'cutLocation' in opts ? opts.cutLocation : null;
      let maximum = opts && 'maximum' in opts ? opts.maximum : null;
      return new quantizer_wu.MaximizeResult.new({cutLocation: cutLocation, maximum: maximum});
    }
  };
  (quantizer_wu.MaximizeResult.new = function(opts) {
    let cutLocation = opts && 'cutLocation' in opts ? opts.cutLocation : null;
    let maximum = opts && 'maximum' in opts ? opts.maximum : null;
    this[cutLocation$] = cutLocation;
    this[maximum$] = maximum;
    ;
  }).prototype = quantizer_wu.MaximizeResult.prototype;
  dart.addTypeTests(quantizer_wu.MaximizeResult);
  dart.addRtiResources(quantizer_wu.MaximizeResult, ["material_color_utilities__quantize__quantizer_wu|MaximizeResult"]);
  dart.addTypeCaches(quantizer_wu.MaximizeResult);
  dart.setLibraryUri(quantizer_wu.MaximizeResult, I[0]);
  dart.setFieldSignature(quantizer_wu.MaximizeResult, () => dart.global.Object.setPrototypeOf({
    cutLocation: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    maximum: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(quantizer_wu.MaximizeResult))));
  var requestedCount$ = dart.privateName(quantizer_wu, "CreateBoxesResult.requestedCount");
  var resultCount$ = dart.privateName(quantizer_wu, "CreateBoxesResult.resultCount");
  quantizer_wu.CreateBoxesResult = class CreateBoxesResult extends core.Object {
    get requestedCount() {
      return this[requestedCount$];
    }
    set requestedCount(value) {
      this[requestedCount$] = value;
    }
    get resultCount() {
      return this[resultCount$];
    }
    set resultCount(value) {
      this[resultCount$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let requestedCount = opts && 'requestedCount' in opts ? opts.requestedCount : null;
      let resultCount = opts && 'resultCount' in opts ? opts.resultCount : null;
      return new quantizer_wu.CreateBoxesResult.new({requestedCount: requestedCount, resultCount: resultCount});
    }
  };
  (quantizer_wu.CreateBoxesResult.new = function(opts) {
    let requestedCount = opts && 'requestedCount' in opts ? opts.requestedCount : null;
    let resultCount = opts && 'resultCount' in opts ? opts.resultCount : null;
    this[requestedCount$] = requestedCount;
    this[resultCount$] = resultCount;
    ;
  }).prototype = quantizer_wu.CreateBoxesResult.prototype;
  dart.addTypeTests(quantizer_wu.CreateBoxesResult);
  dart.addRtiResources(quantizer_wu.CreateBoxesResult, ["material_color_utilities__quantize__quantizer_wu|CreateBoxesResult"]);
  dart.addTypeCaches(quantizer_wu.CreateBoxesResult);
  dart.setLibraryUri(quantizer_wu.CreateBoxesResult, I[0]);
  dart.setFieldSignature(quantizer_wu.CreateBoxesResult, () => dart.global.Object.setPrototypeOf({
    requestedCount: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    resultCount: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(quantizer_wu.CreateBoxesResult))));
  var r0$ = dart.privateName(quantizer_wu, "Box.r0");
  var r1$ = dart.privateName(quantizer_wu, "Box.r1");
  var g0$ = dart.privateName(quantizer_wu, "Box.g0");
  var g1$ = dart.privateName(quantizer_wu, "Box.g1");
  var b0$ = dart.privateName(quantizer_wu, "Box.b0");
  var b1$ = dart.privateName(quantizer_wu, "Box.b1");
  var vol$ = dart.privateName(quantizer_wu, "Box.vol");
  quantizer_wu.Box = class Box extends core.Object {
    get r0() {
      return this[r0$];
    }
    set r0(value) {
      this[r0$] = value;
    }
    get r1() {
      return this[r1$];
    }
    set r1(value) {
      this[r1$] = value;
    }
    get g0() {
      return this[g0$];
    }
    set g0(value) {
      this[g0$] = value;
    }
    get g1() {
      return this[g1$];
    }
    set g1(value) {
      this[g1$] = value;
    }
    get b0() {
      return this[b0$];
    }
    set b0(value) {
      this[b0$] = value;
    }
    get b1() {
      return this[b1$];
    }
    set b1(value) {
      this[b1$] = value;
    }
    get vol() {
      return this[vol$];
    }
    set vol(value) {
      this[vol$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let r0 = opts && 'r0' in opts ? opts.r0 : 0;
      let r1 = opts && 'r1' in opts ? opts.r1 : 0;
      let g0 = opts && 'g0' in opts ? opts.g0 : 0;
      let g1 = opts && 'g1' in opts ? opts.g1 : 0;
      let b0 = opts && 'b0' in opts ? opts.b0 : 0;
      let b1 = opts && 'b1' in opts ? opts.b1 : 0;
      let vol = opts && 'vol' in opts ? opts.vol : 0;
      return new quantizer_wu.Box.new({r0: r0, r1: r1, g0: g0, g1: g1, b0: b0, b1: b1, vol: vol});
    }
    toString() {
      return "Box: R " + dart.strSafe(this.r0) + " -> " + dart.strSafe(this.r1) + " G  " + dart.strSafe(this.g0) + " -> " + dart.strSafe(this.g1) + " B " + dart.strSafe(this.b0) + " -> " + dart.strSafe(this.b1) + " VOL = " + dart.strSafe(this.vol);
    }
  };
  (quantizer_wu.Box.new = function(opts) {
    let r0 = opts && 'r0' in opts ? opts.r0 : 0;
    let r1 = opts && 'r1' in opts ? opts.r1 : 0;
    let g0 = opts && 'g0' in opts ? opts.g0 : 0;
    let g1 = opts && 'g1' in opts ? opts.g1 : 0;
    let b0 = opts && 'b0' in opts ? opts.b0 : 0;
    let b1 = opts && 'b1' in opts ? opts.b1 : 0;
    let vol = opts && 'vol' in opts ? opts.vol : 0;
    this[r0$] = r0;
    this[r1$] = r1;
    this[g0$] = g0;
    this[g1$] = g1;
    this[b0$] = b0;
    this[b1$] = b1;
    this[vol$] = vol;
    ;
  }).prototype = quantizer_wu.Box.prototype;
  dart.addTypeTests(quantizer_wu.Box);
  dart.addRtiResources(quantizer_wu.Box, ["material_color_utilities__quantize__quantizer_wu|Box"]);
  dart.addTypeCaches(quantizer_wu.Box);
  dart.setLibraryUri(quantizer_wu.Box, I[0]);
  dart.setFieldSignature(quantizer_wu.Box, () => dart.global.Object.setPrototypeOf({
    r0: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    r1: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    g0: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    g1: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    b0: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    b1: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    vol: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(quantizer_wu.Box))));
  dart.defineExtensionMethods(quantizer_wu.Box, ['toString']);
  dart.moduleConstCaches.set("packages/material_color_utilities/quantize/quantizer_wu.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|MapEntry":{"MapEntry.K":"1","MapEntry.V":"2"},"async|Future":{"Future.T":"1"},"core|Iterable":{"Iterable.E":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"material_color_utilities__quantize__quantizer_wu|Direction":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"material_color_utilities__quantize__quantizer_wu|QuantizerWu":{"material_color_utilities__quantize__quantizer|Quantizer":[]}}'));
  dart.trackLibraries("packages/material_color_utilities/quantize/quantizer_wu.dart", {
    "package:material_color_utilities/quantize/quantizer_wu.dart": quantizer_wu
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["quantizer_wu.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../F:/packages/material_color_utilities/quantize/quantizer_wu.dart.lib.js"}');
  // Exports:
  return {
    quantize__quantizer_wu: quantizer_wu
  };
}));

//# sourceMappingURL=quantizer_wu.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/recognizer.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__gestures__recognizer_dart(dart_sdk, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var recognizer = Object.create(dart.library);
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $times = dartx['*'];
  var $isNotEmpty = dartx.isNotEmpty;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    VoidToString: () => (T$.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfDragStartBehavior: () => (T$.ListOfDragStartBehavior = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__recognizer|DragStartBehavior>")))(),
    DragStartBehavior: () => (T$.DragStartBehavior = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|DragStartBehavior")))(),
    ListOfMultitouchDragStrategy: () => (T$.ListOfMultitouchDragStrategy = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__recognizer|MultitouchDragStrategy>")))(),
    MultitouchDragStrategy: () => (T$.MultitouchDragStrategy = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|MultitouchDragStrategy")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))(),
    PointerDeviceKind: () => (T$.PointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind")))(),
    intTobool: () => (T$.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    GestureRecognizer: () => (T$.GestureRecognizer = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|GestureRecognizer")))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    DiagnosticsNode: () => (T$.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    PointerPanZoomStartEventTovoid: () => (T$.PointerPanZoomStartEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerPanZoomStartEvent)")))(),
    PointerDownEventTovoid: () => (T$.PointerDownEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerDownEvent)")))(),
    PointerDownEventTobool: () => (T$.PointerDownEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerDownEvent)")))(),
    PointerPanZoomStartEventTobool: () => (T$.PointerPanZoomStartEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerPanZoomStartEvent)")))(),
    intToPointerDeviceKind: () => (T$.intToPointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind(core|int)")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    StringAndFn__ToTN: () => (T$.StringAndFn__ToTN = dart.constFn(dart_rti.findType("0^?(core|String,0^(){debugReport:core|String()?})<core|Object?>")))(),
    dynamic: () => (T$.dynamic = dart.constFn(dart_rti.findType("@")))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart_rti.findType("core|Object?")))(),
    DeviceGestureSettingsN: () => (T$.DeviceGestureSettingsN = dart.constFn(dart_rti.findType("flutter__src__gestures__gesture_settings|DeviceGestureSettings?")))(),
    SetNOfPointerDeviceKind: () => (T$.SetNOfPointerDeviceKind = dart.constFn(dart_rti.findType("core|Set<ui|PointerDeviceKind>?")))(),
    MapOfint$PointerDeviceKind: () => (T$.MapOfint$PointerDeviceKind = dart.constFn(dart_rti.findType("core|Map<core|int,ui|PointerDeviceKind>")))(),
    GestureArenaEntry: () => (T$.GestureArenaEntry = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaEntry")))(),
    PointerUpEvent: () => (T$.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerCancelEvent: () => (T$.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerPanZoomEndEvent: () => (T$.PointerPanZoomEndEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerPanZoomEndEvent")))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    GestureDispositionTovoid: () => (T$.GestureDispositionTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__arena|GestureDisposition)")))(),
    intAndGestureDispositionTovoid: () => (T$.intAndGestureDispositionTovoid = dart.constFn(dart_rti.findType("~(core|int,flutter__src__gestures__arena|GestureDisposition)")))(),
    GestureArenaTeamN: () => (T$.GestureArenaTeamN = dart.constFn(dart_rti.findType("flutter__src__gestures__team|GestureArenaTeam?")))(),
    intToGestureArenaEntry: () => (T$.intToGestureArenaEntry = dart.constFn(dart_rti.findType("flutter__src__gestures__arena|GestureArenaEntry(core|int)")))(),
    intAndMatrix4NTovoid: () => (T$.intAndMatrix4NTovoid = dart.constFn(dart_rti.findType("~(core|int[vector_math__vector_math_64|Matrix4?])")))(),
    PointerEventTovoid: () => (T$.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    MapOfint$GestureArenaEntry: () => (T$.MapOfint$GestureArenaEntry = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__gestures__arena|GestureArenaEntry>")))(),
    SetOfint: () => (T$.SetOfint = dart.constFn(dart_rti.findType("core|Set<core|int>")))(),
    ListOfGestureRecognizerState: () => (T$.ListOfGestureRecognizerState = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__recognizer|GestureRecognizerState>")))(),
    GestureRecognizerState: () => (T$.GestureRecognizerState = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|GestureRecognizerState")))(),
    PointerMoveEvent: () => (T$.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    intN: () => (T$.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    OffsetPairN: () => (T$.OffsetPairN = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair?")))(),
    PointerEventTodouble: () => (T$.PointerEventTodouble = dart.constFn(dart_rti.findType("core|double(flutter__src__gestures__events|PointerEvent)")))(),
    DurationN: () => (T$.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    TimerN: () => (T$.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))(),
    PointerEventToOffsetPair: () => (T$.PointerEventToOffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair(flutter__src__gestures__events|PointerEvent)")))(),
    OffsetPairToOffsetPair: () => (T$.OffsetPairToOffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair(flutter__src__gestures__recognizer|OffsetPair)")))(),
    OffsetPair: () => (T$.OffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair")))(),
    Offset: () => (T$.Offset = dart.constFn(dart_rti.findType("ui|Offset")))()
  };
  var G = {
    IdentityMapOfint$PointerDeviceKind: () => (G.IdentityMapOfint$PointerDeviceKind = dart.constFn(_js_helper.IdentityMap$(T$.int(), T$.PointerDeviceKind())))(),
    DiagnosticsPropertyOfGestureRecognizer: () => (G.DiagnosticsPropertyOfGestureRecognizer = dart.constFn(diagnostics.DiagnosticsProperty$(T$.GestureRecognizer())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNode())))(),
    DiagnosticsPropertyOfObject: () => (G.DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(T$.Object())))(),
    IdentityMapOfint$GestureArenaEntry: () => (G.IdentityMapOfint$GestureArenaEntry = dart.constFn(_js_helper.IdentityMap$(T$.int(), T$.GestureArenaEntry())))(),
    _IdentityHashSetOfint: () => (G._IdentityHashSetOfint = dart.constFn(collection._IdentityHashSet$(T$.int())))(),
    ListOfGestureArenaEntry: () => (G.ListOfGestureArenaEntry = dart.constFn(core.List$(T$.GestureArenaEntry())))(),
    EnumPropertyOfGestureRecognizerState: () => (G.EnumPropertyOfGestureRecognizerState = dart.constFn(diagnostics.EnumProperty$(T$.GestureRecognizerState())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "down",
        [_Enum_index]: 0
      }, recognizer.DragStartBehavior.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "start",
        [_Enum_index]: 1
      }, recognizer.DragStartBehavior.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], T$.DragStartBehavior());
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "latestPointer",
        [_Enum_index]: 0
      }, recognizer.MultitouchDragStrategy.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "sumAllPointers",
        [_Enum_index]: 1
      }, recognizer.MultitouchDragStrategy.prototype));
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[5] || CT.C5], T$.MultitouchDragStrategy());
    },
    get C6() {
      return C[6] = dart.fn(recognizer.GestureRecognizer._defaultButtonAcceptBehavior, T$.intTobool());
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ready",
        [_Enum_index]: 0
      }, recognizer.GestureRecognizerState.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "possible",
        [_Enum_index]: 1
      }, recognizer.GestureRecognizerState.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "defunct",
        [_Enum_index]: 2
      }, recognizer.GestureRecognizerState.prototype));
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10], T$.GestureRecognizerState());
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Offset.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [global$]: C[12] || CT.C12,
        [local$]: C[12] || CT.C12
      }, recognizer.OffsetPair.prototype));
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "package:flutter/src/gestures/recognizer.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/recognizer.dart",
    "package:flutter/src/gestures/gesture_settings.dart",
    "package:flutter/src/gestures/team.dart",
    "dart:async",
    "dart:ui"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  recognizer.DragStartBehavior = class DragStartBehavior extends core._Enum {
    [_enumToString]() {
      return "DragStartBehavior." + this[_name];
    }
  };
  (recognizer.DragStartBehavior.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(recognizer.DragStartBehavior).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = recognizer.DragStartBehavior.prototype;
  dart.addTypeTests(recognizer.DragStartBehavior);
  dart.addRtiResources(recognizer.DragStartBehavior, ["flutter__src__gestures__recognizer|DragStartBehavior"]);
  dart.addTypeCaches(recognizer.DragStartBehavior);
  dart.setMethodSignature(recognizer.DragStartBehavior, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.DragStartBehavior))));
  dart.setLibraryUri(recognizer.DragStartBehavior, I[0]);
  dart.setStaticFieldSignature(recognizer.DragStartBehavior, () => ['values', 'down', 'start']);
  dart.defineLazy(recognizer.DragStartBehavior, {
    /*recognizer.DragStartBehavior.values*/get values() {
      return C[0] || CT.C0;
    },
    /*recognizer.DragStartBehavior.down*/get down() {
      return C[1] || CT.C1;
    },
    /*recognizer.DragStartBehavior.start*/get start() {
      return C[2] || CT.C2;
    }
  }, false);
  recognizer.MultitouchDragStrategy = class MultitouchDragStrategy extends core._Enum {
    [_enumToString]() {
      return "MultitouchDragStrategy." + this[_name];
    }
  };
  (recognizer.MultitouchDragStrategy.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(recognizer.MultitouchDragStrategy).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = recognizer.MultitouchDragStrategy.prototype;
  dart.addTypeTests(recognizer.MultitouchDragStrategy);
  dart.addRtiResources(recognizer.MultitouchDragStrategy, ["flutter__src__gestures__recognizer|MultitouchDragStrategy"]);
  dart.addTypeCaches(recognizer.MultitouchDragStrategy);
  dart.setMethodSignature(recognizer.MultitouchDragStrategy, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.MultitouchDragStrategy))));
  dart.setLibraryUri(recognizer.MultitouchDragStrategy, I[0]);
  dart.setStaticFieldSignature(recognizer.MultitouchDragStrategy, () => ['values', 'latestPointer', 'sumAllPointers']);
  dart.defineLazy(recognizer.MultitouchDragStrategy, {
    /*recognizer.MultitouchDragStrategy.values*/get values() {
      return C[3] || CT.C3;
    },
    /*recognizer.MultitouchDragStrategy.latestPointer*/get latestPointer() {
      return C[4] || CT.C4;
    },
    /*recognizer.MultitouchDragStrategy.sumAllPointers*/get sumAllPointers() {
      return C[5] || CT.C5;
    }
  }, false);
  var debugOwner$ = dart.privateName(recognizer, "GestureRecognizer.debugOwner");
  var gestureSettings = dart.privateName(recognizer, "GestureRecognizer.gestureSettings");
  var supportedDevices$ = dart.privateName(recognizer, "GestureRecognizer.supportedDevices");
  var _pointerToKind = dart.privateName(recognizer, "_pointerToKind");
  var _allowedButtonsFilter = dart.privateName(recognizer, "_allowedButtonsFilter");
  var _is = dart.privateName(dart_rti, "_is");
  const GestureArenaMember_DiagnosticableTreeMixin$36 = class GestureArenaMember_DiagnosticableTreeMixin extends arena.GestureArenaMember {};
  (GestureArenaMember_DiagnosticableTreeMixin$36.new = function() {
  }).prototype = GestureArenaMember_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(GestureArenaMember_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  recognizer.GestureRecognizer = class GestureRecognizer extends GestureArenaMember_DiagnosticableTreeMixin$36 {
    get debugOwner() {
      return this[debugOwner$];
    }
    set debugOwner(value) {
      super.debugOwner = value;
    }
    get gestureSettings() {
      return this[gestureSettings];
    }
    set gestureSettings(value) {
      this[gestureSettings] = value;
    }
    get supportedDevices() {
      return this[supportedDevices$];
    }
    set supportedDevices(value) {
      this[supportedDevices$] = value;
    }
    static _defaultButtonAcceptBehavior(buttons) {
      return true;
    }
    addPointerPanZoom(event) {
      this[_pointerToKind][$_set](event.pointer, event.kind);
      if (this.isPointerPanZoomAllowed(event)) {
        this.addAllowedPointerPanZoom(event);
      } else {
        this.handleNonAllowedPointerPanZoom(event);
      }
    }
    addAllowedPointerPanZoom(event) {
    }
    addPointer(event) {
      this[_pointerToKind][$_set](event.pointer, event.kind);
      if (this.isPointerAllowed(event)) {
        this.addAllowedPointer(event);
      } else {
        this.handleNonAllowedPointer(event);
      }
    }
    addAllowedPointer(event) {
    }
    handleNonAllowedPointer(event) {
    }
    isPointerAllowed(event) {
      let t$364;
      return (this.supportedDevices == null || dart.nullCheck(this.supportedDevices).contains(event.kind)) && (t$364 = event.buttons, this[_allowedButtonsFilter](t$364));
    }
    handleNonAllowedPointerPanZoom(event) {
    }
    isPointerPanZoomAllowed(event) {
      return this.supportedDevices == null || dart.nullCheck(this.supportedDevices).contains(event.kind);
    }
    getKindForPointer(pointer) {
      if (!this[_pointerToKind][$containsKey](pointer)) dart.assertFailed(null, I[2], 268, 12, "_pointerToKind.containsKey(pointer)");
      return dart.nullCheck(this[_pointerToKind][$_get](pointer));
    }
    dispose() {
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
    }
    invokeCallback(T, name, callback, opts) {
      let debugReport = opts && 'debugReport' in opts ? opts.debugReport : null;
      let result = null;
      try {
        if (!dart.fn(() => {
          let t$364, t$364$;
          if (debug.debugPrintRecognizerCallbacksTrace) {
            let report = debugReport != null ? debugReport() : null;
            let prefix = debug.debugPrintGestureArenaDiagnostics ? " "[$times](19) + "❙ " : "";
            print.debugPrint(prefix + dart.str(this) + " calling " + name + " callback." + (dart.test((t$364$ = (t$364 = report, t$364 == null ? null : t$364[$isNotEmpty]), t$364$ == null ? false : t$364$)) ? " " + dart.str(report) : ""));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 305, 14, "() {\r\n        if (debugPrintRecognizerCallbacksTrace) {\r\n          final String? report = debugReport != null ? debugReport() : null;\r\n          // The 19 in the line below is the width of the prefix used by\r\n          // _debugLogDiagnostic in arena.dart.\r\n          final String prefix = debugPrintGestureArenaDiagnostics ? '${' ' * 19}❙ ' : '';\r\n          debugPrint('$prefix$this calling $name callback.${ (report?.isNotEmpty ?? false) ? \" $report\" : \"\" }');\r\n        }\r\n        return true;\r\n      }()");
        result = callback();
      } catch (t$36$35e) {
        let exception = dart.getThrown(t$36$35e);
        let stack = dart.stackTrace(t$36$35e);
        if (T$.Object()[_is](exception)) {
          let collector = null;
          if (!dart.fn(() => {
            collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new diagnostics.StringProperty.new("Handler", name), new (G.DiagnosticsPropertyOfGestureRecognizer()).new("Recognizer", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T$.VoidToListOfDiagnosticsNode());
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 318, 14, "() {\r\n        collector = () => <DiagnosticsNode>[\r\n          StringProperty('Handler', name),\r\n          DiagnosticsProperty<GestureRecognizer>('Recognizer', this, style: DiagnosticsTreeStyle.errorProperty),\r\n        ];\r\n        return true;\r\n      }()");
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture", context: new assertions.ErrorDescription.new("while handling a gesture"), informationCollector: collector}));
        } else
          throw t$36$35e;
      }
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfObject()).new("debugOwner", this.debugOwner, {defaultValue: null}));
    }
  };
  (recognizer.GestureRecognizer.new = function(opts) {
    let t$364;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[gestureSettings] = null;
    this[_pointerToKind] = new (G.IdentityMapOfint$PointerDeviceKind()).new();
    this[debugOwner$] = debugOwner;
    this[supportedDevices$] = supportedDevices;
    this[_allowedButtonsFilter] = (t$364 = allowedButtonsFilter, t$364 == null ? C[6] || CT.C6 : t$364);
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/gestures.dart", className: dart.strSafe(dart_rti.createRuntimeType(T$.GestureRecognizer())), object: this});
    }
  }).prototype = recognizer.GestureRecognizer.prototype;
  dart.addTypeTests(recognizer.GestureRecognizer);
  dart.addRtiResources(recognizer.GestureRecognizer, ["flutter__src__gestures__recognizer|GestureRecognizer"]);
  dart.addTypeCaches(recognizer.GestureRecognizer);
  dart.setMethodSignature(recognizer.GestureRecognizer, () => dart.global.Object.setPrototypeOf({
    addPointerPanZoom: T$.PointerPanZoomStartEventTovoid(),
    addAllowedPointerPanZoom: T$.PointerPanZoomStartEventTovoid(),
    addPointer: T$.PointerDownEventTovoid(),
    addAllowedPointer: T$.PointerDownEventTovoid(),
    handleNonAllowedPointer: T$.PointerDownEventTovoid(),
    isPointerAllowed: T$.PointerDownEventTobool(),
    handleNonAllowedPointerPanZoom: T$.PointerPanZoomStartEventTovoid(),
    isPointerPanZoomAllowed: T$.PointerPanZoomStartEventTobool(),
    getKindForPointer: T$.intToPointerDeviceKind(),
    dispose: T$.VoidTovoid(),
    invokeCallback: T$.StringAndFn__ToTN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.GestureRecognizer))));
  dart.setMethodsDefaultTypeArgSignature(recognizer.GestureRecognizer, () => dart.global.Object.setPrototypeOf({invokeCallback: [T$.dynamic()]}, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(recognizer.GestureRecognizer))));
  dart.setStaticMethodSignature(recognizer.GestureRecognizer, () => ['_defaultButtonAcceptBehavior']);
  dart.setLibraryUri(recognizer.GestureRecognizer, I[0]);
  dart.setFieldSignature(recognizer.GestureRecognizer, () => dart.global.Object.setPrototypeOf({
    debugOwner: {type: T$.ObjectN(), isConst: false, isFinal: true, libraryUri: I[1]},
    gestureSettings: {type: T$.DeviceGestureSettingsN(), isConst: false, isFinal: false, libraryUri: I[3]},
    supportedDevices: {type: T$.SetNOfPointerDeviceKind(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_allowedButtonsFilter]: {type: T$.intTobool(), isConst: false, isFinal: true},
    [_pointerToKind]: {type: T$.MapOfint$PointerDeviceKind(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(recognizer.GestureRecognizer))));
  var _entries = dart.privateName(recognizer, "_entries");
  var _trackedPointers = dart.privateName(recognizer, "_trackedPointers");
  var _team = dart.privateName(recognizer, "_team");
  var _addPointerToArena = dart.privateName(recognizer, "_addPointerToArena");
  recognizer.OneSequenceGestureRecognizer = class OneSequenceGestureRecognizer extends recognizer.GestureRecognizer {
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
    }
    handleNonAllowedPointer(event) {
      this.resolve(arena.GestureDisposition.rejected);
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
    }
    resolve(disposition) {
      let localEntries = G.ListOfGestureArenaEntry().of(this[_entries][$values]);
      this[_entries][$clear]();
      for (let entry of localEntries) {
        entry.resolve(disposition);
      }
    }
    resolvePointer(pointer, disposition) {
      let entry = this[_entries][$_get](pointer);
      if (entry != null) {
        this[_entries][$remove](pointer);
        entry.resolve(disposition);
      }
    }
    dispose() {
      this.resolve(arena.GestureDisposition.rejected);
      for (let pointer of this[_trackedPointers]) {
        binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
      }
      this[_trackedPointers].clear();
      if (!this[_entries][$isEmpty]) dart.assertFailed(null, I[2], 438, 12, "_entries.isEmpty");
      super.dispose();
    }
    get team() {
      return this[_team];
    }
    set team(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 456, 12, "value != null");
      if (!this[_entries][$isEmpty]) dart.assertFailed(null, I[2], 457, 12, "_entries.isEmpty");
      if (!this[_trackedPointers][$isEmpty]) dart.assertFailed(null, I[2], 458, 12, "_trackedPointers.isEmpty");
      if (!(this[_team] == null)) dart.assertFailed(null, I[2], 459, 12, "_team == null");
      this[_team] = value;
    }
    [_addPointerToArena](pointer) {
      if (this[_team] != null) {
        return dart.nullCheck(this[_team]).add(pointer, this);
      }
      return binding.GestureBinding.instance.gestureArena.add(pointer, this);
    }
    startTrackingPointer(pointer, transform = null) {
      binding.GestureBinding.instance.pointerRouter.addRoute(pointer, dart.bind(this, 'handleEvent'), transform);
      this[_trackedPointers].add(pointer);
      this[_entries][$_set](pointer, this[_addPointerToArena](pointer));
    }
    stopTrackingPointer(pointer) {
      if (this[_trackedPointers].contains(pointer)) {
        binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
        this[_trackedPointers].remove(pointer);
        if (this[_trackedPointers][$isEmpty]) {
          this.didStopTrackingLastPointer(pointer);
        }
      }
    }
    stopTrackingIfPointerNoLongerDown(event) {
      if (T$.PointerUpEvent()[_is](event) || T$.PointerCancelEvent()[_is](event) || T$.PointerPanZoomEndEvent()[_is](event)) {
        this.stopTrackingPointer(event.pointer);
      }
    }
  };
  (recognizer.OneSequenceGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[_entries] = new (G.IdentityMapOfint$GestureArenaEntry()).new();
    this[_trackedPointers] = new (G._IdentityHashSetOfint()).new();
    this[_team] = null;
    dart.global.Object.getPrototypeOf(recognizer.OneSequenceGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = recognizer.OneSequenceGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.OneSequenceGestureRecognizer);
  dart.addRtiResources(recognizer.OneSequenceGestureRecognizer, ["flutter__src__gestures__recognizer|OneSequenceGestureRecognizer"]);
  dart.addTypeCaches(recognizer.OneSequenceGestureRecognizer);
  dart.setMethodSignature(recognizer.OneSequenceGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    acceptGesture: T$.intTovoid(),
    rejectGesture: T$.intTovoid(),
    resolve: T$.GestureDispositionTovoid(),
    resolvePointer: T$.intAndGestureDispositionTovoid(),
    [_addPointerToArena]: T$.intToGestureArenaEntry(),
    startTrackingPointer: T$.intAndMatrix4NTovoid(),
    stopTrackingPointer: T$.intTovoid(),
    stopTrackingIfPointerNoLongerDown: T$.PointerEventTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.OneSequenceGestureRecognizer))));
  dart.setGetterSignature(recognizer.OneSequenceGestureRecognizer, () => dart.global.Object.setPrototypeOf({team: T$.GestureArenaTeamN()}, dart.getGetters(dart.global.Object.getPrototypeOf(recognizer.OneSequenceGestureRecognizer))));
  dart.setSetterSignature(recognizer.OneSequenceGestureRecognizer, () => dart.global.Object.setPrototypeOf({team: T$.GestureArenaTeamN()}, dart.getSetters(dart.global.Object.getPrototypeOf(recognizer.OneSequenceGestureRecognizer))));
  dart.setLibraryUri(recognizer.OneSequenceGestureRecognizer, I[0]);
  dart.setFieldSignature(recognizer.OneSequenceGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_entries]: {type: T$.MapOfint$GestureArenaEntry(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_trackedPointers]: {type: T$.SetOfint(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_team]: {type: T$.GestureArenaTeamN(), isConst: false, isFinal: false, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(recognizer.OneSequenceGestureRecognizer))));
  recognizer.GestureRecognizerState = class GestureRecognizerState extends core._Enum {
    [_enumToString]() {
      return "GestureRecognizerState." + this[_name];
    }
  };
  (recognizer.GestureRecognizerState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(recognizer.GestureRecognizerState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = recognizer.GestureRecognizerState.prototype;
  dart.addTypeTests(recognizer.GestureRecognizerState);
  dart.addRtiResources(recognizer.GestureRecognizerState, ["flutter__src__gestures__recognizer|GestureRecognizerState"]);
  dart.addTypeCaches(recognizer.GestureRecognizerState);
  dart.setMethodSignature(recognizer.GestureRecognizerState, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.GestureRecognizerState))));
  dart.setLibraryUri(recognizer.GestureRecognizerState, I[0]);
  dart.setStaticFieldSignature(recognizer.GestureRecognizerState, () => ['values', 'ready', 'possible', 'defunct']);
  dart.defineLazy(recognizer.GestureRecognizerState, {
    /*recognizer.GestureRecognizerState.values*/get values() {
      return C[7] || CT.C7;
    },
    /*recognizer.GestureRecognizerState.ready*/get ready() {
      return C[8] || CT.C8;
    },
    /*recognizer.GestureRecognizerState.possible*/get possible() {
      return C[9] || CT.C9;
    },
    /*recognizer.GestureRecognizerState.defunct*/get defunct() {
      return C[10] || CT.C10;
    }
  }, false);
  var deadline$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.deadline");
  var preAcceptSlopTolerance$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.preAcceptSlopTolerance");
  var postAcceptSlopTolerance$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.postAcceptSlopTolerance");
  var _state = dart.privateName(recognizer, "_state");
  var _primaryPointer = dart.privateName(recognizer, "_primaryPointer");
  var _initialPosition = dart.privateName(recognizer, "_initialPosition");
  var _gestureAccepted = dart.privateName(recognizer, "_gestureAccepted");
  var _timer = dart.privateName(recognizer, "_timer");
  var _getGlobalDistance = dart.privateName(recognizer, "_getGlobalDistance");
  var _stopTimer = dart.privateName(recognizer, "_stopTimer");
  recognizer.PrimaryPointerGestureRecognizer = class PrimaryPointerGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get deadline() {
      return this[deadline$];
    }
    set deadline(value) {
      super.deadline = value;
    }
    get preAcceptSlopTolerance() {
      return this[preAcceptSlopTolerance$];
    }
    set preAcceptSlopTolerance(value) {
      super.preAcceptSlopTolerance = value;
    }
    get postAcceptSlopTolerance() {
      return this[postAcceptSlopTolerance$];
    }
    set postAcceptSlopTolerance(value) {
      super.postAcceptSlopTolerance = value;
    }
    get state() {
      return this[_state];
    }
    get primaryPointer() {
      return this[_primaryPointer];
    }
    get initialPosition() {
      return this[_initialPosition];
    }
    addAllowedPointer(event) {
      super.addAllowedPointer(event);
      if (this.state === recognizer.GestureRecognizerState.ready) {
        this[_state] = recognizer.GestureRecognizerState.possible;
        this[_primaryPointer] = event.pointer;
        this[_initialPosition] = new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
        if (this.deadline != null) {
          this[_timer] = async.Timer.new(dart.nullCheck(this.deadline), dart.fn(() => this.didExceedDeadlineWithEvent(event), T$.VoidTovoid()));
        }
      }
    }
    handleNonAllowedPointer(event) {
      if (!this[_gestureAccepted]) {
        super.handleNonAllowedPointer(event);
      }
    }
    handleEvent(event) {
      if (!(this.state !== recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, I[2], 655, 12, "state != GestureRecognizerState.ready");
      if (this.state === recognizer.GestureRecognizerState.possible && event.pointer === this.primaryPointer) {
        let isPreAcceptSlopPastTolerance = !this[_gestureAccepted] && this.preAcceptSlopTolerance != null && this[_getGlobalDistance](event) > dart.nullCheck(this.preAcceptSlopTolerance);
        let isPostAcceptSlopPastTolerance = this[_gestureAccepted] && this.postAcceptSlopTolerance != null && this[_getGlobalDistance](event) > dart.nullCheck(this.postAcceptSlopTolerance);
        if (T$.PointerMoveEvent()[_is](event) && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {
          this.resolve(arena.GestureDisposition.rejected);
          this.stopTrackingPointer(dart.nullCheck(this.primaryPointer));
        } else {
          this.handlePrimaryPointer(event);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    didExceedDeadline() {
      if (!(this.deadline == null)) dart.assertFailed(null, I[2], 687, 12, "deadline == null");
    }
    didExceedDeadlineWithEvent(event) {
      this.didExceedDeadline();
    }
    acceptGesture(pointer) {
      if (pointer === this.primaryPointer) {
        this[_stopTimer]();
        this[_gestureAccepted] = true;
      }
    }
    rejectGesture(pointer) {
      if (pointer === this.primaryPointer && this.state === recognizer.GestureRecognizerState.possible) {
        this[_stopTimer]();
        this[_state] = recognizer.GestureRecognizerState.defunct;
      }
    }
    didStopTrackingLastPointer(pointer) {
      if (!(this.state !== recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, I[2], 719, 12, "state != GestureRecognizerState.ready");
      this[_stopTimer]();
      this[_state] = recognizer.GestureRecognizerState.ready;
      this[_initialPosition] = null;
      this[_gestureAccepted] = false;
    }
    dispose() {
      this[_stopTimer]();
      super.dispose();
    }
    [_stopTimer]() {
      if (this[_timer] != null) {
        dart.nullCheck(this[_timer]).cancel();
        this[_timer] = null;
      }
    }
    [_getGlobalDistance](event) {
      let offset = event.position['-'](dart.nullCheck(this.initialPosition).global);
      return offset.distance;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.EnumPropertyOfGestureRecognizerState()).new("state", this.state));
    }
  };
  (recognizer.PrimaryPointerGestureRecognizer.new = function(opts) {
    let deadline = opts && 'deadline' in opts ? opts.deadline : null;
    let preAcceptSlopTolerance = opts && 'preAcceptSlopTolerance' in opts ? opts.preAcceptSlopTolerance : 18;
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : 18;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[_state] = recognizer.GestureRecognizerState.ready;
    this[_primaryPointer] = null;
    this[_initialPosition] = null;
    this[_gestureAccepted] = false;
    this[_timer] = null;
    this[deadline$] = deadline;
    this[preAcceptSlopTolerance$] = preAcceptSlopTolerance;
    this[postAcceptSlopTolerance$] = postAcceptSlopTolerance;
    if (!(preAcceptSlopTolerance == null || dart.notNull(preAcceptSlopTolerance) >= 0)) dart.assertFailed("The preAcceptSlopTolerance must be positive or null", I[2], 569, 10, "preAcceptSlopTolerance == null || preAcceptSlopTolerance >= 0");
    if (!(postAcceptSlopTolerance == null || dart.notNull(postAcceptSlopTolerance) >= 0)) dart.assertFailed("The postAcceptSlopTolerance must be positive or null", I[2], 573, 10, "postAcceptSlopTolerance == null || postAcceptSlopTolerance >= 0");
    dart.global.Object.getPrototypeOf(recognizer.PrimaryPointerGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = recognizer.PrimaryPointerGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.PrimaryPointerGestureRecognizer);
  dart.addRtiResources(recognizer.PrimaryPointerGestureRecognizer, ["flutter__src__gestures__recognizer|PrimaryPointerGestureRecognizer"]);
  dart.addTypeCaches(recognizer.PrimaryPointerGestureRecognizer);
  dart.setMethodSignature(recognizer.PrimaryPointerGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    handleEvent: T$.PointerEventTovoid(),
    didExceedDeadline: T$.VoidTovoid(),
    didExceedDeadlineWithEvent: T$.PointerDownEventTovoid(),
    didStopTrackingLastPointer: T$.intTovoid(),
    [_stopTimer]: T$.VoidTovoid(),
    [_getGlobalDistance]: T$.PointerEventTodouble()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.PrimaryPointerGestureRecognizer))));
  dart.setGetterSignature(recognizer.PrimaryPointerGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    state: T$.GestureRecognizerState(),
    primaryPointer: T$.intN(),
    initialPosition: T$.OffsetPairN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(recognizer.PrimaryPointerGestureRecognizer))));
  dart.setLibraryUri(recognizer.PrimaryPointerGestureRecognizer, I[0]);
  dart.setFieldSignature(recognizer.PrimaryPointerGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    deadline: {type: T$.DurationN(), isConst: false, isFinal: true, libraryUri: I[1]},
    preAcceptSlopTolerance: {type: T$.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    postAcceptSlopTolerance: {type: T$.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_state]: {type: T$.GestureRecognizerState(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_primaryPointer]: {type: T$.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_initialPosition]: {type: T$.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_gestureAccepted]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_timer]: {type: T$.TimerN(), isConst: false, isFinal: false, libraryUri: I[5]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(recognizer.PrimaryPointerGestureRecognizer))));
  var local$ = dart.privateName(recognizer, "OffsetPair.local");
  var global$ = dart.privateName(recognizer, "OffsetPair.global");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  recognizer.OffsetPair = class OffsetPair extends core.Object {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    get global() {
      return this[global$];
    }
    set global(value) {
      super.global = value;
    }
    static ['_#new#tearOff'](opts) {
      let local = opts && 'local' in opts ? opts.local : null;
      let global = opts && 'global' in opts ? opts.global : null;
      return new recognizer.OffsetPair.new({local: local, global: global});
    }
    static fromEventPosition(event) {
      return new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
    }
    static ['_#fromEventPosition#tearOff'](event) {
      return recognizer.OffsetPair.fromEventPosition(event);
    }
    static fromEventDelta(event) {
      return new recognizer.OffsetPair.new({local: event.localDelta, global: event.delta});
    }
    static ['_#fromEventDelta#tearOff'](event) {
      return recognizer.OffsetPair.fromEventDelta(event);
    }
    ['+'](other) {
      return new recognizer.OffsetPair.new({local: this.local['+'](other.local), global: this.global['+'](other.global)});
    }
    ['-'](other) {
      return new recognizer.OffsetPair.new({local: this.local['-'](other.local), global: this.global['-'](other.global)});
    }
    toString() {
      return object.objectRuntimeType(this, "OffsetPair") + "(local: " + dart.str(this.local) + ", global: " + dart.str(this.global) + ")";
    }
  };
  (recognizer.OffsetPair.new = function(opts) {
    let local = opts && 'local' in opts ? opts.local : null;
    let global = opts && 'global' in opts ? opts.global : null;
    this[local$] = local;
    this[global$] = global;
    ;
  }).prototype = recognizer.OffsetPair.prototype;
  dart.addTypeTests(recognizer.OffsetPair);
  dart.addRtiResources(recognizer.OffsetPair, ["flutter__src__gestures__recognizer|OffsetPair"]);
  dart.addTypeCaches(recognizer.OffsetPair);
  dart.setMethodSignature(recognizer.OffsetPair, () => dart.global.Object.setPrototypeOf({
    '+': T$.OffsetPairToOffsetPair(),
    '-': T$.OffsetPairToOffsetPair()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(recognizer.OffsetPair))));
  dart.setStaticMethodSignature(recognizer.OffsetPair, () => ['fromEventPosition', 'fromEventDelta']);
  dart.setLibraryUri(recognizer.OffsetPair, I[0]);
  dart.setFieldSignature(recognizer.OffsetPair, () => dart.global.Object.setPrototypeOf({
    local: {type: T$.Offset(), isConst: false, isFinal: true, libraryUri: I[6]},
    global: {type: T$.Offset(), isConst: false, isFinal: true, libraryUri: I[6]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(recognizer.OffsetPair))));
  dart.setStaticFieldSignature(recognizer.OffsetPair, () => ['zero']);
  dart.defineExtensionMethods(recognizer.OffsetPair, ['toString']);
  dart.defineLazy(recognizer.OffsetPair, {
    /*recognizer.OffsetPair.zero*/get zero() {
      return C[11] || CT.C11;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/gestures/recognizer.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__recognizer|DragStartBehavior":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__gestures__recognizer|MultitouchDragStrategy":{"core|_Enum":[],"core|Enum":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomStartEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomStartEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerPanZoomEndEvent":{"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerPanZoomEndEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__arena|GestureDisposition":{"core|_Enum":[],"core|Enum":[]},"flutter__src__gestures__recognizer|GestureRecognizerState":{"core|_Enum":[],"core|Enum":[]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|PrimaryPointerGestureRecognizer":{"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/recognizer.dart", {
    "package:flutter/src/gestures/recognizer.dart": recognizer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["recognizer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/recognizer.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__recognizer: recognizer
  };
}));

//# sourceMappingURL=recognizer.dart.lib.js.map

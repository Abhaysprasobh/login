// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/resampler.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/events.dart'], (function load__packages__flutter__src__gestures__resampler_dart(dart_sdk, packages__flutter__src__gestures__events$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  var resampler = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  var $iterator = dartx.iterator;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    PointerEvent: () => (T.PointerEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerRemovedEvent: () => (T.PointerRemovedEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerRemovedEvent")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerHoverEvent: () => (T.PointerHoverEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerHoverEvent")))(),
    PointerEventAndOffsetAndOffset__ToPointerEvent: () => (T.PointerEventAndOffsetAndOffset__ToPointerEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent(flutter__src__gestures__events|PointerEvent,ui|Offset,ui|Offset,core|Duration,core|int)")))(),
    PointerEventAndOffsetAndOffset__ToPointerEvent$1: () => (T.PointerEventAndOffsetAndOffset__ToPointerEvent$1 = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent(flutter__src__gestures__events|PointerEvent,ui|Offset,ui|Offset,core|int,core|Duration,core|int)")))(),
    PointerEventAndOffsetAndOffset__ToPointerEvent$2: () => (T.PointerEventAndOffsetAndOffset__ToPointerEvent$2 = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent(flutter__src__gestures__events|PointerEvent,ui|Offset,ui|Offset,core|int,core|Duration,core|bool,core|int)")))(),
    DurationToOffset: () => (T.DurationToOffset = dart.constFn(dart_rti.findType("ui|Offset(core|Duration)")))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart_rti.findType("~(core|Duration)")))(),
    DurationAndDurationAndFnTovoid: () => (T.DurationAndDurationAndFnTovoid = dart.constFn(dart_rti.findType("~(core|Duration,core|Duration,~(flutter__src__gestures__events|PointerEvent))")))(),
    DurationAndFnTovoid: () => (T.DurationAndFnTovoid = dart.constFn(dart_rti.findType("~(core|Duration,~(flutter__src__gestures__events|PointerEvent))")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(~(flutter__src__gestures__events|PointerEvent))")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    QueueOfPointerEvent: () => (T.QueueOfPointerEvent = dart.constFn(dart_rti.findType("collection|Queue<flutter__src__gestures__events|PointerEvent>")))(),
    PointerEventN: () => (T.PointerEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent?")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))()
  };
  var G = {
    ListQueueOfPointerEvent: () => (G.ListQueueOfPointerEvent = dart.constFn(collection.ListQueue$(T.PointerEvent())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/resampler.dart",
    "package:flutter/src/gestures/resampler.dart",
    "dart:collection",
    "package:flutter/src/gestures/events.dart",
    "dart:ui",
    "dart:core"
  ];
  var _queuedEvents = dart.privateName(resampler, "_queuedEvents");
  var _last = dart.privateName(resampler, "_last");
  var _next = dart.privateName(resampler, "_next");
  var _position = dart.privateName(resampler, "_position");
  var _isTracked = dart.privateName(resampler, "_isTracked");
  var _isDown = dart.privateName(resampler, "_isDown");
  var _pointerIdentifier = dart.privateName(resampler, "_pointerIdentifier");
  var _hasButtons = dart.privateName(resampler, "_hasButtons");
  var _toHoverEvent = dart.privateName(resampler, "_toHoverEvent");
  var _toMoveEvent = dart.privateName(resampler, "_toMoveEvent");
  var _toMoveOrHoverEvent = dart.privateName(resampler, "_toMoveOrHoverEvent");
  var _positionAt = dart.privateName(resampler, "_positionAt");
  var _processPointerEvents = dart.privateName(resampler, "_processPointerEvents");
  var _is = dart.privateName(dart_rti, "_is");
  var _dequeueAndSampleNonHoverOrMovePointerEventsUntil = dart.privateName(resampler, "_dequeueAndSampleNonHoverOrMovePointerEventsUntil");
  var _samplePointerPosition = dart.privateName(resampler, "_samplePointerPosition");
  resampler.PointerEventResampler = class PointerEventResampler extends core.Object {
    [_toHoverEvent](event, position, delta, timeStamp, buttons) {
      return new events.PointerHoverEvent.new({viewId: event.viewId, timeStamp: timeStamp, kind: event.kind, device: event.device, position: position, delta: delta, buttons: event.buttons, obscured: event.obscured, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distance: event.distance, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, synthesized: event.synthesized, embedderId: event.embedderId});
    }
    [_toMoveEvent](event, position, delta, pointerIdentifier, timeStamp, buttons) {
      return new events.PointerMoveEvent.new({viewId: event.viewId, timeStamp: timeStamp, pointer: pointerIdentifier, kind: event.kind, device: event.device, position: position, delta: delta, buttons: buttons, obscured: event.obscured, pressure: event.pressure, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, platformData: event.platformData, synthesized: event.synthesized, embedderId: event.embedderId});
    }
    [_toMoveOrHoverEvent](event, position, delta, pointerIdentifier, timeStamp, isDown, buttons) {
      return isDown ? this[_toMoveEvent](event, position, delta, pointerIdentifier, timeStamp, buttons) : this[_toHoverEvent](event, position, delta, timeStamp, buttons);
    }
    [_positionAt](sampleTime) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5, t$360$6, t$360$7, t$360$8, t$360$9;
      let x = (t$360$ = (t$360 = this[_next], t$360 == null ? null : t$360.position.dx), t$360$ == null ? 0.0 : t$360$);
      let y = (t$360$1 = (t$360$0 = this[_next], t$360$0 == null ? null : t$360$0.position.dy), t$360$1 == null ? 0.0 : t$360$1);
      let nextTimeStamp = (t$360$3 = (t$360$2 = this[_next], t$360$2 == null ? null : t$360$2.timeStamp), t$360$3 == null ? core.Duration.zero : t$360$3);
      let lastTimeStamp = (t$360$5 = (t$360$4 = this[_last], t$360$4 == null ? null : t$360$4.timeStamp), t$360$5 == null ? core.Duration.zero : t$360$5);
      if (nextTimeStamp['>'](sampleTime) && nextTimeStamp['>'](lastTimeStamp)) {
        let interval = nextTimeStamp['-'](lastTimeStamp).inMicroseconds[$toDouble]();
        let scalar = sampleTime['-'](lastTimeStamp).inMicroseconds[$toDouble]() / interval;
        let lastX = (t$360$7 = (t$360$6 = this[_last], t$360$6 == null ? null : t$360$6.position.dx), t$360$7 == null ? 0.0 : t$360$7);
        let lastY = (t$360$9 = (t$360$8 = this[_last], t$360$8 == null ? null : t$360$8.position.dy), t$360$9 == null ? 0.0 : t$360$9);
        x = lastX + (x - lastX) * scalar;
        y = lastY + (y - lastY) * scalar;
      }
      return new ui.Offset.new(x, y);
    }
    [_processPointerEvents](sampleTime) {
      let t$360, t$360$;
      let it = this[_queuedEvents][$iterator];
      while (it.moveNext()) {
        let event = it.current;
        if (event.timeStamp['<='](sampleTime) || this[_last] == null) {
          this[_last] = event;
          this[_next] = event;
          continue;
        }
        let nextTimeStamp = (t$360$ = (t$360 = this[_next], t$360 == null ? null : t$360.timeStamp), t$360$ == null ? core.Duration.zero : t$360$);
        if (nextTimeStamp['<'](sampleTime)) {
          this[_next] = event;
          break;
        }
      }
    }
    [_dequeueAndSampleNonHoverOrMovePointerEventsUntil](sampleTime, nextSampleTime, callback) {
      let endTime = sampleTime;
      let it = this[_queuedEvents][$iterator];
      while (it.moveNext()) {
        let event = it.current;
        if (event.timeStamp['>'](sampleTime)) {
          if (event.timeStamp['>='](nextSampleTime)) {
            break;
          }
          if (T.PointerUpEvent()[_is](event) || T.PointerRemovedEvent()[_is](event)) {
            endTime = event.timeStamp;
            continue;
          }
          if (!T.PointerMoveEvent()[_is](event) && !T.PointerHoverEvent()[_is](event)) {
            break;
          }
        }
      }
      while (this[_queuedEvents][$isNotEmpty]) {
        let event = this[_queuedEvents][$first];
        if (event.timeStamp['>'](endTime)) {
          break;
        }
        let wasTracked = this[_isTracked];
        let wasDown = this[_isDown];
        let hadButtons = this[_hasButtons];
        this[_isTracked] = !T.PointerRemovedEvent()[_is](event);
        this[_isDown] = event.down;
        this[_hasButtons] = event.buttons;
        let position = this[_positionAt](sampleTime);
        if (this[_isTracked] && !wasTracked) {
          this[_position] = position;
        }
        let pointerIdentifier = event.pointer;
        if (!(!wasDown || this[_pointerIdentifier] === pointerIdentifier)) dart.assertFailed(null, I[0], 238, 14, "!wasDown || _pointerIdentifier == pointerIdentifier");
        this[_pointerIdentifier] = pointerIdentifier;
        if (!T.PointerMoveEvent()[_is](event) && !T.PointerHoverEvent()[_is](event)) {
          if (!dart.equals(position, this[_position])) {
            let delta = position['-'](this[_position]);
            callback(this[_toMoveOrHoverEvent](event, position, delta, this[_pointerIdentifier], sampleTime, wasDown, hadButtons));
            this[_position] = position;
          }
          callback(event.copyWith({position: position, delta: ui.Offset.zero, pointer: pointerIdentifier, timeStamp: sampleTime}));
        }
        this[_queuedEvents].removeFirst();
      }
    }
    [_samplePointerPosition](sampleTime, callback) {
      let position = this[_positionAt](sampleTime);
      let next = this[_next];
      if (!dart.equals(position, this[_position]) && next != null) {
        let delta = position['-'](this[_position]);
        callback(this[_toMoveOrHoverEvent](next, position, delta, this[_pointerIdentifier], sampleTime, this[_isDown], this[_hasButtons]));
        this[_position] = position;
      }
    }
    addEvent(event) {
      this[_queuedEvents].add(event);
    }
    sample(sampleTime, nextSampleTime, callback) {
      this[_processPointerEvents](sampleTime);
      this[_dequeueAndSampleNonHoverOrMovePointerEventsUntil](sampleTime, nextSampleTime, callback);
      if (this[_isTracked]) {
        this[_samplePointerPosition](sampleTime, callback);
      }
    }
    stop(callback) {
      while (this[_queuedEvents][$isNotEmpty]) {
        callback(this[_queuedEvents].removeFirst());
      }
      this[_pointerIdentifier] = 0;
      this[_isDown] = false;
      this[_isTracked] = false;
      this[_position] = ui.Offset.zero;
      this[_next] = null;
      this[_last] = null;
    }
    get hasPendingEvents() {
      return this[_queuedEvents][$isNotEmpty];
    }
    get isTracked() {
      return this[_isTracked];
    }
    get isDown() {
      return this[_isDown];
    }
    static ['_#new#tearOff']() {
      return new resampler.PointerEventResampler.new();
    }
  };
  (resampler.PointerEventResampler.new = function() {
    this[_queuedEvents] = new (G.ListQueueOfPointerEvent()).new();
    this[_last] = null;
    this[_next] = null;
    this[_position] = ui.Offset.zero;
    this[_isTracked] = false;
    this[_isDown] = false;
    this[_pointerIdentifier] = 0;
    this[_hasButtons] = 0;
    ;
  }).prototype = resampler.PointerEventResampler.prototype;
  dart.addTypeTests(resampler.PointerEventResampler);
  dart.addRtiResources(resampler.PointerEventResampler, ["flutter__src__gestures__resampler|PointerEventResampler"]);
  dart.addTypeCaches(resampler.PointerEventResampler);
  dart.setMethodSignature(resampler.PointerEventResampler, () => dart.global.Object.setPrototypeOf({
    [_toHoverEvent]: T.PointerEventAndOffsetAndOffset__ToPointerEvent(),
    [_toMoveEvent]: T.PointerEventAndOffsetAndOffset__ToPointerEvent$1(),
    [_toMoveOrHoverEvent]: T.PointerEventAndOffsetAndOffset__ToPointerEvent$2(),
    [_positionAt]: T.DurationToOffset(),
    [_processPointerEvents]: T.DurationTovoid(),
    [_dequeueAndSampleNonHoverOrMovePointerEventsUntil]: T.DurationAndDurationAndFnTovoid(),
    [_samplePointerPosition]: T.DurationAndFnTovoid(),
    addEvent: T.PointerEventTovoid(),
    sample: T.DurationAndDurationAndFnTovoid(),
    stop: T.FnTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(resampler.PointerEventResampler))));
  dart.setGetterSignature(resampler.PointerEventResampler, () => dart.global.Object.setPrototypeOf({
    hasPendingEvents: T.bool(),
    isTracked: T.bool(),
    isDown: T.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(resampler.PointerEventResampler))));
  dart.setLibraryUri(resampler.PointerEventResampler, I[1]);
  dart.setFieldSignature(resampler.PointerEventResampler, () => dart.global.Object.setPrototypeOf({
    [_queuedEvents]: {type: T.QueueOfPointerEvent(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_last]: {type: T.PointerEventN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_next]: {type: T.PointerEventN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_position]: {type: T.Offset(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_isTracked]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_isDown]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_pointerIdentifier]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_hasButtons]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[5]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(resampler.PointerEventResampler))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerRemovedEvent":{"flutter__src__gestures__events|_CopyPointerRemovedEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerRemovedEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerHoverEvent":{"flutter__src__gestures__events|_CopyPointerHoverEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerHoverEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"ui|Offset":{"ui|OffsetBase":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"collection|Queue":{"Queue.E":"1","Iterable.E":"1","core|Iterable":["1"],"_QueueIterable.E":"1","collection|_QueueIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"collection|_QueueIterable":{"_QueueIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/resampler.dart", {
    "package:flutter/src/gestures/resampler.dart": resampler
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["resampler.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/resampler.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__resampler: resampler
  };
}));

//# sourceMappingURL=resampler.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/rounded_rectangle_border.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__rounded_rectangle_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var rounded_rectangle_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    RoundedRectangleBorder: () => (T.RoundedRectangleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder")))(),
    CircleBorder: () => (T.CircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__circle_border|CircleBorder")))(),
    doubleToShapeBorder: () => (T.doubleToShapeBorder = dart.constFn(dart_rti.findType("flutter__src__painting__borders|ShapeBorder(core|double)")))(),
    __ToRoundedRectangleBorder: () => (T.__ToRoundedRectangleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder({borderRadius:flutter__src__painting__border_radius|BorderRadiusGeometry?,side:flutter__src__painting__borders|BorderSide?})")))(),
    Rect__ToPath: () => (T.Rect__ToPath = dart.constFn(dart_rti.findType("ui|Path(ui|Rect{textDirection:ui|TextDirection?})")))(),
    CanvasAndRect__Tovoid: () => (T.CanvasAndRect__Tovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect{textDirection:ui|TextDirection?})")))(),
    BorderRadiusGeometry: () => (T.BorderRadiusGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry")))(),
    _RoundedRectangleToCircleBorder: () => (T._RoundedRectangleToCircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__rounded_rectangle_border|_RoundedRectangleToCircleBorder")))(),
    RectToRect: () => (T.RectToRect = dart.constFn(dart_rti.findType("ui|Rect(ui|Rect)")))(),
    RectAndTextDirectionNToBorderRadiusN: () => (T.RectAndTextDirectionNToBorderRadiusN = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius?(ui|Rect,ui|TextDirection?)")))(),
    __To_RoundedRectangleToCircleBorder: () => (T.__To_RoundedRectangleToCircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__rounded_rectangle_border|_RoundedRectangleToCircleBorder({borderRadius:flutter__src__painting__border_radius|BorderRadiusGeometry?,circularity:core|double?,eccentricity:core|double?,side:flutter__src__painting__borders|BorderSide?})")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 0
      }, borders.BorderStyle.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [Color_value]: 4278190080.0
      }, ui.Color.prototype));
    },
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[1] || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[2] || CT.C2
      }, borders.BorderSide.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [Radius_y]: 0,
        [Radius_x]: 0
      }, ui.Radius.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [BorderRadius_bottomRight]: C[4] || CT.C4,
        [BorderRadius_bottomLeft]: C[4] || CT.C4,
        [BorderRadius_topRight]: C[4] || CT.C4,
        [BorderRadius_topLeft]: C[4] || CT.C4
      }, border_radius.BorderRadius.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      }, borders.BorderStyle.prototype));
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/painting/rounded_rectangle_border.dart",
    "package:flutter/src/painting/border_radius.dart",
    "dart:core"
  ];
  var borderRadius$ = dart.privateName(rounded_rectangle_border, "RoundedRectangleBorder.borderRadius");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var _is = dart.privateName(dart_rti, "_is");
  rounded_rectangle_border.RoundedRectangleBorder = class RoundedRectangleBorder extends borders.OutlinedBorder {
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[3] || CT.C3;
      return new rounded_rectangle_border.RoundedRectangleBorder.new({side: side, borderRadius: borderRadius});
    }
    scale(t) {
      return new rounded_rectangle_border.RoundedRectangleBorder.new({side: this.side.scale(t), borderRadius: this.borderRadius['*'](t)});
    }
    lerpFrom(a, t) {
      if (T.RoundedRectangleBorder()[_is](a)) {
        return new rounded_rectangle_border.RoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(a.borderRadius, this.borderRadius, t))});
      }
      if (T.CircleBorder()[_is](a)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, circularity: 1.0 - t, eccentricity: a.eccentricity});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.RoundedRectangleBorder()[_is](b)) {
        return new rounded_rectangle_border.RoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(this.borderRadius, b.borderRadius, t))});
      }
      if (T.CircleBorder()[_is](b)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, circularity: t, eccentricity: b.eccentricity});
      }
      return super.lerpTo(b, t);
    }
    copyWith(opts) {
      let t$360, t$360$;
      let side = opts && 'side' in opts ? opts.side : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      return new rounded_rectangle_border.RoundedRectangleBorder.new({side: (t$360 = side, t$360 == null ? this.side : t$360), borderRadius: (t$360$ = borderRadius, t$360$ == null ? this.borderRadius : t$360$)});
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let borderRect = this.borderRadius.resolve(textDirection).toRRect(rect);
      let adjustedRect = borderRect.deflate(this.side.strokeInset);
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(adjustedRect);
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (dart.equals(this.borderRadius, border_radius.BorderRadius.zero)) {
        canvas.drawRect(rect, paint);
      } else {
        canvas.drawRRect(this.borderRadius.resolve(textDirection).toRRect(rect), paint);
      }
    }
    get preferPaintInterior() {
      return true;
    }
    paint(canvas, rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[5] || CT.C5:
          {
            if (this.side.width === 0.0) {
              canvas.drawRRect(this.borderRadius.resolve(textDirection).toRRect(rect), this.side.toPaint());
            } else {
              let paint = (t$360 = ui.Paint.new(), (() => {
                t$360.color = this.side.color;
                return t$360;
              })());
              let borderRect = this.borderRadius.resolve(textDirection).toRRect(rect);
              let inner = borderRect.deflate(this.side.strokeInset);
              let outer = borderRect.inflate(this.side.strokeOutset);
              canvas.drawDRRect(outer, inner, paint);
            }
          }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.RoundedRectangleBorder()[_is](other) && dart.equals(other.side, this.side) && dart.equals(other.borderRadius, this.borderRadius);
    }
    get hashCode() {
      return core.Object.hash(this.side, this.borderRadius);
    }
    toString() {
      return object.objectRuntimeType(this, "RoundedRectangleBorder") + "(" + dart.str(this.side) + ", " + dart.str(this.borderRadius) + ")";
    }
  };
  (rounded_rectangle_border.RoundedRectangleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[3] || CT.C3;
    this[borderRadius$] = borderRadius;
    dart.global.Object.getPrototypeOf(rounded_rectangle_border.RoundedRectangleBorder).new.call(this, {side: side});
    ;
  }).prototype = rounded_rectangle_border.RoundedRectangleBorder.prototype;
  dart.addTypeTests(rounded_rectangle_border.RoundedRectangleBorder);
  dart.addRtiResources(rounded_rectangle_border.RoundedRectangleBorder, ["flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder"]);
  dart.addTypeCaches(rounded_rectangle_border.RoundedRectangleBorder);
  dart.setMethodSignature(rounded_rectangle_border.RoundedRectangleBorder, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleToShapeBorder(),
    copyWith: T.__ToRoundedRectangleBorder(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(rounded_rectangle_border.RoundedRectangleBorder))));
  dart.setLibraryUri(rounded_rectangle_border.RoundedRectangleBorder, I[0]);
  dart.setFieldSignature(rounded_rectangle_border.RoundedRectangleBorder, () => dart.global.Object.setPrototypeOf({borderRadius: {type: T.BorderRadiusGeometry(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(rounded_rectangle_border.RoundedRectangleBorder))));
  dart.defineExtensionMethods(rounded_rectangle_border.RoundedRectangleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(rounded_rectangle_border.RoundedRectangleBorder, ['hashCode']);
  var borderRadius$0 = dart.privateName(rounded_rectangle_border, "_RoundedRectangleToCircleBorder.borderRadius");
  var circularity$ = dart.privateName(rounded_rectangle_border, "_RoundedRectangleToCircleBorder.circularity");
  var eccentricity$ = dart.privateName(rounded_rectangle_border, "_RoundedRectangleToCircleBorder.eccentricity");
  var _adjustRect = dart.privateName(rounded_rectangle_border, "_adjustRect");
  var _adjustBorderRadius = dart.privateName(rounded_rectangle_border, "_adjustBorderRadius");
  rounded_rectangle_border._RoundedRectangleToCircleBorder = class _RoundedRectangleToCircleBorder extends borders.OutlinedBorder {
    get borderRadius() {
      return this[borderRadius$0];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get circularity() {
      return this[circularity$];
    }
    set circularity(value) {
      super.circularity = value;
    }
    get eccentricity() {
      return this[eccentricity$];
    }
    set eccentricity(value) {
      super.eccentricity = value;
    }
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[3] || CT.C3;
      let circularity = opts && 'circularity' in opts ? opts.circularity : null;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
      return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: side, borderRadius: borderRadius, circularity: circularity, eccentricity: eccentricity});
    }
    scale(t) {
      return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: this.side.scale(t), borderRadius: this.borderRadius['*'](t), circularity: t, eccentricity: this.eccentricity});
    }
    lerpFrom(a, t) {
      if (T.RoundedRectangleBorder()[_is](a)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(a.borderRadius, this.borderRadius, t)), circularity: this.circularity * t, eccentricity: this.eccentricity});
      }
      if (T.CircleBorder()[_is](a)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, circularity: this.circularity + (1.0 - this.circularity) * (1.0 - t), eccentricity: a.eccentricity});
      }
      if (T._RoundedRectangleToCircleBorder()[_is](a)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(a.borderRadius, this.borderRadius, t)), circularity: dart.nullCheck(ui.lerpDouble(a.circularity, this.circularity, t)), eccentricity: this.eccentricity});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.RoundedRectangleBorder()[_is](b)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(this.borderRadius, b.borderRadius, t)), circularity: this.circularity * (1.0 - t), eccentricity: this.eccentricity});
      }
      if (T.CircleBorder()[_is](b)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, circularity: this.circularity + (1.0 - this.circularity) * t, eccentricity: b.eccentricity});
      }
      if (T._RoundedRectangleToCircleBorder()[_is](b)) {
        return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(this.borderRadius, b.borderRadius, t)), circularity: dart.nullCheck(ui.lerpDouble(this.circularity, b.circularity, t)), eccentricity: this.eccentricity});
      }
      return super.lerpTo(b, t);
    }
    [_adjustRect](rect) {
      if (this.circularity === 0.0 || rect.width === rect.height) {
        return rect;
      }
      if (rect.width < rect.height) {
        let partialDelta = (rect.height - rect.width) / 2;
        let delta = this.circularity * partialDelta * (1.0 - this.eccentricity);
        return new ui.Rect.fromLTRB(rect.left, rect.top + delta, rect.right, rect.bottom - delta);
      } else {
        let partialDelta = (rect.width - rect.height) / 2;
        let delta = this.circularity * partialDelta * (1.0 - this.eccentricity);
        return new ui.Rect.fromLTRB(rect.left + delta, rect.top, rect.right - delta, rect.bottom);
      }
    }
    [_adjustBorderRadius](rect, textDirection) {
      let resolvedRadius = this.borderRadius.resolve(textDirection);
      if (this.circularity === 0.0) {
        return resolvedRadius;
      }
      if (this.eccentricity !== 0.0) {
        if (rect.width < rect.height) {
          return dart.nullCheck(border_radius.BorderRadius.lerp(resolvedRadius, new border_radius.BorderRadius.all(new ui.Radius.elliptical(rect.width / 2, (0.5 + this.eccentricity / 2) * rect.height / 2)), this.circularity));
        } else {
          return dart.nullCheck(border_radius.BorderRadius.lerp(resolvedRadius, new border_radius.BorderRadius.all(new ui.Radius.elliptical((0.5 + this.eccentricity / 2) * rect.width / 2, rect.height / 2)), this.circularity));
        }
      }
      return border_radius.BorderRadius.lerp(resolvedRadius, new border_radius.BorderRadius.circular(rect.shortestSide / 2), this.circularity);
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let borderRect = dart.nullCheck(this[_adjustBorderRadius](rect, textDirection)).toRRect(this[_adjustRect](rect));
      let adjustedRect = borderRect.deflate(dart.nullCheck(ui.lerpDouble(this.side.width, 0, this.side.strokeAlign)));
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(adjustedRect);
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(dart.nullCheck(this[_adjustBorderRadius](rect, textDirection)).toRRect(this[_adjustRect](rect)));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let adjustedBorderRadius = dart.nullCheck(this[_adjustBorderRadius](rect, textDirection));
      if (dart.equals(adjustedBorderRadius, border_radius.BorderRadius.zero)) {
        canvas.drawRect(this[_adjustRect](rect), paint);
      } else {
        canvas.drawRRect(adjustedBorderRadius.toRRect(this[_adjustRect](rect)), paint);
      }
    }
    get preferPaintInterior() {
      return true;
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0, t$360$1;
      let side = opts && 'side' in opts ? opts.side : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let circularity = opts && 'circularity' in opts ? opts.circularity : null;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
      return new rounded_rectangle_border._RoundedRectangleToCircleBorder.new({side: (t$360 = side, t$360 == null ? this.side : t$360), borderRadius: (t$360$ = borderRadius, t$360$ == null ? this.borderRadius : t$360$), circularity: (t$360$0 = circularity, t$360$0 == null ? this.circularity : t$360$0), eccentricity: (t$360$1 = eccentricity, t$360$1 == null ? this.eccentricity : t$360$1)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[5] || CT.C5:
          {
            let adjustedBorderRadius = dart.nullCheck(this[_adjustBorderRadius](rect, textDirection));
            let borderRect = adjustedBorderRadius.toRRect(this[_adjustRect](rect));
            canvas.drawRRect(borderRect.inflate(this.side.strokeOffset / 2), this.side.toPaint());
          }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T._RoundedRectangleToCircleBorder()[_is](other) && dart.equals(other.side, this.side) && dart.equals(other.borderRadius, this.borderRadius) && other.circularity === this.circularity;
    }
    get hashCode() {
      return core.Object.hash(this.side, this.borderRadius, this.circularity);
    }
    toString() {
      if (this.eccentricity !== 0.0) {
        return "RoundedRectangleBorder(" + dart.str(this.side) + ", " + dart.str(this.borderRadius) + ", " + (this.circularity * 100)[$toStringAsFixed](1) + "% of the way to being a CircleBorder that is " + (this.eccentricity * 100)[$toStringAsFixed](1) + "% oval)";
      }
      return "RoundedRectangleBorder(" + dart.str(this.side) + ", " + dart.str(this.borderRadius) + ", " + (this.circularity * 100)[$toStringAsFixed](1) + "% of the way to being a CircleBorder)";
    }
  };
  (rounded_rectangle_border._RoundedRectangleToCircleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[3] || CT.C3;
    let circularity = opts && 'circularity' in opts ? opts.circularity : null;
    let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
    this[borderRadius$0] = borderRadius;
    this[circularity$] = circularity;
    this[eccentricity$] = eccentricity;
    dart.global.Object.getPrototypeOf(rounded_rectangle_border._RoundedRectangleToCircleBorder).new.call(this, {side: side});
    ;
  }).prototype = rounded_rectangle_border._RoundedRectangleToCircleBorder.prototype;
  dart.addTypeTests(rounded_rectangle_border._RoundedRectangleToCircleBorder);
  dart.addRtiResources(rounded_rectangle_border._RoundedRectangleToCircleBorder, ["flutter__src__painting__rounded_rectangle_border|_RoundedRectangleToCircleBorder"]);
  dart.addTypeCaches(rounded_rectangle_border._RoundedRectangleToCircleBorder);
  dart.setMethodSignature(rounded_rectangle_border._RoundedRectangleToCircleBorder, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleToShapeBorder(),
    [_adjustRect]: T.RectToRect(),
    [_adjustBorderRadius]: T.RectAndTextDirectionNToBorderRadiusN(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    copyWith: T.__To_RoundedRectangleToCircleBorder(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(rounded_rectangle_border._RoundedRectangleToCircleBorder))));
  dart.setLibraryUri(rounded_rectangle_border._RoundedRectangleToCircleBorder, I[0]);
  dart.setFieldSignature(rounded_rectangle_border._RoundedRectangleToCircleBorder, () => dart.global.Object.setPrototypeOf({
    borderRadius: {type: T.BorderRadiusGeometry(), isConst: false, isFinal: true, libraryUri: I[1]},
    circularity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    eccentricity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(rounded_rectangle_border._RoundedRectangleToCircleBorder))));
  dart.defineExtensionMethods(rounded_rectangle_border._RoundedRectangleToCircleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(rounded_rectangle_border._RoundedRectangleToCircleBorder, ['hashCode']);
  dart.moduleConstCaches.set("packages/flutter/src/painting/rounded_rectangle_border.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__borders|OutlinedBorder":{"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__circle_border|CircleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__borders|BorderSide":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__painting__rounded_rectangle_border|_RoundedRectangleToCircleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__border_radius|BorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/rounded_rectangle_border.dart", {
    "package:flutter/src/painting/rounded_rectangle_border.dart": rounded_rectangle_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["rounded_rectangle_border.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/rounded_rectangle_border.dart.lib.js"}');
  // Exports:
  return {
    src__painting__rounded_rectangle_border: rounded_rectangle_border
  };
}));

//# sourceMappingURL=rounded_rectangle_border.dart.lib.js.map

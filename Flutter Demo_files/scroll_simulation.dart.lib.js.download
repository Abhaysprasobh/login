// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/widgets/scroll_simulation.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/physics/friction_simulation.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/physics/simulation.dart'], (function load__packages__flutter__src__widgets__scroll_simulation_dart(dart_sdk, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__physics__friction_simulation$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__physics__simulation$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const friction_simulation = packages__flutter__src__physics__friction_simulation$46dart.src__physics__friction_simulation;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  var scroll_simulation = Object.create(dart.library);
  var $isFinite = dartx.isFinite;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    FrictionSimulation: () => (T.FrictionSimulation = dart.constFn(dart_rti.findType("flutter__src__physics__friction_simulation|FrictionSimulation")))(),
    Simulation: () => (T.Simulation = dart.constFn(dart_rti.findType("flutter__src__physics__simulation|Simulation")))(),
    doubleAnddoubleToSimulation: () => (T.doubleAnddoubleToSimulation = dart.constFn(dart_rti.findType("flutter__src__physics__simulation|Simulation(core|double,core|double)")))(),
    doubleToSimulation: () => (T.doubleToSimulation = dart.constFn(dart_rti.findType("flutter__src__physics__simulation|Simulation(core|double)")))(),
    doubleTodouble: () => (T.doubleTodouble = dart.constFn(dart_rti.findType("core|double(core|double)")))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart_rti.findType("core|bool(core|double)")))(),
    SpringDescription: () => (T.SpringDescription = dart.constFn(dart_rti.findType("flutter__src__physics__spring_simulation|SpringDescription")))(),
    FrictionSimulationN: () => (T.FrictionSimulationN = dart.constFn(dart_rti.findType("flutter__src__physics__friction_simulation|FrictionSimulation?")))(),
    SimulationN: () => (T.SimulationN = dart.constFn(dart_rti.findType("flutter__src__physics__simulation|Simulation?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    VoidTodouble: () => (T.VoidTodouble = dart.constFn(dart_rti.findType("core|double()")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Tolerance_velocity]: 0.001,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.001
      }, tolerance.Tolerance.prototype));
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_simulation.dart",
    "package:flutter/src/widgets/scroll_simulation.dart",
    "dart:core",
    "package:flutter/src/physics/spring_simulation.dart",
    "package:flutter/src/physics/friction_simulation.dart",
    "package:flutter/src/physics/simulation.dart"
  ];
  var leadingExtent$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.leadingExtent");
  var trailingExtent$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.trailingExtent");
  var spring$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.spring");
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  var __BouncingScrollSimulation__frictionSimulation = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_frictionSimulation");
  var __BouncingScrollSimulation__springSimulation = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_springSimulation");
  var __BouncingScrollSimulation__springTime = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_springTime");
  var _timeOffset = dart.privateName(scroll_simulation, "_timeOffset");
  var _springSimulation = dart.privateName(scroll_simulation, "_springSimulation");
  var _underscrollSimulation = dart.privateName(scroll_simulation, "_underscrollSimulation");
  var _springTime = dart.privateName(scroll_simulation, "_springTime");
  var _overscrollSimulation = dart.privateName(scroll_simulation, "_overscrollSimulation");
  var _frictionSimulation = dart.privateName(scroll_simulation, "_frictionSimulation");
  var _simulation = dart.privateName(scroll_simulation, "_simulation");
  scroll_simulation.BouncingScrollSimulation = class BouncingScrollSimulation extends simulation.Simulation {
    get leadingExtent() {
      return this[leadingExtent$];
    }
    set leadingExtent(value) {
      super.leadingExtent = value;
    }
    get trailingExtent() {
      return this[trailingExtent$];
    }
    set trailingExtent(value) {
      super.trailingExtent = value;
    }
    get spring() {
      return this[spring$];
    }
    set spring(value) {
      super.spring = value;
    }
    static ['_#new#tearOff'](opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let velocity = opts && 'velocity' in opts ? opts.velocity : null;
      let leadingExtent = opts && 'leadingExtent' in opts ? opts.leadingExtent : null;
      let trailingExtent = opts && 'trailingExtent' in opts ? opts.trailingExtent : null;
      let spring = opts && 'spring' in opts ? opts.spring : null;
      let constantDeceleration = opts && 'constantDeceleration' in opts ? opts.constantDeceleration : 0;
      let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
      return new scroll_simulation.BouncingScrollSimulation.new({position: position, velocity: velocity, leadingExtent: leadingExtent, trailingExtent: trailingExtent, spring: spring, constantDeceleration: constantDeceleration, tolerance: tolerance});
    }
    get [_frictionSimulation]() {
      let t$360;
      t$360 = this[__BouncingScrollSimulation__frictionSimulation];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_frictionSimulation")) : t$360;
    }
    set [_frictionSimulation](_frictionSimulation$35param) {
      this[__BouncingScrollSimulation__frictionSimulation] = _frictionSimulation$35param;
    }
    get [_springSimulation]() {
      let t$360;
      t$360 = this[__BouncingScrollSimulation__springSimulation];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_springSimulation")) : t$360;
    }
    set [_springSimulation](_springSimulation$35param) {
      this[__BouncingScrollSimulation__springSimulation] = _springSimulation$35param;
    }
    get [_springTime]() {
      let t$360;
      t$360 = this[__BouncingScrollSimulation__springTime];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_springTime")) : t$360;
    }
    set [_springTime](_springTime$35param) {
      this[__BouncingScrollSimulation__springTime] = _springTime$35param;
    }
    [_underscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.leadingExtent, dx);
    }
    [_overscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.trailingExtent, dx);
    }
    [_simulation](time) {
      let t$360;
      let simulation = null;
      if (time > this[_springTime]) {
        this[_timeOffset] = this[_springTime][$isFinite] ? this[_springTime] : 0.0;
        simulation = this[_springSimulation];
      } else {
        this[_timeOffset] = 0.0;
        simulation = this[_frictionSimulation];
      }
      t$360 = simulation;
      return (() => {
        t$360.tolerance = this.tolerance;
        return t$360;
      })();
    }
    x(time) {
      return this[_simulation](time).x(time - this[_timeOffset]);
    }
    dx(time) {
      return this[_simulation](time).dx(time - this[_timeOffset]);
    }
    isDone(time) {
      return this[_simulation](time).isDone(time - this[_timeOffset]);
    }
    toString() {
      return object.objectRuntimeType(this, "BouncingScrollSimulation") + "(leadingExtent: " + dart.strSafe(this.leadingExtent) + ", trailingExtent: " + dart.strSafe(this.trailingExtent) + ")";
    }
  };
  (scroll_simulation.BouncingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let leadingExtent = opts && 'leadingExtent' in opts ? opts.leadingExtent : null;
    let trailingExtent = opts && 'trailingExtent' in opts ? opts.trailingExtent : null;
    let spring = opts && 'spring' in opts ? opts.spring : null;
    let constantDeceleration = opts && 'constantDeceleration' in opts ? opts.constantDeceleration : 0;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
    this[__BouncingScrollSimulation__frictionSimulation] = null;
    this[__BouncingScrollSimulation__springSimulation] = null;
    this[__BouncingScrollSimulation__springTime] = null;
    this[_timeOffset] = 0.0;
    this[leadingExtent$] = leadingExtent;
    this[trailingExtent$] = trailingExtent;
    this[spring$] = spring;
    if (!(leadingExtent <= trailingExtent)) dart.assertFailed(null, I[0], 39, 15, "leadingExtent <= trailingExtent");
    dart.global.Object.getPrototypeOf(scroll_simulation.BouncingScrollSimulation).new.call(this, {tolerance: tolerance});
    if (position < this.leadingExtent) {
      this[_springSimulation] = this[_underscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else if (position > this.trailingExtent) {
      this[_springSimulation] = this[_overscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else {
      this[_frictionSimulation] = new friction_simulation.FrictionSimulation.new(0.135, position, velocity, {constantDeceleration: constantDeceleration});
      let finalX = this[_frictionSimulation].finalX;
      if (velocity > 0.0 && finalX > this.trailingExtent) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.trailingExtent);
        this[_springSimulation] = this[_overscrollSimulation](this.trailingExtent, math.min(T.double(), this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, I[0], 57, 16, "_springTime.isFinite");
      } else if (velocity < 0.0 && finalX < this.leadingExtent) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.leadingExtent);
        this[_springSimulation] = this[_underscrollSimulation](this.leadingExtent, math.min(T.double(), this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, I[0], 64, 16, "_springTime.isFinite");
      } else {
        this[_springTime] = 1 / 0;
      }
    }
  }).prototype = scroll_simulation.BouncingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.BouncingScrollSimulation);
  dart.addRtiResources(scroll_simulation.BouncingScrollSimulation, ["flutter__src__widgets__scroll_simulation|BouncingScrollSimulation"]);
  dart.addTypeCaches(scroll_simulation.BouncingScrollSimulation);
  dart.setMethodSignature(scroll_simulation.BouncingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_underscrollSimulation]: T.doubleAnddoubleToSimulation(),
    [_overscrollSimulation]: T.doubleAnddoubleToSimulation(),
    [_simulation]: T.doubleToSimulation(),
    x: T.doubleTodouble(),
    dx: T.doubleTodouble(),
    isDone: T.doubleTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(scroll_simulation.BouncingScrollSimulation))));
  dart.setGetterSignature(scroll_simulation.BouncingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_frictionSimulation]: T.FrictionSimulation(),
    [_springSimulation]: T.Simulation(),
    [_springTime]: T.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(scroll_simulation.BouncingScrollSimulation))));
  dart.setSetterSignature(scroll_simulation.BouncingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_frictionSimulation]: T.FrictionSimulation(),
    [_springSimulation]: T.Simulation(),
    [_springTime]: T.double()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(scroll_simulation.BouncingScrollSimulation))));
  dart.setLibraryUri(scroll_simulation.BouncingScrollSimulation, I[1]);
  dart.setFieldSignature(scroll_simulation.BouncingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    leadingExtent: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    trailingExtent: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    spring: {type: T.SpringDescription(), isConst: false, isFinal: true, libraryUri: I[3]},
    [__BouncingScrollSimulation__frictionSimulation]: {type: T.FrictionSimulationN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [__BouncingScrollSimulation__springSimulation]: {type: T.SimulationN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [__BouncingScrollSimulation__springTime]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_timeOffset]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(scroll_simulation.BouncingScrollSimulation))));
  dart.setStaticFieldSignature(scroll_simulation.BouncingScrollSimulation, () => ['maxSpringTransferVelocity']);
  dart.defineExtensionMethods(scroll_simulation.BouncingScrollSimulation, ['toString']);
  dart.defineLazy(scroll_simulation.BouncingScrollSimulation, {
    /*scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity*/get maxSpringTransferVelocity() {
      return 5000;
    }
  }, false);
  var position$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.position");
  var velocity$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.velocity");
  var friction$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.friction");
  var __ClampingScrollSimulation__duration = dart.privateName(scroll_simulation, "_#ClampingScrollSimulation#_duration");
  var __ClampingScrollSimulation__distance = dart.privateName(scroll_simulation, "_#ClampingScrollSimulation#_distance");
  var _duration = dart.privateName(scroll_simulation, "_duration");
  var _flingDuration = dart.privateName(scroll_simulation, "_flingDuration");
  var _distance = dart.privateName(scroll_simulation, "_distance");
  var _flingDistance = dart.privateName(scroll_simulation, "_flingDistance");
  scroll_simulation.ClampingScrollSimulation = class ClampingScrollSimulation extends simulation.Simulation {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get friction() {
      return this[friction$];
    }
    set friction(value) {
      super.friction = value;
    }
    static ['_#new#tearOff'](opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let velocity = opts && 'velocity' in opts ? opts.velocity : null;
      let friction = opts && 'friction' in opts ? opts.friction : 0.015;
      let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
      return new scroll_simulation.ClampingScrollSimulation.new({position: position, velocity: velocity, friction: friction, tolerance: tolerance});
    }
    get [_duration]() {
      let t$360;
      t$360 = this[__ClampingScrollSimulation__duration];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_duration")) : t$360;
    }
    set [_duration](_duration$35param) {
      this[__ClampingScrollSimulation__duration] = _duration$35param;
    }
    get [_distance]() {
      let t$360;
      t$360 = this[__ClampingScrollSimulation__distance];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_distance")) : t$360;
    }
    set [_distance](_distance$35param) {
      this[__ClampingScrollSimulation__distance] = _distance$35param;
    }
    [_flingDuration]() {
      let referenceVelocity = this.friction * 51890.20173119999 / 0.35;
      let androidDuration = math.pow(this.velocity[$abs]() / referenceVelocity, 1 / (scroll_simulation.ClampingScrollSimulation._kDecelerationRate - 1.0));
      return scroll_simulation.ClampingScrollSimulation._kDecelerationRate * 0.35 * androidDuration;
    }
    [_flingDistance]() {
      let distance = this.velocity * this[_duration] / scroll_simulation.ClampingScrollSimulation._kDecelerationRate;
      if (!dart.fn(() => {
        let referenceVelocity = this.friction * 51890.20173119999 / 0.35;
        let logVelocity = math.log(this.velocity[$abs]() / referenceVelocity);
        let distanceAgain = this.friction * 51890.20173119999 * math.exp(logVelocity * scroll_simulation.ClampingScrollSimulation._kDecelerationRate / (scroll_simulation.ClampingScrollSimulation._kDecelerationRate - 1.0));
        return (distance[$abs]() - distanceAgain)[$abs]() < this.tolerance.distance;
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 226, 12, "() {\r\n      // This is the more complicated calculation that getSplineFlingDistance()\r\n      // actually performs, which boils down to the much simpler formula above.\r\n      final double referenceVelocity = friction * _physicalCoeff / _kInflexion;\r\n      final double logVelocity = math.log(velocity.abs() / referenceVelocity);\r\n      final double distanceAgain =\r\n          friction * _physicalCoeff\r\n            * math.exp(logVelocity * _kDecelerationRate / (_kDecelerationRate - 1.0));\r\n      return (distance.abs() - distanceAgain).abs() < tolerance.distance;\r\n    }()");
      return distance;
    }
    x(time) {
      let t = ui.clampDouble(time / this[_duration], 0.0, 1.0);
      return this.position + this[_distance] * (1.0 - math.pow(1.0 - t, scroll_simulation.ClampingScrollSimulation._kDecelerationRate));
    }
    dx(time) {
      let t = ui.clampDouble(time / this[_duration], 0.0, 1.0);
      return this.velocity * math.pow(1.0 - t, scroll_simulation.ClampingScrollSimulation._kDecelerationRate - 1.0);
    }
    isDone(time) {
      return time >= this[_duration];
    }
  };
  (scroll_simulation.ClampingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let friction = opts && 'friction' in opts ? opts.friction : 0.015;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
    this[__ClampingScrollSimulation__duration] = null;
    this[__ClampingScrollSimulation__distance] = null;
    this[position$] = position;
    this[velocity$] = velocity;
    this[friction$] = friction;
    dart.global.Object.getPrototypeOf(scroll_simulation.ClampingScrollSimulation).new.call(this, {tolerance: tolerance});
    this[_duration] = this[_flingDuration]();
    this[_distance] = this[_flingDistance]();
  }).prototype = scroll_simulation.ClampingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.ClampingScrollSimulation);
  dart.addRtiResources(scroll_simulation.ClampingScrollSimulation, ["flutter__src__widgets__scroll_simulation|ClampingScrollSimulation"]);
  dart.addTypeCaches(scroll_simulation.ClampingScrollSimulation);
  dart.setMethodSignature(scroll_simulation.ClampingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_flingDuration]: T.VoidTodouble(),
    [_flingDistance]: T.VoidTodouble(),
    x: T.doubleTodouble(),
    dx: T.doubleTodouble(),
    isDone: T.doubleTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(scroll_simulation.ClampingScrollSimulation))));
  dart.setGetterSignature(scroll_simulation.ClampingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_duration]: T.double(),
    [_distance]: T.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(scroll_simulation.ClampingScrollSimulation))));
  dart.setSetterSignature(scroll_simulation.ClampingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    [_duration]: T.double(),
    [_distance]: T.double()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(scroll_simulation.ClampingScrollSimulation))));
  dart.setLibraryUri(scroll_simulation.ClampingScrollSimulation, I[1]);
  dart.setFieldSignature(scroll_simulation.ClampingScrollSimulation, () => dart.global.Object.setPrototypeOf({
    position: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    velocity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    friction: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    [__ClampingScrollSimulation__duration]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [__ClampingScrollSimulation__distance]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(scroll_simulation.ClampingScrollSimulation))));
  dart.setStaticFieldSignature(scroll_simulation.ClampingScrollSimulation, () => ['_kDecelerationRate', '_kInflexion', '_physicalCoeff']);
  dart.defineLazy(scroll_simulation.ClampingScrollSimulation, {
    /*scroll_simulation.ClampingScrollSimulation._kDecelerationRate*/get _kDecelerationRate() {
      return math.log(0.78) / math.log(0.9);
    },
    /*scroll_simulation.ClampingScrollSimulation._kInflexion*/get _kInflexion() {
      return 0.35;
    },
    /*scroll_simulation.ClampingScrollSimulation._physicalCoeff*/get _physicalCoeff() {
      return 51890.20173119999;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/widgets/scroll_simulation.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__physics__friction_simulation|FrictionSimulation":{"flutter__src__physics__simulation|Simulation":[]},"flutter__src__widgets__scroll_simulation|BouncingScrollSimulation":{"flutter__src__physics__simulation|Simulation":[]},"flutter__src__widgets__scroll_simulation|ClampingScrollSimulation":{"flutter__src__physics__simulation|Simulation":[]}}'));
  dart.trackLibraries("packages/flutter/src/widgets/scroll_simulation.dart", {
    "package:flutter/src/widgets/scroll_simulation.dart": scroll_simulation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["scroll_simulation.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/widgets/scroll_simulation.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__scroll_simulation: scroll_simulation
  };
}));

//# sourceMappingURL=scroll_simulation.dart.lib.js.map

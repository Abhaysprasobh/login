// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/semantics/semantics.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/collection/src/iterable_extensions.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/semantics/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__flutter__src__semantics__semantics_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__collection__src__iterable_extensions$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__semantics__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const iterable_extensions = packages__collection__src__iterable_extensions$46dart.src__iterable_extensions;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const binding = packages__flutter__src__semantics__binding$46dart.src__semantics__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var semantics = Object.create(dart.library);
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $runtimeType = dartx.runtimeType;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $replaceAll = dartx.replaceAll;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $modulo = dartx['%'];
  var $any = dartx.any;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $keys = dartx.keys;
  var $sort = dartx.sort;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $toString = dartx.toString;
  var $split = dartx.split;
  var $take = dartx.take;
  var $substring = dartx.substring;
  var $join = dartx.join;
  var $where = dartx.where;
  var $isFinite = dartx.isFinite;
  var $compareTo = dartx.compareTo;
  var $reversed = dartx.reversed;
  var $expand = dartx.expand;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    ListOfSemanticsConfiguration: () => (T.ListOfSemanticsConfiguration = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsConfiguration>")))(),
    ListOfListOfSemanticsConfiguration: () => (T.ListOfListOfSemanticsConfiguration = dart.constFn(dart_rti.findType("core|List<core|List<flutter__src__semantics__semantics|SemanticsConfiguration>>")))(),
    SemanticsConfiguration: () => (T.SemanticsConfiguration = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsConfiguration")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    SemanticsConfigurationTovoid: () => (T.SemanticsConfigurationTovoid = dart.constFn(dart_rti.findType("~(flutter__src__semantics__semantics|SemanticsConfiguration)")))(),
    ListOfSemanticsConfigurationTovoid: () => (T.ListOfSemanticsConfigurationTovoid = dart.constFn(dart_rti.findType("~(core|List<flutter__src__semantics__semantics|SemanticsConfiguration>)")))(),
    VoidToChildSemanticsConfigurationsResult: () => (T.VoidToChildSemanticsConfigurationsResult = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|ChildSemanticsConfigurationsResult()")))(),
    CustomSemanticsAction: () => (T.CustomSemanticsAction = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|CustomSemanticsAction")))(),
    CustomSemanticsActionToint: () => (T.CustomSemanticsActionToint = dart.constFn(dart_rti.findType("core|int(flutter__src__semantics__semantics|CustomSemanticsAction)")))(),
    intToCustomSemanticsActionN: () => (T.intToCustomSemanticsActionN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|CustomSemanticsAction?(core|int)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    SemanticsActionN: () => (T.SemanticsActionN = dart.constFn(dart_rti.findType("ui|SemanticsAction?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    MapOfint$CustomSemanticsAction: () => (T.MapOfint$CustomSemanticsAction = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__semantics__semantics|CustomSemanticsAction>")))(),
    MapOfCustomSemanticsAction$int: () => (T.MapOfCustomSemanticsAction$int = dart.constFn(dart_rti.findType("core|Map<flutter__src__semantics__semantics|CustomSemanticsAction,core|int>")))(),
    StringAttribute: () => (T.StringAttribute = dart.constFn(dart_rti.findType("ui|StringAttribute")))(),
    AttributedString: () => (T.AttributedString = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|AttributedString")))(),
    AttributedStringToAttributedString: () => (T.AttributedStringToAttributedString = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|AttributedString(flutter__src__semantics__semantics|AttributedString)")))(),
    ListOfStringAttribute: () => (T.ListOfStringAttribute = dart.constFn(dart_rti.findType("core|List<ui|StringAttribute>")))(),
    AttributedStringProperty: () => (T.AttributedStringProperty = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|AttributedStringProperty")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    Rect: () => (T.Rect = dart.constFn(dart_rti.findType("ui|Rect")))(),
    intToStringN: () => (T.intToStringN = dart.constFn(dart_rti.findType("core|String?(core|int)")))(),
    TextDirection: () => (T.TextDirection = dart.constFn(dart_rti.findType("ui|TextDirection")))(),
    SemanticsData: () => (T.SemanticsData = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsData")))(),
    SemanticsTag: () => (T.SemanticsTag = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsTag")))(),
    SemanticsFlagTobool: () => (T.SemanticsFlagTobool = dart.constFn(dart_rti.findType("core|bool(ui|SemanticsFlag)")))(),
    SemanticsActionTobool: () => (T.SemanticsActionTobool = dart.constFn(dart_rti.findType("core|bool(ui|SemanticsAction)")))(),
    ListNOfintAndListNOfintTobool: () => (T.ListNOfintAndListNOfintTobool = dart.constFn(dart_rti.findType("core|bool(core|List<core|int>?,core|List<core|int>?)")))(),
    TextDirectionN: () => (T.TextDirectionN = dart.constFn(dart_rti.findType("ui|TextDirection?")))(),
    TextSelectionN: () => (T.TextSelectionN = dart.constFn(dart_rti.findType("flutter__src__services__text_editing|TextSelection?")))(),
    intN: () => (T.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    SetNOfSemanticsTag: () => (T.SetNOfSemanticsTag = dart.constFn(dart_rti.findType("core|Set<flutter__src__semantics__semantics|SemanticsTag>?")))(),
    Matrix4N: () => (T.Matrix4N = dart.constFn(dart_rti.findType("vector_math__vector_math_64|Matrix4?")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    ListNOfint: () => (T.ListNOfint = dart.constFn(dart_rti.findType("core|List<core|int>?")))(),
    _SemanticsDiagnosticableNode: () => (T._SemanticsDiagnosticableNode = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|_SemanticsDiagnosticableNode")))(),
    DebugSemanticsDumpOrder: () => (T.DebugSemanticsDumpOrder = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|DebugSemanticsDumpOrder")))(),
    SemanticsHintOverrides: () => (T.SemanticsHintOverrides = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsHintOverrides")))(),
    SemanticsSortKey: () => (T.SemanticsSortKey = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsSortKey")))(),
    boolN: () => (T.boolN = dart.constFn(dart_rti.findType("core|bool?")))(),
    AttributedStringN: () => (T.AttributedStringN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|AttributedString?")))(),
    SemanticsHintOverridesN: () => (T.SemanticsHintOverridesN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsHintOverrides?")))(),
    SemanticsSortKeyN: () => (T.SemanticsSortKeyN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsSortKey?")))(),
    SemanticsTagN: () => (T.SemanticsTagN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsTag?")))(),
    VoidToNvoid: () => (T.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    boolToNvoid: () => (T.boolToNvoid = dart.constFn(dart_rti.findType("~(core|bool)?")))(),
    TextSelectionToNvoid: () => (T.TextSelectionToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_editing|TextSelection)?")))(),
    StringToNvoid: () => (T.StringToNvoid = dart.constFn(dart_rti.findType("~(core|String)?")))(),
    MapNOfCustomSemanticsAction$VoidTovoid: () => (T.MapNOfCustomSemanticsAction$VoidTovoid = dart.constFn(dart_rti.findType("core|Map<flutter__src__semantics__semantics|CustomSemanticsAction,~()>?")))(),
    SemanticsNodeTobool: () => (T.SemanticsNodeTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__semantics__semantics|SemanticsNode)")))(),
    SemanticsNode: () => (T.SemanticsNode = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsNode")))(),
    DiagnosticsNode: () => (T.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    SemanticsAction: () => (T.SemanticsAction = dart.constFn(dart_rti.findType("ui|SemanticsAction")))(),
    ObjectNTovoid: () => (T.ObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Object?)")))(),
    _TraversalSortNode: () => (T._TraversalSortNode = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|_TraversalSortNode")))(),
    _TraversalSortNodeToSemanticsNode: () => (T._TraversalSortNodeToSemanticsNode = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsNode(flutter__src__semantics__semantics|_TraversalSortNode)")))(),
    SemanticsOwner: () => (T.SemanticsOwner = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsOwner")))(),
    StringToString: () => (T.StringToString = dart.constFn(dart_rti.findType("core|String(core|String)")))(),
    SemanticsTagToString: () => (T.SemanticsTagToString = dart.constFn(dart_rti.findType("core|String(flutter__src__semantics__semantics|SemanticsTag)")))(),
    SemanticsActionToString: () => (T.SemanticsActionToString = dart.constFn(dart_rti.findType("core|String(ui|SemanticsAction)")))(),
    CustomSemanticsActionToStringN: () => (T.CustomSemanticsActionToStringN = dart.constFn(dart_rti.findType("core|String?(flutter__src__semantics__semantics|CustomSemanticsAction)")))(),
    SemanticsFlagToString: () => (T.SemanticsFlagToString = dart.constFn(dart_rti.findType("core|String(ui|SemanticsFlag)")))(),
    SemanticsNodeToDiagnosticsNode: () => (T.SemanticsNodeToDiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode(flutter__src__semantics__semantics|SemanticsNode)")))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart_rti.findType("core|int()")))(),
    ListOfSemanticsNode: () => (T.ListOfSemanticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsNode>")))(),
    ListOfSemanticsNodeTovoid: () => (T.ListOfSemanticsNodeTovoid = dart.constFn(dart_rti.findType("~(core|List<flutter__src__semantics__semantics|SemanticsNode>)")))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti.findType("~(core|bool(flutter__src__semantics__semantics|SemanticsNode))")))(),
    FnTobool: () => (T.FnTobool = dart.constFn(dart_rti.findType("core|bool(core|bool(flutter__src__semantics__semantics|SemanticsNode))")))(),
    SemanticsOwnerN: () => (T.SemanticsOwnerN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsOwner?")))(),
    SemanticsNodeN: () => (T.SemanticsNodeN = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsNode?")))(),
    SemanticsNodeTovoid: () => (T.SemanticsNodeTovoid = dart.constFn(dart_rti.findType("~(flutter__src__semantics__semantics|SemanticsNode)")))(),
    SemanticsOwnerTovoid: () => (T.SemanticsOwnerTovoid = dart.constFn(dart_rti.findType("~(flutter__src__semantics__semantics|SemanticsOwner)")))(),
    SemanticsConfigurationTobool: () => (T.SemanticsConfigurationTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__semantics__semantics|SemanticsConfiguration)")))(),
    SemanticsTagTobool: () => (T.SemanticsTagTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__semantics__semantics|SemanticsTag)")))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti.findType("~({childrenInInversePaintOrder:core|List<flutter__src__semantics__semantics|SemanticsNode>?,config!flutter__src__semantics__semantics|SemanticsConfiguration?})")))(),
    VoidToSemanticsData: () => (T.VoidToSemanticsData = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsData()")))(),
    VoidToFloat64List: () => (T.VoidToFloat64List = dart.constFn(dart_rti.findType("typed_data|Float64List()")))(),
    SemanticsUpdateBuilderAndSetOfintTovoid: () => (T.SemanticsUpdateBuilderAndSetOfintTovoid = dart.constFn(dart_rti.findType("~(ui|SemanticsUpdateBuilder,core|Set<core|int>)")))(),
    VoidToListOfSemanticsNode: () => (T.VoidToListOfSemanticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsNode>()")))(),
    SemanticsEventTovoid: () => (T.SemanticsEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__semantics__semantics_event|SemanticsEvent)")))(),
    __ToString: () => (T.__ToString = dart.constFn(dart_rti.findType("core|String({childOrder:flutter__src__semantics__semantics|DebugSemanticsDumpOrder,minLevel:flutter__src__foundation__diagnostics|DiagnosticLevel,prefixLineOne:core|String,prefixOtherLines:core|String?})")))(),
    __ToDiagnosticsNode: () => (T.__ToDiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode({childOrder:flutter__src__semantics__semantics|DebugSemanticsDumpOrder,name:core|String?,style:flutter__src__foundation__diagnostics|DiagnosticsTreeStyle?})")))(),
    __ToListOfDiagnosticsNode: () => (T.__ToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>({childOrder:flutter__src__semantics__semantics|DebugSemanticsDumpOrder})")))(),
    DebugSemanticsDumpOrderToListOfSemanticsNode: () => (T.DebugSemanticsDumpOrderToListOfSemanticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsNode>(flutter__src__semantics__semantics|DebugSemanticsDumpOrder)")))(),
    KeyN: () => (T.KeyN = dart.constFn(dart_rti.findType("flutter__src__foundation__key|Key?")))(),
    RectN: () => (T.RectN = dart.constFn(dart_rti.findType("ui|Rect?")))(),
    ListNOfSemanticsNode: () => (T.ListNOfSemanticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsNode>?")))(),
    MapOfSemanticsAction$ObjectNTovoid: () => (T.MapOfSemanticsAction$ObjectNTovoid = dart.constFn(dart_rti.findType("core|Map<ui|SemanticsAction,~(core|Object?)>")))(),
    MapOfCustomSemanticsAction$VoidTovoid: () => (T.MapOfCustomSemanticsAction$VoidTovoid = dart.constFn(dart_rti.findType("core|Map<flutter__src__semantics__semantics|CustomSemanticsAction,~()>")))(),
    Int32List: () => (T.Int32List = dart.constFn(dart_rti.findType("typed_data|Int32List")))(),
    Float64List: () => (T.Float64List = dart.constFn(dart_rti.findType("typed_data|Float64List")))(),
    _BoxEdge: () => (T._BoxEdge = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|_BoxEdge")))(),
    ObjectNToint: () => (T.ObjectNToint = dart.constFn(dart_rti.findType("core|int(core|Object?)")))(),
    _SemanticsSortGroup: () => (T._SemanticsSortGroup = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|_SemanticsSortGroup")))(),
    _SemanticsSortGroupToListOfSemanticsNode: () => (T._SemanticsSortGroupToListOfSemanticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|SemanticsNode>(flutter__src__semantics__semantics|_SemanticsSortGroup)")))(),
    SemanticsNodeAndSemanticsNodeToint: () => (T.SemanticsNodeAndSemanticsNodeToint = dart.constFn(dart_rti.findType("core|int(flutter__src__semantics__semantics|SemanticsNode,flutter__src__semantics__semantics|SemanticsNode)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    SemanticsNodeToint: () => (T.SemanticsNodeToint = dart.constFn(dart_rti.findType("core|int(flutter__src__semantics__semantics|SemanticsNode)")))(),
    intToSemanticsNode: () => (T.intToSemanticsNode = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsNode(core|int)")))(),
    SemanticsNodeToListOfDiagnosticsNode: () => (T.SemanticsNodeToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>(flutter__src__semantics__semantics|SemanticsNode)")))(),
    intAndSemanticsActionToFn: () => (T.intAndSemanticsActionToFn = dart.constFn(dart_rti.findType("~(core|Object?)?(core|int,ui|SemanticsAction)")))(),
    intAndSemanticsActionAndObjectNTovoid: () => (T.intAndSemanticsActionAndObjectNTovoid = dart.constFn(dart_rti.findType("~(core|int,ui|SemanticsAction[core|Object?])")))(),
    SemanticsNodeAndOffsetAndSemanticsActionToFn: () => (T.SemanticsNodeAndOffsetAndSemanticsActionToFn = dart.constFn(dart_rti.findType("~(core|Object?)?(flutter__src__semantics__semantics|SemanticsNode,ui|Offset,ui|SemanticsAction)")))(),
    OffsetAndSemanticsActionAndObjectNTovoid: () => (T.OffsetAndSemanticsActionAndObjectNTovoid = dart.constFn(dart_rti.findType("~(ui|Offset,ui|SemanticsAction[core|Object?])")))(),
    SemanticsUpdateTovoid: () => (T.SemanticsUpdateTovoid = dart.constFn(dart_rti.findType("~(ui|SemanticsUpdate)")))(),
    SetOfSemanticsNode: () => (T.SetOfSemanticsNode = dart.constFn(dart_rti.findType("core|Set<flutter__src__semantics__semantics|SemanticsNode>")))(),
    MapOfint$SemanticsNode: () => (T.MapOfint$SemanticsNode = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__semantics__semantics|SemanticsNode>")))(),
    Map: () => (T.Map = dart.constFn(dart_rti.findType("core|Map<@,@>")))(),
    SemanticsActionAndFnTovoid: () => (T.SemanticsActionAndFnTovoid = dart.constFn(dart_rti.findType("~(ui|SemanticsAction,~(core|Object?))")))(),
    SemanticsActionAndFnTovoid$1: () => (T.SemanticsActionAndFnTovoid$1 = dart.constFn(dart_rti.findType("~(ui|SemanticsAction,~())")))(),
    ListOfSemanticsConfigurationToNChildSemanticsConfigurationsResult: () => (T.ListOfSemanticsConfigurationToNChildSemanticsConfigurationsResult = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|ChildSemanticsConfigurationsResult(core|List<flutter__src__semantics__semantics|SemanticsConfiguration>)?")))(),
    SemanticsActionToFn: () => (T.SemanticsActionToFn = dart.constFn(dart_rti.findType("~(core|Object?)?(ui|SemanticsAction)")))(),
    IterableNOfSemanticsTag: () => (T.IterableNOfSemanticsTag = dart.constFn(dart_rti.findType("core|Iterable<flutter__src__semantics__semantics|SemanticsTag>?")))(),
    SemanticsTagTovoid: () => (T.SemanticsTagTovoid = dart.constFn(dart_rti.findType("~(flutter__src__semantics__semantics|SemanticsTag)")))(),
    SemanticsFlagAndboolTovoid: () => (T.SemanticsFlagAndboolTovoid = dart.constFn(dart_rti.findType("~(ui|SemanticsFlag,core|bool)")))(),
    SemanticsConfigurationNTobool: () => (T.SemanticsConfigurationNTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__semantics__semantics|SemanticsConfiguration?)")))(),
    VoidToSemanticsConfiguration: () => (T.VoidToSemanticsConfiguration = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|SemanticsConfiguration()")))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfDebugSemanticsDumpOrder: () => (T.ListOfDebugSemanticsDumpOrder = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics|DebugSemanticsDumpOrder>")))(),
    OrdinalSortKey: () => (T.OrdinalSortKey = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics|OrdinalSortKey")))()
  };
  var G = {
    JSArrayOfSemanticsConfiguration: () => (G.JSArrayOfSemanticsConfiguration = dart.constFn(_interceptors.JSArray$(T.SemanticsConfiguration())))(),
    JSArrayOfListOfSemanticsConfiguration: () => (G.JSArrayOfListOfSemanticsConfiguration = dart.constFn(_interceptors.JSArray$(T.ListOfSemanticsConfiguration())))(),
    LinkedHashSetOfSemanticsConfiguration: () => (G.LinkedHashSetOfSemanticsConfiguration = dart.constFn(collection.LinkedHashSet$(T.SemanticsConfiguration())))(),
    ListOfSemanticsConfiguration: () => (G.ListOfSemanticsConfiguration = dart.constFn(core.List$(T.SemanticsConfiguration())))(),
    IdentityMapOfint$CustomSemanticsAction: () => (G.IdentityMapOfint$CustomSemanticsAction = dart.constFn(_js_helper.IdentityMap$(T.int(), T.CustomSemanticsAction())))(),
    LinkedMapOfCustomSemanticsAction$int: () => (G.LinkedMapOfCustomSemanticsAction$int = dart.constFn(_js_helper.LinkedMap$(T.CustomSemanticsAction(), T.int())))(),
    ListOfStringAttribute: () => (G.ListOfStringAttribute = dart.constFn(core.List$(T.StringAttribute())))(),
    DiagnosticsPropertyOfRect: () => (G.DiagnosticsPropertyOfRect = dart.constFn(diagnostics.DiagnosticsProperty$(T.Rect())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))(),
    IterablePropertyOfString: () => (G.IterablePropertyOfString = dart.constFn(diagnostics.IterableProperty$(T.String())))(),
    IterablePropertyOfStringN: () => (G.IterablePropertyOfStringN = dart.constFn(diagnostics.IterableProperty$(T.StringN())))(),
    EnumPropertyOfTextDirection: () => (G.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(T.TextDirection())))(),
    DiagnosticsPropertyOfbool: () => (G.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(T.bool())))(),
    DiagnosticsPropertyOfSemanticsSortKey: () => (G.DiagnosticsPropertyOfSemanticsSortKey = dart.constFn(diagnostics.DiagnosticsProperty$(T.SemanticsSortKey())))(),
    DiagnosticsPropertyOfSemanticsHintOverrides: () => (G.DiagnosticsPropertyOfSemanticsHintOverrides = dart.constFn(diagnostics.DiagnosticsProperty$(T.SemanticsHintOverrides())))(),
    LinkedHashSetOfSemanticsNode: () => (G.LinkedHashSetOfSemanticsNode = dart.constFn(collection.LinkedHashSet$(T.SemanticsNode())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNode())))(),
    ListOfSemanticsNode: () => (G.ListOfSemanticsNode = dart.constFn(core.List$(T.SemanticsNode())))(),
    LinkedHashMapOfSemanticsAction$ObjectNTovoid: () => (G.LinkedHashMapOfSemanticsAction$ObjectNTovoid = dart.constFn(collection.LinkedHashMap$(T.SemanticsAction(), T.ObjectNTovoid())))(),
    LinkedHashMapOfCustomSemanticsAction$VoidTovoid: () => (G.LinkedHashMapOfCustomSemanticsAction$VoidTovoid = dart.constFn(collection.LinkedHashMap$(T.CustomSemanticsAction(), T.VoidTovoid())))(),
    LinkedHashSetOfSemanticsTag: () => (G.LinkedHashSetOfSemanticsTag = dart.constFn(collection.LinkedHashSet$(T.SemanticsTag())))(),
    LinkedHashSetOfint: () => (G.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(T.int())))(),
    JSArrayOf_TraversalSortNode: () => (G.JSArrayOf_TraversalSortNode = dart.constFn(_interceptors.JSArray$(T._TraversalSortNode())))(),
    DiagnosticsPropertyOfSemanticsOwner: () => (G.DiagnosticsPropertyOfSemanticsOwner = dart.constFn(diagnostics.DiagnosticsProperty$(T.SemanticsOwner())))(),
    JSArrayOfSemanticsNode: () => (G.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(T.SemanticsNode())))(),
    JSArrayOf_BoxEdge: () => (G.JSArrayOf_BoxEdge = dart.constFn(_interceptors.JSArray$(T._BoxEdge())))(),
    JSArrayOf_SemanticsSortGroup: () => (G.JSArrayOf_SemanticsSortGroup = dart.constFn(_interceptors.JSArray$(T._SemanticsSortGroup())))(),
    IdentityMapOfint$SemanticsNode: () => (G.IdentityMapOfint$SemanticsNode = dart.constFn(_js_helper.IdentityMap$(T.int(), T.SemanticsNode())))(),
    IdentityMapOfint$int: () => (G.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(T.int(), T.int())))(),
    JSArrayOfint: () => (G.JSArrayOfint = dart.constFn(_interceptors.JSArray$(T.int())))(),
    LinkedMapOfSemanticsAction$ObjectNTovoid: () => (G.LinkedMapOfSemanticsAction$ObjectNTovoid = dart.constFn(_js_helper.LinkedMap$(T.SemanticsAction(), T.ObjectNTovoid())))(),
    LinkedMapOfCustomSemanticsAction$VoidTovoid: () => (G.LinkedMapOfCustomSemanticsAction$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(T.CustomSemanticsAction(), T.VoidTovoid())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T.StringAttribute());
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
      }, diagnostics._NoDefaultValue.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "info",
        [_Enum_index]: 3
      }, diagnostics.DiagnosticLevel.prototype));
    },
    get C3() {
      return C[3] = dart.constList([], T.SemanticsNode());
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "debug",
        [_Enum_index]: 2
      }, diagnostics.DiagnosticLevel.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "traversalOrder",
        [_Enum_index]: 1
      }, semantics.DebugSemanticsDumpOrder.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "sparse",
        [_Enum_index]: 1
      }, diagnostics.DiagnosticsTreeStyle.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "inverseHitTest",
        [_Enum_index]: 0
      }, semantics.DebugSemanticsDumpOrder.prototype));
    },
    get C8() {
      return C[8] = dart.constList([C[7] || CT.C7, C[5] || CT.C5], T.DebugSemanticsDumpOrder());
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    }
  }, false);
  var C = Array(11).fill(void 0);
  var I = [
    "package:flutter/src/semantics/semantics.dart",
    "dart:core",
    "file:///C:/src/flutter/packages/flutter/lib/src/semantics/semantics.dart",
    "dart:ui",
    "package:flutter/src/services/text_editing.dart",
    "package:vector_math/vector_math_64.dart",
    "package:flutter/src/foundation/key.dart",
    "dart:typed_data"
  ];
  var name$ = dart.privateName(semantics, "SemanticsTag.name");
  semantics.SemanticsTag = class SemanticsTag extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new semantics.SemanticsTag.new(name);
    }
    toString() {
      return object.objectRuntimeType(this, "SemanticsTag") + "(" + this.name + ")";
    }
  };
  (semantics.SemanticsTag.new = function(name) {
    this[name$] = name;
    ;
  }).prototype = semantics.SemanticsTag.prototype;
  dart.addTypeTests(semantics.SemanticsTag);
  dart.addRtiResources(semantics.SemanticsTag, ["flutter__src__semantics__semantics|SemanticsTag"]);
  dart.addTypeCaches(semantics.SemanticsTag);
  dart.setLibraryUri(semantics.SemanticsTag, I[0]);
  dart.setFieldSignature(semantics.SemanticsTag, () => dart.global.Object.setPrototypeOf({name: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsTag))));
  dart.defineExtensionMethods(semantics.SemanticsTag, ['toString']);
  var mergeUp$ = dart.privateName(semantics, "ChildSemanticsConfigurationsResult.mergeUp");
  var siblingMergeGroups$ = dart.privateName(semantics, "ChildSemanticsConfigurationsResult.siblingMergeGroups");
  semantics.ChildSemanticsConfigurationsResult = class ChildSemanticsConfigurationsResult extends core.Object {
    get mergeUp() {
      return this[mergeUp$];
    }
    set mergeUp(value) {
      super.mergeUp = value;
    }
    get siblingMergeGroups() {
      return this[siblingMergeGroups$];
    }
    set siblingMergeGroups(value) {
      super.siblingMergeGroups = value;
    }
    static ['_#_#tearOff'](mergeUp, siblingMergeGroups) {
      return new semantics.ChildSemanticsConfigurationsResult.__(mergeUp, siblingMergeGroups);
    }
  };
  (semantics.ChildSemanticsConfigurationsResult.__ = function(mergeUp, siblingMergeGroups) {
    this[mergeUp$] = mergeUp;
    this[siblingMergeGroups$] = siblingMergeGroups;
    ;
  }).prototype = semantics.ChildSemanticsConfigurationsResult.prototype;
  dart.addTypeTests(semantics.ChildSemanticsConfigurationsResult);
  dart.addRtiResources(semantics.ChildSemanticsConfigurationsResult, ["flutter__src__semantics__semantics|ChildSemanticsConfigurationsResult"]);
  dart.addTypeCaches(semantics.ChildSemanticsConfigurationsResult);
  dart.setLibraryUri(semantics.ChildSemanticsConfigurationsResult, I[0]);
  dart.setFieldSignature(semantics.ChildSemanticsConfigurationsResult, () => dart.global.Object.setPrototypeOf({
    mergeUp: {type: T.ListOfSemanticsConfiguration(), isConst: false, isFinal: true, libraryUri: I[1]},
    siblingMergeGroups: {type: T.ListOfListOfSemanticsConfiguration(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.ChildSemanticsConfigurationsResult))));
  var _mergeUp = dart.privateName(semantics, "_mergeUp");
  var _siblingMergeGroups = dart.privateName(semantics, "_siblingMergeGroups");
  semantics.ChildSemanticsConfigurationsResultBuilder = class ChildSemanticsConfigurationsResultBuilder extends core.Object {
    static ['_#new#tearOff']() {
      return new semantics.ChildSemanticsConfigurationsResultBuilder.new();
    }
    markAsMergeUp(config) {
      return this[_mergeUp][$add](config);
    }
    markAsSiblingMergeGroup(configs) {
      return this[_siblingMergeGroups][$add](configs);
    }
    build() {
      if (!dart.fn(() => {
        let seenConfigs = G.LinkedHashSetOfSemanticsConfiguration().new();
        for (let config of (() => {
          let t$360 = G.ListOfSemanticsConfiguration().of(this[_mergeUp]);
          t$360[$addAll](iterable_extensions['IterableIterableExtension|get#flattened'](T.SemanticsConfiguration(), this[_siblingMergeGroups]));
          return t$360;
        })()) {
          if (!seenConfigs.add(config)) dart.assertFailed("Duplicated SemanticsConfigurations. This can happen if the same SemanticsConfiguration was marked twice in markAsMergeUp and/or markAsSiblingMergeGroup", I[2], 176, 11, "seenConfigs.add(config)");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 172, 12, "(){\r\n      final Set<SemanticsConfiguration> seenConfigs = <SemanticsConfiguration>{};\r\n      for (final SemanticsConfiguration config in <SemanticsConfiguration>[..._mergeUp, ..._siblingMergeGroups.flattened]) {\r\n        assert(\r\n          seenConfigs.add(config),\r\n          'Duplicated SemanticsConfigurations. This can happen if the same '\r\n          'SemanticsConfiguration was marked twice in markAsMergeUp and/or '\r\n          'markAsSiblingMergeGroup'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return new semantics.ChildSemanticsConfigurationsResult.__(this[_mergeUp], this[_siblingMergeGroups]);
    }
  };
  (semantics.ChildSemanticsConfigurationsResultBuilder.new = function() {
    this[_mergeUp] = G.JSArrayOfSemanticsConfiguration().of([]);
    this[_siblingMergeGroups] = G.JSArrayOfListOfSemanticsConfiguration().of([]);
    ;
  }).prototype = semantics.ChildSemanticsConfigurationsResultBuilder.prototype;
  dart.addTypeTests(semantics.ChildSemanticsConfigurationsResultBuilder);
  dart.addRtiResources(semantics.ChildSemanticsConfigurationsResultBuilder, ["flutter__src__semantics__semantics|ChildSemanticsConfigurationsResultBuilder"]);
  dart.addTypeCaches(semantics.ChildSemanticsConfigurationsResultBuilder);
  dart.setMethodSignature(semantics.ChildSemanticsConfigurationsResultBuilder, () => dart.global.Object.setPrototypeOf({
    markAsMergeUp: T.SemanticsConfigurationTovoid(),
    markAsSiblingMergeGroup: T.ListOfSemanticsConfigurationTovoid(),
    build: T.VoidToChildSemanticsConfigurationsResult()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.ChildSemanticsConfigurationsResultBuilder))));
  dart.setLibraryUri(semantics.ChildSemanticsConfigurationsResultBuilder, I[0]);
  dart.setFieldSignature(semantics.ChildSemanticsConfigurationsResultBuilder, () => dart.global.Object.setPrototypeOf({
    [_mergeUp]: {type: T.ListOfSemanticsConfiguration(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_siblingMergeGroups]: {type: T.ListOfListOfSemanticsConfiguration(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.ChildSemanticsConfigurationsResultBuilder))));
  var label$ = dart.privateName(semantics, "CustomSemanticsAction.label");
  var hint$ = dart.privateName(semantics, "CustomSemanticsAction.hint");
  var action$ = dart.privateName(semantics, "CustomSemanticsAction.action");
  var _is = dart.privateName(dart_rti, "_is");
  semantics.CustomSemanticsAction = class CustomSemanticsAction extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get hint() {
      return this[hint$];
    }
    set hint(value) {
      super.hint = value;
    }
    get action() {
      return this[action$];
    }
    set action(value) {
      super.action = value;
    }
    static ['_#new#tearOff'](opts) {
      let label = opts && 'label' in opts ? opts.label : null;
      return new semantics.CustomSemanticsAction.new({label: label});
    }
    static ['_#overridingAction#tearOff'](opts) {
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let action = opts && 'action' in opts ? opts.action : null;
      return new semantics.CustomSemanticsAction.overridingAction({hint: hint, action: action});
    }
    get hashCode() {
      return core.Object.hash(this.label, this.hint, this.action);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.CustomSemanticsAction()[_is](other) && other.label == this.label && other.hint == this.hint && dart.equals(other.action, this.action);
    }
    toString() {
      return "CustomSemanticsAction(" + dart.str(semantics.CustomSemanticsAction._ids[$_get](this)) + ", label:" + dart.str(this.label) + ", hint:" + dart.str(this.hint) + ", action:" + dart.str(this.action) + ")";
    }
    static getIdentifier(action) {
      let t$361;
      let result = semantics.CustomSemanticsAction._ids[$_get](action);
      if (result == null) {
        result = (t$361 = semantics.CustomSemanticsAction._nextId, semantics.CustomSemanticsAction._nextId = t$361 + 1, t$361);
        semantics.CustomSemanticsAction._ids[$_set](action, result);
        semantics.CustomSemanticsAction._actions[$_set](result, action);
      }
      return result;
    }
    static getAction(id) {
      return semantics.CustomSemanticsAction._actions[$_get](id);
    }
    static resetForTests() {
      if (!dart.fn(() => {
        semantics.CustomSemanticsAction._actions[$clear]();
        semantics.CustomSemanticsAction._ids[$clear]();
        semantics.CustomSemanticsAction._nextId = 0;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 281, 12, "() {\r\n      _actions.clear();\r\n      _ids.clear();\r\n      _nextId = 0;\r\n      return true;\r\n    }()");
    }
  };
  (semantics.CustomSemanticsAction.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    this[label$] = label;
    if (!(label !== "")) dart.assertFailed(null, I[2], 216, 14, "label != ''");
    this[hint$] = null;
    this[action$] = null;
    ;
  }).prototype = semantics.CustomSemanticsAction.prototype;
  (semantics.CustomSemanticsAction.overridingAction = function(opts) {
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let action = opts && 'action' in opts ? opts.action : null;
    this[hint$] = hint;
    this[action$] = action;
    if (!(hint !== "")) dart.assertFailed(null, I[2], 225, 14, "hint != ''");
    this[label$] = null;
    ;
  }).prototype = semantics.CustomSemanticsAction.prototype;
  dart.addTypeTests(semantics.CustomSemanticsAction);
  dart.addRtiResources(semantics.CustomSemanticsAction, ["flutter__src__semantics__semantics|CustomSemanticsAction"]);
  dart.addTypeCaches(semantics.CustomSemanticsAction);
  dart.setStaticMethodSignature(semantics.CustomSemanticsAction, () => ['getIdentifier', 'getAction', 'resetForTests']);
  dart.setLibraryUri(semantics.CustomSemanticsAction, I[0]);
  dart.setFieldSignature(semantics.CustomSemanticsAction, () => dart.global.Object.setPrototypeOf({
    label: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    hint: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    action: {type: T.SemanticsActionN(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.CustomSemanticsAction))));
  dart.setStaticFieldSignature(semantics.CustomSemanticsAction, () => ['_nextId', '_actions', '_ids']);
  dart.defineExtensionMethods(semantics.CustomSemanticsAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(semantics.CustomSemanticsAction, ['hashCode']);
  dart.defineLazy(semantics.CustomSemanticsAction, {
    /*semantics.CustomSemanticsAction._nextId*/get _nextId() {
      return 0;
    },
    set _nextId(value) {},
    /*semantics.CustomSemanticsAction._actions*/get _actions() {
      return new (G.IdentityMapOfint$CustomSemanticsAction()).new();
    },
    /*semantics.CustomSemanticsAction._ids*/get _ids() {
      return new (G.LinkedMapOfCustomSemanticsAction$int()).new();
    }
  }, false);
  var string$ = dart.privateName(semantics, "AttributedString.string");
  var attributes$ = dart.privateName(semantics, "AttributedString.attributes");
  semantics.AttributedString = class AttributedString extends core.Object {
    get string() {
      return this[string$];
    }
    set string(value) {
      super.string = value;
    }
    get attributes() {
      return this[attributes$];
    }
    set attributes(value) {
      super.attributes = value;
    }
    static ['_#new#tearOff'](string, opts) {
      let attributes = opts && 'attributes' in opts ? opts.attributes : C[0] || CT.C0;
      return new semantics.AttributedString.new(string, {attributes: attributes});
    }
    ['+'](other) {
      if (this.string[$isEmpty]) {
        return other;
      }
      if (other.string[$isEmpty]) {
        return this;
      }
      let newString = this.string + other.string;
      let newAttributes = G.ListOfStringAttribute().of(this.attributes);
      if (other.attributes[$isNotEmpty]) {
        let offset = this.string.length;
        for (let attribute of other.attributes) {
          let newRange = new ui.TextRange.new({start: attribute.range.start + offset, end: attribute.range.end + offset});
          let adjustedAttribute = attribute.copy({range: newRange});
          newAttributes[$add](adjustedAttribute);
        }
      }
      return new semantics.AttributedString.new(newString, {attributes: newAttributes});
    }
    _equals(other) {
      if (other == null) return false;
      return dart.equals(dart.runtimeType(other), dart.runtimeType(this)) && T.AttributedString()[_is](other) && other.string === this.string && collections.listEquals(T.StringAttribute(), other.attributes, this.attributes);
    }
    get hashCode() {
      return core.Object.hash(this.string, this.attributes);
    }
    toString() {
      return object.objectRuntimeType(this, "AttributedString") + "('" + this.string + "', attributes: " + dart.str(this.attributes) + ")";
    }
  };
  (semantics.AttributedString.new = function(string, opts) {
    let attributes = opts && 'attributes' in opts ? opts.attributes : C[0] || CT.C0;
    this[string$] = string;
    this[attributes$] = attributes;
    if (!(string[$isNotEmpty] || attributes[$isEmpty])) dart.assertFailed(null, I[2], 303, 15, "string.isNotEmpty || attributes.isEmpty");
    if (!dart.fn(() => {
      for (let attribute of attributes) {
        if (!(string.length >= attribute.range.start && string.length >= attribute.range.end)) dart.assertFailed("The range in " + dart.str(attribute) + " is outside of the string " + string, I[2], 307, 13, "string.length >= attribute.range.start &&\r\n            string.length >= attribute.range.end");
      }
      return true;
    }, T.VoidTobool())()) dart.assertFailed(null, I[2], 304, 15, "() {\r\n        for (final StringAttribute attribute in attributes) {\r\n          assert(\r\n            string.length >= attribute.range.start &&\r\n            string.length >= attribute.range.end,\r\n            'The range in $attribute is outside of the string $string',\r\n          );\r\n        }\r\n        return true;\r\n      }()");
    ;
  }).prototype = semantics.AttributedString.prototype;
  dart.addTypeTests(semantics.AttributedString);
  dart.addRtiResources(semantics.AttributedString, ["flutter__src__semantics__semantics|AttributedString"]);
  dart.addTypeCaches(semantics.AttributedString);
  dart.setMethodSignature(semantics.AttributedString, () => dart.global.Object.setPrototypeOf({'+': T.AttributedStringToAttributedString()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.AttributedString))));
  dart.setLibraryUri(semantics.AttributedString, I[0]);
  dart.setFieldSignature(semantics.AttributedString, () => dart.global.Object.setPrototypeOf({
    string: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributes: {type: T.ListOfStringAttribute(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.AttributedString))));
  dart.defineExtensionMethods(semantics.AttributedString, ['_equals', 'toString']);
  dart.defineExtensionAccessors(semantics.AttributedString, ['hashCode']);
  var showWhenEmpty$ = dart.privateName(semantics, "AttributedStringProperty.showWhenEmpty");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  semantics.AttributedStringProperty = class AttributedStringProperty extends diagnostics.DiagnosticsProperty$(dart_rti.findType("flutter__src__semantics__semantics|AttributedString")) {
    get showWhenEmpty() {
      return this[showWhenEmpty$];
    }
    set showWhenEmpty(value) {
      super.showWhenEmpty = value;
    }
    static ['_#new#tearOff'](name, value, opts) {
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let showWhenEmpty = opts && 'showWhenEmpty' in opts ? opts.showWhenEmpty : false;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[1] || CT.C1;
      let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
      let description = opts && 'description' in opts ? opts.description : null;
      return new semantics.AttributedStringProperty.new(name, value, {showName: showName, showWhenEmpty: showWhenEmpty, defaultValue: defaultValue, level: level, description: description});
    }
    get isInteresting() {
      return super.isInteresting && (this.showWhenEmpty || this.value != null && dart.nullCheck(this.value).string[$isNotEmpty]);
    }
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (this.value == null) {
        return "null";
      }
      let text = dart.nullCheck(this.value).string;
      if (parentConfiguration != null && !parentConfiguration.lineBreakProperties) {
        text = text[$replaceAll]("\n", "\\n");
      }
      if (dart.nullCheck(this.value).attributes[$isEmpty]) {
        return "\"" + text + "\"";
      }
      return "\"" + text + "\" " + dart.str(dart.nullCheck(this.value).attributes);
    }
  };
  (semantics.AttributedStringProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let showWhenEmpty = opts && 'showWhenEmpty' in opts ? opts.showWhenEmpty : false;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[1] || CT.C1;
    let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
    let description = opts && 'description' in opts ? opts.description : null;
    this[showWhenEmpty$] = showWhenEmpty;
    this.$ti = this.$ti || T.AttributedStringProperty();
    dart.global.Object.getPrototypeOf(semantics.AttributedStringProperty).new.call(this, name, value, {showName: showName, defaultValue: defaultValue, level: level, description: description});
    ;
  }).prototype = semantics.AttributedStringProperty.prototype;
  dart.addTypeTests(semantics.AttributedStringProperty);
  dart.addRtiResources(semantics.AttributedStringProperty, ["flutter__src__semantics__semantics|AttributedStringProperty"]);
  dart.addTypeCaches(semantics.AttributedStringProperty);
  dart.setLibraryUri(semantics.AttributedStringProperty, I[0]);
  dart.setFieldSignature(semantics.AttributedStringProperty, () => dart.global.Object.setPrototypeOf({showWhenEmpty: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics.AttributedStringProperty))));
  var flags$ = dart.privateName(semantics, "SemanticsData.flags");
  var actions$ = dart.privateName(semantics, "SemanticsData.actions");
  var identifier$ = dart.privateName(semantics, "SemanticsData.identifier");
  var attributedLabel$ = dart.privateName(semantics, "SemanticsData.attributedLabel");
  var attributedValue$ = dart.privateName(semantics, "SemanticsData.attributedValue");
  var attributedIncreasedValue$ = dart.privateName(semantics, "SemanticsData.attributedIncreasedValue");
  var attributedDecreasedValue$ = dart.privateName(semantics, "SemanticsData.attributedDecreasedValue");
  var attributedHint$ = dart.privateName(semantics, "SemanticsData.attributedHint");
  var tooltip$ = dart.privateName(semantics, "SemanticsData.tooltip");
  var textDirection$ = dart.privateName(semantics, "SemanticsData.textDirection");
  var textSelection$ = dart.privateName(semantics, "SemanticsData.textSelection");
  var scrollChildCount$ = dart.privateName(semantics, "SemanticsData.scrollChildCount");
  var scrollIndex$ = dart.privateName(semantics, "SemanticsData.scrollIndex");
  var scrollPosition$ = dart.privateName(semantics, "SemanticsData.scrollPosition");
  var scrollExtentMax$ = dart.privateName(semantics, "SemanticsData.scrollExtentMax");
  var scrollExtentMin$ = dart.privateName(semantics, "SemanticsData.scrollExtentMin");
  var platformViewId$ = dart.privateName(semantics, "SemanticsData.platformViewId");
  var maxValueLength$ = dart.privateName(semantics, "SemanticsData.maxValueLength");
  var currentValueLength$ = dart.privateName(semantics, "SemanticsData.currentValueLength");
  var rect$ = dart.privateName(semantics, "SemanticsData.rect");
  var tags$ = dart.privateName(semantics, "SemanticsData.tags");
  var transform$ = dart.privateName(semantics, "SemanticsData.transform");
  var elevation$ = dart.privateName(semantics, "SemanticsData.elevation");
  var thickness$ = dart.privateName(semantics, "SemanticsData.thickness");
  var customSemanticsActionIds$ = dart.privateName(semantics, "SemanticsData.customSemanticsActionIds");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  semantics.SemanticsData = class SemanticsData extends Object_Diagnosticable$36 {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get actions() {
      return this[actions$];
    }
    set actions(value) {
      super.actions = value;
    }
    get identifier() {
      return this[identifier$];
    }
    set identifier(value) {
      super.identifier = value;
    }
    get attributedLabel() {
      return this[attributedLabel$];
    }
    set attributedLabel(value) {
      super.attributedLabel = value;
    }
    get attributedValue() {
      return this[attributedValue$];
    }
    set attributedValue(value) {
      super.attributedValue = value;
    }
    get attributedIncreasedValue() {
      return this[attributedIncreasedValue$];
    }
    set attributedIncreasedValue(value) {
      super.attributedIncreasedValue = value;
    }
    get attributedDecreasedValue() {
      return this[attributedDecreasedValue$];
    }
    set attributedDecreasedValue(value) {
      super.attributedDecreasedValue = value;
    }
    get attributedHint() {
      return this[attributedHint$];
    }
    set attributedHint(value) {
      super.attributedHint = value;
    }
    get tooltip() {
      return this[tooltip$];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get textSelection() {
      return this[textSelection$];
    }
    set textSelection(value) {
      super.textSelection = value;
    }
    get scrollChildCount() {
      return this[scrollChildCount$];
    }
    set scrollChildCount(value) {
      super.scrollChildCount = value;
    }
    get scrollIndex() {
      return this[scrollIndex$];
    }
    set scrollIndex(value) {
      super.scrollIndex = value;
    }
    get scrollPosition() {
      return this[scrollPosition$];
    }
    set scrollPosition(value) {
      super.scrollPosition = value;
    }
    get scrollExtentMax() {
      return this[scrollExtentMax$];
    }
    set scrollExtentMax(value) {
      super.scrollExtentMax = value;
    }
    get scrollExtentMin() {
      return this[scrollExtentMin$];
    }
    set scrollExtentMin(value) {
      super.scrollExtentMin = value;
    }
    get platformViewId() {
      return this[platformViewId$];
    }
    set platformViewId(value) {
      super.platformViewId = value;
    }
    get maxValueLength() {
      return this[maxValueLength$];
    }
    set maxValueLength(value) {
      super.maxValueLength = value;
    }
    get currentValueLength() {
      return this[currentValueLength$];
    }
    set currentValueLength(value) {
      super.currentValueLength = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get customSemanticsActionIds() {
      return this[customSemanticsActionIds$];
    }
    set customSemanticsActionIds(value) {
      super.customSemanticsActionIds = value;
    }
    static ['_#new#tearOff'](opts) {
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let identifier = opts && 'identifier' in opts ? opts.identifier : null;
      let attributedLabel = opts && 'attributedLabel' in opts ? opts.attributedLabel : null;
      let attributedValue = opts && 'attributedValue' in opts ? opts.attributedValue : null;
      let attributedIncreasedValue = opts && 'attributedIncreasedValue' in opts ? opts.attributedIncreasedValue : null;
      let attributedDecreasedValue = opts && 'attributedDecreasedValue' in opts ? opts.attributedDecreasedValue : null;
      let attributedHint = opts && 'attributedHint' in opts ? opts.attributedHint : null;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let thickness = opts && 'thickness' in opts ? opts.thickness : null;
      let textSelection = opts && 'textSelection' in opts ? opts.textSelection : null;
      let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
      let scrollChildCount = opts && 'scrollChildCount' in opts ? opts.scrollChildCount : null;
      let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
      let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
      let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
      let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
      let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
      let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
      let tags = opts && 'tags' in opts ? opts.tags : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let customSemanticsActionIds = opts && 'customSemanticsActionIds' in opts ? opts.customSemanticsActionIds : null;
      return new semantics.SemanticsData.new({flags: flags, actions: actions, identifier: identifier, attributedLabel: attributedLabel, attributedValue: attributedValue, attributedIncreasedValue: attributedIncreasedValue, attributedDecreasedValue: attributedDecreasedValue, attributedHint: attributedHint, tooltip: tooltip, textDirection: textDirection, rect: rect, elevation: elevation, thickness: thickness, textSelection: textSelection, scrollIndex: scrollIndex, scrollChildCount: scrollChildCount, scrollPosition: scrollPosition, scrollExtentMax: scrollExtentMax, scrollExtentMin: scrollExtentMin, platformViewId: platformViewId, maxValueLength: maxValueLength, currentValueLength: currentValueLength, tags: tags, transform: transform, customSemanticsActionIds: customSemanticsActionIds});
    }
    get label() {
      return this.attributedLabel.string;
    }
    get value() {
      return this.attributedValue.string;
    }
    get increasedValue() {
      return this.attributedIncreasedValue.string;
    }
    get decreasedValue() {
      return this.attributedDecreasedValue.string;
    }
    get hint() {
      return this.attributedHint.string;
    }
    hasFlag(flag) {
      return (this.flags & flag.index) !== 0;
    }
    hasAction(action) {
      return (this.actions & action.index) !== 0;
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsData");
    }
    debugFillProperties(properties) {
      let t$363, t$363$;
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfRect()).new("rect", this.rect, {showName: false}));
      properties.add(new matrix_utils.TransformProperty.new("transform", this.transform, {showName: false, defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation, {defaultValue: 0.0}));
      properties.add(new diagnostics.DoubleProperty.new("thickness", this.thickness, {defaultValue: 0.0}));
      let actionSummary = (() => {
        let t$361 = G.JSArrayOfString().of([]);
        for (let action of ui.SemanticsAction.values)
          if ((this.actions & action.index) !== 0) t$361.push(action.name);
        return t$361;
      })();
      let customSemanticsActionSummary = dart.nullCheck(this.customSemanticsActionIds)[$map](T.StringN(), dart.fn(actionId => dart.nullCheck(semantics.CustomSemanticsAction.getAction(actionId)).label, T.intToStringN()))[$toList]();
      properties.add(new (G.IterablePropertyOfString()).new("actions", actionSummary, {ifEmpty: null}));
      properties.add(new (G.IterablePropertyOfStringN()).new("customActions", customSemanticsActionSummary, {ifEmpty: null}));
      let flagSummary = (() => {
        let t$362 = G.JSArrayOfString().of([]);
        for (let flag of ui.SemanticsFlag.values)
          if ((this.flags & flag.index) !== 0) t$362.push(flag.name);
        return t$362;
      })();
      properties.add(new (G.IterablePropertyOfString()).new("flags", flagSummary, {ifEmpty: null}));
      properties.add(new diagnostics.StringProperty.new("identifier", this.identifier, {defaultValue: ""}));
      properties.add(new semantics.AttributedStringProperty.new("label", this.attributedLabel));
      properties.add(new semantics.AttributedStringProperty.new("value", this.attributedValue));
      properties.add(new semantics.AttributedStringProperty.new("increasedValue", this.attributedIncreasedValue));
      properties.add(new semantics.AttributedStringProperty.new("decreasedValue", this.attributedDecreasedValue));
      properties.add(new semantics.AttributedStringProperty.new("hint", this.attributedHint));
      properties.add(new diagnostics.StringProperty.new("tooltip", this.tooltip, {defaultValue: ""}));
      properties.add(new (G.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      if (dart.test((t$363$ = (t$363 = this.textSelection, t$363 == null ? null : t$363.isValid), t$363$ == null ? false : t$363$))) {
        properties.add(new diagnostics.MessageProperty.new("textSelection", "[" + dart.strSafe(dart.nullCheck(this.textSelection).start) + ", " + dart.strSafe(dart.nullCheck(this.textSelection).end) + "]"));
      }
      properties.add(new diagnostics.IntProperty.new("platformViewId", this.platformViewId, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("maxValueLength", this.maxValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("currentValueLength", this.currentValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollChildren", this.scrollChildCount, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollIndex", this.scrollIndex, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMin", this.scrollExtentMin, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollPosition", this.scrollPosition, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMax", this.scrollExtentMax, {defaultValue: null}));
    }
    _equals(other) {
      if (other == null) return false;
      return T.SemanticsData()[_is](other) && other.flags === this.flags && other.actions === this.actions && other.identifier === this.identifier && dart.equals(other.attributedLabel, this.attributedLabel) && dart.equals(other.attributedValue, this.attributedValue) && dart.equals(other.attributedIncreasedValue, this.attributedIncreasedValue) && dart.equals(other.attributedDecreasedValue, this.attributedDecreasedValue) && dart.equals(other.attributedHint, this.attributedHint) && other.tooltip === this.tooltip && other.textDirection == this.textDirection && dart.equals(other.rect, this.rect) && collections.setEquals(T.SemanticsTag(), other.tags, this.tags) && other.scrollChildCount == this.scrollChildCount && other.scrollIndex == this.scrollIndex && dart.equals(other.textSelection, this.textSelection) && other.scrollPosition == this.scrollPosition && other.scrollExtentMax == this.scrollExtentMax && other.scrollExtentMin == this.scrollExtentMin && other.platformViewId == this.platformViewId && other.maxValueLength == this.maxValueLength && other.currentValueLength == this.currentValueLength && dart.equals(other.transform, this.transform) && other.elevation === this.elevation && other.thickness === this.thickness && semantics.SemanticsData._sortedListsEqual(other.customSemanticsActionIds, this.customSemanticsActionIds);
    }
    get hashCode() {
      return core.Object.hash(this.flags, this.actions, this.identifier, this.attributedLabel, this.attributedValue, this.attributedIncreasedValue, this.attributedDecreasedValue, this.attributedHint, this.tooltip, this.textDirection, this.rect, this.tags, this.textSelection, this.scrollChildCount, this.scrollIndex, this.scrollPosition, this.scrollExtentMax, this.scrollExtentMin, this.platformViewId, core.Object.hash(this.maxValueLength, this.currentValueLength, this.transform, this.elevation, this.thickness, this.customSemanticsActionIds == null ? null : core.Object.hashAll(dart.nullCheck(this.customSemanticsActionIds))));
    }
    static _sortedListsEqual(left, right) {
      if (left == null && right == null) {
        return true;
      }
      if (left != null && right != null) {
        if (left[$length] !== right[$length]) {
          return false;
        }
        for (let i = 0; i < left[$length]; i = i + 1) {
          if (left[$_get](i) !== right[$_get](i)) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
  };
  (semantics.SemanticsData.new = function(opts) {
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let identifier = opts && 'identifier' in opts ? opts.identifier : null;
    let attributedLabel = opts && 'attributedLabel' in opts ? opts.attributedLabel : null;
    let attributedValue = opts && 'attributedValue' in opts ? opts.attributedValue : null;
    let attributedIncreasedValue = opts && 'attributedIncreasedValue' in opts ? opts.attributedIncreasedValue : null;
    let attributedDecreasedValue = opts && 'attributedDecreasedValue' in opts ? opts.attributedDecreasedValue : null;
    let attributedHint = opts && 'attributedHint' in opts ? opts.attributedHint : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let textSelection = opts && 'textSelection' in opts ? opts.textSelection : null;
    let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
    let scrollChildCount = opts && 'scrollChildCount' in opts ? opts.scrollChildCount : null;
    let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
    let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
    let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
    let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
    let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
    let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
    let tags = opts && 'tags' in opts ? opts.tags : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let customSemanticsActionIds = opts && 'customSemanticsActionIds' in opts ? opts.customSemanticsActionIds : null;
    this[flags$] = flags;
    this[actions$] = actions;
    this[identifier$] = identifier;
    this[attributedLabel$] = attributedLabel;
    this[attributedValue$] = attributedValue;
    this[attributedIncreasedValue$] = attributedIncreasedValue;
    this[attributedDecreasedValue$] = attributedDecreasedValue;
    this[attributedHint$] = attributedHint;
    this[tooltip$] = tooltip;
    this[textDirection$] = textDirection;
    this[rect$] = rect;
    this[elevation$] = elevation;
    this[thickness$] = thickness;
    this[textSelection$] = textSelection;
    this[scrollIndex$] = scrollIndex;
    this[scrollChildCount$] = scrollChildCount;
    this[scrollPosition$] = scrollPosition;
    this[scrollExtentMax$] = scrollExtentMax;
    this[scrollExtentMin$] = scrollExtentMin;
    this[platformViewId$] = platformViewId;
    this[maxValueLength$] = maxValueLength;
    this[currentValueLength$] = currentValueLength;
    this[tags$] = tags;
    this[transform$] = transform;
    this[customSemanticsActionIds$] = customSemanticsActionIds;
    if (!(tooltip === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with tooltip \"" + tooltip + "\" had a null textDirection.", I[2], 452, 15, "tooltip == '' || textDirection != null");
    if (!(attributedLabel.string === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with label \"" + attributedLabel.string + "\" had a null textDirection.", I[2], 453, 15, "attributedLabel.string == '' || textDirection != null");
    if (!(attributedValue.string === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with value \"" + attributedValue.string + "\" had a null textDirection.", I[2], 454, 15, "attributedValue.string == '' || textDirection != null");
    if (!(attributedDecreasedValue.string === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with decreasedValue \"" + attributedDecreasedValue.string + "\" had a null textDirection.", I[2], 455, 15, "attributedDecreasedValue.string == '' || textDirection != null");
    if (!(attributedIncreasedValue.string === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with increasedValue \"" + attributedIncreasedValue.string + "\" had a null textDirection.", I[2], 456, 15, "attributedIncreasedValue.string == '' || textDirection != null");
    if (!(attributedHint.string === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with hint \"" + attributedHint.string + "\" had a null textDirection.", I[2], 457, 15, "attributedHint.string == '' || textDirection != null");
    ;
  }).prototype = semantics.SemanticsData.prototype;
  dart.addTypeTests(semantics.SemanticsData);
  dart.addRtiResources(semantics.SemanticsData, ["flutter__src__semantics__semantics|SemanticsData"]);
  dart.addTypeCaches(semantics.SemanticsData);
  dart.setMethodSignature(semantics.SemanticsData, () => dart.global.Object.setPrototypeOf({
    hasFlag: T.SemanticsFlagTobool(),
    hasAction: T.SemanticsActionTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.SemanticsData))));
  dart.setStaticMethodSignature(semantics.SemanticsData, () => ['_sortedListsEqual']);
  dart.setGetterSignature(semantics.SemanticsData, () => dart.global.Object.setPrototypeOf({
    label: T.String(),
    value: T.String(),
    increasedValue: T.String(),
    decreasedValue: T.String(),
    hint: T.String()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(semantics.SemanticsData))));
  dart.setLibraryUri(semantics.SemanticsData, I[0]);
  dart.setFieldSignature(semantics.SemanticsData, () => dart.global.Object.setPrototypeOf({
    flags: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    actions: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    identifier: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedLabel: {type: T.AttributedString(), isConst: false, isFinal: true, libraryUri: I[0]},
    attributedValue: {type: T.AttributedString(), isConst: false, isFinal: true, libraryUri: I[0]},
    attributedIncreasedValue: {type: T.AttributedString(), isConst: false, isFinal: true, libraryUri: I[0]},
    attributedDecreasedValue: {type: T.AttributedString(), isConst: false, isFinal: true, libraryUri: I[0]},
    attributedHint: {type: T.AttributedString(), isConst: false, isFinal: true, libraryUri: I[0]},
    tooltip: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    textDirection: {type: T.TextDirectionN(), isConst: false, isFinal: true, libraryUri: I[3]},
    textSelection: {type: T.TextSelectionN(), isConst: false, isFinal: true, libraryUri: I[4]},
    scrollChildCount: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    scrollIndex: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    scrollPosition: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    scrollExtentMax: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    scrollExtentMin: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    platformViewId: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    maxValueLength: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    currentValueLength: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    rect: {type: T.Rect(), isConst: false, isFinal: true, libraryUri: I[3]},
    tags: {type: T.SetNOfSemanticsTag(), isConst: false, isFinal: true, libraryUri: I[1]},
    transform: {type: T.Matrix4N(), isConst: false, isFinal: true, libraryUri: I[5]},
    elevation: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    thickness: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    customSemanticsActionIds: {type: T.ListNOfint(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsData))));
  dart.defineExtensionMethods(semantics.SemanticsData, ['_equals']);
  dart.defineExtensionAccessors(semantics.SemanticsData, ['hashCode']);
  semantics._SemanticsDiagnosticableNode = class _SemanticsDiagnosticableNode extends diagnostics.DiagnosticableNode$(dart_rti.findType("flutter__src__semantics__semantics|SemanticsNode")) {
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : null;
      return new semantics._SemanticsDiagnosticableNode.new({name: name, value: value, style: style, childOrder: childOrder});
    }
    getChildren() {
      return this.value.debugDescribeChildren({childOrder: this.childOrder});
    }
  };
  (semantics._SemanticsDiagnosticableNode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let childOrder = opts && 'childOrder' in opts ? opts.childOrder : null;
    this.childOrder = childOrder;
    this.$ti = this.$ti || T._SemanticsDiagnosticableNode();
    dart.global.Object.getPrototypeOf(semantics._SemanticsDiagnosticableNode).new.call(this, {name: name, value: value, style: style});
    ;
  }).prototype = semantics._SemanticsDiagnosticableNode.prototype;
  dart.addTypeTests(semantics._SemanticsDiagnosticableNode);
  dart.addRtiResources(semantics._SemanticsDiagnosticableNode, ["flutter__src__semantics__semantics|_SemanticsDiagnosticableNode"]);
  dart.addTypeCaches(semantics._SemanticsDiagnosticableNode);
  dart.setLibraryUri(semantics._SemanticsDiagnosticableNode, I[0]);
  dart.setFieldSignature(semantics._SemanticsDiagnosticableNode, () => dart.global.Object.setPrototypeOf({childOrder: {type: T.DebugSemanticsDumpOrder(), isConst: false, isFinal: true, libraryUri: I[0]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics._SemanticsDiagnosticableNode))));
  var onTapHint$ = dart.privateName(semantics, "SemanticsHintOverrides.onTapHint");
  var onLongPressHint$ = dart.privateName(semantics, "SemanticsHintOverrides.onLongPressHint");
  semantics.SemanticsHintOverrides = class SemanticsHintOverrides extends diagnostics.DiagnosticableTree {
    get onTapHint() {
      return this[onTapHint$];
    }
    set onTapHint(value) {
      super.onTapHint = value;
    }
    get onLongPressHint() {
      return this[onLongPressHint$];
    }
    set onLongPressHint(value) {
      super.onLongPressHint = value;
    }
    static ['_#new#tearOff'](opts) {
      let onTapHint = opts && 'onTapHint' in opts ? opts.onTapHint : null;
      let onLongPressHint = opts && 'onLongPressHint' in opts ? opts.onLongPressHint : null;
      return new semantics.SemanticsHintOverrides.new({onTapHint: onTapHint, onLongPressHint: onLongPressHint});
    }
    get isNotEmpty() {
      return this.onTapHint != null || this.onLongPressHint != null;
    }
    get hashCode() {
      return core.Object.hash(this.onTapHint, this.onLongPressHint);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.SemanticsHintOverrides()[_is](other) && other.onTapHint == this.onTapHint && other.onLongPressHint == this.onLongPressHint;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("onTapHint", this.onTapHint, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("onLongPressHint", this.onLongPressHint, {defaultValue: null}));
    }
  };
  (semantics.SemanticsHintOverrides.new = function(opts) {
    let onTapHint = opts && 'onTapHint' in opts ? opts.onTapHint : null;
    let onLongPressHint = opts && 'onLongPressHint' in opts ? opts.onLongPressHint : null;
    this[onTapHint$] = onTapHint;
    this[onLongPressHint$] = onLongPressHint;
    if (!(onTapHint !== "")) dart.assertFailed(null, I[2], 828, 15, "onTapHint != ''");
    if (!(onLongPressHint !== "")) dart.assertFailed(null, I[2], 829, 15, "onLongPressHint != ''");
    dart.global.Object.getPrototypeOf(semantics.SemanticsHintOverrides).new.call(this);
    ;
  }).prototype = semantics.SemanticsHintOverrides.prototype;
  dart.addTypeTests(semantics.SemanticsHintOverrides);
  dart.addRtiResources(semantics.SemanticsHintOverrides, ["flutter__src__semantics__semantics|SemanticsHintOverrides"]);
  dart.addTypeCaches(semantics.SemanticsHintOverrides);
  dart.setGetterSignature(semantics.SemanticsHintOverrides, () => dart.global.Object.setPrototypeOf({isNotEmpty: T.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(semantics.SemanticsHintOverrides))));
  dart.setLibraryUri(semantics.SemanticsHintOverrides, I[0]);
  dart.setFieldSignature(semantics.SemanticsHintOverrides, () => dart.global.Object.setPrototypeOf({
    onTapHint: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    onLongPressHint: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsHintOverrides))));
  dart.defineExtensionMethods(semantics.SemanticsHintOverrides, ['_equals']);
  dart.defineExtensionAccessors(semantics.SemanticsHintOverrides, ['hashCode']);
  var enabled$ = dart.privateName(semantics, "SemanticsProperties.enabled");
  var checked$ = dart.privateName(semantics, "SemanticsProperties.checked");
  var mixed$ = dart.privateName(semantics, "SemanticsProperties.mixed");
  var expanded$ = dart.privateName(semantics, "SemanticsProperties.expanded");
  var toggled$ = dart.privateName(semantics, "SemanticsProperties.toggled");
  var selected$ = dart.privateName(semantics, "SemanticsProperties.selected");
  var button$ = dart.privateName(semantics, "SemanticsProperties.button");
  var link$ = dart.privateName(semantics, "SemanticsProperties.link");
  var header$ = dart.privateName(semantics, "SemanticsProperties.header");
  var textField$ = dart.privateName(semantics, "SemanticsProperties.textField");
  var slider$ = dart.privateName(semantics, "SemanticsProperties.slider");
  var keyboardKey$ = dart.privateName(semantics, "SemanticsProperties.keyboardKey");
  var readOnly$ = dart.privateName(semantics, "SemanticsProperties.readOnly");
  var focusable$ = dart.privateName(semantics, "SemanticsProperties.focusable");
  var focused$ = dart.privateName(semantics, "SemanticsProperties.focused");
  var inMutuallyExclusiveGroup$ = dart.privateName(semantics, "SemanticsProperties.inMutuallyExclusiveGroup");
  var hidden$ = dart.privateName(semantics, "SemanticsProperties.hidden");
  var obscured$ = dart.privateName(semantics, "SemanticsProperties.obscured");
  var multiline$ = dart.privateName(semantics, "SemanticsProperties.multiline");
  var scopesRoute$ = dart.privateName(semantics, "SemanticsProperties.scopesRoute");
  var namesRoute$ = dart.privateName(semantics, "SemanticsProperties.namesRoute");
  var image$ = dart.privateName(semantics, "SemanticsProperties.image");
  var liveRegion$ = dart.privateName(semantics, "SemanticsProperties.liveRegion");
  var maxValueLength$0 = dart.privateName(semantics, "SemanticsProperties.maxValueLength");
  var currentValueLength$0 = dart.privateName(semantics, "SemanticsProperties.currentValueLength");
  var identifier$0 = dart.privateName(semantics, "SemanticsProperties.identifier");
  var label$0 = dart.privateName(semantics, "SemanticsProperties.label");
  var attributedLabel$0 = dart.privateName(semantics, "SemanticsProperties.attributedLabel");
  var value$ = dart.privateName(semantics, "SemanticsProperties.value");
  var attributedValue$0 = dart.privateName(semantics, "SemanticsProperties.attributedValue");
  var increasedValue$ = dart.privateName(semantics, "SemanticsProperties.increasedValue");
  var attributedIncreasedValue$0 = dart.privateName(semantics, "SemanticsProperties.attributedIncreasedValue");
  var decreasedValue$ = dart.privateName(semantics, "SemanticsProperties.decreasedValue");
  var attributedDecreasedValue$0 = dart.privateName(semantics, "SemanticsProperties.attributedDecreasedValue");
  var hint$0 = dart.privateName(semantics, "SemanticsProperties.hint");
  var attributedHint$0 = dart.privateName(semantics, "SemanticsProperties.attributedHint");
  var tooltip$0 = dart.privateName(semantics, "SemanticsProperties.tooltip");
  var hintOverrides$ = dart.privateName(semantics, "SemanticsProperties.hintOverrides");
  var textDirection$0 = dart.privateName(semantics, "SemanticsProperties.textDirection");
  var sortKey$ = dart.privateName(semantics, "SemanticsProperties.sortKey");
  var tagForChildren$ = dart.privateName(semantics, "SemanticsProperties.tagForChildren");
  var onTap$ = dart.privateName(semantics, "SemanticsProperties.onTap");
  var onLongPress$ = dart.privateName(semantics, "SemanticsProperties.onLongPress");
  var onScrollLeft$ = dart.privateName(semantics, "SemanticsProperties.onScrollLeft");
  var onScrollRight$ = dart.privateName(semantics, "SemanticsProperties.onScrollRight");
  var onScrollUp$ = dart.privateName(semantics, "SemanticsProperties.onScrollUp");
  var onScrollDown$ = dart.privateName(semantics, "SemanticsProperties.onScrollDown");
  var onIncrease$ = dart.privateName(semantics, "SemanticsProperties.onIncrease");
  var onDecrease$ = dart.privateName(semantics, "SemanticsProperties.onDecrease");
  var onCopy$ = dart.privateName(semantics, "SemanticsProperties.onCopy");
  var onCut$ = dart.privateName(semantics, "SemanticsProperties.onCut");
  var onPaste$ = dart.privateName(semantics, "SemanticsProperties.onPaste");
  var onMoveCursorForwardByCharacter$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorForwardByCharacter");
  var onMoveCursorBackwardByCharacter$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorBackwardByCharacter");
  var onMoveCursorForwardByWord$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorForwardByWord");
  var onMoveCursorBackwardByWord$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorBackwardByWord");
  var onSetSelection$ = dart.privateName(semantics, "SemanticsProperties.onSetSelection");
  var onSetText$ = dart.privateName(semantics, "SemanticsProperties.onSetText");
  var onDidGainAccessibilityFocus$ = dart.privateName(semantics, "SemanticsProperties.onDidGainAccessibilityFocus");
  var onDidLoseAccessibilityFocus$ = dart.privateName(semantics, "SemanticsProperties.onDidLoseAccessibilityFocus");
  var onDismiss$ = dart.privateName(semantics, "SemanticsProperties.onDismiss");
  var customSemanticsActions$ = dart.privateName(semantics, "SemanticsProperties.customSemanticsActions");
  semantics.SemanticsProperties = class SemanticsProperties extends diagnostics.DiagnosticableTree {
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get checked() {
      return this[checked$];
    }
    set checked(value) {
      super.checked = value;
    }
    get mixed() {
      return this[mixed$];
    }
    set mixed(value) {
      super.mixed = value;
    }
    get expanded() {
      return this[expanded$];
    }
    set expanded(value) {
      super.expanded = value;
    }
    get toggled() {
      return this[toggled$];
    }
    set toggled(value) {
      super.toggled = value;
    }
    get selected() {
      return this[selected$];
    }
    set selected(value) {
      super.selected = value;
    }
    get button() {
      return this[button$];
    }
    set button(value) {
      super.button = value;
    }
    get link() {
      return this[link$];
    }
    set link(value) {
      super.link = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get textField() {
      return this[textField$];
    }
    set textField(value) {
      super.textField = value;
    }
    get slider() {
      return this[slider$];
    }
    set slider(value) {
      super.slider = value;
    }
    get keyboardKey() {
      return this[keyboardKey$];
    }
    set keyboardKey(value) {
      super.keyboardKey = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get focusable() {
      return this[focusable$];
    }
    set focusable(value) {
      super.focusable = value;
    }
    get focused() {
      return this[focused$];
    }
    set focused(value) {
      super.focused = value;
    }
    get inMutuallyExclusiveGroup() {
      return this[inMutuallyExclusiveGroup$];
    }
    set inMutuallyExclusiveGroup(value) {
      super.inMutuallyExclusiveGroup = value;
    }
    get hidden() {
      return this[hidden$];
    }
    set hidden(value) {
      super.hidden = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get multiline() {
      return this[multiline$];
    }
    set multiline(value) {
      super.multiline = value;
    }
    get scopesRoute() {
      return this[scopesRoute$];
    }
    set scopesRoute(value) {
      super.scopesRoute = value;
    }
    get namesRoute() {
      return this[namesRoute$];
    }
    set namesRoute(value) {
      super.namesRoute = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get liveRegion() {
      return this[liveRegion$];
    }
    set liveRegion(value) {
      super.liveRegion = value;
    }
    get maxValueLength() {
      return this[maxValueLength$0];
    }
    set maxValueLength(value) {
      super.maxValueLength = value;
    }
    get currentValueLength() {
      return this[currentValueLength$0];
    }
    set currentValueLength(value) {
      super.currentValueLength = value;
    }
    get identifier() {
      return this[identifier$0];
    }
    set identifier(value) {
      super.identifier = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    get attributedLabel() {
      return this[attributedLabel$0];
    }
    set attributedLabel(value) {
      super.attributedLabel = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get attributedValue() {
      return this[attributedValue$0];
    }
    set attributedValue(value) {
      super.attributedValue = value;
    }
    get increasedValue() {
      return this[increasedValue$];
    }
    set increasedValue(value) {
      super.increasedValue = value;
    }
    get attributedIncreasedValue() {
      return this[attributedIncreasedValue$0];
    }
    set attributedIncreasedValue(value) {
      super.attributedIncreasedValue = value;
    }
    get decreasedValue() {
      return this[decreasedValue$];
    }
    set decreasedValue(value) {
      super.decreasedValue = value;
    }
    get attributedDecreasedValue() {
      return this[attributedDecreasedValue$0];
    }
    set attributedDecreasedValue(value) {
      super.attributedDecreasedValue = value;
    }
    get hint() {
      return this[hint$0];
    }
    set hint(value) {
      super.hint = value;
    }
    get attributedHint() {
      return this[attributedHint$0];
    }
    set attributedHint(value) {
      super.attributedHint = value;
    }
    get tooltip() {
      return this[tooltip$0];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get hintOverrides() {
      return this[hintOverrides$];
    }
    set hintOverrides(value) {
      super.hintOverrides = value;
    }
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get sortKey() {
      return this[sortKey$];
    }
    set sortKey(value) {
      super.sortKey = value;
    }
    get tagForChildren() {
      return this[tagForChildren$];
    }
    set tagForChildren(value) {
      super.tagForChildren = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onScrollLeft() {
      return this[onScrollLeft$];
    }
    set onScrollLeft(value) {
      super.onScrollLeft = value;
    }
    get onScrollRight() {
      return this[onScrollRight$];
    }
    set onScrollRight(value) {
      super.onScrollRight = value;
    }
    get onScrollUp() {
      return this[onScrollUp$];
    }
    set onScrollUp(value) {
      super.onScrollUp = value;
    }
    get onScrollDown() {
      return this[onScrollDown$];
    }
    set onScrollDown(value) {
      super.onScrollDown = value;
    }
    get onIncrease() {
      return this[onIncrease$];
    }
    set onIncrease(value) {
      super.onIncrease = value;
    }
    get onDecrease() {
      return this[onDecrease$];
    }
    set onDecrease(value) {
      super.onDecrease = value;
    }
    get onCopy() {
      return this[onCopy$];
    }
    set onCopy(value) {
      super.onCopy = value;
    }
    get onCut() {
      return this[onCut$];
    }
    set onCut(value) {
      super.onCut = value;
    }
    get onPaste() {
      return this[onPaste$];
    }
    set onPaste(value) {
      super.onPaste = value;
    }
    get onMoveCursorForwardByCharacter() {
      return this[onMoveCursorForwardByCharacter$];
    }
    set onMoveCursorForwardByCharacter(value) {
      super.onMoveCursorForwardByCharacter = value;
    }
    get onMoveCursorBackwardByCharacter() {
      return this[onMoveCursorBackwardByCharacter$];
    }
    set onMoveCursorBackwardByCharacter(value) {
      super.onMoveCursorBackwardByCharacter = value;
    }
    get onMoveCursorForwardByWord() {
      return this[onMoveCursorForwardByWord$];
    }
    set onMoveCursorForwardByWord(value) {
      super.onMoveCursorForwardByWord = value;
    }
    get onMoveCursorBackwardByWord() {
      return this[onMoveCursorBackwardByWord$];
    }
    set onMoveCursorBackwardByWord(value) {
      super.onMoveCursorBackwardByWord = value;
    }
    get onSetSelection() {
      return this[onSetSelection$];
    }
    set onSetSelection(value) {
      super.onSetSelection = value;
    }
    get onSetText() {
      return this[onSetText$];
    }
    set onSetText(value) {
      super.onSetText = value;
    }
    get onDidGainAccessibilityFocus() {
      return this[onDidGainAccessibilityFocus$];
    }
    set onDidGainAccessibilityFocus(value) {
      super.onDidGainAccessibilityFocus = value;
    }
    get onDidLoseAccessibilityFocus() {
      return this[onDidLoseAccessibilityFocus$];
    }
    set onDidLoseAccessibilityFocus(value) {
      super.onDidLoseAccessibilityFocus = value;
    }
    get onDismiss() {
      return this[onDismiss$];
    }
    set onDismiss(value) {
      super.onDismiss = value;
    }
    get customSemanticsActions() {
      return this[customSemanticsActions$];
    }
    set customSemanticsActions(value) {
      super.customSemanticsActions = value;
    }
    static ['_#new#tearOff'](opts) {
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let checked = opts && 'checked' in opts ? opts.checked : null;
      let mixed = opts && 'mixed' in opts ? opts.mixed : null;
      let expanded = opts && 'expanded' in opts ? opts.expanded : null;
      let selected = opts && 'selected' in opts ? opts.selected : null;
      let toggled = opts && 'toggled' in opts ? opts.toggled : null;
      let button = opts && 'button' in opts ? opts.button : null;
      let link = opts && 'link' in opts ? opts.link : null;
      let header = opts && 'header' in opts ? opts.header : null;
      let textField = opts && 'textField' in opts ? opts.textField : null;
      let slider = opts && 'slider' in opts ? opts.slider : null;
      let keyboardKey = opts && 'keyboardKey' in opts ? opts.keyboardKey : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
      let focusable = opts && 'focusable' in opts ? opts.focusable : null;
      let focused = opts && 'focused' in opts ? opts.focused : null;
      let inMutuallyExclusiveGroup = opts && 'inMutuallyExclusiveGroup' in opts ? opts.inMutuallyExclusiveGroup : null;
      let hidden = opts && 'hidden' in opts ? opts.hidden : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let multiline = opts && 'multiline' in opts ? opts.multiline : null;
      let scopesRoute = opts && 'scopesRoute' in opts ? opts.scopesRoute : null;
      let namesRoute = opts && 'namesRoute' in opts ? opts.namesRoute : null;
      let image = opts && 'image' in opts ? opts.image : null;
      let liveRegion = opts && 'liveRegion' in opts ? opts.liveRegion : null;
      let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
      let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
      let identifier = opts && 'identifier' in opts ? opts.identifier : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let attributedLabel = opts && 'attributedLabel' in opts ? opts.attributedLabel : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let attributedValue = opts && 'attributedValue' in opts ? opts.attributedValue : null;
      let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
      let attributedIncreasedValue = opts && 'attributedIncreasedValue' in opts ? opts.attributedIncreasedValue : null;
      let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
      let attributedDecreasedValue = opts && 'attributedDecreasedValue' in opts ? opts.attributedDecreasedValue : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let attributedHint = opts && 'attributedHint' in opts ? opts.attributedHint : null;
      let hintOverrides = opts && 'hintOverrides' in opts ? opts.hintOverrides : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
      let tagForChildren = opts && 'tagForChildren' in opts ? opts.tagForChildren : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
      let onScrollLeft = opts && 'onScrollLeft' in opts ? opts.onScrollLeft : null;
      let onScrollRight = opts && 'onScrollRight' in opts ? opts.onScrollRight : null;
      let onScrollUp = opts && 'onScrollUp' in opts ? opts.onScrollUp : null;
      let onScrollDown = opts && 'onScrollDown' in opts ? opts.onScrollDown : null;
      let onIncrease = opts && 'onIncrease' in opts ? opts.onIncrease : null;
      let onDecrease = opts && 'onDecrease' in opts ? opts.onDecrease : null;
      let onCopy = opts && 'onCopy' in opts ? opts.onCopy : null;
      let onCut = opts && 'onCut' in opts ? opts.onCut : null;
      let onPaste = opts && 'onPaste' in opts ? opts.onPaste : null;
      let onMoveCursorForwardByCharacter = opts && 'onMoveCursorForwardByCharacter' in opts ? opts.onMoveCursorForwardByCharacter : null;
      let onMoveCursorBackwardByCharacter = opts && 'onMoveCursorBackwardByCharacter' in opts ? opts.onMoveCursorBackwardByCharacter : null;
      let onMoveCursorForwardByWord = opts && 'onMoveCursorForwardByWord' in opts ? opts.onMoveCursorForwardByWord : null;
      let onMoveCursorBackwardByWord = opts && 'onMoveCursorBackwardByWord' in opts ? opts.onMoveCursorBackwardByWord : null;
      let onSetSelection = opts && 'onSetSelection' in opts ? opts.onSetSelection : null;
      let onSetText = opts && 'onSetText' in opts ? opts.onSetText : null;
      let onDidGainAccessibilityFocus = opts && 'onDidGainAccessibilityFocus' in opts ? opts.onDidGainAccessibilityFocus : null;
      let onDidLoseAccessibilityFocus = opts && 'onDidLoseAccessibilityFocus' in opts ? opts.onDidLoseAccessibilityFocus : null;
      let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
      let customSemanticsActions = opts && 'customSemanticsActions' in opts ? opts.customSemanticsActions : null;
      return new semantics.SemanticsProperties.new({enabled: enabled, checked: checked, mixed: mixed, expanded: expanded, selected: selected, toggled: toggled, button: button, link: link, header: header, textField: textField, slider: slider, keyboardKey: keyboardKey, readOnly: readOnly, focusable: focusable, focused: focused, inMutuallyExclusiveGroup: inMutuallyExclusiveGroup, hidden: hidden, obscured: obscured, multiline: multiline, scopesRoute: scopesRoute, namesRoute: namesRoute, image: image, liveRegion: liveRegion, maxValueLength: maxValueLength, currentValueLength: currentValueLength, identifier: identifier, label: label, attributedLabel: attributedLabel, value: value, attributedValue: attributedValue, increasedValue: increasedValue, attributedIncreasedValue: attributedIncreasedValue, decreasedValue: decreasedValue, attributedDecreasedValue: attributedDecreasedValue, hint: hint, tooltip: tooltip, attributedHint: attributedHint, hintOverrides: hintOverrides, textDirection: textDirection, sortKey: sortKey, tagForChildren: tagForChildren, onTap: onTap, onLongPress: onLongPress, onScrollLeft: onScrollLeft, onScrollRight: onScrollRight, onScrollUp: onScrollUp, onScrollDown: onScrollDown, onIncrease: onIncrease, onDecrease: onDecrease, onCopy: onCopy, onCut: onCut, onPaste: onPaste, onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter, onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter, onMoveCursorForwardByWord: onMoveCursorForwardByWord, onMoveCursorBackwardByWord: onMoveCursorBackwardByWord, onSetSelection: onSetSelection, onSetText: onSetText, onDidGainAccessibilityFocus: onDidGainAccessibilityFocus, onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus, onDismiss: onDismiss, customSemanticsActions: customSemanticsActions});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("checked", this.checked, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("mixed", this.mixed, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("expanded", this.expanded, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("selected", this.selected, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("identifier", this.identifier, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("label", this.label, {defaultValue: null}));
      properties.add(new semantics.AttributedStringProperty.new("attributedLabel", this.attributedLabel, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("value", this.value, {defaultValue: null}));
      properties.add(new semantics.AttributedStringProperty.new("attributedValue", this.attributedValue, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("increasedValue", this.value, {defaultValue: null}));
      properties.add(new semantics.AttributedStringProperty.new("attributedIncreasedValue", this.attributedIncreasedValue, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("decreasedValue", this.value, {defaultValue: null}));
      properties.add(new semantics.AttributedStringProperty.new("attributedDecreasedValue", this.attributedDecreasedValue, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("hint", this.hint, {defaultValue: null}));
      properties.add(new semantics.AttributedStringProperty.new("attributedHint", this.attributedHint, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("tooltip", this.tooltip, {defaultValue: null}));
      properties.add(new (G.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfSemanticsSortKey()).new("sortKey", this.sortKey, {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfSemanticsHintOverrides()).new("hintOverrides", this.hintOverrides, {defaultValue: null}));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsProperties");
    }
  };
  (semantics.SemanticsProperties.new = function(opts) {
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let checked = opts && 'checked' in opts ? opts.checked : null;
    let mixed = opts && 'mixed' in opts ? opts.mixed : null;
    let expanded = opts && 'expanded' in opts ? opts.expanded : null;
    let selected = opts && 'selected' in opts ? opts.selected : null;
    let toggled = opts && 'toggled' in opts ? opts.toggled : null;
    let button = opts && 'button' in opts ? opts.button : null;
    let link = opts && 'link' in opts ? opts.link : null;
    let header = opts && 'header' in opts ? opts.header : null;
    let textField = opts && 'textField' in opts ? opts.textField : null;
    let slider = opts && 'slider' in opts ? opts.slider : null;
    let keyboardKey = opts && 'keyboardKey' in opts ? opts.keyboardKey : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
    let focusable = opts && 'focusable' in opts ? opts.focusable : null;
    let focused = opts && 'focused' in opts ? opts.focused : null;
    let inMutuallyExclusiveGroup = opts && 'inMutuallyExclusiveGroup' in opts ? opts.inMutuallyExclusiveGroup : null;
    let hidden = opts && 'hidden' in opts ? opts.hidden : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : null;
    let multiline = opts && 'multiline' in opts ? opts.multiline : null;
    let scopesRoute = opts && 'scopesRoute' in opts ? opts.scopesRoute : null;
    let namesRoute = opts && 'namesRoute' in opts ? opts.namesRoute : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let liveRegion = opts && 'liveRegion' in opts ? opts.liveRegion : null;
    let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
    let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
    let identifier = opts && 'identifier' in opts ? opts.identifier : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let attributedLabel = opts && 'attributedLabel' in opts ? opts.attributedLabel : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let attributedValue = opts && 'attributedValue' in opts ? opts.attributedValue : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let attributedIncreasedValue = opts && 'attributedIncreasedValue' in opts ? opts.attributedIncreasedValue : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let attributedDecreasedValue = opts && 'attributedDecreasedValue' in opts ? opts.attributedDecreasedValue : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let attributedHint = opts && 'attributedHint' in opts ? opts.attributedHint : null;
    let hintOverrides = opts && 'hintOverrides' in opts ? opts.hintOverrides : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
    let tagForChildren = opts && 'tagForChildren' in opts ? opts.tagForChildren : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onScrollLeft = opts && 'onScrollLeft' in opts ? opts.onScrollLeft : null;
    let onScrollRight = opts && 'onScrollRight' in opts ? opts.onScrollRight : null;
    let onScrollUp = opts && 'onScrollUp' in opts ? opts.onScrollUp : null;
    let onScrollDown = opts && 'onScrollDown' in opts ? opts.onScrollDown : null;
    let onIncrease = opts && 'onIncrease' in opts ? opts.onIncrease : null;
    let onDecrease = opts && 'onDecrease' in opts ? opts.onDecrease : null;
    let onCopy = opts && 'onCopy' in opts ? opts.onCopy : null;
    let onCut = opts && 'onCut' in opts ? opts.onCut : null;
    let onPaste = opts && 'onPaste' in opts ? opts.onPaste : null;
    let onMoveCursorForwardByCharacter = opts && 'onMoveCursorForwardByCharacter' in opts ? opts.onMoveCursorForwardByCharacter : null;
    let onMoveCursorBackwardByCharacter = opts && 'onMoveCursorBackwardByCharacter' in opts ? opts.onMoveCursorBackwardByCharacter : null;
    let onMoveCursorForwardByWord = opts && 'onMoveCursorForwardByWord' in opts ? opts.onMoveCursorForwardByWord : null;
    let onMoveCursorBackwardByWord = opts && 'onMoveCursorBackwardByWord' in opts ? opts.onMoveCursorBackwardByWord : null;
    let onSetSelection = opts && 'onSetSelection' in opts ? opts.onSetSelection : null;
    let onSetText = opts && 'onSetText' in opts ? opts.onSetText : null;
    let onDidGainAccessibilityFocus = opts && 'onDidGainAccessibilityFocus' in opts ? opts.onDidGainAccessibilityFocus : null;
    let onDidLoseAccessibilityFocus = opts && 'onDidLoseAccessibilityFocus' in opts ? opts.onDidLoseAccessibilityFocus : null;
    let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
    let customSemanticsActions = opts && 'customSemanticsActions' in opts ? opts.customSemanticsActions : null;
    this[enabled$] = enabled;
    this[checked$] = checked;
    this[mixed$] = mixed;
    this[expanded$] = expanded;
    this[selected$] = selected;
    this[toggled$] = toggled;
    this[button$] = button;
    this[link$] = link;
    this[header$] = header;
    this[textField$] = textField;
    this[slider$] = slider;
    this[keyboardKey$] = keyboardKey;
    this[readOnly$] = readOnly;
    this[focusable$] = focusable;
    this[focused$] = focused;
    this[inMutuallyExclusiveGroup$] = inMutuallyExclusiveGroup;
    this[hidden$] = hidden;
    this[obscured$] = obscured;
    this[multiline$] = multiline;
    this[scopesRoute$] = scopesRoute;
    this[namesRoute$] = namesRoute;
    this[image$] = image;
    this[liveRegion$] = liveRegion;
    this[maxValueLength$0] = maxValueLength;
    this[currentValueLength$0] = currentValueLength;
    this[identifier$0] = identifier;
    this[label$0] = label;
    this[attributedLabel$0] = attributedLabel;
    this[value$] = value;
    this[attributedValue$0] = attributedValue;
    this[increasedValue$] = increasedValue;
    this[attributedIncreasedValue$0] = attributedIncreasedValue;
    this[decreasedValue$] = decreasedValue;
    this[attributedDecreasedValue$0] = attributedDecreasedValue;
    this[hint$0] = hint;
    this[tooltip$0] = tooltip;
    this[attributedHint$0] = attributedHint;
    this[hintOverrides$] = hintOverrides;
    this[textDirection$0] = textDirection;
    this[sortKey$] = sortKey;
    this[tagForChildren$] = tagForChildren;
    this[onTap$] = onTap;
    this[onLongPress$] = onLongPress;
    this[onScrollLeft$] = onScrollLeft;
    this[onScrollRight$] = onScrollRight;
    this[onScrollUp$] = onScrollUp;
    this[onScrollDown$] = onScrollDown;
    this[onIncrease$] = onIncrease;
    this[onDecrease$] = onDecrease;
    this[onCopy$] = onCopy;
    this[onCut$] = onCut;
    this[onPaste$] = onPaste;
    this[onMoveCursorForwardByCharacter$] = onMoveCursorForwardByCharacter;
    this[onMoveCursorBackwardByCharacter$] = onMoveCursorBackwardByCharacter;
    this[onMoveCursorForwardByWord$] = onMoveCursorForwardByWord;
    this[onMoveCursorBackwardByWord$] = onMoveCursorBackwardByWord;
    this[onSetSelection$] = onSetSelection;
    this[onSetText$] = onSetText;
    this[onDidGainAccessibilityFocus$] = onDidGainAccessibilityFocus;
    this[onDidLoseAccessibilityFocus$] = onDidLoseAccessibilityFocus;
    this[onDismiss$] = onDismiss;
    this[customSemanticsActions$] = customSemanticsActions;
    if (!(label == null || attributedLabel == null)) dart.assertFailed("Only one of label or attributedLabel should be provided", I[2], 948, 15, "label == null || attributedLabel == null");
    if (!(value == null || attributedValue == null)) dart.assertFailed("Only one of value or attributedValue should be provided", I[2], 949, 15, "value == null || attributedValue == null");
    if (!(increasedValue == null || attributedIncreasedValue == null)) dart.assertFailed("Only one of increasedValue or attributedIncreasedValue should be provided", I[2], 950, 15, "increasedValue == null || attributedIncreasedValue == null");
    if (!(decreasedValue == null || attributedDecreasedValue == null)) dart.assertFailed("Only one of decreasedValue or attributedDecreasedValue should be provided", I[2], 951, 15, "decreasedValue == null || attributedDecreasedValue == null");
    if (!(hint == null || attributedHint == null)) dart.assertFailed("Only one of hint or attributedHint should be provided", I[2], 952, 15, "hint == null || attributedHint == null");
    dart.global.Object.getPrototypeOf(semantics.SemanticsProperties).new.call(this);
    ;
  }).prototype = semantics.SemanticsProperties.prototype;
  dart.addTypeTests(semantics.SemanticsProperties);
  dart.addRtiResources(semantics.SemanticsProperties, ["flutter__src__semantics__semantics|SemanticsProperties"]);
  dart.addTypeCaches(semantics.SemanticsProperties);
  dart.setLibraryUri(semantics.SemanticsProperties, I[0]);
  dart.setFieldSignature(semantics.SemanticsProperties, () => dart.global.Object.setPrototypeOf({
    enabled: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    checked: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    mixed: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    expanded: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    toggled: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    selected: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    button: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    link: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    header: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    textField: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    slider: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    keyboardKey: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    readOnly: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    focusable: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    focused: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    inMutuallyExclusiveGroup: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    hidden: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    obscured: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    multiline: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    scopesRoute: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    namesRoute: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    image: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    liveRegion: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    maxValueLength: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    currentValueLength: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]},
    identifier: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    label: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedLabel: {type: T.AttributedStringN(), isConst: false, isFinal: true, libraryUri: I[0]},
    value: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedValue: {type: T.AttributedStringN(), isConst: false, isFinal: true, libraryUri: I[0]},
    increasedValue: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedIncreasedValue: {type: T.AttributedStringN(), isConst: false, isFinal: true, libraryUri: I[0]},
    decreasedValue: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedDecreasedValue: {type: T.AttributedStringN(), isConst: false, isFinal: true, libraryUri: I[0]},
    hint: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    attributedHint: {type: T.AttributedStringN(), isConst: false, isFinal: true, libraryUri: I[0]},
    tooltip: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    hintOverrides: {type: T.SemanticsHintOverridesN(), isConst: false, isFinal: true, libraryUri: I[0]},
    textDirection: {type: T.TextDirectionN(), isConst: false, isFinal: true, libraryUri: I[3]},
    sortKey: {type: T.SemanticsSortKeyN(), isConst: false, isFinal: true, libraryUri: I[0]},
    tagForChildren: {type: T.SemanticsTagN(), isConst: false, isFinal: true, libraryUri: I[0]},
    onTap: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onLongPress: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onScrollLeft: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onScrollRight: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onScrollUp: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onScrollDown: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onIncrease: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onDecrease: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onCopy: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onCut: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onPaste: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onMoveCursorForwardByCharacter: {type: T.boolToNvoid(), isConst: false, isFinal: true},
    onMoveCursorBackwardByCharacter: {type: T.boolToNvoid(), isConst: false, isFinal: true},
    onMoveCursorForwardByWord: {type: T.boolToNvoid(), isConst: false, isFinal: true},
    onMoveCursorBackwardByWord: {type: T.boolToNvoid(), isConst: false, isFinal: true},
    onSetSelection: {type: T.TextSelectionToNvoid(), isConst: false, isFinal: true},
    onSetText: {type: T.StringToNvoid(), isConst: false, isFinal: true},
    onDidGainAccessibilityFocus: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onDidLoseAccessibilityFocus: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    onDismiss: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    customSemanticsActions: {type: T.MapNOfCustomSemanticsAction$VoidTovoid(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsProperties))));
  var key$ = dart.privateName(semantics, "SemanticsNode.key");
  var parentSemanticsClipRect = dart.privateName(semantics, "SemanticsNode.parentSemanticsClipRect");
  var parentPaintClipRect = dart.privateName(semantics, "SemanticsNode.parentPaintClipRect");
  var elevationAdjustment = dart.privateName(semantics, "SemanticsNode.elevationAdjustment");
  var indexInParent = dart.privateName(semantics, "SemanticsNode.indexInParent");
  var tags = dart.privateName(semantics, "SemanticsNode.tags");
  var _transform = dart.privateName(semantics, "_transform");
  var _rect = dart.privateName(semantics, "_rect");
  var _isMergedIntoParent = dart.privateName(semantics, "_isMergedIntoParent");
  var _areUserActionsBlocked = dart.privateName(semantics, "_areUserActionsBlocked");
  var _mergeAllDescendantsIntoThisNode = dart.privateName(semantics, "_mergeAllDescendantsIntoThisNode");
  var _children = dart.privateName(semantics, "_children");
  var __SemanticsNode__debugPreviousSnapshot = dart.privateName(semantics, "_#SemanticsNode#_debugPreviousSnapshot");
  var _dead = dart.privateName(semantics, "_dead");
  var _owner = dart.privateName(semantics, "_owner");
  var _parent = dart.privateName(semantics, "_parent");
  var _depth = dart.privateName(semantics, "_depth");
  var _dirty = dart.privateName(semantics, "_dirty");
  var _actions = dart.privateName(semantics, "_actions");
  var _customSemanticsActions = dart.privateName(semantics, "_customSemanticsActions");
  var _actionsAsBits = dart.privateName(semantics, "_actionsAsBits");
  var _flags = dart.privateName(semantics, "_flags");
  var _identifier = dart.privateName(semantics, "_identifier");
  var _attributedLabel = dart.privateName(semantics, "_attributedLabel");
  var _attributedValue = dart.privateName(semantics, "_attributedValue");
  var _attributedIncreasedValue = dart.privateName(semantics, "_attributedIncreasedValue");
  var _attributedDecreasedValue = dart.privateName(semantics, "_attributedDecreasedValue");
  var _attributedHint = dart.privateName(semantics, "_attributedHint");
  var _tooltip = dart.privateName(semantics, "_tooltip");
  var _elevation = dart.privateName(semantics, "_elevation");
  var _thickness = dart.privateName(semantics, "_thickness");
  var _hintOverrides = dart.privateName(semantics, "_hintOverrides");
  var _textDirection = dart.privateName(semantics, "_textDirection");
  var _sortKey = dart.privateName(semantics, "_sortKey");
  var _textSelection = dart.privateName(semantics, "_textSelection");
  var _isMultiline = dart.privateName(semantics, "_isMultiline");
  var _scrollChildCount = dart.privateName(semantics, "_scrollChildCount");
  var _scrollIndex = dart.privateName(semantics, "_scrollIndex");
  var _scrollPosition = dart.privateName(semantics, "_scrollPosition");
  var _scrollExtentMax = dart.privateName(semantics, "_scrollExtentMax");
  var _scrollExtentMin = dart.privateName(semantics, "_scrollExtentMin");
  var _platformViewId = dart.privateName(semantics, "_platformViewId");
  var _maxValueLength = dart.privateName(semantics, "_maxValueLength");
  var _currentValueLength = dart.privateName(semantics, "_currentValueLength");
  var _id = dart.privateName(semantics, "_id");
  var _showOnScreen = dart.privateName(semantics, "_showOnScreen");
  var _markDirty = dart.privateName(semantics, "_markDirty");
  var _debugPreviousSnapshot = dart.privateName(semantics, "_debugPreviousSnapshot");
  var _dropChild = dart.privateName(semantics, "_dropChild");
  var _adoptChild = dart.privateName(semantics, "_adoptChild");
  var _replaceChildren = dart.privateName(semantics, "_replaceChildren");
  var _visitDescendants = dart.privateName(semantics, "_visitDescendants");
  var _redepthChildren = dart.privateName(semantics, "_redepthChildren");
  var _redepthChild = dart.privateName(semantics, "_redepthChild");
  var _updateChildrenMergeFlags = dart.privateName(semantics, "_updateChildrenMergeFlags");
  var _updateChildMergeFlagRecursively = dart.privateName(semantics, "_updateChildMergeFlagRecursively");
  var _nodes = dart.privateName(semantics, "_nodes");
  var _detachedNodes = dart.privateName(semantics, "_detachedNodes");
  var _dirtyNodes = dart.privateName(semantics, "_dirtyNodes");
  var _isDifferentFromCurrentSemanticAnnotation = dart.privateName(semantics, "_isDifferentFromCurrentSemanticAnnotation");
  var _effectiveActionsAsBits = dart.privateName(semantics, "_effectiveActionsAsBits");
  var _canPerformAction = dart.privateName(semantics, "_canPerformAction");
  var _childrenInTraversalOrder = dart.privateName(semantics, "_childrenInTraversalOrder");
  var _addToUpdate = dart.privateName(semantics, "_addToUpdate");
  var _debugIsActionBlocked = dart.privateName(semantics, "_debugIsActionBlocked");
  const Object_DiagnosticableTreeMixin$36 = class Object_DiagnosticableTreeMixin extends core.Object {};
  (Object_DiagnosticableTreeMixin$36.new = function() {
  }).prototype = Object_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(Object_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  semantics.SemanticsNode = class SemanticsNode extends Object_DiagnosticableTreeMixin$36 {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get parentSemanticsClipRect() {
      return this[parentSemanticsClipRect];
    }
    set parentSemanticsClipRect(value) {
      this[parentSemanticsClipRect] = value;
    }
    get parentPaintClipRect() {
      return this[parentPaintClipRect];
    }
    set parentPaintClipRect(value) {
      this[parentPaintClipRect] = value;
    }
    get elevationAdjustment() {
      return this[elevationAdjustment];
    }
    set elevationAdjustment(value) {
      this[elevationAdjustment] = value;
    }
    get indexInParent() {
      return this[indexInParent];
    }
    set indexInParent(value) {
      this[indexInParent] = value;
    }
    get tags() {
      return this[tags];
    }
    set tags(value) {
      this[tags] = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
      return new semantics.SemanticsNode.new({key: key, showOnScreen: showOnScreen});
    }
    static ['_#root#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
      let owner = opts && 'owner' in opts ? opts.owner : null;
      return new semantics.SemanticsNode.root({key: key, showOnScreen: showOnScreen, owner: owner});
    }
    static _generateNewId() {
      semantics.SemanticsNode._lastIdentifier = (semantics.SemanticsNode._lastIdentifier + 1)[$modulo](65535);
      return semantics.SemanticsNode._lastIdentifier;
    }
    get id() {
      return this[_id];
    }
    get transform() {
      return this[_transform];
    }
    set transform(value) {
      if (!matrix_utils.MatrixUtils.matrixEquals(this[_transform], value)) {
        this[_transform] = value == null || matrix_utils.MatrixUtils.isIdentity(value) ? null : value;
        this[_markDirty]();
      }
    }
    get rect() {
      return this[_rect];
    }
    set rect(value) {
      if (!value.isFinite) dart.assertFailed(dart.str(this) + " (with " + dart.str(this.owner) + ") tried to set a non-finite rect.", I[2], 1768, 12, "value.isFinite");
      if (!dart.equals(this[_rect], value)) {
        this[_rect] = value;
        this[_markDirty]();
      }
    }
    get isInvisible() {
      return !this.isMergedIntoParent && this.rect.isEmpty;
    }
    get isMergedIntoParent() {
      return this.parent != null && this[_isMergedIntoParent];
    }
    get areUserActionsBlocked() {
      return this[_areUserActionsBlocked];
    }
    set areUserActionsBlocked(value) {
      if (this[_areUserActionsBlocked] === value) {
        return;
      }
      this[_areUserActionsBlocked] = value;
      this[_markDirty]();
    }
    get isPartOfNodeMerging() {
      return this.mergeAllDescendantsIntoThisNode || this.isMergedIntoParent;
    }
    get mergeAllDescendantsIntoThisNode() {
      return this[_mergeAllDescendantsIntoThisNode];
    }
    get [_debugPreviousSnapshot]() {
      let t$363;
      t$363 = this[__SemanticsNode__debugPreviousSnapshot];
      return t$363 == null ? dart.throw(new _internal.LateError.fieldNI("_debugPreviousSnapshot")) : t$363;
    }
    set [_debugPreviousSnapshot](_debugPreviousSnapshot$35param) {
      this[__SemanticsNode__debugPreviousSnapshot] = _debugPreviousSnapshot$35param;
    }
    [_replaceChildren](newChildren) {
      let t$363;
      if (!!newChildren[$any](dart.fn(child => dart.equals(child, this), T.SemanticsNodeTobool()))) dart.assertFailed(null, I[2], 1898, 12, "!newChildren.any((SemanticsNode child) => child == this)");
      if (!dart.fn(() => {
        let seenChildren = G.LinkedHashSetOfSemanticsNode().new();
        for (let child of newChildren) {
          if (!seenChildren.add(child)) dart.assertFailed(null, I[2], 1902, 16, "seenChildren.add(child)");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 1899, 12, "() {\r\n      final Set<SemanticsNode> seenChildren = <SemanticsNode>{};\r\n      for (final SemanticsNode child in newChildren) {\r\n        assert(seenChildren.add(child));\r\n      } // check for duplicate adds\r\n      return true;\r\n    }()");
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          child[_dead] = true;
        }
      }
      for (let child of newChildren) {
        child[_dead] = false;
      }
      let sawChange = false;
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (child[_dead]) {
            if (dart.equals(child.parent, this)) {
              this[_dropChild](child);
            }
            sawChange = true;
          }
        }
      }
      for (let child of newChildren) {
        if (!dart.equals(child.parent, this)) {
          if (child.parent != null) {
            t$363 = child.parent;
            t$363 == null ? null : t$363[_dropChild](child);
          }
          if (!!child.attached) dart.assertFailed(null, I[2], 1939, 16, "!child.attached");
          this[_adoptChild](child);
          sawChange = true;
        }
      }
      if (!dart.fn(() => {
        if (newChildren === this[_children]) {
          let mutationErrors = G.JSArrayOfDiagnosticsNode().of([]);
          if (newChildren[$length] !== this[_debugPreviousSnapshot][$length]) {
            mutationErrors[$add](new assertions.ErrorDescription.new("The list's length has changed from " + dart.strSafe(this[_debugPreviousSnapshot][$length]) + " " + "to " + dart.strSafe(newChildren[$length]) + "."));
          } else {
            for (let i = 0; i < newChildren[$length]; i = i + 1) {
              if (newChildren[$_get](i) !== this[_debugPreviousSnapshot][$_get](i)) {
                if (mutationErrors[$isNotEmpty]) {
                  mutationErrors[$add](new assertions.ErrorSpacer.new());
                }
                mutationErrors[$add](new assertions.ErrorDescription.new("Child node at position " + dart.strSafe(i) + " was replaced:"));
                mutationErrors[$add](this[_debugPreviousSnapshot][$_get](i).toDiagnosticsNode({name: "Previous child", style: diagnostics.DiagnosticsTreeStyle.singleLine}));
                mutationErrors[$add](newChildren[$_get](i).toDiagnosticsNode({name: "New child", style: diagnostics.DiagnosticsTreeStyle.singleLine}));
              }
            }
          }
          if (mutationErrors[$isNotEmpty]) {
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t$363 = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Failed to replace child semantics nodes because the list of `SemanticsNode`s was mutated."), new assertions.ErrorHint.new("Instead of mutating the existing list, create a new list containing the desired `SemanticsNode`s."), new assertions.ErrorDescription.new("Error details:")]);
              t$363[$addAll](mutationErrors);
              return t$363;
            })()));
          }
        }
        this[_debugPreviousSnapshot] = G.ListOfSemanticsNode().of(newChildren);
        let ancestor = this;
        while (T.SemanticsNode()[_is](ancestor.parent)) {
          ancestor = dart.nullCheck(ancestor.parent);
        }
        if (!!newChildren[$any](dart.fn(child => dart.equals(child, ancestor), T.SemanticsNodeTobool()))) dart.assertFailed(null, I[2], 1981, 14, "!newChildren.any((SemanticsNode child) => child == ancestor)");
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 1946, 12, "() {\r\n      if (identical(newChildren, _children)) {\r\n        final List<DiagnosticsNode> mutationErrors = <DiagnosticsNode>[];\r\n        if (newChildren.length != _debugPreviousSnapshot.length) {\r\n          mutationErrors.add(ErrorDescription(\r\n            \"The list's length has changed from ${_debugPreviousSnapshot.length} \"\r\n            'to ${newChildren.length}.',\r\n          ));\r\n        } else {\r\n          for (int i = 0; i < newChildren.length; i++) {\r\n            if (!identical(newChildren[i], _debugPreviousSnapshot[i])) {\r\n              if (mutationErrors.isNotEmpty) {\r\n                mutationErrors.add(ErrorSpacer());\r\n              }\r\n              mutationErrors.add(ErrorDescription('Child node at position $i was replaced:'));\r\n              mutationErrors.add(_debugPreviousSnapshot[i].toDiagnosticsNode(name: 'Previous child', style: DiagnosticsTreeStyle.singleLine));\r\n              mutationErrors.add(newChildren[i].toDiagnosticsNode(name: 'New child', style: DiagnosticsTreeStyle.singleLine));\r\n            }\r\n          }\r\n        }\r\n        if (mutationErrors.isNotEmpty) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Failed to replace child semantics nodes because the list of `SemanticsNode`s was mutated.'),\r\n            ErrorHint('Instead of mutating the existing list, create a new list containing the desired `SemanticsNode`s.'),\r\n            ErrorDescription('Error details:'),\r\n            ...mutationErrors,\r\n          ]);\r\n        }\r\n      }\r\n      _debugPreviousSnapshot = List<SemanticsNode>.of(newChildren);\r\n\r\n      SemanticsNode ancestor = this;\r\n      while (ancestor.parent is SemanticsNode) {\r\n        ancestor = ancestor.parent!;\r\n      }\r\n      assert(!newChildren.any((SemanticsNode child) => child == ancestor));\r\n      return true;\r\n    }()");
      if (!sawChange && this[_children] != null) {
        if (!(newChildren[$length] === dart.nullCheck(this[_children])[$length])) dart.assertFailed(null, I[2], 1986, 14, "newChildren.length == _children!.length");
        for (let i = 0; i < dart.nullCheck(this[_children])[$length]; i = i + 1) {
          if (dart.nullCheck(this[_children])[$_get](i).id !== newChildren[$_get](i).id) {
            sawChange = true;
            break;
          }
        }
      }
      this[_children] = newChildren;
      if (sawChange) {
        this[_markDirty]();
      }
    }
    get hasChildren() {
      let t$364, t$364$;
      t$364$ = (t$364 = this[_children], t$364 == null ? null : t$364[$isNotEmpty]);
      return t$364$ == null ? false : t$364$;
    }
    get childrenCount() {
      return this.hasChildren ? dart.nullCheck(this[_children])[$length] : 0;
    }
    visitChildren(visitor) {
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (!visitor(child)) {
            return;
          }
        }
      }
    }
    [_visitDescendants](visitor) {
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (!visitor(child) || !child[_visitDescendants](visitor)) {
            return false;
          }
        }
      }
      return true;
    }
    get owner() {
      return this[_owner];
    }
    get attached() {
      return this[_owner] != null;
    }
    get parent() {
      return this[_parent];
    }
    get depth() {
      return this[_depth];
    }
    [_redepthChild](child) {
      if (!dart.equals(child.owner, this.owner)) dart.assertFailed(null, I[2], 2068, 12, "child.owner == owner");
      if (child[_depth] <= this[_depth]) {
        child[_depth] = this[_depth] + 1;
        child[_redepthChildren]();
      }
    }
    [_redepthChildren]() {
      let t$364;
      t$364 = this[_children];
      t$364 == null ? null : t$364[$forEach](dart.bind(this, _redepthChild));
    }
    [_updateChildMergeFlagRecursively](child) {
      if (!dart.equals(child.owner, this.owner)) dart.assertFailed(null, I[2], 2080, 12, "child.owner == owner");
      let childShouldMergeToParent = this.isPartOfNodeMerging;
      if (childShouldMergeToParent === child[_isMergedIntoParent]) {
        return;
      }
      child[_isMergedIntoParent] = childShouldMergeToParent;
      this[_markDirty]();
      if (child.mergeAllDescendantsIntoThisNode) {
      } else {
        child[_updateChildrenMergeFlags]();
      }
    }
    [_updateChildrenMergeFlags]() {
      let t$364;
      t$364 = this[_children];
      t$364 == null ? null : t$364[$forEach](dart.bind(this, _updateChildMergeFlagRecursively));
    }
    [_adoptChild](child) {
      if (!(child[_parent] == null)) dart.assertFailed(null, I[2], 2102, 12, "child._parent == null");
      if (!dart.fn(() => {
        let node = this;
        while (node.parent != null) {
          node = dart.nullCheck(node.parent);
        }
        if (!!dart.equals(node, child)) dart.assertFailed(null, I[2], 2108, 14, "node != child");
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 2103, 12, "() {\r\n      SemanticsNode node = this;\r\n      while (node.parent != null) {\r\n        node = node.parent!;\r\n      }\r\n      assert(node != child); // indicates we are about to create a cycle\r\n      return true;\r\n    }()");
      child[_parent] = this;
      if (this.attached) {
        child.attach(dart.nullCheck(this[_owner]));
      }
      this[_redepthChild](child);
      this[_updateChildMergeFlagRecursively](child);
    }
    [_dropChild](child) {
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[2], 2120, 12, "child._parent == this");
      if (!(child.attached === this.attached)) dart.assertFailed(null, I[2], 2121, 12, "child.attached == attached");
      child[_parent] = null;
      if (this.attached) {
        child.detach();
      }
    }
    attach(owner) {
      if (!(this[_owner] == null)) dart.assertFailed(null, I[2], 2131, 12, "_owner == null");
      this[_owner] = owner;
      while (owner[_nodes][$containsKey](this.id)) {
        this[_id] = semantics.SemanticsNode._generateNewId();
      }
      owner[_nodes][$_set](this.id, this);
      owner[_detachedNodes].remove(this);
      if (this[_dirty]) {
        this[_dirty] = false;
        this[_markDirty]();
      }
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          child.attach(owner);
        }
      }
    }
    detach() {
      if (!(this[_owner] != null)) dart.assertFailed(null, I[2], 2154, 12, "_owner != null");
      if (!dart.nullCheck(this.owner)[_nodes][$containsKey](this.id)) dart.assertFailed(null, I[2], 2155, 12, "owner!._nodes.containsKey(id)");
      if (!!dart.nullCheck(this.owner)[_detachedNodes].contains(this)) dart.assertFailed(null, I[2], 2156, 12, "!owner!._detachedNodes.contains(this)");
      dart.nullCheck(this.owner)[_nodes][$remove](this.id);
      dart.nullCheck(this.owner)[_detachedNodes].add(this);
      this[_owner] = null;
      if (!(this.parent == null || this.attached === dart.nullCheck(this.parent).attached)) dart.assertFailed(null, I[2], 2160, 12, "parent == null || attached == parent!.attached");
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (dart.equals(child.parent, this)) {
            child.detach();
          }
        }
      }
      this[_markDirty]();
    }
    [_markDirty]() {
      if (this[_dirty]) {
        return;
      }
      this[_dirty] = true;
      if (this.attached) {
        if (!!dart.nullCheck(this.owner)[_detachedNodes].contains(this)) dart.assertFailed(null, I[2], 2185, 14, "!owner!._detachedNodes.contains(this)");
        dart.nullCheck(this.owner)[_dirtyNodes].add(this);
      }
    }
    [_isDifferentFromCurrentSemanticAnnotation](config) {
      return !dart.equals(this[_attributedLabel], config.attributedLabel) || !dart.equals(this[_attributedHint], config.attributedHint) || this[_elevation] !== config.elevation || this[_thickness] !== config.thickness || !dart.equals(this[_attributedValue], config.attributedValue) || !dart.equals(this[_attributedIncreasedValue], config.attributedIncreasedValue) || !dart.equals(this[_attributedDecreasedValue], config.attributedDecreasedValue) || this[_tooltip] !== config.tooltip || this[_flags] !== config[_flags] || this[_textDirection] != config.textDirection || !dart.equals(this[_sortKey], config[_sortKey]) || !dart.equals(this[_textSelection], config[_textSelection]) || this[_scrollPosition] != config[_scrollPosition] || this[_scrollExtentMax] != config[_scrollExtentMax] || this[_scrollExtentMin] != config[_scrollExtentMin] || this[_actionsAsBits] !== config[_actionsAsBits] || this.indexInParent != config.indexInParent || this.platformViewId != config.platformViewId || this[_maxValueLength] != config[_maxValueLength] || this[_currentValueLength] != config[_currentValueLength] || this[_mergeAllDescendantsIntoThisNode] !== config.isMergingSemanticsOfDescendants || this[_areUserActionsBlocked] !== config.isBlockingUserActions;
    }
    get [_effectiveActionsAsBits]() {
      return this[_areUserActionsBlocked] ? (this[_actionsAsBits] & semantics._kUnblockedUserActions) >>> 0 : this[_actionsAsBits];
    }
    isTagged(tag) {
      return this.tags != null && dart.nullCheck(this.tags).contains(tag);
    }
    hasFlag(flag) {
      return (this[_flags] & flag.index) !== 0;
    }
    get identifier() {
      return this[_identifier];
    }
    get label() {
      return this[_attributedLabel].string;
    }
    get attributedLabel() {
      return this[_attributedLabel];
    }
    get value() {
      return this[_attributedValue].string;
    }
    get attributedValue() {
      return this[_attributedValue];
    }
    get increasedValue() {
      return this[_attributedIncreasedValue].string;
    }
    get attributedIncreasedValue() {
      return this[_attributedIncreasedValue];
    }
    get decreasedValue() {
      return this[_attributedDecreasedValue].string;
    }
    get attributedDecreasedValue() {
      return this[_attributedDecreasedValue];
    }
    get hint() {
      return this[_attributedHint].string;
    }
    get attributedHint() {
      return this[_attributedHint];
    }
    get tooltip() {
      return this[_tooltip];
    }
    get elevation() {
      return this[_elevation];
    }
    get thickness() {
      return this[_thickness];
    }
    get hintOverrides() {
      return this[_hintOverrides];
    }
    get textDirection() {
      return this[_textDirection];
    }
    get sortKey() {
      return this[_sortKey];
    }
    get textSelection() {
      return this[_textSelection];
    }
    get isMultiline() {
      return this[_isMultiline];
    }
    get scrollChildCount() {
      return this[_scrollChildCount];
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    get platformViewId() {
      return this[_platformViewId];
    }
    get maxValueLength() {
      return this[_maxValueLength];
    }
    get currentValueLength() {
      return this[_currentValueLength];
    }
    [_canPerformAction](action) {
      return this[_actions][$containsKey](action);
    }
    updateWith(opts) {
      let t$364;
      let config = opts && 'config' in opts ? opts.config : null;
      let childrenInInversePaintOrder = opts && 'childrenInInversePaintOrder' in opts ? opts.childrenInInversePaintOrder : null;
      config == null ? config = semantics.SemanticsNode._kEmptyConfig : null;
      if (this[_isDifferentFromCurrentSemanticAnnotation](config)) {
        this[_markDirty]();
      }
      if (!(config.platformViewId == null || childrenInInversePaintOrder == null || childrenInInversePaintOrder[$isEmpty])) dart.assertFailed("SemanticsNodes with children must not specify a platformViewId.", I[2], 2539, 7, "config.platformViewId == null || childrenInInversePaintOrder == null || childrenInInversePaintOrder.isEmpty");
      let mergeAllDescendantsIntoThisNodeValueChanged = this[_mergeAllDescendantsIntoThisNode] !== config.isMergingSemanticsOfDescendants;
      this[_identifier] = config.identifier;
      this[_attributedLabel] = config.attributedLabel;
      this[_attributedValue] = config.attributedValue;
      this[_attributedIncreasedValue] = config.attributedIncreasedValue;
      this[_attributedDecreasedValue] = config.attributedDecreasedValue;
      this[_attributedHint] = config.attributedHint;
      this[_tooltip] = config.tooltip;
      this[_hintOverrides] = config.hintOverrides;
      this[_elevation] = config.elevation;
      this[_thickness] = config.thickness;
      this[_flags] = config[_flags];
      this[_textDirection] = config.textDirection;
      this[_sortKey] = config.sortKey;
      this[_actions] = G.LinkedHashMapOfSemanticsAction$ObjectNTovoid().of(config[_actions]);
      this[_customSemanticsActions] = G.LinkedHashMapOfCustomSemanticsAction$VoidTovoid().of(config[_customSemanticsActions]);
      this[_actionsAsBits] = config[_actionsAsBits];
      this[_textSelection] = config[_textSelection];
      this[_isMultiline] = config.isMultiline;
      this[_scrollPosition] = config[_scrollPosition];
      this[_scrollExtentMax] = config[_scrollExtentMax];
      this[_scrollExtentMin] = config[_scrollExtentMin];
      this[_mergeAllDescendantsIntoThisNode] = config.isMergingSemanticsOfDescendants;
      this[_scrollChildCount] = config.scrollChildCount;
      this[_scrollIndex] = config.scrollIndex;
      this.indexInParent = config.indexInParent;
      this[_platformViewId] = config[_platformViewId];
      this[_maxValueLength] = config[_maxValueLength];
      this[_currentValueLength] = config[_currentValueLength];
      this[_areUserActionsBlocked] = config.isBlockingUserActions;
      this[_replaceChildren]((t$364 = childrenInInversePaintOrder, t$364 == null ? C[3] || CT.C3 : t$364));
      if (mergeAllDescendantsIntoThisNodeValueChanged) {
        this[_updateChildrenMergeFlags]();
      }
      if (!(!this[_canPerformAction](ui.SemanticsAction.increase) || this.value === "" === (this.increasedValue === ""))) dart.assertFailed("A SemanticsNode with action \"increase\" needs to be annotated with either both \"value\" and \"increasedValue\" or neither", I[2], 2581, 7, "!_canPerformAction(SemanticsAction.increase) || (value == '') == (increasedValue == '')");
      if (!(!this[_canPerformAction](ui.SemanticsAction.decrease) || this.value === "" === (this.decreasedValue === ""))) dart.assertFailed("A SemanticsNode with action \"decrease\" needs to be annotated with either both \"value\" and \"decreasedValue\" or neither", I[2], 2585, 7, "!_canPerformAction(SemanticsAction.decrease) || (value == '') == (decreasedValue == '')");
    }
    getSemanticsData() {
      let t$364;
      let flags = this[_flags];
      let actions = this[_actionsAsBits];
      let identifier = this[_identifier];
      let attributedLabel = this[_attributedLabel];
      let attributedValue = this[_attributedValue];
      let attributedIncreasedValue = this[_attributedIncreasedValue];
      let attributedDecreasedValue = this[_attributedDecreasedValue];
      let attributedHint = this[_attributedHint];
      let tooltip = this[_tooltip];
      let textDirection = this[_textDirection];
      let mergedTags = this.tags == null ? null : G.LinkedHashSetOfSemanticsTag().of(dart.nullCheck(this.tags));
      let textSelection = this[_textSelection];
      let scrollChildCount = this[_scrollChildCount];
      let scrollIndex = this[_scrollIndex];
      let scrollPosition = this[_scrollPosition];
      let scrollExtentMax = this[_scrollExtentMax];
      let scrollExtentMin = this[_scrollExtentMin];
      let platformViewId = this[_platformViewId];
      let maxValueLength = this[_maxValueLength];
      let currentValueLength = this[_currentValueLength];
      let elevation = this[_elevation];
      let thickness = this[_thickness];
      let customSemanticsActionIds = G.LinkedHashSetOfint().new();
      for (let action of this[_customSemanticsActions][$keys]) {
        customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
      }
      if (this.hintOverrides != null) {
        if (dart.nullCheck(this.hintOverrides).onTapHint != null) {
          let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(this.hintOverrides).onTapHint), action: ui.SemanticsAction.tap});
          customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
        }
        if (dart.nullCheck(this.hintOverrides).onLongPressHint != null) {
          let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(this.hintOverrides).onLongPressHint), action: ui.SemanticsAction.longPress});
          customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
        }
      }
      if (this.mergeAllDescendantsIntoThisNode) {
        this[_visitDescendants](dart.fn(node => {
          if (!node.isMergedIntoParent) dart.assertFailed(null, I[2], 2644, 16, "node.isMergedIntoParent");
          flags = (flags | node[_flags]) >>> 0;
          actions = (actions | node[_effectiveActionsAsBits]) >>> 0;
          textDirection == null ? textDirection = node[_textDirection] : null;
          textSelection == null ? textSelection = node[_textSelection] : null;
          scrollChildCount == null ? scrollChildCount = node[_scrollChildCount] : null;
          scrollIndex == null ? scrollIndex = node[_scrollIndex] : null;
          scrollPosition == null ? scrollPosition = node[_scrollPosition] : null;
          scrollExtentMax == null ? scrollExtentMax = node[_scrollExtentMax] : null;
          scrollExtentMin == null ? scrollExtentMin = node[_scrollExtentMin] : null;
          platformViewId == null ? platformViewId = node[_platformViewId] : null;
          maxValueLength == null ? maxValueLength = node[_maxValueLength] : null;
          currentValueLength == null ? currentValueLength = node[_currentValueLength] : null;
          if (identifier === "") {
            identifier = node[_identifier];
          }
          if (attributedValue.string === "") {
            attributedValue = node[_attributedValue];
          }
          if (attributedIncreasedValue.string === "") {
            attributedIncreasedValue = node[_attributedIncreasedValue];
          }
          if (attributedDecreasedValue.string === "") {
            attributedDecreasedValue = node[_attributedDecreasedValue];
          }
          if (tooltip === "") {
            tooltip = node[_tooltip];
          }
          if (node.tags != null) {
            mergedTags == null ? mergedTags = G.LinkedHashSetOfSemanticsTag().new() : null;
            dart.nullCheck(mergedTags).addAll(dart.nullCheck(node.tags));
          }
          for (let action of this[_customSemanticsActions][$keys]) {
            customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
          }
          if (node.hintOverrides != null) {
            if (dart.nullCheck(node.hintOverrides).onTapHint != null) {
              let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(node.hintOverrides).onTapHint), action: ui.SemanticsAction.tap});
              customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
            }
            if (dart.nullCheck(node.hintOverrides).onLongPressHint != null) {
              let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(node.hintOverrides).onLongPressHint), action: ui.SemanticsAction.longPress});
              customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
            }
          }
          attributedLabel = semantics._concatAttributedString({thisAttributedString: attributedLabel, thisTextDirection: textDirection, otherAttributedString: node[_attributedLabel], otherTextDirection: node[_textDirection]});
          attributedHint = semantics._concatAttributedString({thisAttributedString: attributedHint, thisTextDirection: textDirection, otherAttributedString: node[_attributedHint], otherTextDirection: node[_textDirection]});
          thickness = math.max(T.double(), thickness, node[_thickness] + node[_elevation]);
          return true;
        }, T.SemanticsNodeTobool()));
      }
      return new semantics.SemanticsData.new({flags: flags, actions: this[_areUserActionsBlocked] ? (actions & semantics._kUnblockedUserActions) >>> 0 : actions, identifier: identifier, attributedLabel: attributedLabel, attributedValue: attributedValue, attributedIncreasedValue: attributedIncreasedValue, attributedDecreasedValue: attributedDecreasedValue, attributedHint: attributedHint, tooltip: tooltip, textDirection: textDirection, rect: this.rect, transform: this.transform, elevation: elevation, thickness: thickness, tags: mergedTags, textSelection: textSelection, scrollChildCount: scrollChildCount, scrollIndex: scrollIndex, scrollPosition: scrollPosition, scrollExtentMax: scrollExtentMax, scrollExtentMin: scrollExtentMin, platformViewId: platformViewId, maxValueLength: maxValueLength, currentValueLength: currentValueLength, customSemanticsActionIds: (t$364 = customSemanticsActionIds[$toList](), (() => {
          t$364[$sort]();
          return t$364;
        })())});
    }
    static _initIdentityTransform() {
      return vector_math_64.Matrix4.identity().storage;
    }
    [_addToUpdate](builder, customSemanticsActionIdsUpdate) {
      let t$364, t$364$, t$364$0, t$364$1, t$364$2, t$364$3, t$364$4, t$364$5, t$364$6, t$364$7, t$364$8, t$364$9, t$364$10;
      if (!this[_dirty]) dart.assertFailed(null, I[2], 2753, 12, "_dirty");
      let data = this.getSemanticsData();
      let childrenInTraversalOrder = null;
      let childrenInHitTestOrder = null;
      if (!this.hasChildren || this.mergeAllDescendantsIntoThisNode) {
        childrenInTraversalOrder = semantics.SemanticsNode._kEmptyChildList;
        childrenInHitTestOrder = semantics.SemanticsNode._kEmptyChildList;
      } else {
        let childCount = dart.nullCheck(this[_children])[$length];
        let sortedChildren = this[_childrenInTraversalOrder]();
        childrenInTraversalOrder = _native_typed_data.NativeInt32List.new(childCount);
        for (let i = 0; i < childCount; i = i + 1) {
          childrenInTraversalOrder[$_set](i, sortedChildren[$_get](i).id);
        }
        childrenInHitTestOrder = _native_typed_data.NativeInt32List.new(childCount);
        for (let i = childCount - 1; i >= 0; i = i - 1) {
          childrenInHitTestOrder[$_set](i, dart.nullCheck(this[_children])[$_get](childCount - i - 1).id);
        }
      }
      let customSemanticsActionIds = null;
      if (dart.test((t$364$ = (t$364 = data.customSemanticsActionIds, t$364 == null ? null : t$364[$isNotEmpty]), t$364$ == null ? false : t$364$))) {
        customSemanticsActionIds = _native_typed_data.NativeInt32List.new(dart.nullCheck(data.customSemanticsActionIds)[$length]);
        for (let i = 0; i < dart.nullCheck(data.customSemanticsActionIds)[$length]; i = i + 1) {
          customSemanticsActionIds[$_set](i, dart.nullCheck(data.customSemanticsActionIds)[$_get](i));
          customSemanticsActionIdsUpdate.add(dart.nullCheck(data.customSemanticsActionIds)[$_get](i));
        }
      }
      builder.updateNode({id: this.id, flags: data.flags, actions: data.actions, rect: data.rect, identifier: data.identifier, label: data.attributedLabel.string, labelAttributes: data.attributedLabel.attributes, value: data.attributedValue.string, valueAttributes: data.attributedValue.attributes, increasedValue: data.attributedIncreasedValue.string, increasedValueAttributes: data.attributedIncreasedValue.attributes, decreasedValue: data.attributedDecreasedValue.string, decreasedValueAttributes: data.attributedDecreasedValue.attributes, hint: data.attributedHint.string, hintAttributes: data.attributedHint.attributes, tooltip: data.tooltip, textDirection: data.textDirection, textSelectionBase: data.textSelection != null ? dart.nullCheck(data.textSelection).baseOffset : -1, textSelectionExtent: data.textSelection != null ? dart.nullCheck(data.textSelection).extentOffset : -1, platformViewId: (t$364$0 = data.platformViewId, t$364$0 == null ? -1 : t$364$0), maxValueLength: (t$364$1 = data.maxValueLength, t$364$1 == null ? -1 : t$364$1), currentValueLength: (t$364$2 = data.currentValueLength, t$364$2 == null ? -1 : t$364$2), scrollChildren: (t$364$3 = data.scrollChildCount, t$364$3 == null ? 0 : t$364$3), scrollIndex: (t$364$4 = data.scrollIndex, t$364$4 == null ? 0 : t$364$4), scrollPosition: (t$364$5 = data.scrollPosition, t$364$5 == null ? 0 / 0 : t$364$5), scrollExtentMax: (t$364$6 = data.scrollExtentMax, t$364$6 == null ? 0 / 0 : t$364$6), scrollExtentMin: (t$364$7 = data.scrollExtentMin, t$364$7 == null ? 0 / 0 : t$364$7), transform: (t$364$9 = (t$364$8 = data.transform, t$364$8 == null ? null : t$364$8.storage), t$364$9 == null ? semantics.SemanticsNode._kIdentityTransform : t$364$9), elevation: data.elevation, thickness: data.thickness, childrenInTraversalOrder: childrenInTraversalOrder, childrenInHitTestOrder: childrenInHitTestOrder, additionalActions: (t$364$10 = customSemanticsActionIds, t$364$10 == null ? semantics.SemanticsNode._kEmptyCustomSemanticsActionsList : t$364$10)});
      this[_dirty] = false;
    }
    [_childrenInTraversalOrder]() {
      let inheritedTextDirection = this.textDirection;
      let ancestor = this.parent;
      while (inheritedTextDirection == null && ancestor != null) {
        inheritedTextDirection = ancestor.textDirection;
        ancestor = ancestor.parent;
      }
      let childrenInDefaultOrder = null;
      if (inheritedTextDirection != null) {
        childrenInDefaultOrder = semantics._childrenInDefaultOrder(dart.nullCheck(this[_children]), inheritedTextDirection);
      } else {
        childrenInDefaultOrder = this[_children];
      }
      let everythingSorted = G.JSArrayOf_TraversalSortNode().of([]);
      let sortNodes = G.JSArrayOf_TraversalSortNode().of([]);
      let lastSortKey = null;
      for (let position = 0; position < dart.nullCheck(childrenInDefaultOrder)[$length]; position = position + 1) {
        let child = childrenInDefaultOrder[$_get](position);
        let sortKey = child.sortKey;
        lastSortKey = position > 0 ? childrenInDefaultOrder[$_get](position - 1).sortKey : null;
        let isCompatibleWithPreviousSortKey = position === 0 || dart.equals(dart.runtimeType(sortKey), dart.runtimeType(lastSortKey)) && (sortKey == null || sortKey.name == dart.nullCheck(lastSortKey).name);
        if (!isCompatibleWithPreviousSortKey && sortNodes[$isNotEmpty]) {
          if (lastSortKey != null) {
            sortNodes[$sort]();
          }
          everythingSorted[$addAll](sortNodes);
          sortNodes[$clear]();
        }
        sortNodes[$add](new semantics._TraversalSortNode.new({node: child, sortKey: sortKey, position: position}));
      }
      if (lastSortKey != null) {
        sortNodes[$sort]();
      }
      everythingSorted[$addAll](sortNodes);
      return everythingSorted[$map](T.SemanticsNode(), dart.fn(sortNode => sortNode.node, T._TraversalSortNodeToSemanticsNode()))[$toList]();
    }
    sendEvent(event) {
      if (!this.attached) {
        return;
      }
      system_channels.SystemChannels.accessibility.send(event.toMap({nodeId: this.id}));
    }
    [_debugIsActionBlocked](action) {
      let result = false;
      if (!dart.fn(() => {
        result = (this[_effectiveActionsAsBits] & action.index) === 0;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 2895, 12, "(){\r\n      result = (_effectiveActionsAsBits & action.index) == 0;\r\n      return true;\r\n    }()");
      return result;
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsNode") + "#" + dart.strSafe(this.id);
    }
    debugFillProperties(properties) {
      let t$364, t$364$, t$364$0, t$364$1;
      super.debugFillProperties(properties);
      let hideOwner = true;
      if (this[_dirty]) {
        let inDirtyNodes = this.owner != null && dart.nullCheck(this.owner)[_dirtyNodes].contains(this);
        properties.add(new diagnostics.FlagProperty.new("inDirtyNodes", {value: inDirtyNodes, ifTrue: "dirty", ifFalse: "STALE"}));
        hideOwner = inDirtyNodes;
      }
      properties.add(new (G.DiagnosticsPropertyOfSemanticsOwner()).new("owner", this.owner, {level: hideOwner ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      properties.add(new diagnostics.FlagProperty.new("isMergedIntoParent", {value: this.isMergedIntoParent, ifTrue: "merged up ⬆️"}));
      properties.add(new diagnostics.FlagProperty.new("mergeAllDescendantsIntoThisNode", {value: this.mergeAllDescendantsIntoThisNode, ifTrue: "merge boundary ⛔️"}));
      let offset = this.transform != null ? matrix_utils.MatrixUtils.getAsTranslation(dart.nullCheck(this.transform)) : null;
      if (offset != null) {
        properties.add(new (G.DiagnosticsPropertyOfRect()).new("rect", this.rect.shift(offset), {showName: false}));
      } else {
        let scale = this.transform != null ? matrix_utils.MatrixUtils.getAsScale(dart.nullCheck(this.transform)) : null;
        let description = null;
        if (scale != null) {
          description = dart.str(this.rect) + " scaled by " + scale[$toStringAsFixed](1) + "x";
        } else if (this.transform != null && !matrix_utils.MatrixUtils.isIdentity(dart.nullCheck(this.transform))) {
          let matrix = dart.toString(this.transform)[$split]("\n")[$take](4)[$map](T.String(), dart.fn(line => line[$substring](4), T.StringToString()))[$join]("; ");
          description = dart.str(this.rect) + " with transform [" + matrix + "]";
        }
        properties.add(new (G.DiagnosticsPropertyOfRect()).new("rect", this.rect, {description: description, showName: false}));
      }
      properties.add(new (G.IterablePropertyOfString()).new("tags", (t$364 = this.tags, t$364 == null ? null : t$364[$map](T.String(), dart.fn(tag => tag.name, T.SemanticsTagToString()))), {defaultValue: null}));
      let actions = (t$364$ = this[_actions][$keys][$map](T.String(), dart.fn(action => action.name + (this[_debugIsActionBlocked](action) ? "🚫️" : ""), T.SemanticsActionToString()))[$toList](), (() => {
        t$364$[$sort]();
        return t$364$;
      })());
      let customSemanticsActions = this[_customSemanticsActions][$keys][$map](T.StringN(), dart.fn(action => action.label, T.CustomSemanticsActionToStringN()))[$toList]();
      properties.add(new (G.IterablePropertyOfString()).new("actions", actions, {ifEmpty: null}));
      properties.add(new (G.IterablePropertyOfStringN()).new("customActions", customSemanticsActions, {ifEmpty: null}));
      let flags = ui.SemanticsFlag.values[$where](dart.fn(flag => this.hasFlag(flag), T.SemanticsFlagTobool()))[$map](T.String(), dart.fn(flag => flag.name, T.SemanticsFlagToString()))[$toList]();
      properties.add(new (G.IterablePropertyOfString()).new("flags", flags, {ifEmpty: null}));
      properties.add(new diagnostics.FlagProperty.new("isInvisible", {value: this.isInvisible, ifTrue: "invisible"}));
      properties.add(new diagnostics.FlagProperty.new("isHidden", {value: this.hasFlag(ui.SemanticsFlag.isHidden), ifTrue: "HIDDEN"}));
      properties.add(new diagnostics.StringProperty.new("identifier", this[_identifier], {defaultValue: ""}));
      properties.add(new semantics.AttributedStringProperty.new("label", this[_attributedLabel]));
      properties.add(new semantics.AttributedStringProperty.new("value", this[_attributedValue]));
      properties.add(new semantics.AttributedStringProperty.new("increasedValue", this[_attributedIncreasedValue]));
      properties.add(new semantics.AttributedStringProperty.new("decreasedValue", this[_attributedDecreasedValue]));
      properties.add(new semantics.AttributedStringProperty.new("hint", this[_attributedHint]));
      properties.add(new diagnostics.StringProperty.new("tooltip", this[_tooltip], {defaultValue: ""}));
      properties.add(new (G.EnumPropertyOfTextDirection()).new("textDirection", this[_textDirection], {defaultValue: null}));
      properties.add(new (G.DiagnosticsPropertyOfSemanticsSortKey()).new("sortKey", this.sortKey, {defaultValue: null}));
      if (dart.test((t$364$1 = (t$364$0 = this[_textSelection], t$364$0 == null ? null : t$364$0.isValid), t$364$1 == null ? false : t$364$1))) {
        properties.add(new diagnostics.MessageProperty.new("text selection", "[" + dart.strSafe(dart.nullCheck(this[_textSelection]).start) + ", " + dart.strSafe(dart.nullCheck(this[_textSelection]).end) + "]"));
      }
      properties.add(new diagnostics.IntProperty.new("platformViewId", this.platformViewId, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("maxValueLength", this.maxValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("currentValueLength", this.currentValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollChildren", this.scrollChildCount, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollIndex", this.scrollIndex, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMin", this.scrollExtentMin, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollPosition", this.scrollPosition, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMax", this.scrollExtentMax, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation, {defaultValue: 0.0}));
      properties.add(new diagnostics.DoubleProperty.new("thickness", this.thickness, {defaultValue: 0.0}));
    }
    toStringDeep(opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[5] || CT.C5;
      return this.toDiagnosticsNode({childOrder: childOrder}).toStringDeep({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel});
    }
    toDiagnosticsNode(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let style = opts && 'style' in opts ? opts.style : C[6] || CT.C6;
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[5] || CT.C5;
      return new semantics._SemanticsDiagnosticableNode.new({name: name, value: this, style: style, childOrder: childOrder});
    }
    debugDescribeChildren(opts) {
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[7] || CT.C7;
      return this.debugListChildrenInOrder(childOrder)[$map](T.DiagnosticsNode(), dart.fn(node => node.toDiagnosticsNode({childOrder: childOrder}), T.SemanticsNodeToDiagnosticsNode()))[$toList]();
    }
    debugListChildrenInOrder(childOrder) {
      if (this[_children] == null) {
        return C[3] || CT.C3;
      }
      switch (childOrder) {
        case C[7] || CT.C7:
          {
            return dart.nullCheck(this[_children]);
          }
        case C[5] || CT.C5:
          {
            return this[_childrenInTraversalOrder]();
          }
      }
    }
  };
  (semantics.SemanticsNode.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
    this[_transform] = null;
    this[_rect] = ui.Rect.zero;
    this[parentSemanticsClipRect] = null;
    this[parentPaintClipRect] = null;
    this[elevationAdjustment] = null;
    this[indexInParent] = null;
    this[_isMergedIntoParent] = false;
    this[_areUserActionsBlocked] = false;
    this[_mergeAllDescendantsIntoThisNode] = semantics.SemanticsNode._kEmptyConfig.isMergingSemanticsOfDescendants;
    this[_children] = null;
    this[__SemanticsNode__debugPreviousSnapshot] = null;
    this[_dead] = false;
    this[_owner] = null;
    this[_parent] = null;
    this[_depth] = 0;
    this[_dirty] = false;
    this[_actions] = semantics.SemanticsNode._kEmptyConfig[_actions];
    this[_customSemanticsActions] = semantics.SemanticsNode._kEmptyConfig[_customSemanticsActions];
    this[_actionsAsBits] = semantics.SemanticsNode._kEmptyConfig[_actionsAsBits];
    this[tags] = null;
    this[_flags] = semantics.SemanticsNode._kEmptyConfig[_flags];
    this[_identifier] = semantics.SemanticsNode._kEmptyConfig.identifier;
    this[_attributedLabel] = semantics.SemanticsNode._kEmptyConfig.attributedLabel;
    this[_attributedValue] = semantics.SemanticsNode._kEmptyConfig.attributedValue;
    this[_attributedIncreasedValue] = semantics.SemanticsNode._kEmptyConfig.attributedIncreasedValue;
    this[_attributedDecreasedValue] = semantics.SemanticsNode._kEmptyConfig.attributedDecreasedValue;
    this[_attributedHint] = semantics.SemanticsNode._kEmptyConfig.attributedHint;
    this[_tooltip] = semantics.SemanticsNode._kEmptyConfig.tooltip;
    this[_elevation] = semantics.SemanticsNode._kEmptyConfig.elevation;
    this[_thickness] = semantics.SemanticsNode._kEmptyConfig.thickness;
    this[_hintOverrides] = null;
    this[_textDirection] = semantics.SemanticsNode._kEmptyConfig.textDirection;
    this[_sortKey] = null;
    this[_textSelection] = null;
    this[_isMultiline] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[key$] = key;
    this[_id] = semantics.SemanticsNode._generateNewId();
    this[_showOnScreen] = showOnScreen;
    ;
  }).prototype = semantics.SemanticsNode.prototype;
  (semantics.SemanticsNode.root = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
    let owner = opts && 'owner' in opts ? opts.owner : null;
    this[_transform] = null;
    this[_rect] = ui.Rect.zero;
    this[parentSemanticsClipRect] = null;
    this[parentPaintClipRect] = null;
    this[elevationAdjustment] = null;
    this[indexInParent] = null;
    this[_isMergedIntoParent] = false;
    this[_areUserActionsBlocked] = false;
    this[_mergeAllDescendantsIntoThisNode] = semantics.SemanticsNode._kEmptyConfig.isMergingSemanticsOfDescendants;
    this[_children] = null;
    this[__SemanticsNode__debugPreviousSnapshot] = null;
    this[_dead] = false;
    this[_owner] = null;
    this[_parent] = null;
    this[_depth] = 0;
    this[_dirty] = false;
    this[_actions] = semantics.SemanticsNode._kEmptyConfig[_actions];
    this[_customSemanticsActions] = semantics.SemanticsNode._kEmptyConfig[_customSemanticsActions];
    this[_actionsAsBits] = semantics.SemanticsNode._kEmptyConfig[_actionsAsBits];
    this[tags] = null;
    this[_flags] = semantics.SemanticsNode._kEmptyConfig[_flags];
    this[_identifier] = semantics.SemanticsNode._kEmptyConfig.identifier;
    this[_attributedLabel] = semantics.SemanticsNode._kEmptyConfig.attributedLabel;
    this[_attributedValue] = semantics.SemanticsNode._kEmptyConfig.attributedValue;
    this[_attributedIncreasedValue] = semantics.SemanticsNode._kEmptyConfig.attributedIncreasedValue;
    this[_attributedDecreasedValue] = semantics.SemanticsNode._kEmptyConfig.attributedDecreasedValue;
    this[_attributedHint] = semantics.SemanticsNode._kEmptyConfig.attributedHint;
    this[_tooltip] = semantics.SemanticsNode._kEmptyConfig.tooltip;
    this[_elevation] = semantics.SemanticsNode._kEmptyConfig.elevation;
    this[_thickness] = semantics.SemanticsNode._kEmptyConfig.thickness;
    this[_hintOverrides] = null;
    this[_textDirection] = semantics.SemanticsNode._kEmptyConfig.textDirection;
    this[_sortKey] = null;
    this[_textSelection] = null;
    this[_isMultiline] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[key$] = key;
    this[_id] = 0;
    this[_showOnScreen] = showOnScreen;
    this.attach(owner);
  }).prototype = semantics.SemanticsNode.prototype;
  dart.addTypeTests(semantics.SemanticsNode);
  dart.addRtiResources(semantics.SemanticsNode, ["flutter__src__semantics__semantics|SemanticsNode"]);
  dart.addTypeCaches(semantics.SemanticsNode);
  dart.setMethodSignature(semantics.SemanticsNode, () => dart.global.Object.setPrototypeOf({
    [_replaceChildren]: T.ListOfSemanticsNodeTovoid(),
    visitChildren: T.FnTovoid(),
    [_visitDescendants]: T.FnTobool(),
    [_redepthChild]: T.SemanticsNodeTovoid(),
    [_redepthChildren]: T.VoidTovoid(),
    [_updateChildMergeFlagRecursively]: T.SemanticsNodeTovoid(),
    [_updateChildrenMergeFlags]: T.VoidTovoid(),
    [_adoptChild]: T.SemanticsNodeTovoid(),
    [_dropChild]: T.SemanticsNodeTovoid(),
    attach: T.SemanticsOwnerTovoid(),
    detach: T.VoidTovoid(),
    [_markDirty]: T.VoidTovoid(),
    [_isDifferentFromCurrentSemanticAnnotation]: T.SemanticsConfigurationTobool(),
    isTagged: T.SemanticsTagTobool(),
    hasFlag: T.SemanticsFlagTobool(),
    [_canPerformAction]: T.SemanticsActionTobool(),
    updateWith: T.__Tovoid(),
    getSemanticsData: T.VoidToSemanticsData(),
    [_addToUpdate]: T.SemanticsUpdateBuilderAndSetOfintTovoid(),
    [_childrenInTraversalOrder]: T.VoidToListOfSemanticsNode(),
    sendEvent: T.SemanticsEventTovoid(),
    [_debugIsActionBlocked]: T.SemanticsActionTobool(),
    toStringDeep: T.__ToString(),
    toDiagnosticsNode: T.__ToDiagnosticsNode(),
    debugDescribeChildren: T.__ToListOfDiagnosticsNode(),
    debugListChildrenInOrder: T.DebugSemanticsDumpOrderToListOfSemanticsNode()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.SemanticsNode))));
  dart.setStaticMethodSignature(semantics.SemanticsNode, () => ['_generateNewId', '_initIdentityTransform']);
  dart.setGetterSignature(semantics.SemanticsNode, () => dart.global.Object.setPrototypeOf({
    id: T.int(),
    transform: T.Matrix4N(),
    rect: T.Rect(),
    isInvisible: T.bool(),
    isMergedIntoParent: T.bool(),
    areUserActionsBlocked: T.bool(),
    isPartOfNodeMerging: T.bool(),
    mergeAllDescendantsIntoThisNode: T.bool(),
    [_debugPreviousSnapshot]: T.ListOfSemanticsNode(),
    hasChildren: T.bool(),
    childrenCount: T.int(),
    owner: T.SemanticsOwnerN(),
    attached: T.bool(),
    parent: T.SemanticsNodeN(),
    depth: T.int(),
    [_effectiveActionsAsBits]: T.int(),
    identifier: T.String(),
    label: T.String(),
    attributedLabel: T.AttributedString(),
    value: T.String(),
    attributedValue: T.AttributedString(),
    increasedValue: T.String(),
    attributedIncreasedValue: T.AttributedString(),
    decreasedValue: T.String(),
    attributedDecreasedValue: T.AttributedString(),
    hint: T.String(),
    attributedHint: T.AttributedString(),
    tooltip: T.String(),
    elevation: T.double(),
    thickness: T.double(),
    hintOverrides: T.SemanticsHintOverridesN(),
    textDirection: T.TextDirectionN(),
    sortKey: T.SemanticsSortKeyN(),
    textSelection: T.TextSelectionN(),
    isMultiline: T.boolN(),
    scrollChildCount: T.intN(),
    scrollIndex: T.intN(),
    scrollPosition: T.doubleN(),
    scrollExtentMax: T.doubleN(),
    scrollExtentMin: T.doubleN(),
    platformViewId: T.intN(),
    maxValueLength: T.intN(),
    currentValueLength: T.intN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(semantics.SemanticsNode))));
  dart.setSetterSignature(semantics.SemanticsNode, () => dart.global.Object.setPrototypeOf({
    transform: T.Matrix4N(),
    rect: T.Rect(),
    areUserActionsBlocked: T.bool(),
    [_debugPreviousSnapshot]: T.ListOfSemanticsNode()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(semantics.SemanticsNode))));
  dart.setLibraryUri(semantics.SemanticsNode, I[0]);
  dart.setFieldSignature(semantics.SemanticsNode, () => dart.global.Object.setPrototypeOf({
    key: {type: T.KeyN(), isConst: false, isFinal: true, libraryUri: I[6]},
    [_id]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_showOnScreen]: {type: T.VoidToNvoid(), isConst: false, isFinal: true},
    [_transform]: {type: T.Matrix4N(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_rect]: {type: T.Rect(), isConst: false, isFinal: false, libraryUri: I[3]},
    parentSemanticsClipRect: {type: T.RectN(), isConst: false, isFinal: false, libraryUri: I[3]},
    parentPaintClipRect: {type: T.RectN(), isConst: false, isFinal: false, libraryUri: I[3]},
    elevationAdjustment: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    indexInParent: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_isMergedIntoParent]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_areUserActionsBlocked]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_mergeAllDescendantsIntoThisNode]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_children]: {type: T.ListNOfSemanticsNode(), isConst: false, isFinal: false, libraryUri: I[1]},
    [__SemanticsNode__debugPreviousSnapshot]: {type: T.ListNOfSemanticsNode(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_dead]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_owner]: {type: T.SemanticsOwnerN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_parent]: {type: T.SemanticsNodeN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_depth]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_dirty]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_actions]: {type: T.MapOfSemanticsAction$ObjectNTovoid(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_customSemanticsActions]: {type: T.MapOfCustomSemanticsAction$VoidTovoid(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_actionsAsBits]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    tags: {type: T.SetNOfSemanticsTag(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_flags]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_identifier]: {type: T.String(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_attributedLabel]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedIncreasedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedDecreasedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedHint]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_tooltip]: {type: T.String(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_elevation]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_thickness]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_hintOverrides]: {type: T.SemanticsHintOverridesN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_textDirection]: {type: T.TextDirectionN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_sortKey]: {type: T.SemanticsSortKeyN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_textSelection]: {type: T.TextSelectionN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_isMultiline]: {type: T.boolN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollChildCount]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollIndex]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollPosition]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollExtentMax]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollExtentMin]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_platformViewId]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_maxValueLength]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_currentValueLength]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsNode))));
  dart.setStaticFieldSignature(semantics.SemanticsNode, () => ['_maxFrameworkAccessibilityIdentifier', '_lastIdentifier', '_kEmptyConfig', '_kEmptyChildList', '_kEmptyCustomSemanticsActionsList', '_kIdentityTransform']);
  dart.defineLazy(semantics.SemanticsNode, {
    /*semantics.SemanticsNode._maxFrameworkAccessibilityIdentifier*/get _maxFrameworkAccessibilityIdentifier() {
      return 65535;
    },
    /*semantics.SemanticsNode._lastIdentifier*/get _lastIdentifier() {
      return 0;
    },
    set _lastIdentifier(value) {},
    /*semantics.SemanticsNode._kEmptyConfig*/get _kEmptyConfig() {
      return new semantics.SemanticsConfiguration.new();
    },
    /*semantics.SemanticsNode._kEmptyChildList*/get _kEmptyChildList() {
      return _native_typed_data.NativeInt32List.new(0);
    },
    /*semantics.SemanticsNode._kEmptyCustomSemanticsActionsList*/get _kEmptyCustomSemanticsActionsList() {
      return _native_typed_data.NativeInt32List.new(0);
    },
    /*semantics.SemanticsNode._kIdentityTransform*/get _kIdentityTransform() {
      return semantics.SemanticsNode._initIdentityTransform();
    }
  }, false);
  var _as = dart.privateName(dart_rti, "_as");
  semantics._BoxEdge = class _BoxEdge extends core.Object {
    static ['_#new#tearOff'](opts) {
      let isLeadingEdge = opts && 'isLeadingEdge' in opts ? opts.isLeadingEdge : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let node = opts && 'node' in opts ? opts.node : null;
      return new semantics._BoxEdge.new({isLeadingEdge: isLeadingEdge, offset: offset, node: node});
    }
    compareTo(other) {
      T._BoxEdge()[_as](other);
      return this.offset[$compareTo](other.offset);
    }
  };
  (semantics._BoxEdge.new = function(opts) {
    let isLeadingEdge = opts && 'isLeadingEdge' in opts ? opts.isLeadingEdge : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let node = opts && 'node' in opts ? opts.node : null;
    this.isLeadingEdge = isLeadingEdge;
    this.offset = offset;
    this.node = node;
    if (!offset[$isFinite]) dart.assertFailed(null, I[2], 3029, 15, "offset.isFinite");
    ;
  }).prototype = semantics._BoxEdge.prototype;
  dart.addTypeTests(semantics._BoxEdge);
  dart.addRtiResources(semantics._BoxEdge, ["flutter__src__semantics__semantics|_BoxEdge", "core|Comparable"]);
  dart.addTypeCaches(semantics._BoxEdge);
  dart.setMethodSignature(semantics._BoxEdge, () => dart.global.Object.setPrototypeOf({
    compareTo: T.ObjectNToint(),
    [$compareTo]: T.ObjectNToint()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics._BoxEdge))));
  dart.setLibraryUri(semantics._BoxEdge, I[0]);
  dart.setFieldSignature(semantics._BoxEdge, () => dart.global.Object.setPrototypeOf({
    isLeadingEdge: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[1]},
    offset: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    node: {type: T.SemanticsNode(), isConst: false, isFinal: true, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics._BoxEdge))));
  dart.defineExtensionMethods(semantics._BoxEdge, ['compareTo']);
  semantics._SemanticsSortGroup = class _SemanticsSortGroup extends core.Object {
    static ['_#new#tearOff'](opts) {
      let startOffset = opts && 'startOffset' in opts ? opts.startOffset : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new semantics._SemanticsSortGroup.new({startOffset: startOffset, textDirection: textDirection});
    }
    compareTo(other) {
      T._SemanticsSortGroup()[_as](other);
      return this.startOffset[$compareTo](other.startOffset);
    }
    sortedWithinVerticalGroup() {
      let edges = G.JSArrayOf_BoxEdge().of([]);
      for (let child of this.nodes) {
        let childRect = child.rect.deflate(0.1);
        edges[$add](new semantics._BoxEdge.new({isLeadingEdge: true, offset: semantics._pointInParentCoordinates(child, childRect.topLeft).dx, node: child}));
        edges[$add](new semantics._BoxEdge.new({isLeadingEdge: false, offset: semantics._pointInParentCoordinates(child, childRect.bottomRight).dx, node: child}));
      }
      edges[$sort]();
      let horizontalGroups = G.JSArrayOf_SemanticsSortGroup().of([]);
      let group = null;
      let depth = 0;
      for (let edge of edges) {
        if (edge.isLeadingEdge) {
          depth = depth + 1;
          group == null ? group = new semantics._SemanticsSortGroup.new({startOffset: edge.offset, textDirection: this.textDirection}) : null;
          group.nodes[$add](edge.node);
        } else {
          depth = depth - 1;
        }
        if (depth === 0) {
          horizontalGroups[$add](dart.nullCheck(group));
          group = null;
        }
      }
      horizontalGroups[$sort]();
      if (this.textDirection === ui.TextDirection.rtl) {
        horizontalGroups = horizontalGroups[$reversed][$toList]();
      }
      return horizontalGroups[$expand](T.SemanticsNode(), dart.fn(group => group.sortedWithinKnot(), T._SemanticsSortGroupToListOfSemanticsNode()))[$toList]();
    }
    sortedWithinKnot() {
      let t$364;
      if (this.nodes[$length] <= 1) {
        return this.nodes;
      }
      let nodeMap = new (G.IdentityMapOfint$SemanticsNode()).new();
      let edges = new (G.IdentityMapOfint$int()).new();
      for (let node of this.nodes) {
        nodeMap[$_set](node.id, node);
        let center = semantics._pointInParentCoordinates(node, node.rect.center);
        for (let nextNode of this.nodes) {
          if (node === nextNode || edges[$_get](nextNode.id) === node.id) {
            continue;
          }
          let nextCenter = semantics._pointInParentCoordinates(nextNode, nextNode.rect.center);
          let centerDelta = nextCenter['-'](center);
          let direction = centerDelta.direction;
          let isLtrAndForward = this.textDirection === ui.TextDirection.ltr && -3.141592653589793 / 4 < direction && direction < 3 * 3.141592653589793 / 4;
          let isRtlAndForward = this.textDirection === ui.TextDirection.rtl && (direction < -3 * 3.141592653589793 / 4 || direction > 3 * 3.141592653589793 / 4);
          if (isLtrAndForward || isRtlAndForward) {
            edges[$_set](node.id, nextNode.id);
          }
        }
      }
      let sortedIds = G.JSArrayOfint().of([]);
      let visitedIds = G.LinkedHashSetOfint().new();
      let startNodes = (t$364 = this.nodes[$toList](), (() => {
        t$364[$sort](dart.fn((a, b) => {
          let aTopLeft = semantics._pointInParentCoordinates(a, a.rect.topLeft);
          let bTopLeft = semantics._pointInParentCoordinates(b, b.rect.topLeft);
          let verticalDiff = aTopLeft.dy[$compareTo](bTopLeft.dy);
          if (verticalDiff !== 0) {
            return -verticalDiff;
          }
          return -aTopLeft.dx[$compareTo](bTopLeft.dx);
        }, T.SemanticsNodeAndSemanticsNodeToint()));
        return t$364;
      })());
      function search(id) {
        if (visitedIds.contains(id)) {
          return;
        }
        visitedIds.add(id);
        if (edges[$containsKey](id)) {
          search(dart.nullCheck(edges[$_get](id)));
        }
        sortedIds[$add](id);
      }
      dart.fn(search, T.intTovoid());
      startNodes[$map](T.int(), dart.fn(node => node.id, T.SemanticsNodeToint()))[$forEach](search);
      return sortedIds[$map](T.SemanticsNode(), dart.fn(id => dart.nullCheck(nodeMap[$_get](id)), T.intToSemanticsNode()))[$toList]()[$reversed][$toList]();
    }
  };
  (semantics._SemanticsSortGroup.new = function(opts) {
    let startOffset = opts && 'startOffset' in opts ? opts.startOffset : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this.nodes = G.JSArrayOfSemanticsNode().of([]);
    this.startOffset = startOffset;
    this.textDirection = textDirection;
    ;
  }).prototype = semantics._SemanticsSortGroup.prototype;
  dart.addTypeTests(semantics._SemanticsSortGroup);
  dart.addRtiResources(semantics._SemanticsSortGroup, ["flutter__src__semantics__semantics|_SemanticsSortGroup", "core|Comparable"]);
  dart.addTypeCaches(semantics._SemanticsSortGroup);
  dart.setMethodSignature(semantics._SemanticsSortGroup, () => dart.global.Object.setPrototypeOf({
    compareTo: T.ObjectNToint(),
    [$compareTo]: T.ObjectNToint(),
    sortedWithinVerticalGroup: T.VoidToListOfSemanticsNode(),
    sortedWithinKnot: T.VoidToListOfSemanticsNode()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics._SemanticsSortGroup))));
  dart.setLibraryUri(semantics._SemanticsSortGroup, I[0]);
  dart.setFieldSignature(semantics._SemanticsSortGroup, () => dart.global.Object.setPrototypeOf({
    startOffset: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    textDirection: {type: T.TextDirection(), isConst: false, isFinal: true, libraryUri: I[3]},
    nodes: {type: T.ListOfSemanticsNode(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics._SemanticsSortGroup))));
  dart.defineExtensionMethods(semantics._SemanticsSortGroup, ['compareTo']);
  semantics._TraversalSortNode = class _TraversalSortNode extends core.Object {
    static ['_#new#tearOff'](opts) {
      let node = opts && 'node' in opts ? opts.node : null;
      let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
      let position = opts && 'position' in opts ? opts.position : null;
      return new semantics._TraversalSortNode.new({node: node, sortKey: sortKey, position: position});
    }
    compareTo(other) {
      T._TraversalSortNode()[_as](other);
      if (this.sortKey == null || other.sortKey == null) {
        return this.position - other.position;
      }
      return dart.nullCheck(this.sortKey).compareTo(dart.nullCheck(other.sortKey));
    }
  };
  (semantics._TraversalSortNode.new = function(opts) {
    let node = opts && 'node' in opts ? opts.node : null;
    let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
    let position = opts && 'position' in opts ? opts.position : null;
    this.node = node;
    this.sortKey = sortKey;
    this.position = position;
    ;
  }).prototype = semantics._TraversalSortNode.prototype;
  dart.addTypeTests(semantics._TraversalSortNode);
  dart.addRtiResources(semantics._TraversalSortNode, ["flutter__src__semantics__semantics|_TraversalSortNode", "core|Comparable"]);
  dart.addTypeCaches(semantics._TraversalSortNode);
  dart.setMethodSignature(semantics._TraversalSortNode, () => dart.global.Object.setPrototypeOf({
    compareTo: T.ObjectNToint(),
    [$compareTo]: T.ObjectNToint()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics._TraversalSortNode))));
  dart.setLibraryUri(semantics._TraversalSortNode, I[0]);
  dart.setFieldSignature(semantics._TraversalSortNode, () => dart.global.Object.setPrototypeOf({
    node: {type: T.SemanticsNode(), isConst: false, isFinal: true, libraryUri: I[0]},
    sortKey: {type: T.SemanticsSortKeyN(), isConst: false, isFinal: true, libraryUri: I[0]},
    position: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics._TraversalSortNode))));
  dart.defineExtensionMethods(semantics._TraversalSortNode, ['compareTo']);
  var onSemanticsUpdate$ = dart.privateName(semantics, "SemanticsOwner.onSemanticsUpdate");
  var _getSemanticsActionHandlerForId = dart.privateName(semantics, "_getSemanticsActionHandlerForId");
  var _getSemanticsActionHandlerForPosition = dart.privateName(semantics, "_getSemanticsActionHandlerForPosition");
  semantics.SemanticsOwner = class SemanticsOwner extends change_notifier.ChangeNotifier {
    get onSemanticsUpdate() {
      return this[onSemanticsUpdate$];
    }
    set onSemanticsUpdate(value) {
      super.onSemanticsUpdate = value;
    }
    static ['_#new#tearOff'](opts) {
      let onSemanticsUpdate = opts && 'onSemanticsUpdate' in opts ? opts.onSemanticsUpdate : null;
      return new semantics.SemanticsOwner.new({onSemanticsUpdate: onSemanticsUpdate});
    }
    get rootSemanticsNode() {
      return this[_nodes][$_get](0);
    }
    dispose() {
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      this[_dirtyNodes].clear();
      this[_nodes][$clear]();
      this[_detachedNodes].clear();
      super.dispose();
    }
    sendSemanticsUpdate() {
      let t$365, t$365$, t$365$0, t$365$1;
      if (!dart.fn(() => {
        let invisibleNodes = G.JSArrayOfSemanticsNode().of([]);
        function findInvisibleNodes(node) {
          if (node.rect.isEmpty) {
            invisibleNodes[$add](node);
          } else if (!node.mergeAllDescendantsIntoThisNode) {
            node.visitChildren(findInvisibleNodes);
          }
          return true;
        }
        dart.fn(findInvisibleNodes, T.SemanticsNodeTobool());
        let rootSemanticsNode = this.rootSemanticsNode;
        if (rootSemanticsNode != null) {
          if (rootSemanticsNode.childrenCount > 0 && rootSemanticsNode.rect.isEmpty) {
            invisibleNodes[$add](rootSemanticsNode);
          } else if (!rootSemanticsNode.mergeAllDescendantsIntoThisNode) {
            rootSemanticsNode.visitChildren(findInvisibleNodes);
          }
        }
        if (invisibleNodes[$isEmpty]) {
          return true;
        }
        function nodeToMessage(invisibleNode) {
          let t$364, t$364$;
          let parent = invisibleNode.parent;
          return G.JSArrayOfDiagnosticsNode().of([invisibleNode.toDiagnosticsNode({style: diagnostics.DiagnosticsTreeStyle.errorProperty}), (t$364$ = (t$364 = parent, t$364 == null ? null : t$364.toDiagnosticsNode({name: "which was added as a child of", style: diagnostics.DiagnosticsTreeStyle.errorProperty})), t$364$ == null ? new assertions.ErrorDescription.new("which was added as the root SemanticsNode") : t$364$)]);
        }
        dart.fn(nodeToMessage, T.SemanticsNodeToListOfDiagnosticsNode());
        dart.throw(new assertions.FlutterError.fromParts((() => {
          let t$364 = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Invisible SemanticsNodes should not be added to the tree."), new assertions.ErrorDescription.new("The following invisible SemanticsNodes were added to the tree:")]);
          t$364[$addAll](invisibleNodes[$expand](T.DiagnosticsNode(), nodeToMessage));
          t$364.push(new assertions.ErrorHint.new("An invisible SemanticsNode is one whose rect is not on screen hence not reachable for users, and its semantic information is not merged into a visible parent."));
          t$364.push(new assertions.ErrorHint.new("An invisible SemantiscNode makes the accessibility experience confusing, as it does not provide any visual indication when the user selects it via accessibility technologies."));
          t$364.push(new assertions.ErrorHint.new("Consider removing the above invisible SemanticsNodes if they were added by your RenderObject.assembleSemanticsNode implementation, or filing a bug on GitHub:\n  https://github.com/flutter/flutter/issues/new?template=2_bug.yml"));
          return t$364;
        })()));
      }, T.VoidTobool())()) dart.assertFailed(null, I[2], 3363, 12, "() {\r\n      final List<SemanticsNode> invisibleNodes = <SemanticsNode>[];\r\n      // Finds the invisible nodes in the tree rooted at `node` and adds them to\r\n      // the invisibleNodes list. If a node is itself invisible, all its\r\n      // descendants will be skipped.\r\n      bool findInvisibleNodes(SemanticsNode node) {\r\n        if (node.rect.isEmpty) {\r\n          invisibleNodes.add(node);\r\n        } else if (!node.mergeAllDescendantsIntoThisNode) {\r\n          node.visitChildren(findInvisibleNodes);\r\n        }\r\n        return true;\r\n      }\r\n\r\n      final SemanticsNode? rootSemanticsNode = this.rootSemanticsNode;\r\n      if (rootSemanticsNode != null) {\r\n        // The root node is allowed to be invisible when it has no children.\r\n        if (rootSemanticsNode.childrenCount > 0 && rootSemanticsNode.rect.isEmpty) {\r\n          invisibleNodes.add(rootSemanticsNode);\r\n        } else if (!rootSemanticsNode.mergeAllDescendantsIntoThisNode) {\r\n          rootSemanticsNode.visitChildren(findInvisibleNodes);\r\n        }\r\n      }\r\n\r\n      if (invisibleNodes.isEmpty) {\r\n        return true;\r\n      }\r\n\r\n      List<DiagnosticsNode> nodeToMessage(SemanticsNode invisibleNode) {\r\n        final SemanticsNode? parent = invisibleNode.parent;\r\n        return<DiagnosticsNode>[\r\n          invisibleNode.toDiagnosticsNode(style: DiagnosticsTreeStyle.errorProperty),\r\n          parent?.toDiagnosticsNode(name: 'which was added as a child of', style: DiagnosticsTreeStyle.errorProperty) ?? ErrorDescription('which was added as the root SemanticsNode'),\r\n        ];\r\n      }\r\n\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('Invisible SemanticsNodes should not be added to the tree.'),\r\n        ErrorDescription('The following invisible SemanticsNodes were added to the tree:'),\r\n        ...invisibleNodes.expand(nodeToMessage),\r\n        ErrorHint(\r\n          'An invisible SemanticsNode is one whose rect is not on screen hence not reachable for users, '\r\n          'and its semantic information is not merged into a visible parent.'\r\n        ),\r\n        ErrorHint(\r\n          'An invisible SemantiscNode makes the accessibility experience confusing, '\r\n          'as it does not provide any visual indication when the user selects it '\r\n          'via accessibility technologies.'\r\n        ),\r\n        ErrorHint(\r\n          'Consider removing the above invisible SemanticsNodes if they were added by your '\r\n          'RenderObject.assembleSemanticsNode implementation, or filing a bug on GitHub:\\n'\r\n          '  https://github.com/flutter/flutter/issues/new?template=2_bug.yml',\r\n        ),\r\n      ]);\r\n    }()");
      if (this[_dirtyNodes][$isEmpty]) {
        return;
      }
      let customSemanticsActionIds = G.LinkedHashSetOfint().new();
      let visitedNodes = G.JSArrayOfSemanticsNode().of([]);
      while (this[_dirtyNodes][$isNotEmpty]) {
        let localDirtyNodes = this[_dirtyNodes][$where](dart.fn(node => !this[_detachedNodes].contains(node), T.SemanticsNodeTobool()))[$toList]();
        this[_dirtyNodes].clear();
        this[_detachedNodes].clear();
        localDirtyNodes[$sort](dart.fn((a, b) => a.depth - b.depth, T.SemanticsNodeAndSemanticsNodeToint()));
        visitedNodes[$addAll](localDirtyNodes);
        for (let node of localDirtyNodes) {
          if (!node[_dirty]) dart.assertFailed(null, I[2], 3432, 16, "node._dirty");
          if (!(node.parent == null || !dart.nullCheck(node.parent).isPartOfNodeMerging || node.isMergedIntoParent)) dart.assertFailed(null, I[2], 3433, 16, "node.parent == null || !node.parent!.isPartOfNodeMerging || node.isMergedIntoParent");
          if (node.isPartOfNodeMerging) {
            if (!(node.mergeAllDescendantsIntoThisNode || node.parent != null)) dart.assertFailed(null, I[2], 3435, 18, "node.mergeAllDescendantsIntoThisNode || node.parent != null");
            if (node.parent != null && dart.nullCheck(node.parent).isPartOfNodeMerging) {
              dart.nullCheck(node.parent)[_markDirty]();
              node[_dirty] = false;
            }
          }
        }
      }
      visitedNodes[$sort](dart.fn((a, b) => a.depth - b.depth, T.SemanticsNodeAndSemanticsNodeToint()));
      let builder = binding.SemanticsBinding.instance.createSemanticsUpdateBuilder();
      for (let node of visitedNodes) {
        if (!((t$365 = node.parent, t$365 == null ? null : t$365[_dirty]) !== true)) dart.assertFailed(null, I[2], 3447, 14, "node.parent?._dirty != true");
        if (node[_dirty] && node.attached) {
          node[_addToUpdate](builder, customSemanticsActionIds);
        }
      }
      this[_dirtyNodes].clear();
      for (let actionId of customSemanticsActionIds) {
        let action = dart.nullCheck(semantics.CustomSemanticsAction.getAction(actionId));
        builder.updateCustomAction({id: actionId, label: action.label, hint: action.hint, overrideId: (t$365$0 = (t$365$ = action.action, t$365$ == null ? null : t$365$.index), t$365$0 == null ? -1 : t$365$0)});
      }
      t$365$1 = builder.build();
      this.onSemanticsUpdate(t$365$1);
      this.notifyListeners();
    }
    [_getSemanticsActionHandlerForId](id, action) {
      let result = this[_nodes][$_get](id);
      if (result != null && result.isPartOfNodeMerging && !result[_canPerformAction](action)) {
        result[_visitDescendants](dart.fn(node => {
          if (node[_canPerformAction](action)) {
            result = node;
            return false;
          }
          return true;
        }, T.SemanticsNodeTobool()));
      }
      if (result == null || !dart.nullCheck(result)[_canPerformAction](action)) {
        return null;
      }
      return dart.nullCheck(result)[_actions][$_get](action);
    }
    performAction(id, action, args = null) {
      let t$365;
      let handler = this[_getSemanticsActionHandlerForId](id, action);
      if (handler != null) {
        handler(args);
        return;
      }
      if (dart.equals(action, ui.SemanticsAction.showOnScreen) && (t$365 = this[_nodes][$_get](id), t$365 == null ? null : t$365[_showOnScreen]) != null) {
        dart.nullCheck(dart.nullCheck(this[_nodes][$_get](id))[_showOnScreen])();
      }
    }
    [_getSemanticsActionHandlerForPosition](node, position, action) {
      let t$365;
      if (node.transform != null) {
        let inverse = vector_math_64.Matrix4.identity();
        if (inverse.copyInverse(dart.nullCheck(node.transform)) === 0.0) {
          return null;
        }
        position = matrix_utils.MatrixUtils.transformPoint(inverse, position);
      }
      if (!node.rect.contains(position)) {
        return null;
      }
      if (node.mergeAllDescendantsIntoThisNode) {
        let result = null;
        node[_visitDescendants](dart.fn(child => {
          if (child[_canPerformAction](action)) {
            result = child;
            return false;
          }
          return true;
        }, T.SemanticsNodeTobool()));
        t$365 = result;
        return t$365 == null ? null : t$365[_actions][$_get](action);
      }
      if (node.hasChildren) {
        for (let child of dart.nullCheck(node[_children])[$reversed]) {
          let handler = this[_getSemanticsActionHandlerForPosition](child, position, action);
          if (handler != null) {
            return handler;
          }
        }
      }
      return node[_actions][$_get](action);
    }
    performActionAt(position, action, args = null) {
      let node = this.rootSemanticsNode;
      if (node == null) {
        return;
      }
      let handler = this[_getSemanticsActionHandlerForPosition](node, position, action);
      if (handler != null) {
        handler(args);
      }
    }
    toString() {
      return diagnostics.describeIdentity(this);
    }
  };
  (semantics.SemanticsOwner.new = function(opts) {
    let onSemanticsUpdate = opts && 'onSemanticsUpdate' in opts ? opts.onSemanticsUpdate : null;
    this[_dirtyNodes] = G.LinkedHashSetOfSemanticsNode().new();
    this[_nodes] = new (G.IdentityMapOfint$SemanticsNode()).new();
    this[_detachedNodes] = G.LinkedHashSetOfSemanticsNode().new();
    this[onSemanticsUpdate$] = onSemanticsUpdate;
    dart.global.Object.getPrototypeOf(semantics.SemanticsOwner).new.call(this);
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/semantics.dart", className: dart.strSafe(dart_rti.createRuntimeType(T.SemanticsOwner())), object: this});
    }
  }).prototype = semantics.SemanticsOwner.prototype;
  dart.addTypeTests(semantics.SemanticsOwner);
  dart.addRtiResources(semantics.SemanticsOwner, ["flutter__src__semantics__semantics|SemanticsOwner"]);
  dart.addTypeCaches(semantics.SemanticsOwner);
  dart.setMethodSignature(semantics.SemanticsOwner, () => dart.global.Object.setPrototypeOf({
    sendSemanticsUpdate: T.VoidTovoid(),
    [_getSemanticsActionHandlerForId]: T.intAndSemanticsActionToFn(),
    performAction: T.intAndSemanticsActionAndObjectNTovoid(),
    [_getSemanticsActionHandlerForPosition]: T.SemanticsNodeAndOffsetAndSemanticsActionToFn(),
    performActionAt: T.OffsetAndSemanticsActionAndObjectNTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.SemanticsOwner))));
  dart.setGetterSignature(semantics.SemanticsOwner, () => dart.global.Object.setPrototypeOf({rootSemanticsNode: T.SemanticsNodeN()}, dart.getGetters(dart.global.Object.getPrototypeOf(semantics.SemanticsOwner))));
  dart.setLibraryUri(semantics.SemanticsOwner, I[0]);
  dart.setFieldSignature(semantics.SemanticsOwner, () => dart.global.Object.setPrototypeOf({
    onSemanticsUpdate: {type: T.SemanticsUpdateTovoid(), isConst: false, isFinal: true},
    [_dirtyNodes]: {type: T.SetOfSemanticsNode(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_nodes]: {type: T.MapOfint$SemanticsNode(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_detachedNodes]: {type: T.SetOfSemanticsNode(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsOwner))));
  dart.defineExtensionMethods(semantics.SemanticsOwner, ['toString']);
  var isBlockingUserActions = dart.privateName(semantics, "SemanticsConfiguration.isBlockingUserActions");
  var explicitChildNodes = dart.privateName(semantics, "SemanticsConfiguration.explicitChildNodes");
  var isBlockingSemanticsOfPreviouslyPaintedNodes = dart.privateName(semantics, "SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes");
  var _isSemanticBoundary = dart.privateName(semantics, "_isSemanticBoundary");
  var _hasBeenAnnotated = dart.privateName(semantics, "_hasBeenAnnotated");
  var _onTap = dart.privateName(semantics, "_onTap");
  var _onLongPress = dart.privateName(semantics, "_onLongPress");
  var _onScrollLeft = dart.privateName(semantics, "_onScrollLeft");
  var _onDismiss = dart.privateName(semantics, "_onDismiss");
  var _onScrollRight = dart.privateName(semantics, "_onScrollRight");
  var _onScrollUp = dart.privateName(semantics, "_onScrollUp");
  var _onScrollDown = dart.privateName(semantics, "_onScrollDown");
  var _onIncrease = dart.privateName(semantics, "_onIncrease");
  var _onDecrease = dart.privateName(semantics, "_onDecrease");
  var _onCopy = dart.privateName(semantics, "_onCopy");
  var _onCut = dart.privateName(semantics, "_onCut");
  var _onPaste = dart.privateName(semantics, "_onPaste");
  var _onShowOnScreen = dart.privateName(semantics, "_onShowOnScreen");
  var _onMoveCursorForwardByCharacter = dart.privateName(semantics, "_onMoveCursorForwardByCharacter");
  var _onMoveCursorBackwardByCharacter = dart.privateName(semantics, "_onMoveCursorBackwardByCharacter");
  var _onMoveCursorForwardByWord = dart.privateName(semantics, "_onMoveCursorForwardByWord");
  var _onMoveCursorBackwardByWord = dart.privateName(semantics, "_onMoveCursorBackwardByWord");
  var _onSetSelection = dart.privateName(semantics, "_onSetSelection");
  var _onSetText = dart.privateName(semantics, "_onSetText");
  var _onDidGainAccessibilityFocus = dart.privateName(semantics, "_onDidGainAccessibilityFocus");
  var _onDidLoseAccessibilityFocus = dart.privateName(semantics, "_onDidLoseAccessibilityFocus");
  var _childConfigurationsDelegate = dart.privateName(semantics, "_childConfigurationsDelegate");
  var _indexInParent = dart.privateName(semantics, "_indexInParent");
  var _isMergingSemanticsOfDescendants = dart.privateName(semantics, "_isMergingSemanticsOfDescendants");
  var _tagsForChildren = dart.privateName(semantics, "_tagsForChildren");
  var _addAction = dart.privateName(semantics, "_addAction");
  var _addArgumentlessAction = dart.privateName(semantics, "_addArgumentlessAction");
  var _onCustomSemanticsAction = dart.privateName(semantics, "_onCustomSemanticsAction");
  var _hasFlag = dart.privateName(semantics, "_hasFlag");
  var _setFlag = dart.privateName(semantics, "_setFlag");
  semantics.SemanticsConfiguration = class SemanticsConfiguration extends core.Object {
    get isBlockingUserActions() {
      return this[isBlockingUserActions];
    }
    set isBlockingUserActions(value) {
      this[isBlockingUserActions] = value;
    }
    get explicitChildNodes() {
      return this[explicitChildNodes];
    }
    set explicitChildNodes(value) {
      this[explicitChildNodes] = value;
    }
    get isBlockingSemanticsOfPreviouslyPaintedNodes() {
      return this[isBlockingSemanticsOfPreviouslyPaintedNodes];
    }
    set isBlockingSemanticsOfPreviouslyPaintedNodes(value) {
      this[isBlockingSemanticsOfPreviouslyPaintedNodes] = value;
    }
    get isSemanticBoundary() {
      return this[_isSemanticBoundary];
    }
    set isSemanticBoundary(value) {
      if (!(!this.isMergingSemanticsOfDescendants || value)) dart.assertFailed(null, I[2], 3588, 12, "!isMergingSemanticsOfDescendants || value");
      this[_isSemanticBoundary] = value;
    }
    get hasBeenAnnotated() {
      return this[_hasBeenAnnotated];
    }
    get [_effectiveActionsAsBits]() {
      return this.isBlockingUserActions ? (this[_actionsAsBits] & semantics._kUnblockedUserActions) >>> 0 : this[_actionsAsBits];
    }
    [_addAction](action, handler) {
      this[_actions][$_set](action, handler);
      this[_actionsAsBits] = (this[_actionsAsBits] | action.index) >>> 0;
      this[_hasBeenAnnotated] = true;
    }
    [_addArgumentlessAction](action, handler) {
      this[_addAction](action, dart.fn(args => {
        if (!(args == null)) dart.assertFailed(null, I[2], 3679, 14, "args == null");
        handler();
      }, T.ObjectNTovoid()));
    }
    get onTap() {
      return this[_onTap];
    }
    set onTap(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.tap, dart.nullCheck(value));
      this[_onTap] = value;
    }
    get onLongPress() {
      return this[_onLongPress];
    }
    set onLongPress(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.longPress, dart.nullCheck(value));
      this[_onLongPress] = value;
    }
    get onScrollLeft() {
      return this[_onScrollLeft];
    }
    set onScrollLeft(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollLeft, dart.nullCheck(value));
      this[_onScrollLeft] = value;
    }
    get onDismiss() {
      return this[_onDismiss];
    }
    set onDismiss(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.dismiss, dart.nullCheck(value));
      this[_onDismiss] = value;
    }
    get onScrollRight() {
      return this[_onScrollRight];
    }
    set onScrollRight(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollRight, dart.nullCheck(value));
      this[_onScrollRight] = value;
    }
    get onScrollUp() {
      return this[_onScrollUp];
    }
    set onScrollUp(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollUp, dart.nullCheck(value));
      this[_onScrollUp] = value;
    }
    get onScrollDown() {
      return this[_onScrollDown];
    }
    set onScrollDown(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollDown, dart.nullCheck(value));
      this[_onScrollDown] = value;
    }
    get onIncrease() {
      return this[_onIncrease];
    }
    set onIncrease(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.increase, dart.nullCheck(value));
      this[_onIncrease] = value;
    }
    get onDecrease() {
      return this[_onDecrease];
    }
    set onDecrease(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.decrease, dart.nullCheck(value));
      this[_onDecrease] = value;
    }
    get onCopy() {
      return this[_onCopy];
    }
    set onCopy(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.copy, dart.nullCheck(value));
      this[_onCopy] = value;
    }
    get onCut() {
      return this[_onCut];
    }
    set onCut(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.cut, dart.nullCheck(value));
      this[_onCut] = value;
    }
    get onPaste() {
      return this[_onPaste];
    }
    set onPaste(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.paste, dart.nullCheck(value));
      this[_onPaste] = value;
    }
    get onShowOnScreen() {
      return this[_onShowOnScreen];
    }
    set onShowOnScreen(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.showOnScreen, dart.nullCheck(value));
      this[_onShowOnScreen] = value;
    }
    get onMoveCursorForwardByCharacter() {
      return this[_onMoveCursorForwardByCharacter];
    }
    set onMoveCursorForwardByCharacter(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 3916, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorForwardByCharacter, dart.fn(args => {
        let extendSelection = T.bool()[_as](dart.nullCheck(args));
        dart.nullCheck(value)(extendSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorForwardByCharacter] = value;
    }
    get onMoveCursorBackwardByCharacter() {
      return this[_onMoveCursorBackwardByCharacter];
    }
    set onMoveCursorBackwardByCharacter(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 3934, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorBackwardByCharacter, dart.fn(args => {
        let extendSelection = T.bool()[_as](dart.nullCheck(args));
        dart.nullCheck(value)(extendSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorBackwardByCharacter] = value;
    }
    get onMoveCursorForwardByWord() {
      return this[_onMoveCursorForwardByWord];
    }
    set onMoveCursorForwardByWord(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 3952, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorForwardByWord, dart.fn(args => {
        let extendSelection = T.bool()[_as](dart.nullCheck(args));
        dart.nullCheck(value)(extendSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorForwardByCharacter] = value;
    }
    get onMoveCursorBackwardByWord() {
      return this[_onMoveCursorBackwardByWord];
    }
    set onMoveCursorBackwardByWord(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 3970, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorBackwardByWord, dart.fn(args => {
        let extendSelection = T.bool()[_as](dart.nullCheck(args));
        dart.nullCheck(value)(extendSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorBackwardByCharacter] = value;
    }
    get onSetSelection() {
      return this[_onSetSelection];
    }
    set onSetSelection(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 3988, 12, "value != null");
      this[_addAction](ui.SemanticsAction.setSelection, dart.fn(args => {
        if (!(args != null && T.Map()[_is](args))) dart.assertFailed(null, I[2], 3990, 14, "args != null && args is Map");
        let selection = T.Map()[_as](dart.nullCheck(args))[$cast](T.String(), T.int());
        if (!(selection[$_get]("base") != null && selection[$_get]("extent") != null)) dart.assertFailed(null, I[2], 3992, 14, "selection['base'] != null && selection['extent'] != null");
        dart.nullCheck(value)(new text_editing.TextSelection.new({baseOffset: dart.nullCheck(selection[$_get]("base")), extentOffset: dart.nullCheck(selection[$_get]("extent"))}));
      }, T.ObjectNTovoid()));
      this[_onSetSelection] = value;
    }
    get onSetText() {
      return this[_onSetText];
    }
    set onSetText(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4011, 12, "value != null");
      this[_addAction](ui.SemanticsAction.setText, dart.fn(args => {
        if (!(args != null && typeof args == 'string')) dart.assertFailed(null, I[2], 4013, 14, "args != null && args is String");
        let text = T.String()[_as](dart.nullCheck(args));
        dart.nullCheck(value)(text);
      }, T.ObjectNTovoid()));
      this[_onSetText] = value;
    }
    get onDidGainAccessibilityFocus() {
      return this[_onDidGainAccessibilityFocus];
    }
    set onDidGainAccessibilityFocus(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.didGainAccessibilityFocus, dart.nullCheck(value));
      this[_onDidGainAccessibilityFocus] = value;
    }
    get onDidLoseAccessibilityFocus() {
      return this[_onDidLoseAccessibilityFocus];
    }
    set onDidLoseAccessibilityFocus(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.didLoseAccessibilityFocus, dart.nullCheck(value));
      this[_onDidLoseAccessibilityFocus] = value;
    }
    get childConfigurationsDelegate() {
      return this[_childConfigurationsDelegate];
    }
    set childConfigurationsDelegate(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4082, 12, "value != null");
      this[_childConfigurationsDelegate] = value;
    }
    getActionHandler(action) {
      return this[_actions][$_get](action);
    }
    get sortKey() {
      return this[_sortKey];
    }
    set sortKey(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4106, 12, "value != null");
      this[_sortKey] = value;
      this[_hasBeenAnnotated] = true;
    }
    get indexInParent() {
      return this[_indexInParent];
    }
    set indexInParent(value) {
      this[_indexInParent] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollChildCount() {
      return this[_scrollChildCount];
    }
    set scrollChildCount(value) {
      if (value == this.scrollChildCount) {
        return;
      }
      this[_scrollChildCount] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    set scrollIndex(value) {
      if (value == this.scrollIndex) {
        return;
      }
      this[_scrollIndex] = value;
      this[_hasBeenAnnotated] = true;
    }
    get platformViewId() {
      return this[_platformViewId];
    }
    set platformViewId(value) {
      if (value == this.platformViewId) {
        return;
      }
      this[_platformViewId] = value;
      this[_hasBeenAnnotated] = true;
    }
    get maxValueLength() {
      return this[_maxValueLength];
    }
    set maxValueLength(value) {
      if (value == this.maxValueLength) {
        return;
      }
      this[_maxValueLength] = value;
      this[_hasBeenAnnotated] = true;
    }
    get currentValueLength() {
      return this[_currentValueLength];
    }
    set currentValueLength(value) {
      if (value == this.currentValueLength) {
        return;
      }
      this[_currentValueLength] = value;
      this[_hasBeenAnnotated] = true;
    }
    get isMergingSemanticsOfDescendants() {
      return this[_isMergingSemanticsOfDescendants];
    }
    set isMergingSemanticsOfDescendants(value) {
      if (!this.isSemanticBoundary) dart.assertFailed(null, I[2], 4209, 12, "isSemanticBoundary");
      this[_isMergingSemanticsOfDescendants] = value;
      this[_hasBeenAnnotated] = true;
    }
    get customSemanticsActions() {
      return this[_customSemanticsActions];
    }
    set customSemanticsActions(value) {
      this[_hasBeenAnnotated] = true;
      this[_actionsAsBits] = (this[_actionsAsBits] | ui.SemanticsAction.customAction.index) >>> 0;
      this[_customSemanticsActions] = value;
      this[_actions][$_set](ui.SemanticsAction.customAction, dart.bind(this, _onCustomSemanticsAction));
    }
    [_onCustomSemanticsAction](args) {
      let action = semantics.CustomSemanticsAction.getAction(T.int()[_as](dart.nullCheck(args)));
      if (action == null) {
        return;
      }
      let callback = this[_customSemanticsActions][$_get](action);
      if (callback != null) {
        callback();
      }
    }
    get identifier() {
      return this[_identifier];
    }
    set identifier(identifier) {
      this[_identifier] = identifier;
      this[_hasBeenAnnotated] = true;
    }
    get label() {
      return this[_attributedLabel].string;
    }
    set label(label) {
      this[_attributedLabel] = new semantics.AttributedString.new(label);
      this[_hasBeenAnnotated] = true;
    }
    get attributedLabel() {
      return this[_attributedLabel];
    }
    set attributedLabel(attributedLabel) {
      this[_attributedLabel] = attributedLabel;
      this[_hasBeenAnnotated] = true;
    }
    get value() {
      return this[_attributedValue].string;
    }
    set value(value) {
      this[_attributedValue] = new semantics.AttributedString.new(value);
      this[_hasBeenAnnotated] = true;
    }
    get attributedValue() {
      return this[_attributedValue];
    }
    set attributedValue(attributedValue) {
      this[_attributedValue] = attributedValue;
      this[_hasBeenAnnotated] = true;
    }
    get increasedValue() {
      return this[_attributedIncreasedValue].string;
    }
    set increasedValue(increasedValue) {
      this[_attributedIncreasedValue] = new semantics.AttributedString.new(increasedValue);
      this[_hasBeenAnnotated] = true;
    }
    get attributedIncreasedValue() {
      return this[_attributedIncreasedValue];
    }
    set attributedIncreasedValue(attributedIncreasedValue) {
      this[_attributedIncreasedValue] = attributedIncreasedValue;
      this[_hasBeenAnnotated] = true;
    }
    get decreasedValue() {
      return this[_attributedDecreasedValue].string;
    }
    set decreasedValue(decreasedValue) {
      this[_attributedDecreasedValue] = new semantics.AttributedString.new(decreasedValue);
      this[_hasBeenAnnotated] = true;
    }
    get attributedDecreasedValue() {
      return this[_attributedDecreasedValue];
    }
    set attributedDecreasedValue(attributedDecreasedValue) {
      this[_attributedDecreasedValue] = attributedDecreasedValue;
      this[_hasBeenAnnotated] = true;
    }
    get hint() {
      return this[_attributedHint].string;
    }
    set hint(hint) {
      this[_attributedHint] = new semantics.AttributedString.new(hint);
      this[_hasBeenAnnotated] = true;
    }
    get attributedHint() {
      return this[_attributedHint];
    }
    set attributedHint(attributedHint) {
      this[_attributedHint] = attributedHint;
      this[_hasBeenAnnotated] = true;
    }
    get tooltip() {
      return this[_tooltip];
    }
    set tooltip(tooltip) {
      this[_tooltip] = tooltip;
      this[_hasBeenAnnotated] = true;
    }
    get hintOverrides() {
      return this[_hintOverrides];
    }
    set hintOverrides(value) {
      if (value == null) {
        return;
      }
      this[_hintOverrides] = value;
      this[_hasBeenAnnotated] = true;
    }
    get elevation() {
      return this[_elevation];
    }
    set elevation(value) {
      if (!(value >= 0.0)) dart.assertFailed(null, I[2], 4467, 12, "value >= 0.0");
      if (value === this[_elevation]) {
        return;
      }
      this[_elevation] = value;
      this[_hasBeenAnnotated] = true;
    }
    get thickness() {
      return this[_thickness];
    }
    set thickness(value) {
      if (!(value >= 0.0)) dart.assertFailed(null, I[2], 4484, 12, "value >= 0.0");
      if (value === this[_thickness]) {
        return;
      }
      this[_thickness] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scopesRoute() {
      return this[_hasFlag](ui.SemanticsFlag.scopesRoute);
    }
    set scopesRoute(value) {
      this[_setFlag](ui.SemanticsFlag.scopesRoute, value);
    }
    get namesRoute() {
      return this[_hasFlag](ui.SemanticsFlag.namesRoute);
    }
    set namesRoute(value) {
      this[_setFlag](ui.SemanticsFlag.namesRoute, value);
    }
    get isImage() {
      return this[_hasFlag](ui.SemanticsFlag.isImage);
    }
    set isImage(value) {
      this[_setFlag](ui.SemanticsFlag.isImage, value);
    }
    get liveRegion() {
      return this[_hasFlag](ui.SemanticsFlag.isLiveRegion);
    }
    set liveRegion(value) {
      this[_setFlag](ui.SemanticsFlag.isLiveRegion, value);
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(textDirection) {
      this[_textDirection] = textDirection;
      this[_hasBeenAnnotated] = true;
    }
    get isSelected() {
      return this[_hasFlag](ui.SemanticsFlag.isSelected);
    }
    set isSelected(value) {
      this[_setFlag](ui.SemanticsFlag.isSelected, value);
    }
    get isExpanded() {
      return this[_hasFlag](ui.SemanticsFlag.hasExpandedState) ? this[_hasFlag](ui.SemanticsFlag.isExpanded) : null;
    }
    set isExpanded(value) {
      this[_setFlag](ui.SemanticsFlag.hasExpandedState, true);
      this[_setFlag](ui.SemanticsFlag.isExpanded, dart.nullCheck(value));
    }
    get isEnabled() {
      return this[_hasFlag](ui.SemanticsFlag.hasEnabledState) ? this[_hasFlag](ui.SemanticsFlag.isEnabled) : null;
    }
    set isEnabled(value) {
      this[_setFlag](ui.SemanticsFlag.hasEnabledState, true);
      this[_setFlag](ui.SemanticsFlag.isEnabled, dart.nullCheck(value));
    }
    get isChecked() {
      return this[_hasFlag](ui.SemanticsFlag.hasCheckedState) ? this[_hasFlag](ui.SemanticsFlag.isChecked) : null;
    }
    set isChecked(value) {
      if (!(value !== true || this.isCheckStateMixed !== true)) dart.assertFailed(null, I[2], 4606, 12, "value != true || isCheckStateMixed != true");
      this[_setFlag](ui.SemanticsFlag.hasCheckedState, true);
      this[_setFlag](ui.SemanticsFlag.isChecked, dart.nullCheck(value));
    }
    get isCheckStateMixed() {
      return this[_hasFlag](ui.SemanticsFlag.hasCheckedState) ? this[_hasFlag](ui.SemanticsFlag.isCheckStateMixed) : null;
    }
    set isCheckStateMixed(value) {
      if (!(value !== true || this.isChecked !== true)) dart.assertFailed(null, I[2], 4621, 12, "value != true || isChecked != true");
      this[_setFlag](ui.SemanticsFlag.hasCheckedState, true);
      this[_setFlag](ui.SemanticsFlag.isCheckStateMixed, dart.nullCheck(value));
    }
    get isToggled() {
      return this[_hasFlag](ui.SemanticsFlag.hasToggledState) ? this[_hasFlag](ui.SemanticsFlag.isToggled) : null;
    }
    set isToggled(value) {
      this[_setFlag](ui.SemanticsFlag.hasToggledState, true);
      this[_setFlag](ui.SemanticsFlag.isToggled, dart.nullCheck(value));
    }
    get isInMutuallyExclusiveGroup() {
      return this[_hasFlag](ui.SemanticsFlag.isInMutuallyExclusiveGroup);
    }
    set isInMutuallyExclusiveGroup(value) {
      this[_setFlag](ui.SemanticsFlag.isInMutuallyExclusiveGroup, value);
    }
    get isFocusable() {
      return this[_hasFlag](ui.SemanticsFlag.isFocusable);
    }
    set isFocusable(value) {
      this[_setFlag](ui.SemanticsFlag.isFocusable, value);
    }
    get isFocused() {
      return this[_hasFlag](ui.SemanticsFlag.isFocused);
    }
    set isFocused(value) {
      this[_setFlag](ui.SemanticsFlag.isFocused, value);
    }
    get isButton() {
      return this[_hasFlag](ui.SemanticsFlag.isButton);
    }
    set isButton(value) {
      this[_setFlag](ui.SemanticsFlag.isButton, value);
    }
    get isLink() {
      return this[_hasFlag](ui.SemanticsFlag.isLink);
    }
    set isLink(value) {
      this[_setFlag](ui.SemanticsFlag.isLink, value);
    }
    get isHeader() {
      return this[_hasFlag](ui.SemanticsFlag.isHeader);
    }
    set isHeader(value) {
      this[_setFlag](ui.SemanticsFlag.isHeader, value);
    }
    get isSlider() {
      return this[_hasFlag](ui.SemanticsFlag.isSlider);
    }
    set isSlider(value) {
      this[_setFlag](ui.SemanticsFlag.isSlider, value);
    }
    get isKeyboardKey() {
      return this[_hasFlag](ui.SemanticsFlag.isKeyboardKey);
    }
    set isKeyboardKey(value) {
      this[_setFlag](ui.SemanticsFlag.isKeyboardKey, value);
    }
    get isHidden() {
      return this[_hasFlag](ui.SemanticsFlag.isHidden);
    }
    set isHidden(value) {
      this[_setFlag](ui.SemanticsFlag.isHidden, value);
    }
    get isTextField() {
      return this[_hasFlag](ui.SemanticsFlag.isTextField);
    }
    set isTextField(value) {
      this[_setFlag](ui.SemanticsFlag.isTextField, value);
    }
    get isReadOnly() {
      return this[_hasFlag](ui.SemanticsFlag.isReadOnly);
    }
    set isReadOnly(value) {
      this[_setFlag](ui.SemanticsFlag.isReadOnly, value);
    }
    get isObscured() {
      return this[_hasFlag](ui.SemanticsFlag.isObscured);
    }
    set isObscured(value) {
      this[_setFlag](ui.SemanticsFlag.isObscured, value);
    }
    get isMultiline() {
      return this[_hasFlag](ui.SemanticsFlag.isMultiline);
    }
    set isMultiline(value) {
      this[_setFlag](ui.SemanticsFlag.isMultiline, value);
    }
    get hasImplicitScrolling() {
      return this[_hasFlag](ui.SemanticsFlag.hasImplicitScrolling);
    }
    set hasImplicitScrolling(value) {
      this[_setFlag](ui.SemanticsFlag.hasImplicitScrolling, value);
    }
    get textSelection() {
      return this[_textSelection];
    }
    set textSelection(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4764, 12, "value != null");
      this[_textSelection] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    set scrollPosition(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4782, 12, "value != null");
      this[_scrollPosition] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    set scrollExtentMax(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4798, 12, "value != null");
      this[_scrollExtentMax] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    set scrollExtentMin(value) {
      if (!(value != null)) dart.assertFailed(null, I[2], 4814, 12, "value != null");
      this[_scrollExtentMin] = value;
      this[_hasBeenAnnotated] = true;
    }
    get tagsForChildren() {
      return this[_tagsForChildren];
    }
    tagsChildrenWith(tag) {
      let t$365, t$365$;
      t$365$ = (t$365 = this[_tagsForChildren], t$365 == null ? null : t$365.contains(tag));
      return t$365$ == null ? false : t$365$;
    }
    addTagForChildren(tag) {
      this[_tagsForChildren] == null ? this[_tagsForChildren] = G.LinkedHashSetOfSemanticsTag().new() : null;
      dart.nullCheck(this[_tagsForChildren]).add(tag);
    }
    [_setFlag](flag, value) {
      if (value) {
        this[_flags] = (this[_flags] | flag.index) >>> 0;
      } else {
        this[_flags] = (this[_flags] & ~flag.index >>> 0) >>> 0;
      }
      this[_hasBeenAnnotated] = true;
    }
    [_hasFlag](flag) {
      return (this[_flags] & flag.index) !== 0;
    }
    isCompatibleWith(other) {
      if (other == null || !other.hasBeenAnnotated || !this.hasBeenAnnotated) {
        return true;
      }
      if ((this[_actionsAsBits] & other[_actionsAsBits]) !== 0) {
        return false;
      }
      if ((this[_flags] & other[_flags]) !== 0) {
        return false;
      }
      if (this[_platformViewId] != null && other[_platformViewId] != null) {
        return false;
      }
      if (this[_maxValueLength] != null && other[_maxValueLength] != null) {
        return false;
      }
      if (this[_currentValueLength] != null && other[_currentValueLength] != null) {
        return false;
      }
      if (this[_attributedValue].string[$isNotEmpty] && other[_attributedValue].string[$isNotEmpty]) {
        return false;
      }
      return true;
    }
    absorb(child) {
      if (!!this.explicitChildNodes) dart.assertFailed(null, I[2], 4914, 12, "!explicitChildNodes");
      if (!child.hasBeenAnnotated) {
        return;
      }
      if (child.isBlockingUserActions) {
        child[_actions][$forEach](dart.fn((key, value) => {
          if ((semantics._kUnblockedUserActions & key.index) >>> 0 > 0) {
            this[_actions][$_set](key, value);
          }
        }, T.SemanticsActionAndFnTovoid()));
      } else {
        this[_actions][$addAll](child[_actions]);
      }
      this[_actionsAsBits] = (this[_actionsAsBits] | child[_effectiveActionsAsBits]) >>> 0;
      this[_customSemanticsActions][$addAll](child[_customSemanticsActions]);
      this[_flags] = (this[_flags] | child[_flags]) >>> 0;
      this[_textSelection] == null ? this[_textSelection] = child[_textSelection] : null;
      this[_scrollPosition] == null ? this[_scrollPosition] = child[_scrollPosition] : null;
      this[_scrollExtentMax] == null ? this[_scrollExtentMax] = child[_scrollExtentMax] : null;
      this[_scrollExtentMin] == null ? this[_scrollExtentMin] = child[_scrollExtentMin] : null;
      this[_hintOverrides] == null ? this[_hintOverrides] = child[_hintOverrides] : null;
      this[_indexInParent] == null ? this[_indexInParent] = child.indexInParent : null;
      this[_scrollIndex] == null ? this[_scrollIndex] = child[_scrollIndex] : null;
      this[_scrollChildCount] == null ? this[_scrollChildCount] = child[_scrollChildCount] : null;
      this[_platformViewId] == null ? this[_platformViewId] = child[_platformViewId] : null;
      this[_maxValueLength] == null ? this[_maxValueLength] = child[_maxValueLength] : null;
      this[_currentValueLength] == null ? this[_currentValueLength] = child[_currentValueLength] : null;
      this.textDirection == null ? this.textDirection = child.textDirection : null;
      this[_sortKey] == null ? this[_sortKey] = child[_sortKey] : null;
      if (this[_identifier] === "") {
        this[_identifier] = child[_identifier];
      }
      this[_attributedLabel] = semantics._concatAttributedString({thisAttributedString: this[_attributedLabel], thisTextDirection: this.textDirection, otherAttributedString: child[_attributedLabel], otherTextDirection: child.textDirection});
      if (this[_attributedValue].string === "") {
        this[_attributedValue] = child[_attributedValue];
      }
      if (this[_attributedIncreasedValue].string === "") {
        this[_attributedIncreasedValue] = child[_attributedIncreasedValue];
      }
      if (this[_attributedDecreasedValue].string === "") {
        this[_attributedDecreasedValue] = child[_attributedDecreasedValue];
      }
      this[_attributedHint] = semantics._concatAttributedString({thisAttributedString: this[_attributedHint], thisTextDirection: this.textDirection, otherAttributedString: child[_attributedHint], otherTextDirection: child.textDirection});
      if (this[_tooltip] === "") {
        this[_tooltip] = child[_tooltip];
      }
      this[_thickness] = math.max(T.double(), this[_thickness], child[_thickness] + child[_elevation]);
      this[_hasBeenAnnotated] = this[_hasBeenAnnotated] || child[_hasBeenAnnotated];
    }
    copy() {
      let t$365;
      t$365 = new semantics.SemanticsConfiguration.new();
      return (() => {
        t$365[_isSemanticBoundary] = this[_isSemanticBoundary];
        t$365.explicitChildNodes = this.explicitChildNodes;
        t$365.isBlockingSemanticsOfPreviouslyPaintedNodes = this.isBlockingSemanticsOfPreviouslyPaintedNodes;
        t$365[_hasBeenAnnotated] = this[_hasBeenAnnotated];
        t$365[_isMergingSemanticsOfDescendants] = this[_isMergingSemanticsOfDescendants];
        t$365[_textDirection] = this[_textDirection];
        t$365[_sortKey] = this[_sortKey];
        t$365[_identifier] = this[_identifier];
        t$365[_attributedLabel] = this[_attributedLabel];
        t$365[_attributedIncreasedValue] = this[_attributedIncreasedValue];
        t$365[_attributedValue] = this[_attributedValue];
        t$365[_attributedDecreasedValue] = this[_attributedDecreasedValue];
        t$365[_attributedHint] = this[_attributedHint];
        t$365[_hintOverrides] = this[_hintOverrides];
        t$365[_tooltip] = this[_tooltip];
        t$365[_elevation] = this[_elevation];
        t$365[_thickness] = this[_thickness];
        t$365[_flags] = this[_flags];
        t$365[_tagsForChildren] = this[_tagsForChildren];
        t$365[_textSelection] = this[_textSelection];
        t$365[_scrollPosition] = this[_scrollPosition];
        t$365[_scrollExtentMax] = this[_scrollExtentMax];
        t$365[_scrollExtentMin] = this[_scrollExtentMin];
        t$365[_actionsAsBits] = this[_actionsAsBits];
        t$365[_indexInParent] = this.indexInParent;
        t$365[_scrollIndex] = this[_scrollIndex];
        t$365[_scrollChildCount] = this[_scrollChildCount];
        t$365[_platformViewId] = this[_platformViewId];
        t$365[_maxValueLength] = this[_maxValueLength];
        t$365[_currentValueLength] = this[_currentValueLength];
        t$365[_actions][$addAll](this[_actions]);
        t$365[_customSemanticsActions][$addAll](this[_customSemanticsActions]);
        t$365.isBlockingUserActions = this.isBlockingUserActions;
        return t$365;
      })();
    }
    static ['_#new#tearOff']() {
      return new semantics.SemanticsConfiguration.new();
    }
  };
  (semantics.SemanticsConfiguration.new = function() {
    this[_isSemanticBoundary] = false;
    this[isBlockingUserActions] = false;
    this[explicitChildNodes] = false;
    this[isBlockingSemanticsOfPreviouslyPaintedNodes] = false;
    this[_hasBeenAnnotated] = false;
    this[_actions] = new (G.LinkedMapOfSemanticsAction$ObjectNTovoid()).new();
    this[_actionsAsBits] = 0;
    this[_onTap] = null;
    this[_onLongPress] = null;
    this[_onScrollLeft] = null;
    this[_onDismiss] = null;
    this[_onScrollRight] = null;
    this[_onScrollUp] = null;
    this[_onScrollDown] = null;
    this[_onIncrease] = null;
    this[_onDecrease] = null;
    this[_onCopy] = null;
    this[_onCut] = null;
    this[_onPaste] = null;
    this[_onShowOnScreen] = null;
    this[_onMoveCursorForwardByCharacter] = null;
    this[_onMoveCursorBackwardByCharacter] = null;
    this[_onMoveCursorForwardByWord] = null;
    this[_onMoveCursorBackwardByWord] = null;
    this[_onSetSelection] = null;
    this[_onSetText] = null;
    this[_onDidGainAccessibilityFocus] = null;
    this[_onDidLoseAccessibilityFocus] = null;
    this[_childConfigurationsDelegate] = null;
    this[_sortKey] = null;
    this[_indexInParent] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[_isMergingSemanticsOfDescendants] = false;
    this[_customSemanticsActions] = new (G.LinkedMapOfCustomSemanticsAction$VoidTovoid()).new();
    this[_identifier] = "";
    this[_attributedLabel] = new semantics.AttributedString.new("");
    this[_attributedValue] = new semantics.AttributedString.new("");
    this[_attributedIncreasedValue] = new semantics.AttributedString.new("");
    this[_attributedDecreasedValue] = new semantics.AttributedString.new("");
    this[_attributedHint] = new semantics.AttributedString.new("");
    this[_tooltip] = "";
    this[_hintOverrides] = null;
    this[_elevation] = 0.0;
    this[_thickness] = 0.0;
    this[_textDirection] = null;
    this[_textSelection] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_tagsForChildren] = null;
    this[_flags] = 0;
    ;
  }).prototype = semantics.SemanticsConfiguration.prototype;
  dart.addTypeTests(semantics.SemanticsConfiguration);
  dart.addRtiResources(semantics.SemanticsConfiguration, ["flutter__src__semantics__semantics|SemanticsConfiguration"]);
  dart.addTypeCaches(semantics.SemanticsConfiguration);
  dart.setMethodSignature(semantics.SemanticsConfiguration, () => dart.global.Object.setPrototypeOf({
    [_addAction]: T.SemanticsActionAndFnTovoid(),
    [_addArgumentlessAction]: T.SemanticsActionAndFnTovoid$1(),
    getActionHandler: T.SemanticsActionToFn(),
    [_onCustomSemanticsAction]: T.ObjectNTovoid(),
    tagsChildrenWith: T.SemanticsTagTobool(),
    addTagForChildren: T.SemanticsTagTovoid(),
    [_setFlag]: T.SemanticsFlagAndboolTovoid(),
    [_hasFlag]: T.SemanticsFlagTobool(),
    isCompatibleWith: T.SemanticsConfigurationNTobool(),
    absorb: T.SemanticsConfigurationTovoid(),
    copy: T.VoidToSemanticsConfiguration()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.SemanticsConfiguration))));
  dart.setGetterSignature(semantics.SemanticsConfiguration, () => dart.global.Object.setPrototypeOf({
    isSemanticBoundary: T.bool(),
    hasBeenAnnotated: T.bool(),
    [_effectiveActionsAsBits]: T.int(),
    onTap: T.VoidToNvoid(),
    onLongPress: T.VoidToNvoid(),
    onScrollLeft: T.VoidToNvoid(),
    onDismiss: T.VoidToNvoid(),
    onScrollRight: T.VoidToNvoid(),
    onScrollUp: T.VoidToNvoid(),
    onScrollDown: T.VoidToNvoid(),
    onIncrease: T.VoidToNvoid(),
    onDecrease: T.VoidToNvoid(),
    onCopy: T.VoidToNvoid(),
    onCut: T.VoidToNvoid(),
    onPaste: T.VoidToNvoid(),
    onShowOnScreen: T.VoidToNvoid(),
    onMoveCursorForwardByCharacter: T.boolToNvoid(),
    onMoveCursorBackwardByCharacter: T.boolToNvoid(),
    onMoveCursorForwardByWord: T.boolToNvoid(),
    onMoveCursorBackwardByWord: T.boolToNvoid(),
    onSetSelection: T.TextSelectionToNvoid(),
    onSetText: T.StringToNvoid(),
    onDidGainAccessibilityFocus: T.VoidToNvoid(),
    onDidLoseAccessibilityFocus: T.VoidToNvoid(),
    childConfigurationsDelegate: T.ListOfSemanticsConfigurationToNChildSemanticsConfigurationsResult(),
    sortKey: T.SemanticsSortKeyN(),
    indexInParent: T.intN(),
    scrollChildCount: T.intN(),
    scrollIndex: T.intN(),
    platformViewId: T.intN(),
    maxValueLength: T.intN(),
    currentValueLength: T.intN(),
    isMergingSemanticsOfDescendants: T.bool(),
    customSemanticsActions: T.MapOfCustomSemanticsAction$VoidTovoid(),
    identifier: T.String(),
    label: T.String(),
    attributedLabel: T.AttributedString(),
    value: T.String(),
    attributedValue: T.AttributedString(),
    increasedValue: T.String(),
    attributedIncreasedValue: T.AttributedString(),
    decreasedValue: T.String(),
    attributedDecreasedValue: T.AttributedString(),
    hint: T.String(),
    attributedHint: T.AttributedString(),
    tooltip: T.String(),
    hintOverrides: T.SemanticsHintOverridesN(),
    elevation: T.double(),
    thickness: T.double(),
    scopesRoute: T.bool(),
    namesRoute: T.bool(),
    isImage: T.bool(),
    liveRegion: T.bool(),
    textDirection: T.TextDirectionN(),
    isSelected: T.bool(),
    isExpanded: T.boolN(),
    isEnabled: T.boolN(),
    isChecked: T.boolN(),
    isCheckStateMixed: T.boolN(),
    isToggled: T.boolN(),
    isInMutuallyExclusiveGroup: T.bool(),
    isFocusable: T.bool(),
    isFocused: T.bool(),
    isButton: T.bool(),
    isLink: T.bool(),
    isHeader: T.bool(),
    isSlider: T.bool(),
    isKeyboardKey: T.bool(),
    isHidden: T.bool(),
    isTextField: T.bool(),
    isReadOnly: T.bool(),
    isObscured: T.bool(),
    isMultiline: T.bool(),
    hasImplicitScrolling: T.bool(),
    textSelection: T.TextSelectionN(),
    scrollPosition: T.doubleN(),
    scrollExtentMax: T.doubleN(),
    scrollExtentMin: T.doubleN(),
    tagsForChildren: T.IterableNOfSemanticsTag()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(semantics.SemanticsConfiguration))));
  dart.setSetterSignature(semantics.SemanticsConfiguration, () => dart.global.Object.setPrototypeOf({
    isSemanticBoundary: T.bool(),
    onTap: T.VoidToNvoid(),
    onLongPress: T.VoidToNvoid(),
    onScrollLeft: T.VoidToNvoid(),
    onDismiss: T.VoidToNvoid(),
    onScrollRight: T.VoidToNvoid(),
    onScrollUp: T.VoidToNvoid(),
    onScrollDown: T.VoidToNvoid(),
    onIncrease: T.VoidToNvoid(),
    onDecrease: T.VoidToNvoid(),
    onCopy: T.VoidToNvoid(),
    onCut: T.VoidToNvoid(),
    onPaste: T.VoidToNvoid(),
    onShowOnScreen: T.VoidToNvoid(),
    onMoveCursorForwardByCharacter: T.boolToNvoid(),
    onMoveCursorBackwardByCharacter: T.boolToNvoid(),
    onMoveCursorForwardByWord: T.boolToNvoid(),
    onMoveCursorBackwardByWord: T.boolToNvoid(),
    onSetSelection: T.TextSelectionToNvoid(),
    onSetText: T.StringToNvoid(),
    onDidGainAccessibilityFocus: T.VoidToNvoid(),
    onDidLoseAccessibilityFocus: T.VoidToNvoid(),
    childConfigurationsDelegate: T.ListOfSemanticsConfigurationToNChildSemanticsConfigurationsResult(),
    sortKey: T.SemanticsSortKeyN(),
    indexInParent: T.intN(),
    scrollChildCount: T.intN(),
    scrollIndex: T.intN(),
    platformViewId: T.intN(),
    maxValueLength: T.intN(),
    currentValueLength: T.intN(),
    isMergingSemanticsOfDescendants: T.bool(),
    customSemanticsActions: T.MapOfCustomSemanticsAction$VoidTovoid(),
    identifier: T.String(),
    label: T.String(),
    attributedLabel: T.AttributedString(),
    value: T.String(),
    attributedValue: T.AttributedString(),
    increasedValue: T.String(),
    attributedIncreasedValue: T.AttributedString(),
    decreasedValue: T.String(),
    attributedDecreasedValue: T.AttributedString(),
    hint: T.String(),
    attributedHint: T.AttributedString(),
    tooltip: T.String(),
    hintOverrides: T.SemanticsHintOverridesN(),
    elevation: T.double(),
    thickness: T.double(),
    scopesRoute: T.bool(),
    namesRoute: T.bool(),
    isImage: T.bool(),
    liveRegion: T.bool(),
    textDirection: T.TextDirectionN(),
    isSelected: T.bool(),
    isExpanded: T.boolN(),
    isEnabled: T.boolN(),
    isChecked: T.boolN(),
    isCheckStateMixed: T.boolN(),
    isToggled: T.boolN(),
    isInMutuallyExclusiveGroup: T.bool(),
    isFocusable: T.bool(),
    isFocused: T.bool(),
    isButton: T.bool(),
    isLink: T.bool(),
    isHeader: T.bool(),
    isSlider: T.bool(),
    isKeyboardKey: T.bool(),
    isHidden: T.bool(),
    isTextField: T.bool(),
    isReadOnly: T.bool(),
    isObscured: T.bool(),
    isMultiline: T.bool(),
    hasImplicitScrolling: T.bool(),
    textSelection: T.TextSelectionN(),
    scrollPosition: T.doubleN(),
    scrollExtentMax: T.doubleN(),
    scrollExtentMin: T.doubleN()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(semantics.SemanticsConfiguration))));
  dart.setLibraryUri(semantics.SemanticsConfiguration, I[0]);
  dart.setFieldSignature(semantics.SemanticsConfiguration, () => dart.global.Object.setPrototypeOf({
    [_isSemanticBoundary]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    isBlockingUserActions: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    explicitChildNodes: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    isBlockingSemanticsOfPreviouslyPaintedNodes: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_hasBeenAnnotated]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_actions]: {type: T.MapOfSemanticsAction$ObjectNTovoid(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_actionsAsBits]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_onTap]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onLongPress]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onScrollLeft]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onDismiss]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onScrollRight]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onScrollUp]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onScrollDown]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onIncrease]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onDecrease]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onCopy]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onCut]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onPaste]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onShowOnScreen]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onMoveCursorForwardByCharacter]: {type: T.boolToNvoid(), isConst: false, isFinal: false},
    [_onMoveCursorBackwardByCharacter]: {type: T.boolToNvoid(), isConst: false, isFinal: false},
    [_onMoveCursorForwardByWord]: {type: T.boolToNvoid(), isConst: false, isFinal: false},
    [_onMoveCursorBackwardByWord]: {type: T.boolToNvoid(), isConst: false, isFinal: false},
    [_onSetSelection]: {type: T.TextSelectionToNvoid(), isConst: false, isFinal: false},
    [_onSetText]: {type: T.StringToNvoid(), isConst: false, isFinal: false},
    [_onDidGainAccessibilityFocus]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_onDidLoseAccessibilityFocus]: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_childConfigurationsDelegate]: {type: T.ListOfSemanticsConfigurationToNChildSemanticsConfigurationsResult(), isConst: false, isFinal: false},
    [_sortKey]: {type: T.SemanticsSortKeyN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_indexInParent]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollChildCount]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollIndex]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_platformViewId]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_maxValueLength]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_currentValueLength]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_isMergingSemanticsOfDescendants]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_customSemanticsActions]: {type: T.MapOfCustomSemanticsAction$VoidTovoid(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_identifier]: {type: T.String(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_attributedLabel]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedIncreasedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedDecreasedValue]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_attributedHint]: {type: T.AttributedString(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_tooltip]: {type: T.String(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_hintOverrides]: {type: T.SemanticsHintOverridesN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_elevation]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_thickness]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_textDirection]: {type: T.TextDirectionN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_textSelection]: {type: T.TextSelectionN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_scrollPosition]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollExtentMax]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_scrollExtentMin]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_tagsForChildren]: {type: T.SetNOfSemanticsTag(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_flags]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsConfiguration))));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  semantics.DebugSemanticsDumpOrder = class DebugSemanticsDumpOrder extends core._Enum {
    [_enumToString]() {
      return "DebugSemanticsDumpOrder." + this[_name];
    }
  };
  (semantics.DebugSemanticsDumpOrder.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(semantics.DebugSemanticsDumpOrder).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = semantics.DebugSemanticsDumpOrder.prototype;
  dart.addTypeTests(semantics.DebugSemanticsDumpOrder);
  dart.addRtiResources(semantics.DebugSemanticsDumpOrder, ["flutter__src__semantics__semantics|DebugSemanticsDumpOrder"]);
  dart.addTypeCaches(semantics.DebugSemanticsDumpOrder);
  dart.setMethodSignature(semantics.DebugSemanticsDumpOrder, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.DebugSemanticsDumpOrder))));
  dart.setLibraryUri(semantics.DebugSemanticsDumpOrder, I[0]);
  dart.setStaticFieldSignature(semantics.DebugSemanticsDumpOrder, () => ['values', 'inverseHitTest', 'traversalOrder']);
  dart.defineLazy(semantics.DebugSemanticsDumpOrder, {
    /*semantics.DebugSemanticsDumpOrder.values*/get values() {
      return C[8] || CT.C8;
    },
    /*semantics.DebugSemanticsDumpOrder.inverseHitTest*/get inverseHitTest() {
      return C[7] || CT.C7;
    },
    /*semantics.DebugSemanticsDumpOrder.traversalOrder*/get traversalOrder() {
      return C[5] || CT.C5;
    }
  }, false);
  var name$0 = dart.privateName(semantics, "SemanticsSortKey.name");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  semantics.SemanticsSortKey = class SemanticsSortKey extends Object_Diagnosticable$36$ {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    compareTo(other) {
      T.SemanticsSortKey()[_as](other);
      if (!dart.equals(dart.runtimeType(this), dart.runtimeType(other))) dart.assertFailed("Semantics sort keys can only be compared to other sort keys of the same type.", I[2], 5091, 12, "runtimeType == other.runtimeType");
      if (this.name == other.name) {
        return this.doCompare(other);
      }
      if (this.name == null && other.name != null) {
        return -1;
      } else if (this.name != null && other.name == null) {
        return 1;
      }
      return dart.nullCheck(this.name)[$compareTo](dart.nullCheck(other.name));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("name", this.name, {defaultValue: null}));
    }
  };
  (semantics.SemanticsSortKey.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[name$0] = name;
    ;
  }).prototype = semantics.SemanticsSortKey.prototype;
  dart.addTypeTests(semantics.SemanticsSortKey);
  dart.addRtiResources(semantics.SemanticsSortKey, ["flutter__src__semantics__semantics|SemanticsSortKey", "core|Comparable"]);
  dart.addTypeCaches(semantics.SemanticsSortKey);
  dart.setMethodSignature(semantics.SemanticsSortKey, () => dart.global.Object.setPrototypeOf({
    compareTo: T.ObjectNToint(),
    [$compareTo]: T.ObjectNToint()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.SemanticsSortKey))));
  dart.setLibraryUri(semantics.SemanticsSortKey, I[0]);
  dart.setFieldSignature(semantics.SemanticsSortKey, () => dart.global.Object.setPrototypeOf({name: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics.SemanticsSortKey))));
  dart.defineExtensionMethods(semantics.SemanticsSortKey, ['compareTo']);
  var order$ = dart.privateName(semantics, "OrdinalSortKey.order");
  semantics.OrdinalSortKey = class OrdinalSortKey extends semantics.SemanticsSortKey {
    get order() {
      return this[order$];
    }
    set order(value) {
      super.order = value;
    }
    static ['_#new#tearOff'](order, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new semantics.OrdinalSortKey.new(order, {name: name});
    }
    doCompare(other) {
      T.OrdinalSortKey()[_as](other);
      if (other.order === this.order) {
        return 0;
      }
      return this.order[$compareTo](other.order);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("order", this.order, {defaultValue: null}));
    }
  };
  (semantics.OrdinalSortKey.new = function(order, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[order$] = order;
    if (!(order > -1 / 0)) dart.assertFailed(null, I[2], 5154, 15, "order > double.negativeInfinity");
    if (!(order < 1 / 0)) dart.assertFailed(null, I[2], 5155, 15, "order < double.infinity");
    dart.global.Object.getPrototypeOf(semantics.OrdinalSortKey).new.call(this, {name: name});
    ;
  }).prototype = semantics.OrdinalSortKey.prototype;
  dart.addTypeTests(semantics.OrdinalSortKey);
  dart.addRtiResources(semantics.OrdinalSortKey, ["flutter__src__semantics__semantics|OrdinalSortKey"]);
  dart.addTypeCaches(semantics.OrdinalSortKey);
  dart.setMethodSignature(semantics.OrdinalSortKey, () => dart.global.Object.setPrototypeOf({doCompare: T.ObjectNToint()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics.OrdinalSortKey))));
  dart.setLibraryUri(semantics.OrdinalSortKey, I[0]);
  dart.setFieldSignature(semantics.OrdinalSortKey, () => dart.global.Object.setPrototypeOf({order: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics.OrdinalSortKey))));
  semantics.debugResetSemanticsIdCounter = function debugResetSemanticsIdCounter() {
    semantics.SemanticsNode._lastIdentifier = 0;
  };
  semantics._pointInParentCoordinates = function _pointInParentCoordinates(node, point) {
    if (node.transform == null) {
      return point;
    }
    let vector = vector_math_64.Vector3.new(point.dx, point.dy, 0.0);
    dart.nullCheck(node.transform).transform3(vector);
    return new ui.Offset.new(vector.x, vector.y);
  };
  semantics._childrenInDefaultOrder = function _childrenInDefaultOrder(children, textDirection) {
    let edges = G.JSArrayOf_BoxEdge().of([]);
    for (let child of children) {
      if (!child.rect.isFinite) dart.assertFailed(null, I[2], 3232, 12, "child.rect.isFinite");
      let childRect = child.rect.deflate(0.1);
      edges[$add](new semantics._BoxEdge.new({isLeadingEdge: true, offset: semantics._pointInParentCoordinates(child, childRect.topLeft).dy, node: child}));
      edges[$add](new semantics._BoxEdge.new({isLeadingEdge: false, offset: semantics._pointInParentCoordinates(child, childRect.bottomRight).dy, node: child}));
    }
    edges[$sort]();
    let verticalGroups = G.JSArrayOf_SemanticsSortGroup().of([]);
    let group = null;
    let depth = 0;
    for (let edge of edges) {
      if (edge.isLeadingEdge) {
        depth = depth + 1;
        group == null ? group = new semantics._SemanticsSortGroup.new({startOffset: edge.offset, textDirection: textDirection}) : null;
        group.nodes[$add](edge.node);
      } else {
        depth = depth - 1;
      }
      if (depth === 0) {
        verticalGroups[$add](dart.nullCheck(group));
        group = null;
      }
    }
    verticalGroups[$sort]();
    return verticalGroups[$expand](T.SemanticsNode(), dart.fn(group => group.sortedWithinVerticalGroup(), T._SemanticsSortGroupToListOfSemanticsNode()))[$toList]();
  };
  semantics._concatAttributedString = function _concatAttributedString(opts) {
    let thisAttributedString = opts && 'thisAttributedString' in opts ? opts.thisAttributedString : null;
    let otherAttributedString = opts && 'otherAttributedString' in opts ? opts.otherAttributedString : null;
    let thisTextDirection = opts && 'thisTextDirection' in opts ? opts.thisTextDirection : null;
    let otherTextDirection = opts && 'otherTextDirection' in opts ? opts.otherTextDirection : null;
    if (otherAttributedString.string[$isEmpty]) {
      return thisAttributedString;
    }
    if (thisTextDirection != otherTextDirection && otherTextDirection != null) {
      switch (otherTextDirection) {
        case C[9] || CT.C9:
          {
            otherAttributedString = new semantics.AttributedString.new("‫")['+'](otherAttributedString)['+'](new semantics.AttributedString.new("‬"));
            break;
          }
        case C[10] || CT.C10:
          {
            otherAttributedString = new semantics.AttributedString.new("‪")['+'](otherAttributedString)['+'](new semantics.AttributedString.new("‬"));
          }
      }
    }
    if (thisAttributedString.string[$isEmpty]) {
      return otherAttributedString;
    }
    return thisAttributedString['+'](new semantics.AttributedString.new("\n"))['+'](otherAttributedString);
  };
  dart.defineLazy(semantics, {
    /*semantics._kUnblockedUserActions*/get _kUnblockedUserActions() {
      return (ui.SemanticsAction.didGainAccessibilityFocus.index | ui.SemanticsAction.didLoseAccessibilityFocus.index) >>> 0;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/semantics/semantics.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__semantics__semantics|AttributedStringProperty":{"DiagnosticsProperty.T":"flutter__src__semantics__semantics|AttributedString","flutter__src__foundation__diagnostics|DiagnosticsProperty":["flutter__src__semantics__semantics|AttributedString"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__semantics__semantics|SemanticsData":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__text_editing|TextSelection":{"ui|TextRange":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"flutter__src__semantics__semantics|_SemanticsDiagnosticableNode":{"DiagnosticableNode.T":"flutter__src__semantics__semantics|SemanticsNode","flutter__src__foundation__diagnostics|DiagnosticableNode":["flutter__src__semantics__semantics|SemanticsNode"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticableNode":{"DiagnosticableNode.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__semantics__semantics|SemanticsNode":{"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__semantics__semantics|DebugSemanticsDumpOrder":{"core|_Enum":[],"core|Enum":[]},"flutter__src__semantics__semantics|SemanticsHintOverrides":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__semantics__semantics|SemanticsSortKey":{"Comparable.T":"flutter__src__semantics__semantics|SemanticsSortKey","core|Comparable":["flutter__src__semantics__semantics|SemanticsSortKey"],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__semantics__semantics|_TraversalSortNode":{"Comparable.T":"flutter__src__semantics__semantics|_TraversalSortNode","core|Comparable":["flutter__src__semantics__semantics|_TraversalSortNode"]},"flutter__src__semantics__semantics|SemanticsOwner":{"flutter__src__foundation__change_notifier|ChangeNotifier":[],"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ChangeNotifier":{"flutter__src__foundation__change_notifier|Listenable":[]},"typed_data|Float64List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"typed_data|_TypedFloatList":{"typed_data|TypedData":[]},"flutter__src__foundation__diagnostics|DiagnosticLevel":{"core|_Enum":[],"core|Enum":[]},"flutter__src__foundation__diagnostics|DiagnosticsTreeStyle":{"core|_Enum":[],"core|Enum":[]},"typed_data|Int32List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"flutter__src__semantics__semantics|_BoxEdge":{"Comparable.T":"flutter__src__semantics__semantics|_BoxEdge","core|Comparable":["flutter__src__semantics__semantics|_BoxEdge"]},"flutter__src__semantics__semantics|_SemanticsSortGroup":{"Comparable.T":"flutter__src__semantics__semantics|_SemanticsSortGroup","core|Comparable":["flutter__src__semantics__semantics|_SemanticsSortGroup"]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__semantics__semantics|OrdinalSortKey":{"flutter__src__semantics__semantics|SemanticsSortKey":[],"Comparable.T":"flutter__src__semantics__semantics|SemanticsSortKey","core|Comparable":["flutter__src__semantics__semantics|SemanticsSortKey"],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__semantics__semantics|SemanticsProperties":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/semantics/semantics.dart", {
    "package:flutter/src/semantics/semantics.dart": semantics
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["semantics.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/semantics/semantics.dart.lib.js"}');
  // Exports:
  return {
    src__semantics__semantics: semantics
  };
}));

//# sourceMappingURL=semantics.dart.lib.js.map

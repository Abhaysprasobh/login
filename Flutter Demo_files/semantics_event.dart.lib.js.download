// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/semantics/semantics_event.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__semantics__semantics_event_dart(dart_sdk, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var semantics_event = Object.create(dart.library);
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfAssertiveness: () => (T.ListOfAssertiveness = dart.constFn(dart_rti.findType("core|List<flutter__src__semantics__semantics_event|Assertiveness>")))(),
    Assertiveness: () => (T.Assertiveness = dart.constFn(dart_rti.findType("flutter__src__semantics__semantics_event|Assertiveness")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti.findType("@")))(),
    __ToMapOfString$dynamic: () => (T.__ToMapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>({nodeId:core|int?})")))(),
    VoidToMapOfString$dynamic: () => (T.VoidToMapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>()")))(),
    TextDirection: () => (T.TextDirection = dart.constFn(dart_rti.findType("ui|TextDirection")))()
  };
  var G = {
    IdentityMapOfString$dynamic: () => (G.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(T.String(), T.dynamic())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "polite",
        [_Enum_index]: 0
      }, semantics_event.Assertiveness.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "assertive",
        [_Enum_index]: 1
      }, semantics_event.Assertiveness.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], T.Assertiveness());
    },
    get C3() {
      return C[3] = dart.constMap(T.String(), T.dynamic(), []);
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:flutter/src/semantics/semantics_event.dart",
    "dart:core",
    "dart:ui"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  semantics_event.Assertiveness = class Assertiveness extends core._Enum {
    [_enumToString]() {
      return "Assertiveness." + this[_name];
    }
  };
  (semantics_event.Assertiveness.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(semantics_event.Assertiveness).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = semantics_event.Assertiveness.prototype;
  dart.addTypeTests(semantics_event.Assertiveness);
  dart.addRtiResources(semantics_event.Assertiveness, ["flutter__src__semantics__semantics_event|Assertiveness"]);
  dart.addTypeCaches(semantics_event.Assertiveness);
  dart.setMethodSignature(semantics_event.Assertiveness, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.Assertiveness))));
  dart.setLibraryUri(semantics_event.Assertiveness, I[0]);
  dart.setStaticFieldSignature(semantics_event.Assertiveness, () => ['values', 'polite', 'assertive']);
  dart.defineLazy(semantics_event.Assertiveness, {
    /*semantics_event.Assertiveness.values*/get values() {
      return C[0] || CT.C0;
    },
    /*semantics_event.Assertiveness.polite*/get polite() {
      return C[1] || CT.C1;
    },
    /*semantics_event.Assertiveness.assertive*/get assertive() {
      return C[2] || CT.C2;
    }
  }, false);
  var type$ = dart.privateName(semantics_event, "SemanticsEvent.type");
  semantics_event.SemanticsEvent = class SemanticsEvent extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    toMap(opts) {
      let nodeId = opts && 'nodeId' in opts ? opts.nodeId : null;
      let event = new (G.IdentityMapOfString$dynamic()).from(["type", this.type, "data", this.getDataMap()]);
      if (nodeId != null) {
        event[$_set]("nodeId", nodeId);
      }
      return event;
    }
    toString() {
      let t$362;
      let pairs = G.JSArrayOfString().of([]);
      let dataMap = this.getDataMap();
      let sortedKeys = (t$362 = dataMap[$keys][$toList](), (() => {
        t$362[$sort]();
        return t$362;
      })());
      for (let key of sortedKeys) {
        pairs[$add](key + ": " + dart.str(dataMap[$_get](key)));
      }
      return object.objectRuntimeType(this, "SemanticsEvent") + "(" + pairs[$join](", ") + ")";
    }
  };
  (semantics_event.SemanticsEvent.new = function(type) {
    this[type$] = type;
    ;
  }).prototype = semantics_event.SemanticsEvent.prototype;
  dart.addTypeTests(semantics_event.SemanticsEvent);
  dart.addRtiResources(semantics_event.SemanticsEvent, ["flutter__src__semantics__semantics_event|SemanticsEvent"]);
  dart.addTypeCaches(semantics_event.SemanticsEvent);
  dart.setMethodSignature(semantics_event.SemanticsEvent, () => dart.global.Object.setPrototypeOf({toMap: T.__ToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.SemanticsEvent))));
  dart.setLibraryUri(semantics_event.SemanticsEvent, I[0]);
  dart.setFieldSignature(semantics_event.SemanticsEvent, () => dart.global.Object.setPrototypeOf({type: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics_event.SemanticsEvent))));
  dart.defineExtensionMethods(semantics_event.SemanticsEvent, ['toString']);
  var message$ = dart.privateName(semantics_event, "AnnounceSemanticsEvent.message");
  var textDirection$ = dart.privateName(semantics_event, "AnnounceSemanticsEvent.textDirection");
  var assertiveness$ = dart.privateName(semantics_event, "AnnounceSemanticsEvent.assertiveness");
  semantics_event.AnnounceSemanticsEvent = class AnnounceSemanticsEvent extends semantics_event.SemanticsEvent {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get assertiveness() {
      return this[assertiveness$];
    }
    set assertiveness(value) {
      super.assertiveness = value;
    }
    static ['_#new#tearOff'](message, textDirection, opts) {
      let assertiveness = opts && 'assertiveness' in opts ? opts.assertiveness : C[1] || CT.C1;
      return new semantics_event.AnnounceSemanticsEvent.new(message, textDirection, {assertiveness: assertiveness});
    }
    getDataMap() {
      return (() => {
        let t$362 = new (G.IdentityMapOfString$dynamic()).new();
        t$362[$_set]("message", this.message);
        t$362[$_set]("textDirection", this.textDirection.index);
        if (this.assertiveness !== semantics_event.Assertiveness.polite) t$362[$_set]("assertiveness", this.assertiveness.index);
        return t$362;
      })();
    }
  };
  (semantics_event.AnnounceSemanticsEvent.new = function(message, textDirection, opts) {
    let assertiveness = opts && 'assertiveness' in opts ? opts.assertiveness : C[1] || CT.C1;
    this[message$] = message;
    this[textDirection$] = textDirection;
    this[assertiveness$] = assertiveness;
    dart.global.Object.getPrototypeOf(semantics_event.AnnounceSemanticsEvent).new.call(this, "announce");
    ;
  }).prototype = semantics_event.AnnounceSemanticsEvent.prototype;
  dart.addTypeTests(semantics_event.AnnounceSemanticsEvent);
  dart.addRtiResources(semantics_event.AnnounceSemanticsEvent, ["flutter__src__semantics__semantics_event|AnnounceSemanticsEvent"]);
  dart.addTypeCaches(semantics_event.AnnounceSemanticsEvent);
  dart.setMethodSignature(semantics_event.AnnounceSemanticsEvent, () => dart.global.Object.setPrototypeOf({getDataMap: T.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.AnnounceSemanticsEvent))));
  dart.setLibraryUri(semantics_event.AnnounceSemanticsEvent, I[0]);
  dart.setFieldSignature(semantics_event.AnnounceSemanticsEvent, () => dart.global.Object.setPrototypeOf({
    message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    textDirection: {type: T.TextDirection(), isConst: false, isFinal: true, libraryUri: I[2]},
    assertiveness: {type: T.Assertiveness(), isConst: false, isFinal: true, libraryUri: I[0]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(semantics_event.AnnounceSemanticsEvent))));
  var message$0 = dart.privateName(semantics_event, "TooltipSemanticsEvent.message");
  semantics_event.TooltipSemanticsEvent = class TooltipSemanticsEvent extends semantics_event.SemanticsEvent {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new semantics_event.TooltipSemanticsEvent.new(message);
    }
    getDataMap() {
      return new (G.IdentityMapOfString$dynamic()).from(["message", this.message]);
    }
  };
  (semantics_event.TooltipSemanticsEvent.new = function(message) {
    this[message$0] = message;
    dart.global.Object.getPrototypeOf(semantics_event.TooltipSemanticsEvent).new.call(this, "tooltip");
    ;
  }).prototype = semantics_event.TooltipSemanticsEvent.prototype;
  dart.addTypeTests(semantics_event.TooltipSemanticsEvent);
  dart.addRtiResources(semantics_event.TooltipSemanticsEvent, ["flutter__src__semantics__semantics_event|TooltipSemanticsEvent"]);
  dart.addTypeCaches(semantics_event.TooltipSemanticsEvent);
  dart.setMethodSignature(semantics_event.TooltipSemanticsEvent, () => dart.global.Object.setPrototypeOf({getDataMap: T.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.TooltipSemanticsEvent))));
  dart.setLibraryUri(semantics_event.TooltipSemanticsEvent, I[0]);
  dart.setFieldSignature(semantics_event.TooltipSemanticsEvent, () => dart.global.Object.setPrototypeOf({message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(semantics_event.TooltipSemanticsEvent))));
  semantics_event.LongPressSemanticsEvent = class LongPressSemanticsEvent extends semantics_event.SemanticsEvent {
    static ['_#new#tearOff']() {
      return new semantics_event.LongPressSemanticsEvent.new();
    }
    getDataMap() {
      return C[3] || CT.C3;
    }
  };
  (semantics_event.LongPressSemanticsEvent.new = function() {
    dart.global.Object.getPrototypeOf(semantics_event.LongPressSemanticsEvent).new.call(this, "longPress");
    ;
  }).prototype = semantics_event.LongPressSemanticsEvent.prototype;
  dart.addTypeTests(semantics_event.LongPressSemanticsEvent);
  dart.addRtiResources(semantics_event.LongPressSemanticsEvent, ["flutter__src__semantics__semantics_event|LongPressSemanticsEvent"]);
  dart.addTypeCaches(semantics_event.LongPressSemanticsEvent);
  dart.setMethodSignature(semantics_event.LongPressSemanticsEvent, () => dart.global.Object.setPrototypeOf({getDataMap: T.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.LongPressSemanticsEvent))));
  dart.setLibraryUri(semantics_event.LongPressSemanticsEvent, I[0]);
  semantics_event.TapSemanticEvent = class TapSemanticEvent extends semantics_event.SemanticsEvent {
    static ['_#new#tearOff']() {
      return new semantics_event.TapSemanticEvent.new();
    }
    getDataMap() {
      return C[3] || CT.C3;
    }
  };
  (semantics_event.TapSemanticEvent.new = function() {
    dart.global.Object.getPrototypeOf(semantics_event.TapSemanticEvent).new.call(this, "tap");
    ;
  }).prototype = semantics_event.TapSemanticEvent.prototype;
  dart.addTypeTests(semantics_event.TapSemanticEvent);
  dart.addRtiResources(semantics_event.TapSemanticEvent, ["flutter__src__semantics__semantics_event|TapSemanticEvent"]);
  dart.addTypeCaches(semantics_event.TapSemanticEvent);
  dart.setMethodSignature(semantics_event.TapSemanticEvent, () => dart.global.Object.setPrototypeOf({getDataMap: T.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.TapSemanticEvent))));
  dart.setLibraryUri(semantics_event.TapSemanticEvent, I[0]);
  semantics_event.FocusSemanticEvent = class FocusSemanticEvent extends semantics_event.SemanticsEvent {
    static ['_#new#tearOff']() {
      return new semantics_event.FocusSemanticEvent.new();
    }
    getDataMap() {
      return C[3] || CT.C3;
    }
  };
  (semantics_event.FocusSemanticEvent.new = function() {
    dart.global.Object.getPrototypeOf(semantics_event.FocusSemanticEvent).new.call(this, "focus");
    ;
  }).prototype = semantics_event.FocusSemanticEvent.prototype;
  dart.addTypeTests(semantics_event.FocusSemanticEvent);
  dart.addRtiResources(semantics_event.FocusSemanticEvent, ["flutter__src__semantics__semantics_event|FocusSemanticEvent"]);
  dart.addTypeCaches(semantics_event.FocusSemanticEvent);
  dart.setMethodSignature(semantics_event.FocusSemanticEvent, () => dart.global.Object.setPrototypeOf({getDataMap: T.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(semantics_event.FocusSemanticEvent))));
  dart.setLibraryUri(semantics_event.FocusSemanticEvent, I[0]);
  dart.moduleConstCaches.set("packages/flutter/src/semantics/semantics_event.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__semantics__semantics_event|Assertiveness":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"flutter__src__semantics__semantics_event|AnnounceSemanticsEvent":{"flutter__src__semantics__semantics_event|SemanticsEvent":[]},"flutter__src__semantics__semantics_event|TooltipSemanticsEvent":{"flutter__src__semantics__semantics_event|SemanticsEvent":[]},"flutter__src__semantics__semantics_event|LongPressSemanticsEvent":{"flutter__src__semantics__semantics_event|SemanticsEvent":[]},"flutter__src__semantics__semantics_event|TapSemanticEvent":{"flutter__src__semantics__semantics_event|SemanticsEvent":[]},"flutter__src__semantics__semantics_event|FocusSemanticEvent":{"flutter__src__semantics__semantics_event|SemanticsEvent":[]}}'));
  dart.trackLibraries("packages/flutter/src/semantics/semantics_event.dart", {
    "package:flutter/src/semantics/semantics_event.dart": semantics_event
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["semantics_event.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuBA;;;;;;;;;;;;;MATK,oCAAM;;;MAET,oCAAM;;;MAMN,uCAAS;;;;;;IAmBI;;;;;;;UAOqB;AACL,kBAAyB,4CAClD,QAAQ,WACR,QAAQ;AAEV,UAAI,MAAM;AACH,QAAL,KAAK,QAAC,UAAY,MAAM;;AAG1B,YAAO,MAAK;IACd;;;AAOqB,kBAAgB;AACR,oBAAU;AAClB,gCAAa,AAAQ,AAAK,OAAN,oBAAM;AAAU;;;AACvD,eAAkB,MAAO,WAAU;AAC3B,QAAN,KAAK,OAAO,AAAqB,GAAlB,mBAAI,AAAO,OAAA,QAAC,GAAG;;AAEhC,YAAU,AAAgE,0BAA9C,MAAM,oBAAkB,MAAG,AAAM,KAAD,QAAM,QAAM;IAC1E;;;IAtC0B;;EAAK;;;;;;;;;;;;IA0DlB;;;;;;IAGO;;;;;;IAQA;;;;;;;;;;;AAIlB,YAAyB;;AACd,qBAAT,WAAW;AACI,qBAAf,iBAAiB,AAAc;AAC/B,YAAI,uBAA+B,sCAClB,aAAf,iBAAiB,AAAc;;;IAErC;;yDAzBkC,SAAc;QAAqB;IAAnC;IAAc;IAAqB;AACjE,6FAAM;;EAAW;;;;;;;;;;;;;IAmCR;;;;;;;;;;AAIX,YAAwB,6CACtB,WAAW;IAEf;;;IAViC;AAAW,4FAAM;;EAAU;;;;;;;;;;;;AAsBvB;IAAyB;;;AAH5B,8FAAM;;EAAY;;;;;;;;;;;AAef;IAAyB;;;AAHnC,uFAAM;;EAAM;;;;;;;;;;;AAsEF;IAAyB;;;AAHjC,yFAAM;;EAAQ","file":"../../../../../../../../F:/packages/flutter/src/semantics/semantics_event.dart.lib.js"}');
  // Exports:
  return {
    src__semantics__semantics_event: semantics_event
  };
}));

//# sourceMappingURL=semantics_event.dart.lib.js.map

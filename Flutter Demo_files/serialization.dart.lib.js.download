// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/serialization.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__foundation__serialization_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var serialization = Object.create(dart.library);
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $length = dartx.length;
  var $_set = dartx._set;
  var $setRange = dartx.setRange;
  var $setUint16 = dartx.setUint16;
  var $setUint32 = dartx.setUint32;
  var $setInt32 = dartx.setInt32;
  var $setInt64 = dartx.setInt64;
  var $setFloat64 = dartx.setFloat64;
  var $offsetInBytes = dartx.offsetInBytes;
  var $modulo = dartx['%'];
  var $runtimeType = dartx.runtimeType;
  var $asByteData = dartx.asByteData;
  var $lengthInBytes = dartx.lengthInBytes;
  var $getUint8 = dartx.getUint8;
  var $getUint16 = dartx.getUint16;
  var $getUint32 = dartx.getUint32;
  var $getInt32 = dartx.getInt32;
  var $getInt64 = dartx.getInt64;
  var $getFloat64 = dartx.getFloat64;
  var $asInt32List = dartx.asInt32List;
  var $asInt64List = dartx.asInt64List;
  var $asFloat32List = dartx.asFloat32List;
  var $asFloat64List = dartx.asFloat64List;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    __ToWriteBuffer: () => (T.__ToWriteBuffer = dart.constFn(dart_rti.findType("flutter__src__foundation__serialization|WriteBuffer({startCapacity:core|int})")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    Uint8ListTovoid: () => (T.Uint8ListTovoid = dart.constFn(dart_rti.findType("~(typed_data|Uint8List)")))(),
    Uint8ListAndintAndintNTovoid: () => (T.Uint8ListAndintAndintNTovoid = dart.constFn(dart_rti.findType("~(typed_data|Uint8List[core|int,core|int?])")))(),
    intNTovoid: () => (T.intNTovoid = dart.constFn(dart_rti.findType("~([core|int?])")))(),
    int__Tovoid: () => (T.int__Tovoid = dart.constFn(dart_rti.findType("~(core|int{endian:typed_data|Endian?})")))(),
    double__Tovoid: () => (T.double__Tovoid = dart.constFn(dart_rti.findType("~(core|double{endian:typed_data|Endian?})")))(),
    Int32ListTovoid: () => (T.Int32ListTovoid = dart.constFn(dart_rti.findType("~(typed_data|Int32List)")))(),
    Int64ListTovoid: () => (T.Int64ListTovoid = dart.constFn(dart_rti.findType("~(typed_data|Int64List)")))(),
    Float32ListTovoid: () => (T.Float32ListTovoid = dart.constFn(dart_rti.findType("~(typed_data|Float32List)")))(),
    Float64ListTovoid: () => (T.Float64ListTovoid = dart.constFn(dart_rti.findType("~(typed_data|Float64List)")))(),
    VoidToByteData: () => (T.VoidToByteData = dart.constFn(dart_rti.findType("typed_data|ByteData()")))(),
    Uint8List: () => (T.Uint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ByteData: () => (T.ByteData = dart.constFn(dart_rti.findType("typed_data|ByteData")))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart_rti.findType("core|int()")))(),
    __Toint: () => (T.__Toint = dart.constFn(dart_rti.findType("core|int({endian:typed_data|Endian?})")))(),
    __Todouble: () => (T.__Todouble = dart.constFn(dart_rti.findType("core|double({endian:typed_data|Endian?})")))(),
    intToUint8List: () => (T.intToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List(core|int)")))(),
    intToInt32List: () => (T.intToInt32List = dart.constFn(dart_rti.findType("typed_data|Int32List(core|int)")))(),
    intToInt64List: () => (T.intToInt64List = dart.constFn(dart_rti.findType("typed_data|Int64List(core|int)")))(),
    intToFloat32List: () => (T.intToFloat32List = dart.constFn(dart_rti.findType("typed_data|Float32List(core|int)")))(),
    intToFloat64List: () => (T.intToFloat64List = dart.constFn(dart_rti.findType("typed_data|Float64List(core|int)")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/serialization.dart",
    "package:flutter/src/foundation/serialization.dart",
    "dart:typed_data",
    "dart:core"
  ];
  var _currentSize = dart.privateName(serialization, "_currentSize");
  var _isDone = dart.privateName(serialization, "_isDone");
  var _buffer$ = dart.privateName(serialization, "_buffer");
  var _eightBytes$ = dart.privateName(serialization, "_eightBytes");
  var _eightBytesAsList$ = dart.privateName(serialization, "_eightBytesAsList");
  var _resize = dart.privateName(serialization, "_resize");
  var _add = dart.privateName(serialization, "_add");
  var _append = dart.privateName(serialization, "_append");
  var _addAll = dart.privateName(serialization, "_addAll");
  var _alignTo = dart.privateName(serialization, "_alignTo");
  serialization.WriteBuffer = class WriteBuffer extends core.Object {
    static new(opts) {
      let startCapacity = opts && 'startCapacity' in opts ? opts.startCapacity : 8;
      if (!(startCapacity > 0)) dart.assertFailed(null, I[0], 22, 12, "startCapacity > 0");
      let eightBytes = _native_typed_data.NativeByteData.new(8);
      let eightBytesAsList = eightBytes[$buffer][$asUint8List]();
      return new serialization.WriteBuffer.__(_native_typed_data.NativeUint8List.new(startCapacity), eightBytes, eightBytesAsList);
    }
    static ['_#new#tearOff'](opts) {
      let startCapacity = opts && 'startCapacity' in opts ? opts.startCapacity : 8;
      return serialization.WriteBuffer.new({startCapacity: startCapacity});
    }
    static ['_#_#tearOff'](_buffer, _eightBytes, _eightBytesAsList) {
      return new serialization.WriteBuffer.__(_buffer, _eightBytes, _eightBytesAsList);
    }
    [_add](byte) {
      if (this[_currentSize] === this[_buffer$][$length]) {
        this[_resize]();
      }
      this[_buffer$][$_set](this[_currentSize], byte);
      this[_currentSize] = this[_currentSize] + 1;
    }
    [_append](other) {
      let newSize = this[_currentSize] + other[$length];
      if (newSize >= this[_buffer$][$length]) {
        this[_resize](newSize);
      }
      this[_buffer$][$setRange](this[_currentSize], newSize, other);
      this[_currentSize] = this[_currentSize] + other[$length];
    }
    [_addAll](data, start = 0, end = null) {
      let t$360;
      let newEnd = (t$360 = end, t$360 == null ? this[_eightBytesAsList$][$length] : t$360);
      let newSize = this[_currentSize] + (newEnd - start);
      if (newSize >= this[_buffer$][$length]) {
        this[_resize](newSize);
      }
      this[_buffer$][$setRange](this[_currentSize], newSize, data);
      this[_currentSize] = newSize;
    }
    [_resize](requiredLength = null) {
      let t$360;
      let doubleLength = this[_buffer$][$length] * 2;
      let newLength = math.max(T.int(), (t$360 = requiredLength, t$360 == null ? 0 : t$360), doubleLength);
      let newBuffer = _native_typed_data.NativeUint8List.new(newLength);
      newBuffer[$setRange](0, this[_buffer$][$length], this[_buffer$]);
      this[_buffer$] = newBuffer;
    }
    putUint8(byte) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 74, 12, "!_isDone");
      this[_add](byte);
    }
    putUint16(value, opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 80, 12, "!_isDone");
      this[_eightBytes$][$setUint16](0, value, (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_addAll](this[_eightBytesAsList$], 0, 2);
    }
    putUint32(value, opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 87, 12, "!_isDone");
      this[_eightBytes$][$setUint32](0, value, (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_addAll](this[_eightBytesAsList$], 0, 4);
    }
    putInt32(value, opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 94, 12, "!_isDone");
      this[_eightBytes$][$setInt32](0, value, (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_addAll](this[_eightBytesAsList$], 0, 4);
    }
    putInt64(value, opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 101, 12, "!_isDone");
      this[_eightBytes$][$setInt64](0, value, (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_addAll](this[_eightBytesAsList$], 0, 8);
    }
    putFloat64(value, opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 108, 12, "!_isDone");
      this[_alignTo](8);
      this[_eightBytes$][$setFloat64](0, value, (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_addAll](this[_eightBytesAsList$]);
    }
    putUint8List(list) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 116, 12, "!_isDone");
      this[_append](list);
    }
    putInt32List(list) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 122, 12, "!_isDone");
      this[_alignTo](4);
      this[_append](list[$buffer][$asUint8List](list[$offsetInBytes], 4 * list[$length]));
    }
    putInt64List(list) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 129, 12, "!_isDone");
      this[_alignTo](8);
      this[_append](list[$buffer][$asUint8List](list[$offsetInBytes], 8 * list[$length]));
    }
    putFloat32List(list) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 136, 12, "!_isDone");
      this[_alignTo](4);
      this[_append](list[$buffer][$asUint8List](list[$offsetInBytes], 4 * list[$length]));
    }
    putFloat64List(list) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 143, 12, "!_isDone");
      this[_alignTo](8);
      this[_append](list[$buffer][$asUint8List](list[$offsetInBytes], 8 * list[$length]));
    }
    [_alignTo](alignment) {
      if (!!this[_isDone]) dart.assertFailed(null, I[0], 149, 12, "!_isDone");
      let mod = this[_currentSize][$modulo](alignment);
      if (mod !== 0) {
        this[_addAll](serialization.WriteBuffer._zeroBuffer, 0, alignment - mod);
      }
    }
    done() {
      if (this[_isDone]) {
        dart.throw(new core.StateError.new("done() must not be called more than once on the same " + dart.str(dart.runtimeType(this)) + "."));
      }
      let result = this[_buffer$][$buffer][$asByteData](0, this[_currentSize]);
      this[_buffer$] = _native_typed_data.NativeUint8List.new(0);
      this[_isDone] = true;
      return result;
    }
  };
  (serialization.WriteBuffer.__ = function(_buffer, _eightBytes, _eightBytesAsList) {
    this[_currentSize] = 0;
    this[_isDone] = false;
    this[_buffer$] = _buffer;
    this[_eightBytes$] = _eightBytes;
    this[_eightBytesAsList$] = _eightBytesAsList;
    ;
  }).prototype = serialization.WriteBuffer.prototype;
  dart.addTypeTests(serialization.WriteBuffer);
  dart.addRtiResources(serialization.WriteBuffer, ["flutter__src__foundation__serialization|WriteBuffer"]);
  dart.addTypeCaches(serialization.WriteBuffer);
  dart.setMethodSignature(serialization.WriteBuffer, () => dart.global.Object.setPrototypeOf({
    [_add]: T.intTovoid(),
    [_append]: T.Uint8ListTovoid(),
    [_addAll]: T.Uint8ListAndintAndintNTovoid(),
    [_resize]: T.intNTovoid(),
    putUint8: T.intTovoid(),
    putUint16: T.int__Tovoid(),
    putUint32: T.int__Tovoid(),
    putInt32: T.int__Tovoid(),
    putInt64: T.int__Tovoid(),
    putFloat64: T.double__Tovoid(),
    putUint8List: T.Uint8ListTovoid(),
    putInt32List: T.Int32ListTovoid(),
    putInt64List: T.Int64ListTovoid(),
    putFloat32List: T.Float32ListTovoid(),
    putFloat64List: T.Float64ListTovoid(),
    [_alignTo]: T.intTovoid(),
    done: T.VoidToByteData()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(serialization.WriteBuffer))));
  dart.setStaticMethodSignature(serialization.WriteBuffer, () => ['new']);
  dart.setLibraryUri(serialization.WriteBuffer, I[1]);
  dart.setFieldSignature(serialization.WriteBuffer, () => dart.global.Object.setPrototypeOf({
    [_buffer$]: {type: T.Uint8List(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_currentSize]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_isDone]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_eightBytes$]: {type: T.ByteData(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_eightBytesAsList$]: {type: T.Uint8List(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(serialization.WriteBuffer))));
  dart.setStaticFieldSignature(serialization.WriteBuffer, () => ['_zeroBuffer']);
  dart.defineLazy(serialization.WriteBuffer, {
    /*serialization.WriteBuffer._zeroBuffer*/get _zeroBuffer() {
      return _native_typed_data.NativeUint8List.new(8);
    }
  }, false);
  var data$ = dart.privateName(serialization, "ReadBuffer.data");
  var _position = dart.privateName(serialization, "_position");
  serialization.ReadBuffer = class ReadBuffer extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static ['_#new#tearOff'](data) {
      return new serialization.ReadBuffer.new(data);
    }
    get hasRemaining() {
      return this[_position] < this.data[$lengthInBytes];
    }
    getUint8() {
      let t$360;
      return this.data[$getUint8]((t$360 = this[_position], this[_position] = t$360 + 1, t$360));
    }
    getUint16(opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      let value = this.data[$getUint16](this[_position], (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_position] = this[_position] + 2;
      return value;
    }
    getUint32(opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      let value = this.data[$getUint32](this[_position], (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_position] = this[_position] + 4;
      return value;
    }
    getInt32(opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      let value = this.data[$getInt32](this[_position], (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_position] = this[_position] + 4;
      return value;
    }
    getInt64(opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      let value = this.data[$getInt64](this[_position], (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_position] = this[_position] + 8;
      return value;
    }
    getFloat64(opts) {
      let t$360;
      let endian = opts && 'endian' in opts ? opts.endian : null;
      this[_alignTo](8);
      let value = this.data[$getFloat64](this[_position], (t$360 = endian, t$360 == null ? typed_data.Endian.host : t$360));
      this[_position] = this[_position] + 8;
      return value;
    }
    getUint8List(length) {
      let list = this.data[$buffer][$asUint8List](this.data[$offsetInBytes] + this[_position], length);
      this[_position] = this[_position] + length;
      return list;
    }
    getInt32List(length) {
      this[_alignTo](4);
      let list = this.data[$buffer][$asInt32List](this.data[$offsetInBytes] + this[_position], length);
      this[_position] = this[_position] + 4 * length;
      return list;
    }
    getInt64List(length) {
      this[_alignTo](8);
      let list = this.data[$buffer][$asInt64List](this.data[$offsetInBytes] + this[_position], length);
      this[_position] = this[_position] + 8 * length;
      return list;
    }
    getFloat32List(length) {
      this[_alignTo](4);
      let list = this.data[$buffer][$asFloat32List](this.data[$offsetInBytes] + this[_position], length);
      this[_position] = this[_position] + 4 * length;
      return list;
    }
    getFloat64List(length) {
      this[_alignTo](8);
      let list = this.data[$buffer][$asFloat64List](this.data[$offsetInBytes] + this[_position], length);
      this[_position] = this[_position] + 8 * length;
      return list;
    }
    [_alignTo](alignment) {
      let mod = this[_position][$modulo](alignment);
      if (mod !== 0) {
        this[_position] = this[_position] + (alignment - mod);
      }
    }
  };
  (serialization.ReadBuffer.new = function(data) {
    this[_position] = 0;
    this[data$] = data;
    ;
  }).prototype = serialization.ReadBuffer.prototype;
  dart.addTypeTests(serialization.ReadBuffer);
  dart.addRtiResources(serialization.ReadBuffer, ["flutter__src__foundation__serialization|ReadBuffer"]);
  dart.addTypeCaches(serialization.ReadBuffer);
  dart.setMethodSignature(serialization.ReadBuffer, () => dart.global.Object.setPrototypeOf({
    getUint8: T.VoidToint(),
    getUint16: T.__Toint(),
    getUint32: T.__Toint(),
    getInt32: T.__Toint(),
    getInt64: T.__Toint(),
    getFloat64: T.__Todouble(),
    getUint8List: T.intToUint8List(),
    getInt32List: T.intToInt32List(),
    getInt64List: T.intToInt64List(),
    getFloat32List: T.intToFloat32List(),
    getFloat64List: T.intToFloat64List(),
    [_alignTo]: T.intTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(serialization.ReadBuffer))));
  dart.setGetterSignature(serialization.ReadBuffer, () => dart.global.Object.setPrototypeOf({hasRemaining: T.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(serialization.ReadBuffer))));
  dart.setLibraryUri(serialization.ReadBuffer, I[1]);
  dart.setFieldSignature(serialization.ReadBuffer, () => dart.global.Object.setPrototypeOf({
    data: {type: T.ByteData(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_position]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(serialization.ReadBuffer))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"typed_data|Uint8List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"typed_data|Int32List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|Int64List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|Float32List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"typed_data|_TypedFloatList":{"typed_data|TypedData":[]},"typed_data|Float64List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"typed_data|ByteData":{"typed_data|TypedData":[]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/serialization.dart", {
    "package:flutter/src/foundation/serialization.dart": serialization
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["serialization.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/foundation/serialization.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__serialization: serialization
  };
}));

//# sourceMappingURL=serialization.dart.lib.js.map

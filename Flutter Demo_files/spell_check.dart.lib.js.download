// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/services/spell_check.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__services__spell_check_dart(dart_sdk, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  var spell_check = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $sublist = dartx.sublist;
  var $addAll = dartx.addAll;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    SuggestionSpan: () => (T.SuggestionSpan = dart.constFn(dart_rti.findType("flutter__src__services__spell_check|SuggestionSpan")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    TextRange: () => (T.TextRange = dart.constFn(dart_rti.findType("ui|TextRange")))(),
    ListOfString: () => (T.ListOfString = dart.constFn(dart_rti.findType("core|List<core|String>")))(),
    SpellCheckResults: () => (T.SpellCheckResults = dart.constFn(dart_rti.findType("flutter__src__services__spell_check|SpellCheckResults")))(),
    ListOfSuggestionSpan: () => (T.ListOfSuggestionSpan = dart.constFn(dart_rti.findType("core|List<flutter__src__services__spell_check|SuggestionSpan>")))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti.findType("@")))(),
    List: () => (T.List = dart.constFn(dart_rti.findType("core|List<@>")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    Map: () => (T.Map = dart.constFn(dart_rti.findType("core|Map<@,@>")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    ListNOfSuggestionSpan: () => (T.ListNOfSuggestionSpan = dart.constFn(dart_rti.findType("core|List<flutter__src__services__spell_check|SuggestionSpan>?")))(),
    MethodChannel: () => (T.MethodChannel = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|MethodChannel")))(),
    ListOfSuggestionSpanAndListOfSuggestionSpanToListOfSuggestionSpan: () => (T.ListOfSuggestionSpanAndListOfSuggestionSpanToListOfSuggestionSpan = dart.constFn(dart_rti.findType("core|List<flutter__src__services__spell_check|SuggestionSpan>(core|List<flutter__src__services__spell_check|SuggestionSpan>,core|List<flutter__src__services__spell_check|SuggestionSpan>)")))(),
    LocaleAndStringToFutureOfListNOfSuggestionSpan: () => (T.LocaleAndStringToFutureOfListNOfSuggestionSpan = dart.constFn(dart_rti.findType("async|Future<core|List<flutter__src__services__spell_check|SuggestionSpan>?>(ui|Locale,core|String)")))(),
    SpellCheckResultsN: () => (T.SpellCheckResultsN = dart.constFn(dart_rti.findType("flutter__src__services__spell_check|SpellCheckResults?")))(),
    MethodChannelN: () => (T.MethodChannelN = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|MethodChannel?")))()
  };
  var G = {
    JSArrayOfSuggestionSpan: () => (G.JSArrayOfSuggestionSpan = dart.constFn(_interceptors.JSArray$(T.SuggestionSpan())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))(),
    LinkedHashMapOfString$dynamic: () => (G.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(T.String(), T.dynamic())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/services/spell_check.dart",
    "dart:ui",
    "dart:core",
    "package:flutter/src/services/platform_channel.dart"
  ];
  var range$ = dart.privateName(spell_check, "SuggestionSpan.range");
  var suggestions$ = dart.privateName(spell_check, "SuggestionSpan.suggestions");
  var _is = dart.privateName(dart_rti, "_is");
  spell_check.SuggestionSpan = class SuggestionSpan extends core.Object {
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    get suggestions() {
      return this[suggestions$];
    }
    set suggestions(value) {
      super.suggestions = value;
    }
    static ['_#new#tearOff'](range, suggestions) {
      return new spell_check.SuggestionSpan.new(range, suggestions);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T.SuggestionSpan()[_is](other) && other.range.start === this.range.start && other.range.end === this.range.end && collections.listEquals(T.String(), other.suggestions, this.suggestions);
    }
    get hashCode() {
      return core.Object.hash(this.range.start, this.range.end, core.Object.hashAll(this.suggestions));
    }
  };
  (spell_check.SuggestionSpan.new = function(range, suggestions) {
    this[range$] = range;
    this[suggestions$] = suggestions;
    ;
  }).prototype = spell_check.SuggestionSpan.prototype;
  dart.addTypeTests(spell_check.SuggestionSpan);
  dart.addRtiResources(spell_check.SuggestionSpan, ["flutter__src__services__spell_check|SuggestionSpan"]);
  dart.addTypeCaches(spell_check.SuggestionSpan);
  dart.setLibraryUri(spell_check.SuggestionSpan, I[0]);
  dart.setFieldSignature(spell_check.SuggestionSpan, () => dart.global.Object.setPrototypeOf({
    range: {type: T.TextRange(), isConst: false, isFinal: true, libraryUri: I[1]},
    suggestions: {type: T.ListOfString(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.SuggestionSpan))));
  dart.defineExtensionMethods(spell_check.SuggestionSpan, ['_equals']);
  dart.defineExtensionAccessors(spell_check.SuggestionSpan, ['hashCode']);
  var spellCheckedText$ = dart.privateName(spell_check, "SpellCheckResults.spellCheckedText");
  var suggestionSpans$ = dart.privateName(spell_check, "SpellCheckResults.suggestionSpans");
  spell_check.SpellCheckResults = class SpellCheckResults extends core.Object {
    get spellCheckedText() {
      return this[spellCheckedText$];
    }
    set spellCheckedText(value) {
      super.spellCheckedText = value;
    }
    get suggestionSpans() {
      return this[suggestionSpans$];
    }
    set suggestionSpans(value) {
      super.suggestionSpans = value;
    }
    static ['_#new#tearOff'](spellCheckedText, suggestionSpans) {
      return new spell_check.SpellCheckResults.new(spellCheckedText, suggestionSpans);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T.SpellCheckResults()[_is](other) && other.spellCheckedText === this.spellCheckedText && collections.listEquals(T.SuggestionSpan(), other.suggestionSpans, this.suggestionSpans);
    }
    get hashCode() {
      return core.Object.hash(this.spellCheckedText, core.Object.hashAll(this.suggestionSpans));
    }
  };
  (spell_check.SpellCheckResults.new = function(spellCheckedText, suggestionSpans) {
    this[spellCheckedText$] = spellCheckedText;
    this[suggestionSpans$] = suggestionSpans;
    ;
  }).prototype = spell_check.SpellCheckResults.prototype;
  dart.addTypeTests(spell_check.SpellCheckResults);
  dart.addRtiResources(spell_check.SpellCheckResults, ["flutter__src__services__spell_check|SpellCheckResults"]);
  dart.addTypeCaches(spell_check.SpellCheckResults);
  dart.setLibraryUri(spell_check.SpellCheckResults, I[0]);
  dart.setFieldSignature(spell_check.SpellCheckResults, () => dart.global.Object.setPrototypeOf({
    spellCheckedText: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    suggestionSpans: {type: T.ListOfSuggestionSpan(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.SpellCheckResults))));
  dart.defineExtensionMethods(spell_check.SpellCheckResults, ['_equals']);
  dart.defineExtensionAccessors(spell_check.SpellCheckResults, ['hashCode']);
  spell_check.SpellCheckService = class SpellCheckService extends core.Object {};
  (spell_check.SpellCheckService.new = function() {
    ;
  }).prototype = spell_check.SpellCheckService.prototype;
  dart.addTypeTests(spell_check.SpellCheckService);
  dart.addRtiResources(spell_check.SpellCheckService, ["flutter__src__services__spell_check|SpellCheckService"]);
  dart.addTypeCaches(spell_check.SpellCheckService);
  dart.setLibraryUri(spell_check.SpellCheckService, I[0]);
  var lastSavedResults = dart.privateName(spell_check, "DefaultSpellCheckService.lastSavedResults");
  var __DefaultSpellCheckService_spellCheckChannel = dart.privateName(spell_check, "_#DefaultSpellCheckService#spellCheckChannel");
  var _as = dart.privateName(dart_rti, "_as");
  spell_check.DefaultSpellCheckService = class DefaultSpellCheckService extends core.Object {
    get lastSavedResults() {
      return this[lastSavedResults];
    }
    set lastSavedResults(value) {
      this[lastSavedResults] = value;
    }
    static ['_#new#tearOff']() {
      return new spell_check.DefaultSpellCheckService.new();
    }
    get spellCheckChannel() {
      let t$360;
      t$360 = this[__DefaultSpellCheckService_spellCheckChannel];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("spellCheckChannel")) : t$360;
    }
    set spellCheckChannel(spellCheckChannel$35param) {
      this[__DefaultSpellCheckService_spellCheckChannel] = spellCheckChannel$35param;
    }
    static mergeResults(oldResults, newResults) {
      let mergedResults = G.JSArrayOfSuggestionSpan().of([]);
      let oldSpan = null;
      let newSpan = null;
      let oldSpanPointer = 0;
      let newSpanPointer = 0;
      while (oldSpanPointer < oldResults[$length] && newSpanPointer < newResults[$length]) {
        oldSpan = oldResults[$_get](oldSpanPointer);
        newSpan = newResults[$_get](newSpanPointer);
        if (oldSpan.range.start === newSpan.range.start) {
          mergedResults[$add](oldSpan);
          oldSpanPointer = oldSpanPointer + 1;
          newSpanPointer = newSpanPointer + 1;
        } else {
          if (oldSpan.range.start < newSpan.range.start) {
            mergedResults[$add](oldSpan);
            oldSpanPointer = oldSpanPointer + 1;
          } else {
            mergedResults[$add](newSpan);
            newSpanPointer = newSpanPointer + 1;
          }
        }
      }
      mergedResults[$addAll](oldResults[$sublist](oldSpanPointer));
      mergedResults[$addAll](newResults[$sublist](newSpanPointer));
      return mergedResults;
    }
    fetchSpellCheckSuggestions(locale, text) {
      return async.async(T.ListNOfSuggestionSpan(), (function* fetchSpellCheckSuggestions() {
        let rawResults = null;
        let languageTag = locale.toLanguageTag();
        try {
          rawResults = T.List()[_as](yield this.spellCheckChannel.invokeMethod(T.dynamic(), "SpellCheck.initiateSpellCheck", G.JSArrayOfString().of([languageTag, text])));
        } catch (t$36$35e) {
          let e = dart.getThrown(t$36$35e);
          if (T.Object()[_is](e)) {
            return null;
          } else
            throw t$36$35e;
        }
        let suggestionSpans = G.JSArrayOfSuggestionSpan().of([]);
        for (let result of rawResults) {
          let resultMap = G.LinkedHashMapOfString$dynamic().from(T.Map()[_as](result));
          suggestionSpans[$add](new spell_check.SuggestionSpan.new(new ui.TextRange.new({start: T.int()[_as](resultMap[$_get]("startIndex")), end: T.int()[_as](resultMap[$_get]("endIndex"))}), T.List()[_as](resultMap[$_get]("suggestions"))[$cast](T.String())));
        }
        if (this.lastSavedResults != null) {
          let textHasNotChanged = dart.nullCheck(this.lastSavedResults).spellCheckedText === text;
          let spansHaveChanged = collections.listEquals(T.SuggestionSpan(), dart.nullCheck(this.lastSavedResults).suggestionSpans, suggestionSpans);
          if (textHasNotChanged && spansHaveChanged) {
            suggestionSpans = spell_check.DefaultSpellCheckService.mergeResults(dart.nullCheck(this.lastSavedResults).suggestionSpans, suggestionSpans);
          }
        }
        this.lastSavedResults = new spell_check.SpellCheckResults.new(text, suggestionSpans);
        return suggestionSpans;
      }).bind(this));
    }
  };
  (spell_check.DefaultSpellCheckService.new = function() {
    this[lastSavedResults] = null;
    this[__DefaultSpellCheckService_spellCheckChannel] = null;
    this.spellCheckChannel = system_channels.SystemChannels.spellCheck;
  }).prototype = spell_check.DefaultSpellCheckService.prototype;
  dart.addTypeTests(spell_check.DefaultSpellCheckService);
  dart.addRtiResources(spell_check.DefaultSpellCheckService, ["flutter__src__services__spell_check|DefaultSpellCheckService", "flutter__src__services__spell_check|SpellCheckService"]);
  dart.addTypeCaches(spell_check.DefaultSpellCheckService);
  dart.setMethodSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({fetchSpellCheckSuggestions: T.LocaleAndStringToFutureOfListNOfSuggestionSpan()}, dart.getMethods(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setStaticMethodSignature(spell_check.DefaultSpellCheckService, () => ['mergeResults']);
  dart.setGetterSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({spellCheckChannel: T.MethodChannel()}, dart.getGetters(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setSetterSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({spellCheckChannel: T.MethodChannel()}, dart.getSetters(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setLibraryUri(spell_check.DefaultSpellCheckService, I[0]);
  dart.setFieldSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({
    lastSavedResults: {type: T.SpellCheckResultsN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [__DefaultSpellCheckService_spellCheckChannel]: {type: T.MethodChannelN(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|Map":{"Map.K":"1","Map.V":"2"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Future":{"Future.T":"1"},"flutter__src__services__spell_check|DefaultSpellCheckService":{"flutter__src__services__spell_check|SpellCheckService":[]}}'));
  dart.trackLibraries("packages/flutter/src/services/spell_check.dart", {
    "package:flutter/src/services/spell_check.dart": spell_check
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spell_check.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCkB;;;;;;IAGG;;;;;;;;;YAGK;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAGT,YAAa,AAEoB,yBAF1B,KAAK,KACR,AAAM,AAAM,AAAM,KAAb,iBAAgB,AAAM,oBAC3B,AAAM,AAAM,AAAI,KAAX,eAAc,AAAM,kBACzB,mCAAmB,AAAM,KAAD,cAAc;IAC5C;;AAGoB,YAAO,kBAAK,AAAM,kBAAO,AAAM,gBAAY,oBAAQ;IAAa;;6CArB1D,OAAY;IAAZ;IAAY;;EAAY;;;;;;;;;;;;;;IAgCrC;;;;;;IAQc;;;;;;;;;YAGH;;AACtB,UAAI,AAAU,SAAM,KAAK;AACrB,cAAO;;AAGX,YAAa,AACkC,4BADxC,KAAK,KACR,AAAM,AAAiB,KAAlB,sBAAqB,yBAC1B,2CAA2B,AAAM,KAAD,kBAAkB;IACxD;;AAGoB,YAAO,kBAAK,uBAAyB,oBAAQ;IAAiB;;gDAzBrD,kBAAuB;IAAvB;IAAuB;;EAAgB;;;;;;;;;;;;;;EAqCtE;;;;;;;;;IAqBqB;;;;;;;;;;;AAIA;;IAAiB;0BAAjB;;IAAiB;wBAWX,YAAiC;AAC7B,0BAAgC;AAE5C;AACA;AACX,2BAAiB;AACjB,2BAAiB;AAErB,aAAO,AAAe,cAAD,GAAG,AAAW,UAAD,aAC9B,AAAe,cAAD,GAAG,AAAW,UAAD;AAC7B,kBAAU,AAAU,UAAA,QAAC,cAAc;AACnC,kBAAU,AAAU,UAAA,QAAC,cAAc;AAEnC,YAAI,AAAQ,AAAM,AAAM,OAAb,iBAAgB,AAAQ,AAAM,OAAP;AAClB,UAAd,aAAa,OAAK,OAAO;AACzB,2BAAA,AAAc,cAAA;AACd,2BAAA,AAAc,cAAA;;AAEd,cAAI,AAAQ,AAAM,AAAM,OAAb,eAAe,AAAQ,AAAM,OAAP;AACjB,YAAd,aAAa,OAAK,OAAO;AACzB,6BAAA,AAAc,cAAA;;AAEA,YAAd,aAAa,OAAK,OAAO;AACzB,6BAAA,AAAc,cAAA;;;;AAKN,MAAd,aAAa,UAAQ,AAAW,UAAD,WAAS,cAAc;AACxC,MAAd,aAAa,UAAQ,AAAW,UAAD,WAAS,cAAc;AAEtD,YAAO,cAAa;IACtB;+BAIW,QAAe;AAD8B;AAGlC;AACP,0BAAc,AAAO,MAAD;AAEjC;AACE,uBAGE,cAHW,MAAM,AAAkB,iDACnC,iCACQ,wBAAC,WAAW,EAAE,IAAI;;cAErB;AAAP;AAEA,kBAAO;;;;AAGY,8BAAkC;AAEvD,iBAAmB,SAAU,WAAU;AACV,0BACzB,uCAAgC,aAAP,MAAM;AACjB,UAAhB,eAAe,OACb,mCACE,6BACiC,aAAxB,AAAS,SAAA,QAAC,qBACU,aAAtB,AAAS,SAAA,QAAC,gBACS,AAAkB,cAA3C,AAAS,SAAA,QAAC;;AAKjB,YAAI;AAGS,kCAAoC,AAAE,AAAiB,eAAnC,4CAAsC,IAAI;AAC9D,iCACP,2CAA2B,AAAE,eAAlB,wCAAmC,eAAe;AAEjE,cAAI,iBAAiB,IAAI,gBAAgB;AACvC,8BAAkB,kDAA6B,AAAE,eAAlB,wCAAmC,eAAe;;;AAGrF,gCAAmB,sCAAkB,IAAI,EAAE,eAAe;AAE1D,cAAO,gBAAe;MACxB;;;;IA/FmB;yDAIA;AARjB,6BAAmC;EACrC","file":"../../../../../../../../F:/packages/flutter/src/services/spell_check.dart.lib.js"}');
  // Exports:
  return {
    src__services__spell_check: spell_check
  };
}));

//# sourceMappingURL=spell_check.dart.lib.js.map

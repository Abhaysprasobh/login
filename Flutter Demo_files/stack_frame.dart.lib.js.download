// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/stack_frame.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__foundation__stack_frame_dart(dart_sdk, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var stack_frame = Object.create(dart.library);
  var $trim = dartx.trim;
  var $split = dartx.split;
  var $isNotEmpty = dartx.isNotEmpty;
  var $where = dartx.where;
  var $map = dartx.map;
  var $whereType = dartx.whereType;
  var $toList = dartx.toList;
  var $startsWith = dartx.startsWith;
  var $_get = dartx._get;
  var $replaceFirst = dartx.replaceFirst;
  var $length = dartx.length;
  var $first = dartx.first;
  var $skip = dartx.skip;
  var $join = dartx.join;
  var $single = dartx.single;
  var $replaceAll = dartx.replaceAll;
  var $contains = dartx.contains;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    StringTobool: () => (T.StringTobool = dart.constFn(dart_rti.findType("core|bool(core|String)")))(),
    StackFrameN: () => (T.StackFrameN = dart.constFn(dart_rti.findType("flutter__src__foundation__stack_frame|StackFrame?")))(),
    StringToStackFrameN: () => (T.StringToStackFrameN = dart.constFn(dart_rti.findType("flutter__src__foundation__stack_frame|StackFrame?(core|String)")))(),
    StackFrame: () => (T.StackFrame = dart.constFn(dart_rti.findType("flutter__src__foundation__stack_frame|StackFrame")))(),
    StackTraceToListOfStackFrame: () => (T.StackTraceToListOfStackFrame = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__stack_frame|StackFrame>(core|StackTrace)")))(),
    StringToListOfStackFrame: () => (T.StringToListOfStackFrame = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__stack_frame|StackFrame>(core|String)")))(),
    RegExp: () => (T.RegExp = dart.constFn(dart_rti.findType("core|RegExp")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(stack_frame.StackFrame.fromStackTraceLine, T.StringToStackFrameN());
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [isConstructor$]: false,
        [method$]: "asynchronous suspension",
        [className$]: "",
        [column$]: -1,
        [line$]: -1,
        [packagePath$]: "",
        [$package$]: "",
        [packageScheme$]: "",
        [number$]: -1,
        [source$]: "<asynchronous suspension>"
      }, stack_frame.StackFrame.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [isConstructor$]: false,
        [method$]: "...",
        [className$]: "",
        [column$]: -1,
        [line$]: -1,
        [packagePath$]: "",
        [$package$]: "",
        [packageScheme$]: "",
        [number$]: -1,
        [source$]: "..."
      }, stack_frame.StackFrame.prototype));
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/stack_frame.dart",
    "package:flutter/src/foundation/stack_frame.dart",
    "dart:core"
  ];
  var source$ = dart.privateName(stack_frame, "StackFrame.source");
  var number$ = dart.privateName(stack_frame, "StackFrame.number");
  var packageScheme$ = dart.privateName(stack_frame, "StackFrame.packageScheme");
  var $package$ = dart.privateName(stack_frame, "StackFrame.package");
  var packagePath$ = dart.privateName(stack_frame, "StackFrame.packagePath");
  var line$ = dart.privateName(stack_frame, "StackFrame.line");
  var column$ = dart.privateName(stack_frame, "StackFrame.column");
  var className$ = dart.privateName(stack_frame, "StackFrame.className");
  var method$ = dart.privateName(stack_frame, "StackFrame.method");
  var isConstructor$ = dart.privateName(stack_frame, "StackFrame.isConstructor");
  var _is = dart.privateName(dart_rti, "_is");
  stack_frame.StackFrame = class StackFrame extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get number() {
      return this[number$];
    }
    set number(value) {
      super.number = value;
    }
    get packageScheme() {
      return this[packageScheme$];
    }
    set packageScheme(value) {
      super.packageScheme = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    get packagePath() {
      return this[packagePath$];
    }
    set packagePath(value) {
      super.packagePath = value;
    }
    get line() {
      return this[line$];
    }
    set line(value) {
      super.line = value;
    }
    get column() {
      return this[column$];
    }
    set column(value) {
      super.column = value;
    }
    get className() {
      return this[className$];
    }
    set className(value) {
      super.className = value;
    }
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get isConstructor() {
      return this[isConstructor$];
    }
    set isConstructor(value) {
      super.isConstructor = value;
    }
    static ['_#new#tearOff'](opts) {
      let number = opts && 'number' in opts ? opts.number : null;
      let column = opts && 'column' in opts ? opts.column : null;
      let line = opts && 'line' in opts ? opts.line : null;
      let packageScheme = opts && 'packageScheme' in opts ? opts.packageScheme : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let packagePath = opts && 'packagePath' in opts ? opts.packagePath : null;
      let className = opts && 'className' in opts ? opts.className : "";
      let method = opts && 'method' in opts ? opts.method : null;
      let isConstructor = opts && 'isConstructor' in opts ? opts.isConstructor : false;
      let source = opts && 'source' in opts ? opts.source : null;
      return new stack_frame.StackFrame.new({number: number, column: column, line: line, packageScheme: packageScheme, package: $package, packagePath: packagePath, className: className, method: method, isConstructor: isConstructor, source: source});
    }
    static fromStackTrace(stack) {
      return stack_frame.StackFrame.fromStackString(dart.toString(stack));
    }
    static fromStackString(stack) {
      return stack[$trim]()[$split]("\n")[$where](dart.fn(line => line[$isNotEmpty], T.StringTobool()))[$map](T.StackFrameN(), C[0] || CT.C0)[$whereType](T.StackFrame())[$toList]();
    }
    static _tryParseWebFrame(line) {
      {
        return stack_frame.StackFrame._tryParseWebDebugFrame(line);
      }
    }
    static _tryParseWebDebugFrame(line) {
      let hasPackage = line[$startsWith]("package");
      let parser = hasPackage ? core.RegExp.new("^(package.+) (\\d+):(\\d+)\\s+(.+)$") : core.RegExp.new("^(.+) (\\d+):(\\d+)\\s+(.+)$");
      let match = parser.firstMatch(line);
      if (match == null) {
        return null;
      }
      let $package = "<unknown>";
      let packageScheme = "<unknown>";
      let packagePath = "<unknown>";
      if (hasPackage) {
        packageScheme = "package";
        let packageUri = core.Uri.parse(dart.nullCheck(match.group(1)));
        $package = packageUri.pathSegments[$_get](0);
        packagePath = packageUri.path[$replaceFirst](packageUri.pathSegments[$_get](0) + "/", "");
      }
      return new stack_frame.StackFrame.new({number: -1, packageScheme: packageScheme, package: $package, packagePath: packagePath, line: core.int.parse(dart.nullCheck(match.group(2))), column: core.int.parse(dart.nullCheck(match.group(3))), className: "<unknown>", method: dart.nullCheck(match.group(4)), source: line});
    }
    static _tryParseWebNonDebugFrame(line) {
      let match = stack_frame.StackFrame._webNonDebugFramePattern.firstMatch(line);
      if (match == null) {
        return null;
      }
      let classAndMethod = dart.nullCheck(match.group(1))[$split](".");
      let className = classAndMethod[$length] > 1 ? classAndMethod[$first] : "<unknown>";
      let method = classAndMethod[$length] > 1 ? classAndMethod[$skip](1)[$join](".") : classAndMethod[$single];
      return new stack_frame.StackFrame.new({number: -1, packageScheme: "<unknown>", package: "<unknown>", packagePath: "<unknown>", line: -1, column: -1, className: className, method: method, source: line});
    }
    static fromStackTraceLine(line) {
      if (line === "<asynchronous suspension>") {
        return stack_frame.StackFrame.asynchronousSuspension;
      } else if (line === "...") {
        return stack_frame.StackFrame.stackOverFlowElision;
      }
      if (!(line !== "===== asynchronous gap ===========================")) dart.assertFailed("Got a stack frame from package:stack_trace, where a vm or web frame was expected. This can happen if FlutterError.demangleStackTrace was not set in an environment that propagates non-standard stack traces to the framework, such as during tests.", I[0], 195, 7, "line != '===== asynchronous gap ==========================='");
      if (!line[$startsWith]("#")) {
        return stack_frame.StackFrame._tryParseWebFrame(line);
      }
      let parser = core.RegExp.new("^#(\\d+) +(.+) \\((.+?):?(\\d+){0,1}:?(\\d+){0,1}\\)$");
      let match = parser.firstMatch(line);
      if (!(match != null)) dart.assertFailed("Expected " + line + " to match " + dart.str(parser) + ".", I[0], 208, 12, "match != null");
      match = dart.nullCheck(match);
      let isConstructor = false;
      let className = "";
      let method = dart.nullCheck(match.group(2))[$replaceAll](".<anonymous closure>", "");
      if (method[$startsWith]("new")) {
        let methodParts = method[$split](" ");
        className = methodParts[$length] > 1 ? method[$split](" ")[$_get](1) : "<unknown>";
        method = "";
        if (className[$contains](".")) {
          let parts = className[$split](".");
          className = parts[$_get](0);
          method = parts[$_get](1);
        }
        isConstructor = true;
      } else if (method[$contains](".")) {
        let parts = method[$split](".");
        className = parts[$_get](0);
        method = parts[$_get](1);
      }
      let packageUri = core.Uri.parse(dart.nullCheck(match.group(3)));
      let $package = "<unknown>";
      let packagePath = packageUri.path;
      if (packageUri.scheme === "dart" || packageUri.scheme === "package") {
        $package = packageUri.pathSegments[$_get](0);
        packagePath = packageUri.path[$replaceFirst](packageUri.pathSegments[$_get](0) + "/", "");
      }
      return new stack_frame.StackFrame.new({number: core.int.parse(dart.nullCheck(match.group(1))), className: className, method: method, packageScheme: packageUri.scheme, package: $package, packagePath: packagePath, line: match.group(4) == null ? -1 : core.int.parse(dart.nullCheck(match.group(4))), column: match.group(5) == null ? -1 : core.int.parse(dart.nullCheck(match.group(5))), isConstructor: isConstructor, source: line});
    }
    get hashCode() {
      return core.Object.hash(this.number, this.package, this.line, this.column, this.className, this.method, this.source);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.StackFrame()[_is](other) && other.number === this.number && other.package === this.package && other.line === this.line && other.column === this.column && other.className === this.className && other.method === this.method && other.source === this.source;
    }
    toString() {
      return object.objectRuntimeType(this, "StackFrame") + "(#" + dart.strSafe(this.number) + ", " + this.packageScheme + ":" + this.package + "/" + this.packagePath + ":" + dart.strSafe(this.line) + ":" + dart.strSafe(this.column) + ", className: " + this.className + ", method: " + this.method + ")";
    }
  };
  (stack_frame.StackFrame.new = function(opts) {
    let number = opts && 'number' in opts ? opts.number : null;
    let column = opts && 'column' in opts ? opts.column : null;
    let line = opts && 'line' in opts ? opts.line : null;
    let packageScheme = opts && 'packageScheme' in opts ? opts.packageScheme : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let packagePath = opts && 'packagePath' in opts ? opts.packagePath : null;
    let className = opts && 'className' in opts ? opts.className : "";
    let method = opts && 'method' in opts ? opts.method : null;
    let isConstructor = opts && 'isConstructor' in opts ? opts.isConstructor : false;
    let source = opts && 'source' in opts ? opts.source : null;
    this[number$] = number;
    this[column$] = column;
    this[line$] = line;
    this[packageScheme$] = packageScheme;
    this[$package$] = $package;
    this[packagePath$] = packagePath;
    this[className$] = className;
    this[method$] = method;
    this[isConstructor$] = isConstructor;
    this[source$] = source;
    ;
  }).prototype = stack_frame.StackFrame.prototype;
  dart.addTypeTests(stack_frame.StackFrame);
  dart.addRtiResources(stack_frame.StackFrame, ["flutter__src__foundation__stack_frame|StackFrame"]);
  dart.addTypeCaches(stack_frame.StackFrame);
  dart.setStaticMethodSignature(stack_frame.StackFrame, () => ['fromStackTrace', 'fromStackString', '_tryParseWebFrame', '_tryParseWebDebugFrame', '_tryParseWebNonDebugFrame', 'fromStackTraceLine']);
  dart.setLibraryUri(stack_frame.StackFrame, I[1]);
  dart.setFieldSignature(stack_frame.StackFrame, () => dart.global.Object.setPrototypeOf({
    source: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    number: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    packageScheme: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    package: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    packagePath: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    line: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    column: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    className: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    method: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    isConstructor: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(stack_frame.StackFrame))));
  dart.setStaticFieldSignature(stack_frame.StackFrame, () => ['asynchronousSuspension', 'stackOverFlowElision', '_webNonDebugFramePattern']);
  dart.defineExtensionMethods(stack_frame.StackFrame, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stack_frame.StackFrame, ['hashCode']);
  dart.defineLazy(stack_frame.StackFrame, {
    /*stack_frame.StackFrame.asynchronousSuspension*/get asynchronousSuspension() {
      return C[1] || CT.C1;
    },
    /*stack_frame.StackFrame.stackOverFlowElision*/get stackOverFlowElision() {
      return C[2] || CT.C2;
    },
    /*stack_frame.StackFrame._webNonDebugFramePattern*/get _webNonDebugFramePattern() {
      return core.RegExp.new("^\\s*at ([^\\s]+).*$");
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/foundation/stack_frame.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|RegExp":{"core|Pattern":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/stack_frame.dart", {
    "package:flutter/src/foundation/stack_frame.dart": stack_frame
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stack_frame.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/foundation/stack_frame.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__stack_frame: stack_frame
  };
}));

//# sourceMappingURL=stack_frame.dart.lib.js.map

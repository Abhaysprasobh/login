// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/stadium_border.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/border_radius.dart'], (function load__packages__flutter__src__painting__stadium_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__border_radius$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  var stadium_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    StadiumBorder: () => (T.StadiumBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|StadiumBorder")))(),
    CircleBorder: () => (T.CircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__circle_border|CircleBorder")))(),
    RoundedRectangleBorder: () => (T.RoundedRectangleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder")))(),
    doubleToShapeBorder: () => (T.doubleToShapeBorder = dart.constFn(dart_rti.findType("flutter__src__painting__borders|ShapeBorder(core|double)")))(),
    __ToStadiumBorder: () => (T.__ToStadiumBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|StadiumBorder({side:flutter__src__painting__borders|BorderSide?})")))(),
    Rect__ToPath: () => (T.Rect__ToPath = dart.constFn(dart_rti.findType("ui|Path(ui|Rect{textDirection:ui|TextDirection?})")))(),
    CanvasAndRect__Tovoid: () => (T.CanvasAndRect__Tovoid = dart.constFn(dart_rti.findType("~(ui|Canvas,ui|Rect{textDirection:ui|TextDirection?})")))(),
    _StadiumToCircleBorder: () => (T._StadiumToCircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|_StadiumToCircleBorder")))(),
    RectToRect: () => (T.RectToRect = dart.constFn(dart_rti.findType("ui|Rect(ui|Rect)")))(),
    RectToBorderRadius: () => (T.RectToBorderRadius = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadius(ui|Rect)")))(),
    __To_StadiumToCircleBorder: () => (T.__To_StadiumToCircleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|_StadiumToCircleBorder({circularity:core|double?,eccentricity:core|double?,side:flutter__src__painting__borders|BorderSide?})")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    _StadiumToRoundedRectangleBorder: () => (T._StadiumToRoundedRectangleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|_StadiumToRoundedRectangleBorder")))(),
    RectToBorderRadiusGeometry: () => (T.RectToBorderRadiusGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry(ui|Rect)")))(),
    __To_StadiumToRoundedRectangleBorder: () => (T.__To_StadiumToRoundedRectangleBorder = dart.constFn(dart_rti.findType("flutter__src__painting__stadium_border|_StadiumToRoundedRectangleBorder({borderRadius:flutter__src__painting__border_radius|BorderRadiusGeometry?,rectilinearity:core|double?,side:flutter__src__painting__borders|BorderSide?})")))(),
    BorderRadiusGeometry: () => (T.BorderRadiusGeometry = dart.constFn(dart_rti.findType("flutter__src__painting__border_radius|BorderRadiusGeometry")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 0
      }, borders.BorderStyle.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [Color_value]: 4278190080.0
      }, ui.Color.prototype));
    },
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[1] || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[2] || CT.C2
      }, borders.BorderSide.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      }, borders.BorderStyle.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [Radius_y]: 0,
        [Radius_x]: 0
      }, ui.Radius.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [BorderRadius_bottomRight]: C[5] || CT.C5,
        [BorderRadius_bottomLeft]: C[5] || CT.C5,
        [BorderRadius_topRight]: C[5] || CT.C5,
        [BorderRadius_topLeft]: C[5] || CT.C5
      }, border_radius.BorderRadius.prototype));
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/painting/stadium_border.dart",
    "dart:core",
    "package:flutter/src/painting/border_radius.dart"
  ];
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var _is = dart.privateName(dart_rti, "_is");
  stadium_border.StadiumBorder = class StadiumBorder extends borders.OutlinedBorder {
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
      return new stadium_border.StadiumBorder.new({side: side});
    }
    scale(t) {
      return new stadium_border.StadiumBorder.new({side: this.side.scale(t)});
    }
    lerpFrom(a, t) {
      if (T.StadiumBorder()[_is](a)) {
        return new stadium_border.StadiumBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t)});
      }
      if (T.CircleBorder()[_is](a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circularity: 1.0 - t, eccentricity: a.eccentricity});
      }
      if (T.RoundedRectangleBorder()[_is](a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: a.borderRadius, rectilinearity: 1.0 - t});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.StadiumBorder()[_is](b)) {
        return new stadium_border.StadiumBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t)});
      }
      if (T.CircleBorder()[_is](b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circularity: t, eccentricity: b.eccentricity});
      }
      if (T.RoundedRectangleBorder()[_is](b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: b.borderRadius, rectilinearity: t});
      }
      return super.lerpTo(b, t);
    }
    copyWith(opts) {
      let t$360;
      let side = opts && 'side' in opts ? opts.side : null;
      return new stadium_border.StadiumBorder.new({side: (t$360 = side, t$360 == null ? this.side : t$360)});
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let radius = new ui.Radius.circular(rect.shortestSide / 2.0);
      let borderRect = new ui.RRect.fromRectAndRadius(rect, radius);
      let adjustedRect = borderRect.deflate(this.side.strokeInset);
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(adjustedRect);
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let radius = new ui.Radius.circular(rect.shortestSide / 2.0);
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(new ui.RRect.fromRectAndRadius(rect, radius));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let radius = new ui.Radius.circular(rect.shortestSide / 2.0);
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, radius), paint);
    }
    get preferPaintInterior() {
      return true;
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[3] || CT.C3:
          {
            let radius = new ui.Radius.circular(rect.shortestSide / 2);
            let borderRect = new ui.RRect.fromRectAndRadius(rect, radius);
            canvas.drawRRect(borderRect.inflate(this.side.strokeOffset / 2), this.side.toPaint());
          }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.StadiumBorder()[_is](other) && dart.equals(other.side, this.side);
    }
    get hashCode() {
      return dart.hashCode(this.side);
    }
    toString() {
      return object.objectRuntimeType(this, "StadiumBorder") + "(" + dart.str(this.side) + ")";
    }
  };
  (stadium_border.StadiumBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    dart.global.Object.getPrototypeOf(stadium_border.StadiumBorder).new.call(this, {side: side});
    ;
  }).prototype = stadium_border.StadiumBorder.prototype;
  dart.addTypeTests(stadium_border.StadiumBorder);
  dart.addRtiResources(stadium_border.StadiumBorder, ["flutter__src__painting__stadium_border|StadiumBorder"]);
  dart.addTypeCaches(stadium_border.StadiumBorder);
  dart.setMethodSignature(stadium_border.StadiumBorder, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleToShapeBorder(),
    copyWith: T.__ToStadiumBorder(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(stadium_border.StadiumBorder))));
  dart.setLibraryUri(stadium_border.StadiumBorder, I[0]);
  dart.defineExtensionMethods(stadium_border.StadiumBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border.StadiumBorder, ['hashCode']);
  var circularity$ = dart.privateName(stadium_border, "_StadiumToCircleBorder.circularity");
  var eccentricity$ = dart.privateName(stadium_border, "_StadiumToCircleBorder.eccentricity");
  var _adjustRect = dart.privateName(stadium_border, "_adjustRect");
  var _adjustBorderRadius = dart.privateName(stadium_border, "_adjustBorderRadius");
  stadium_border._StadiumToCircleBorder = class _StadiumToCircleBorder extends borders.OutlinedBorder {
    get circularity() {
      return this[circularity$];
    }
    set circularity(value) {
      super.circularity = value;
    }
    get eccentricity() {
      return this[eccentricity$];
    }
    set eccentricity(value) {
      super.eccentricity = value;
    }
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
      let circularity = opts && 'circularity' in opts ? opts.circularity : 0;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
      return new stadium_border._StadiumToCircleBorder.new({side: side, circularity: circularity, eccentricity: eccentricity});
    }
    scale(t) {
      return new stadium_border._StadiumToCircleBorder.new({side: this.side.scale(t), circularity: t, eccentricity: this.eccentricity});
    }
    lerpFrom(a, t) {
      if (T.StadiumBorder()[_is](a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circularity: this.circularity * t, eccentricity: this.eccentricity});
      }
      if (T.CircleBorder()[_is](a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circularity: this.circularity + (1.0 - this.circularity) * (1.0 - t), eccentricity: a.eccentricity});
      }
      if (T._StadiumToCircleBorder()[_is](a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circularity: dart.nullCheck(ui.lerpDouble(a.circularity, this.circularity, t)), eccentricity: dart.nullCheck(ui.lerpDouble(a.eccentricity, this.eccentricity, t))});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.StadiumBorder()[_is](b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circularity: this.circularity * (1.0 - t), eccentricity: this.eccentricity});
      }
      if (T.CircleBorder()[_is](b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circularity: this.circularity + (1.0 - this.circularity) * t, eccentricity: b.eccentricity});
      }
      if (T._StadiumToCircleBorder()[_is](b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circularity: dart.nullCheck(ui.lerpDouble(this.circularity, b.circularity, t)), eccentricity: dart.nullCheck(ui.lerpDouble(this.eccentricity, b.eccentricity, t))});
      }
      return super.lerpTo(b, t);
    }
    [_adjustRect](rect) {
      if (this.circularity === 0.0 || rect.width === rect.height) {
        return rect;
      }
      if (rect.width < rect.height) {
        let partialDelta = (rect.height - rect.width) / 2;
        let delta = this.circularity * partialDelta * (1.0 - this.eccentricity);
        return new ui.Rect.fromLTRB(rect.left, rect.top + delta, rect.right, rect.bottom - delta);
      } else {
        let partialDelta = (rect.width - rect.height) / 2;
        let delta = this.circularity * partialDelta * (1.0 - this.eccentricity);
        return new ui.Rect.fromLTRB(rect.left + delta, rect.top, rect.right - delta, rect.bottom);
      }
    }
    [_adjustBorderRadius](rect) {
      let circleRadius = new border_radius.BorderRadius.circular(rect.shortestSide / 2);
      if (this.eccentricity !== 0.0) {
        if (rect.width < rect.height) {
          return dart.nullCheck(border_radius.BorderRadius.lerp(circleRadius, new border_radius.BorderRadius.all(new ui.Radius.elliptical(rect.width / 2, (0.5 + this.eccentricity / 2) * rect.height / 2)), this.circularity));
        } else {
          return dart.nullCheck(border_radius.BorderRadius.lerp(circleRadius, new border_radius.BorderRadius.all(new ui.Radius.elliptical((0.5 + this.eccentricity / 2) * rect.width / 2, rect.height / 2)), this.circularity));
        }
      }
      return circleRadius;
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)).deflate(this.side.strokeInset));
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      canvas.drawRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)), paint);
    }
    get preferPaintInterior() {
      return true;
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0;
      let side = opts && 'side' in opts ? opts.side : null;
      let circularity = opts && 'circularity' in opts ? opts.circularity : null;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
      return new stadium_border._StadiumToCircleBorder.new({side: (t$360 = side, t$360 == null ? this.side : t$360), circularity: (t$360$ = circularity, t$360$ == null ? this.circularity : t$360$), eccentricity: (t$360$0 = eccentricity, t$360$0 == null ? this.eccentricity : t$360$0)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[3] || CT.C3:
          {
            let borderRect = this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect));
            canvas.drawRRect(borderRect.inflate(this.side.strokeOffset / 2), this.side.toPaint());
          }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T._StadiumToCircleBorder()[_is](other) && dart.equals(other.side, this.side) && other.circularity === this.circularity;
    }
    get hashCode() {
      return core.Object.hash(this.side, this.circularity);
    }
    toString() {
      if (this.eccentricity !== 0.0) {
        return "StadiumBorder(" + dart.str(this.side) + ", " + (this.circularity * 100)[$toStringAsFixed](1) + "% of the way to being a CircleBorder that is " + (this.eccentricity * 100)[$toStringAsFixed](1) + "% oval)";
      }
      return "StadiumBorder(" + dart.str(this.side) + ", " + (this.circularity * 100)[$toStringAsFixed](1) + "% of the way to being a CircleBorder)";
    }
  };
  (stadium_border._StadiumToCircleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    let circularity = opts && 'circularity' in opts ? opts.circularity : 0;
    let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
    this[circularity$] = circularity;
    this[eccentricity$] = eccentricity;
    dart.global.Object.getPrototypeOf(stadium_border._StadiumToCircleBorder).new.call(this, {side: side});
    ;
  }).prototype = stadium_border._StadiumToCircleBorder.prototype;
  dart.addTypeTests(stadium_border._StadiumToCircleBorder);
  dart.addRtiResources(stadium_border._StadiumToCircleBorder, ["flutter__src__painting__stadium_border|_StadiumToCircleBorder"]);
  dart.addTypeCaches(stadium_border._StadiumToCircleBorder);
  dart.setMethodSignature(stadium_border._StadiumToCircleBorder, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleToShapeBorder(),
    [_adjustRect]: T.RectToRect(),
    [_adjustBorderRadius]: T.RectToBorderRadius(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    copyWith: T.__To_StadiumToCircleBorder(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(stadium_border._StadiumToCircleBorder))));
  dart.setLibraryUri(stadium_border._StadiumToCircleBorder, I[0]);
  dart.setFieldSignature(stadium_border._StadiumToCircleBorder, () => dart.global.Object.setPrototypeOf({
    circularity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]},
    eccentricity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(stadium_border._StadiumToCircleBorder))));
  dart.defineExtensionMethods(stadium_border._StadiumToCircleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border._StadiumToCircleBorder, ['hashCode']);
  var borderRadius$ = dart.privateName(stadium_border, "_StadiumToRoundedRectangleBorder.borderRadius");
  var rectilinearity$ = dart.privateName(stadium_border, "_StadiumToRoundedRectangleBorder.rectilinearity");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  stadium_border._StadiumToRoundedRectangleBorder = class _StadiumToRoundedRectangleBorder extends borders.OutlinedBorder {
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get rectilinearity() {
      return this[rectilinearity$];
    }
    set rectilinearity(value) {
      super.rectilinearity = value;
    }
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[4] || CT.C4;
      let rectilinearity = opts && 'rectilinearity' in opts ? opts.rectilinearity : 0;
      return new stadium_border._StadiumToRoundedRectangleBorder.new({side: side, borderRadius: borderRadius, rectilinearity: rectilinearity});
    }
    scale(t) {
      return new stadium_border._StadiumToRoundedRectangleBorder.new({side: this.side.scale(t), borderRadius: this.borderRadius['*'](t), rectilinearity: t});
    }
    lerpFrom(a, t) {
      if (T.StadiumBorder()[_is](a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, rectilinearity: this.rectilinearity * t});
      }
      if (T.RoundedRectangleBorder()[_is](a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, rectilinearity: this.rectilinearity + (1.0 - this.rectilinearity) * (1.0 - t)});
      }
      if (T._StadiumToRoundedRectangleBorder()[_is](a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(a.borderRadius, this.borderRadius, t)), rectilinearity: dart.nullCheck(ui.lerpDouble(a.rectilinearity, this.rectilinearity, t))});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (T.StadiumBorder()[_is](b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, rectilinearity: this.rectilinearity * (1.0 - t)});
      }
      if (T.RoundedRectangleBorder()[_is](b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, rectilinearity: this.rectilinearity + (1.0 - this.rectilinearity) * t});
      }
      if (T._StadiumToRoundedRectangleBorder()[_is](b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(this.borderRadius, b.borderRadius, t)), rectilinearity: dart.nullCheck(ui.lerpDouble(this.rectilinearity, b.rectilinearity, t))});
      }
      return super.lerpTo(b, t);
    }
    [_adjustBorderRadius](rect) {
      return dart.nullCheck(border_radius.BorderRadiusGeometry.lerp(this.borderRadius, new border_radius.BorderRadius.all(new ui.Radius.circular(rect.shortestSide / 2.0)), 1.0 - this.rectilinearity));
    }
    getInnerPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let borderRect = this[_adjustBorderRadius](rect).resolve(textDirection).toRRect(rect);
      let adjustedRect = borderRect.deflate(dart.nullCheck(ui.lerpDouble(this.side.width, 0, this.side.strokeAlign)));
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(adjustedRect);
        return t$360;
      })();
    }
    getOuterPath(rect, opts) {
      let t$360;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t$360 = ui.Path.new();
      return (() => {
        t$360.addRRect(this[_adjustBorderRadius](rect).resolve(textDirection).toRRect(rect));
        return t$360;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let adjustedBorderRadius = this[_adjustBorderRadius](rect);
      if (dart.equals(adjustedBorderRadius, border_radius.BorderRadius.zero)) {
        canvas.drawRect(rect, paint);
      } else {
        canvas.drawRRect(adjustedBorderRadius.resolve(textDirection).toRRect(rect), paint);
      }
    }
    get preferPaintInterior() {
      return true;
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0;
      let side = opts && 'side' in opts ? opts.side : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let rectilinearity = opts && 'rectilinearity' in opts ? opts.rectilinearity : null;
      return new stadium_border._StadiumToRoundedRectangleBorder.new({side: (t$360 = side, t$360 == null ? this.side : t$360), borderRadius: (t$360$ = borderRadius, t$360$ == null ? this.borderRadius : t$360$), rectilinearity: (t$360$0 = rectilinearity, t$360$0 == null ? this.rectilinearity : t$360$0)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[3] || CT.C3:
          {
            let adjustedBorderRadius = this[_adjustBorderRadius](rect);
            let borderRect = adjustedBorderRadius.resolve(textDirection).toRRect(rect);
            canvas.drawRRect(borderRect.inflate(this.side.strokeOffset / 2), this.side.toPaint());
          }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T._StadiumToRoundedRectangleBorder()[_is](other) && dart.equals(other.side, this.side) && dart.equals(other.borderRadius, this.borderRadius) && other.rectilinearity === this.rectilinearity;
    }
    get hashCode() {
      return core.Object.hash(this.side, this.borderRadius, this.rectilinearity);
    }
    toString() {
      return "StadiumBorder(" + dart.str(this.side) + ", " + dart.str(this.borderRadius) + ", " + (this.rectilinearity * 100)[$toStringAsFixed](1) + "% of the way to being a " + "RoundedRectangleBorder)";
    }
  };
  (stadium_border._StadiumToRoundedRectangleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[4] || CT.C4;
    let rectilinearity = opts && 'rectilinearity' in opts ? opts.rectilinearity : 0;
    this[borderRadius$] = borderRadius;
    this[rectilinearity$] = rectilinearity;
    dart.global.Object.getPrototypeOf(stadium_border._StadiumToRoundedRectangleBorder).new.call(this, {side: side});
    ;
  }).prototype = stadium_border._StadiumToRoundedRectangleBorder.prototype;
  dart.addTypeTests(stadium_border._StadiumToRoundedRectangleBorder);
  dart.addRtiResources(stadium_border._StadiumToRoundedRectangleBorder, ["flutter__src__painting__stadium_border|_StadiumToRoundedRectangleBorder"]);
  dart.addTypeCaches(stadium_border._StadiumToRoundedRectangleBorder);
  dart.setMethodSignature(stadium_border._StadiumToRoundedRectangleBorder, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleToShapeBorder(),
    [_adjustBorderRadius]: T.RectToBorderRadiusGeometry(),
    getInnerPath: T.Rect__ToPath(),
    getOuterPath: T.Rect__ToPath(),
    copyWith: T.__To_StadiumToRoundedRectangleBorder(),
    paint: T.CanvasAndRect__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(stadium_border._StadiumToRoundedRectangleBorder))));
  dart.setLibraryUri(stadium_border._StadiumToRoundedRectangleBorder, I[0]);
  dart.setFieldSignature(stadium_border._StadiumToRoundedRectangleBorder, () => dart.global.Object.setPrototypeOf({
    borderRadius: {type: T.BorderRadiusGeometry(), isConst: false, isFinal: true, libraryUri: I[2]},
    rectilinearity: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(stadium_border._StadiumToRoundedRectangleBorder))));
  dart.defineExtensionMethods(stadium_border._StadiumToRoundedRectangleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border._StadiumToRoundedRectangleBorder, ['hashCode']);
  dart.moduleConstCaches.set("packages/flutter/src/painting/stadium_border.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting__stadium_border|StadiumBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__borders|OutlinedBorder":{"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__circle_border|CircleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__rounded_rectangle_border|RoundedRectangleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__borders|BorderSide":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__painting__stadium_border|_StadiumToCircleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]},"flutter__src__painting__border_radius|BorderRadius":{"flutter__src__painting__border_radius|BorderRadiusGeometry":[]},"flutter__src__painting__stadium_border|_StadiumToRoundedRectangleBorder":{"flutter__src__painting__borders|OutlinedBorder":[],"flutter__src__painting__borders|ShapeBorder":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/stadium_border.dart", {
    "package:flutter/src/painting/stadium_border.dart": stadium_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stadium_border.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/painting/stadium_border.dart.lib.js"}');
  // Exports:
  return {
    src__painting__stadium_border: stadium_border
  };
}));

//# sourceMappingURL=stadium_border.dart.lib.js.map

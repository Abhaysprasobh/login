// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/services/system_chrome.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__services__system_chrome_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  const binding = packages__flutter__src__services__text_editing_delta$46dart.src__services__binding;
  var system_chrome = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfDeviceOrientation: () => (T.ListOfDeviceOrientation = dart.constFn(dart_rti.findType("core|List<flutter__src__services__system_chrome|DeviceOrientation>")))(),
    DeviceOrientation: () => (T.DeviceOrientation = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|DeviceOrientation")))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    intN: () => (T.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    ListOfSystemUiOverlay: () => (T.ListOfSystemUiOverlay = dart.constFn(dart_rti.findType("core|List<flutter__src__services__system_chrome|SystemUiOverlay>")))(),
    SystemUiOverlay: () => (T.SystemUiOverlay = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|SystemUiOverlay")))(),
    ListOfSystemUiMode: () => (T.ListOfSystemUiMode = dart.constFn(dart_rti.findType("core|List<flutter__src__services__system_chrome|SystemUiMode>")))(),
    SystemUiMode: () => (T.SystemUiMode = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|SystemUiMode")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti.findType("@")))(),
    SystemUiOverlayStyle: () => (T.SystemUiOverlayStyle = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|SystemUiOverlayStyle")))(),
    VoidToMapOfString$dynamic: () => (T.VoidToMapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>()")))(),
    __ToSystemUiOverlayStyle: () => (T.__ToSystemUiOverlayStyle = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|SystemUiOverlayStyle({statusBarBrightness:ui|Brightness?,statusBarColor:ui|Color?,statusBarIconBrightness:ui|Brightness?,systemNavigationBarColor:ui|Color?,systemNavigationBarContrastEnforced:core|bool?,systemNavigationBarDividerColor:ui|Color?,systemNavigationBarIconBrightness:ui|Brightness?,systemStatusBarContrastEnforced:core|bool?})")))(),
    ColorN: () => (T.ColorN = dart.constFn(dart_rti.findType("ui|Color?")))(),
    BrightnessN: () => (T.BrightnessN = dart.constFn(dart_rti.findType("ui|Brightness?")))(),
    boolN: () => (T.boolN = dart.constFn(dart_rti.findType("core|bool?")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    ListOfDeviceOrientationToFutureOfvoid: () => (T.ListOfDeviceOrientationToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|List<flutter__src__services__system_chrome|DeviceOrientation>)")))(),
    ApplicationSwitcherDescriptionToFutureOfvoid: () => (T.ApplicationSwitcherDescriptionToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(flutter__src__services__system_chrome|ApplicationSwitcherDescription)")))(),
    SystemUiMode__ToFutureOfvoid: () => (T.SystemUiMode__ToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(flutter__src__services__system_chrome|SystemUiMode{overlays:core|List<flutter__src__services__system_chrome|SystemUiOverlay>?})")))(),
    FnToFutureOfvoid: () => (T.FnToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(async|Future<~>(core|bool)?)")))(),
    VoidToFutureOfvoid: () => (T.VoidToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>()")))(),
    SystemUiOverlayStyleTovoid: () => (T.SystemUiOverlayStyleTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__system_chrome|SystemUiOverlayStyle)")))(),
    SystemUiOverlayStyleN: () => (T.SystemUiOverlayStyleN = dart.constFn(dart_rti.findType("flutter__src__services__system_chrome|SystemUiOverlayStyle?")))()
  };
  var G = {
    IdentityMapOfString$dynamic: () => (G.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(T.String(), T.dynamic())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "portraitUp",
        [_Enum_index]: 0
      }, system_chrome.DeviceOrientation.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "landscapeLeft",
        [_Enum_index]: 1
      }, system_chrome.DeviceOrientation.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "portraitDown",
        [_Enum_index]: 2
      }, system_chrome.DeviceOrientation.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "landscapeRight",
        [_Enum_index]: 3
      }, system_chrome.DeviceOrientation.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T.DeviceOrientation());
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "top",
        [_Enum_index]: 0
      }, system_chrome.SystemUiOverlay.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "bottom",
        [_Enum_index]: 1
      }, system_chrome.SystemUiOverlay.prototype));
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7], T.SystemUiOverlay());
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "leanBack",
        [_Enum_index]: 0
      }, system_chrome.SystemUiMode.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "immersive",
        [_Enum_index]: 1
      }, system_chrome.SystemUiMode.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "immersiveSticky",
        [_Enum_index]: 2
      }, system_chrome.SystemUiMode.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "edgeToEdge",
        [_Enum_index]: 3
      }, system_chrome.SystemUiMode.prototype));
    },
    get C13() {
      return C[13] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "manual",
        [_Enum_index]: 4
      }, system_chrome.SystemUiMode.prototype));
    },
    get C8() {
      return C[8] = dart.constList([C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13], T.SystemUiMode());
    },
    get C15() {
      return C[15] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "light",
        [_Enum_index]: 1
      }, ui.Brightness.prototype));
    },
    get C16() {
      return C[16] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "dark",
        [_Enum_index]: 0
      }, ui.Brightness.prototype));
    },
    get C17() {
      return C[17] = dart.const(Object.setPrototypeOf({
        [Color_value]: 4278190080.0
      }, ui.Color.prototype));
    },
    get C14() {
      return C[14] = dart.const(Object.setPrototypeOf({
        [systemStatusBarContrastEnforced$]: null,
        [statusBarIconBrightness$]: C[15] || CT.C15,
        [statusBarBrightness$]: C[16] || CT.C16,
        [statusBarColor$]: null,
        [systemNavigationBarContrastEnforced$]: null,
        [systemNavigationBarIconBrightness$]: C[15] || CT.C15,
        [systemNavigationBarDividerColor$]: null,
        [systemNavigationBarColor$]: C[17] || CT.C17
      }, system_chrome.SystemUiOverlayStyle.prototype));
    },
    get C18() {
      return C[18] = dart.const(Object.setPrototypeOf({
        [systemStatusBarContrastEnforced$]: null,
        [statusBarIconBrightness$]: C[16] || CT.C16,
        [statusBarBrightness$]: C[15] || CT.C15,
        [statusBarColor$]: null,
        [systemNavigationBarContrastEnforced$]: null,
        [systemNavigationBarIconBrightness$]: C[15] || CT.C15,
        [systemNavigationBarDividerColor$]: null,
        [systemNavigationBarColor$]: C[17] || CT.C17
      }, system_chrome.SystemUiOverlayStyle.prototype));
    }
  }, false);
  var C = Array(19).fill(void 0);
  var I = [
    "package:flutter/src/services/system_chrome.dart",
    "dart:core",
    "dart:ui",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/system_chrome.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  system_chrome.DeviceOrientation = class DeviceOrientation extends core._Enum {
    [_enumToString]() {
      return "DeviceOrientation." + this[_name];
    }
  };
  (system_chrome.DeviceOrientation.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(system_chrome.DeviceOrientation).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = system_chrome.DeviceOrientation.prototype;
  dart.addTypeTests(system_chrome.DeviceOrientation);
  dart.addRtiResources(system_chrome.DeviceOrientation, ["flutter__src__services__system_chrome|DeviceOrientation"]);
  dart.addTypeCaches(system_chrome.DeviceOrientation);
  dart.setMethodSignature(system_chrome.DeviceOrientation, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(system_chrome.DeviceOrientation))));
  dart.setLibraryUri(system_chrome.DeviceOrientation, I[0]);
  dart.setStaticFieldSignature(system_chrome.DeviceOrientation, () => ['values', 'portraitUp', 'landscapeLeft', 'portraitDown', 'landscapeRight']);
  dart.defineLazy(system_chrome.DeviceOrientation, {
    /*system_chrome.DeviceOrientation.values*/get values() {
      return C[0] || CT.C0;
    },
    /*system_chrome.DeviceOrientation.portraitUp*/get portraitUp() {
      return C[1] || CT.C1;
    },
    /*system_chrome.DeviceOrientation.landscapeLeft*/get landscapeLeft() {
      return C[2] || CT.C2;
    },
    /*system_chrome.DeviceOrientation.portraitDown*/get portraitDown() {
      return C[3] || CT.C3;
    },
    /*system_chrome.DeviceOrientation.landscapeRight*/get landscapeRight() {
      return C[4] || CT.C4;
    }
  }, false);
  var label$ = dart.privateName(system_chrome, "ApplicationSwitcherDescription.label");
  var primaryColor$ = dart.privateName(system_chrome, "ApplicationSwitcherDescription.primaryColor");
  system_chrome.ApplicationSwitcherDescription = class ApplicationSwitcherDescription extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
    static ['_#new#tearOff'](opts) {
      let label = opts && 'label' in opts ? opts.label : null;
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      return new system_chrome.ApplicationSwitcherDescription.new({label: label, primaryColor: primaryColor});
    }
  };
  (system_chrome.ApplicationSwitcherDescription.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    this[label$] = label;
    this[primaryColor$] = primaryColor;
    ;
  }).prototype = system_chrome.ApplicationSwitcherDescription.prototype;
  dart.addTypeTests(system_chrome.ApplicationSwitcherDescription);
  dart.addRtiResources(system_chrome.ApplicationSwitcherDescription, ["flutter__src__services__system_chrome|ApplicationSwitcherDescription"]);
  dart.addTypeCaches(system_chrome.ApplicationSwitcherDescription);
  dart.setLibraryUri(system_chrome.ApplicationSwitcherDescription, I[0]);
  dart.setFieldSignature(system_chrome.ApplicationSwitcherDescription, () => dart.global.Object.setPrototypeOf({
    label: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    primaryColor: {type: T.intN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(system_chrome.ApplicationSwitcherDescription))));
  system_chrome.SystemUiOverlay = class SystemUiOverlay extends core._Enum {
    [_enumToString]() {
      return "SystemUiOverlay." + this[_name];
    }
  };
  (system_chrome.SystemUiOverlay.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(system_chrome.SystemUiOverlay).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = system_chrome.SystemUiOverlay.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlay);
  dart.addRtiResources(system_chrome.SystemUiOverlay, ["flutter__src__services__system_chrome|SystemUiOverlay"]);
  dart.addTypeCaches(system_chrome.SystemUiOverlay);
  dart.setMethodSignature(system_chrome.SystemUiOverlay, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(system_chrome.SystemUiOverlay))));
  dart.setLibraryUri(system_chrome.SystemUiOverlay, I[0]);
  dart.setStaticFieldSignature(system_chrome.SystemUiOverlay, () => ['values', 'top', 'bottom']);
  dart.defineLazy(system_chrome.SystemUiOverlay, {
    /*system_chrome.SystemUiOverlay.values*/get values() {
      return C[5] || CT.C5;
    },
    /*system_chrome.SystemUiOverlay.top*/get top() {
      return C[6] || CT.C6;
    },
    /*system_chrome.SystemUiOverlay.bottom*/get bottom() {
      return C[7] || CT.C7;
    }
  }, false);
  system_chrome.SystemUiMode = class SystemUiMode extends core._Enum {
    [_enumToString]() {
      return "SystemUiMode." + this[_name];
    }
  };
  (system_chrome.SystemUiMode.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(system_chrome.SystemUiMode).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = system_chrome.SystemUiMode.prototype;
  dart.addTypeTests(system_chrome.SystemUiMode);
  dart.addRtiResources(system_chrome.SystemUiMode, ["flutter__src__services__system_chrome|SystemUiMode"]);
  dart.addTypeCaches(system_chrome.SystemUiMode);
  dart.setMethodSignature(system_chrome.SystemUiMode, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(system_chrome.SystemUiMode))));
  dart.setLibraryUri(system_chrome.SystemUiMode, I[0]);
  dart.setStaticFieldSignature(system_chrome.SystemUiMode, () => ['values', 'leanBack', 'immersive', 'immersiveSticky', 'edgeToEdge', 'manual']);
  dart.defineLazy(system_chrome.SystemUiMode, {
    /*system_chrome.SystemUiMode.values*/get values() {
      return C[8] || CT.C8;
    },
    /*system_chrome.SystemUiMode.leanBack*/get leanBack() {
      return C[9] || CT.C9;
    },
    /*system_chrome.SystemUiMode.immersive*/get immersive() {
      return C[10] || CT.C10;
    },
    /*system_chrome.SystemUiMode.immersiveSticky*/get immersiveSticky() {
      return C[11] || CT.C11;
    },
    /*system_chrome.SystemUiMode.edgeToEdge*/get edgeToEdge() {
      return C[12] || CT.C12;
    },
    /*system_chrome.SystemUiMode.manual*/get manual() {
      return C[13] || CT.C13;
    }
  }, false);
  var systemNavigationBarColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarColor");
  var systemNavigationBarDividerColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarDividerColor");
  var systemNavigationBarIconBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarIconBrightness");
  var systemNavigationBarContrastEnforced$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarContrastEnforced");
  var statusBarColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarColor");
  var statusBarBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarBrightness");
  var statusBarIconBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarIconBrightness");
  var systemStatusBarContrastEnforced$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemStatusBarContrastEnforced");
  var _toMap = dart.privateName(system_chrome, "_toMap");
  var _is = dart.privateName(dart_rti, "_is");
  var Color_value = dart.privateName(ui, "Color.value");
  system_chrome.SystemUiOverlayStyle = class SystemUiOverlayStyle extends core.Object {
    get systemNavigationBarColor() {
      return this[systemNavigationBarColor$];
    }
    set systemNavigationBarColor(value) {
      super.systemNavigationBarColor = value;
    }
    get systemNavigationBarDividerColor() {
      return this[systemNavigationBarDividerColor$];
    }
    set systemNavigationBarDividerColor(value) {
      super.systemNavigationBarDividerColor = value;
    }
    get systemNavigationBarIconBrightness() {
      return this[systemNavigationBarIconBrightness$];
    }
    set systemNavigationBarIconBrightness(value) {
      super.systemNavigationBarIconBrightness = value;
    }
    get systemNavigationBarContrastEnforced() {
      return this[systemNavigationBarContrastEnforced$];
    }
    set systemNavigationBarContrastEnforced(value) {
      super.systemNavigationBarContrastEnforced = value;
    }
    get statusBarColor() {
      return this[statusBarColor$];
    }
    set statusBarColor(value) {
      super.statusBarColor = value;
    }
    get statusBarBrightness() {
      return this[statusBarBrightness$];
    }
    set statusBarBrightness(value) {
      super.statusBarBrightness = value;
    }
    get statusBarIconBrightness() {
      return this[statusBarIconBrightness$];
    }
    set statusBarIconBrightness(value) {
      super.statusBarIconBrightness = value;
    }
    get systemStatusBarContrastEnforced() {
      return this[systemStatusBarContrastEnforced$];
    }
    set systemStatusBarContrastEnforced(value) {
      super.systemStatusBarContrastEnforced = value;
    }
    static ['_#new#tearOff'](opts) {
      let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
      let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
      let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
      let systemNavigationBarContrastEnforced = opts && 'systemNavigationBarContrastEnforced' in opts ? opts.systemNavigationBarContrastEnforced : null;
      let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
      let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
      let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
      let systemStatusBarContrastEnforced = opts && 'systemStatusBarContrastEnforced' in opts ? opts.systemStatusBarContrastEnforced : null;
      return new system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: systemNavigationBarColor, systemNavigationBarDividerColor: systemNavigationBarDividerColor, systemNavigationBarIconBrightness: systemNavigationBarIconBrightness, systemNavigationBarContrastEnforced: systemNavigationBarContrastEnforced, statusBarColor: statusBarColor, statusBarBrightness: statusBarBrightness, statusBarIconBrightness: statusBarIconBrightness, systemStatusBarContrastEnforced: systemStatusBarContrastEnforced});
    }
    [_toMap]() {
      let t$366, t$366$, t$366$0, t$366$1, t$366$2, t$366$3;
      return new (G.IdentityMapOfString$dynamic()).from(["systemNavigationBarColor", (t$366 = this.systemNavigationBarColor, t$366 == null ? null : t$366.value), "systemNavigationBarDividerColor", (t$366$ = this.systemNavigationBarDividerColor, t$366$ == null ? null : t$366$.value), "systemStatusBarContrastEnforced", this.systemStatusBarContrastEnforced, "statusBarColor", (t$366$0 = this.statusBarColor, t$366$0 == null ? null : t$366$0.value), "statusBarBrightness", (t$366$1 = this.statusBarBrightness, t$366$1 == null ? null : dart.toString(t$366$1)), "statusBarIconBrightness", (t$366$2 = this.statusBarIconBrightness, t$366$2 == null ? null : dart.toString(t$366$2)), "systemNavigationBarIconBrightness", (t$366$3 = this.systemNavigationBarIconBrightness, t$366$3 == null ? null : dart.toString(t$366$3)), "systemNavigationBarContrastEnforced", this.systemNavigationBarContrastEnforced]);
    }
    toString() {
      return object.objectRuntimeType(this, "SystemUiOverlayStyle") + "(" + dart.str(this[_toMap]()) + ")";
    }
    copyWith(opts) {
      let t$366, t$366$, t$366$0, t$366$1, t$366$2, t$366$3, t$366$4, t$366$5;
      let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
      let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
      let systemNavigationBarContrastEnforced = opts && 'systemNavigationBarContrastEnforced' in opts ? opts.systemNavigationBarContrastEnforced : null;
      let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
      let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
      let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
      let systemStatusBarContrastEnforced = opts && 'systemStatusBarContrastEnforced' in opts ? opts.systemStatusBarContrastEnforced : null;
      let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
      return new system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: (t$366 = systemNavigationBarColor, t$366 == null ? this.systemNavigationBarColor : t$366), systemNavigationBarDividerColor: (t$366$ = systemNavigationBarDividerColor, t$366$ == null ? this.systemNavigationBarDividerColor : t$366$), systemNavigationBarContrastEnforced: (t$366$0 = systemNavigationBarContrastEnforced, t$366$0 == null ? this.systemNavigationBarContrastEnforced : t$366$0), statusBarColor: (t$366$1 = statusBarColor, t$366$1 == null ? this.statusBarColor : t$366$1), statusBarIconBrightness: (t$366$2 = statusBarIconBrightness, t$366$2 == null ? this.statusBarIconBrightness : t$366$2), statusBarBrightness: (t$366$3 = statusBarBrightness, t$366$3 == null ? this.statusBarBrightness : t$366$3), systemStatusBarContrastEnforced: (t$366$4 = systemStatusBarContrastEnforced, t$366$4 == null ? this.systemStatusBarContrastEnforced : t$366$4), systemNavigationBarIconBrightness: (t$366$5 = systemNavigationBarIconBrightness, t$366$5 == null ? this.systemNavigationBarIconBrightness : t$366$5)});
    }
    get hashCode() {
      return core.Object.hash(this.systemNavigationBarColor, this.systemNavigationBarDividerColor, this.systemNavigationBarContrastEnforced, this.statusBarColor, this.statusBarBrightness, this.statusBarIconBrightness, this.systemStatusBarContrastEnforced, this.systemNavigationBarIconBrightness);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T.SystemUiOverlayStyle()[_is](other) && dart.equals(other.systemNavigationBarColor, this.systemNavigationBarColor) && dart.equals(other.systemNavigationBarDividerColor, this.systemNavigationBarDividerColor) && other.systemNavigationBarContrastEnforced == this.systemNavigationBarContrastEnforced && dart.equals(other.statusBarColor, this.statusBarColor) && other.statusBarIconBrightness == this.statusBarIconBrightness && other.statusBarBrightness == this.statusBarBrightness && other.systemStatusBarContrastEnforced == this.systemStatusBarContrastEnforced && other.systemNavigationBarIconBrightness == this.systemNavigationBarIconBrightness;
    }
  };
  (system_chrome.SystemUiOverlayStyle.new = function(opts) {
    let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
    let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
    let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
    let systemNavigationBarContrastEnforced = opts && 'systemNavigationBarContrastEnforced' in opts ? opts.systemNavigationBarContrastEnforced : null;
    let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
    let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
    let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
    let systemStatusBarContrastEnforced = opts && 'systemStatusBarContrastEnforced' in opts ? opts.systemStatusBarContrastEnforced : null;
    this[systemNavigationBarColor$] = systemNavigationBarColor;
    this[systemNavigationBarDividerColor$] = systemNavigationBarDividerColor;
    this[systemNavigationBarIconBrightness$] = systemNavigationBarIconBrightness;
    this[systemNavigationBarContrastEnforced$] = systemNavigationBarContrastEnforced;
    this[statusBarColor$] = statusBarColor;
    this[statusBarBrightness$] = statusBarBrightness;
    this[statusBarIconBrightness$] = statusBarIconBrightness;
    this[systemStatusBarContrastEnforced$] = systemStatusBarContrastEnforced;
    ;
  }).prototype = system_chrome.SystemUiOverlayStyle.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlayStyle);
  dart.addRtiResources(system_chrome.SystemUiOverlayStyle, ["flutter__src__services__system_chrome|SystemUiOverlayStyle"]);
  dart.addTypeCaches(system_chrome.SystemUiOverlayStyle);
  dart.setMethodSignature(system_chrome.SystemUiOverlayStyle, () => dart.global.Object.setPrototypeOf({
    [_toMap]: T.VoidToMapOfString$dynamic(),
    copyWith: T.__ToSystemUiOverlayStyle()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(system_chrome.SystemUiOverlayStyle))));
  dart.setLibraryUri(system_chrome.SystemUiOverlayStyle, I[0]);
  dart.setFieldSignature(system_chrome.SystemUiOverlayStyle, () => dart.global.Object.setPrototypeOf({
    systemNavigationBarColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[2]},
    systemNavigationBarDividerColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[2]},
    systemNavigationBarIconBrightness: {type: T.BrightnessN(), isConst: false, isFinal: true, libraryUri: I[2]},
    systemNavigationBarContrastEnforced: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]},
    statusBarColor: {type: T.ColorN(), isConst: false, isFinal: true, libraryUri: I[2]},
    statusBarBrightness: {type: T.BrightnessN(), isConst: false, isFinal: true, libraryUri: I[2]},
    statusBarIconBrightness: {type: T.BrightnessN(), isConst: false, isFinal: true, libraryUri: I[2]},
    systemStatusBarContrastEnforced: {type: T.boolN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(system_chrome.SystemUiOverlayStyle))));
  dart.setStaticFieldSignature(system_chrome.SystemUiOverlayStyle, () => ['light', 'dark']);
  dart.defineExtensionMethods(system_chrome.SystemUiOverlayStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(system_chrome.SystemUiOverlayStyle, ['hashCode']);
  dart.defineLazy(system_chrome.SystemUiOverlayStyle, {
    /*system_chrome.SystemUiOverlayStyle.light*/get light() {
      return C[14] || CT.C14;
    },
    /*system_chrome.SystemUiOverlayStyle.dark*/get dark() {
      return C[18] || CT.C18;
    }
  }, false);
  system_chrome.SystemChrome = class SystemChrome extends core.Object {
    static setPreferredOrientations(orientations) {
      return async.async(T.void(), function* setPreferredOrientations() {
        yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setPreferredOrientations", system_chrome._stringify(orientations));
      });
    }
    static setApplicationSwitcherDescription(description) {
      return async.async(T.void(), function* setApplicationSwitcherDescription() {
        yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setApplicationSwitcherDescription", new (G.IdentityMapOfString$dynamic()).from(["label", description.label, "primaryColor", description.primaryColor]));
      });
    }
    static setEnabledSystemUIMode(mode, opts) {
      let overlays = opts && 'overlays' in opts ? opts.overlays : null;
      return async.async(T.void(), function* setEnabledSystemUIMode() {
        if (mode !== system_chrome.SystemUiMode.manual) {
          yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setEnabledSystemUIMode", dart.toString(mode));
        } else {
          if (!(mode === system_chrome.SystemUiMode.manual && overlays != null)) dart.assertFailed(null, I[3], 508, 14, "mode == SystemUiMode.manual && overlays != null");
          yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setEnabledSystemUIOverlays", system_chrome._stringify(dart.nullCheck(overlays)));
        }
      });
    }
    static setSystemUIChangeCallback(callback) {
      return async.async(T.void(), function* setSystemUIChangeCallback() {
        binding.ServicesBinding.instance.setSystemUiChangeCallback(callback);
        if (callback != null) {
          yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setSystemUIChangeListener");
        }
      });
    }
    static restoreSystemUIOverlays() {
      return async.async(T.void(), function* restoreSystemUIOverlays() {
        yield system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.restoreSystemUIOverlays");
      });
    }
    static setSystemUIOverlayStyle(style) {
      if (system_chrome.SystemChrome._pendingStyle != null) {
        system_chrome.SystemChrome._pendingStyle = style;
        return;
      }
      if (dart.equals(style, system_chrome.SystemChrome._latestStyle)) {
        return;
      }
      system_chrome.SystemChrome._pendingStyle = style;
      async.scheduleMicrotask(dart.fn(() => {
        if (!(system_chrome.SystemChrome._pendingStyle != null)) dart.assertFailed(null, I[3], 628, 14, "_pendingStyle != null");
        if (!dart.equals(system_chrome.SystemChrome._pendingStyle, system_chrome.SystemChrome._latestStyle)) {
          system_channels.SystemChannels.platform.invokeMethod(T.void(), "SystemChrome.setSystemUIOverlayStyle", dart.nullCheck(system_chrome.SystemChrome._pendingStyle)[_toMap]());
          system_chrome.SystemChrome._latestStyle = system_chrome.SystemChrome._pendingStyle;
        }
        system_chrome.SystemChrome._pendingStyle = null;
      }, T.VoidTovoid()));
    }
    static get latestStyle() {
      return system_chrome.SystemChrome._latestStyle;
    }
  };
  (system_chrome.SystemChrome.new = function() {
    ;
  }).prototype = system_chrome.SystemChrome.prototype;
  dart.addTypeTests(system_chrome.SystemChrome);
  dart.addRtiResources(system_chrome.SystemChrome, ["flutter__src__services__system_chrome|SystemChrome"]);
  dart.addTypeCaches(system_chrome.SystemChrome);
  dart.setStaticMethodSignature(system_chrome.SystemChrome, () => ['setPreferredOrientations', 'setApplicationSwitcherDescription', 'setEnabledSystemUIMode', 'setSystemUIChangeCallback', 'restoreSystemUIOverlays', 'setSystemUIOverlayStyle']);
  dart.setStaticGetterSignature(system_chrome.SystemChrome, () => ['latestStyle']);
  dart.setLibraryUri(system_chrome.SystemChrome, I[0]);
  dart.setStaticFieldSignature(system_chrome.SystemChrome, () => ['_pendingStyle', '_latestStyle']);
  dart.defineLazy(system_chrome.SystemChrome, {
    /*system_chrome.SystemChrome._pendingStyle*/get _pendingStyle() {
      return null;
    },
    set _pendingStyle(value) {},
    /*system_chrome.SystemChrome._latestStyle*/get _latestStyle() {
      return null;
    },
    set _latestStyle(value) {}
  }, false);
  system_chrome._stringify = function _stringify(list) {
    return (() => {
      let t$366 = G.JSArrayOfString().of([]);
      for (let item of list)
        t$366.push(dart.toString(item));
      return t$366;
    })();
  };
  dart.moduleConstCaches.set("packages/flutter/src/services/system_chrome.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__services__system_chrome|DeviceOrientation":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__services__system_chrome|SystemUiOverlay":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__system_chrome|SystemUiMode":{"core|_Enum":[],"core|Enum":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"ui|Brightness":{"core|_Enum":[],"core|Enum":[]},"async|Future":{"Future.T":"1"}}'));
  dart.trackLibraries("packages/flutter/src/services/system_chrome.dart", {
    "package:flutter/src/services/system_chrome.dart": system_chrome
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["system_chrome.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkDA;;;;;;;;;;;;;MAlBK,sCAAM;;;MAKT,0CAAU;;;MAMV,6CAAa;;;MAGb,4CAAY;;;MAGZ,8CAAc;;;;;;;IAcA;;;;;;IAMH;;;;;;;;;;;;;QATiC;QAAY;IAAZ;IAAY;;EAAe;;;;;;;;;;;;IAuBzE;;;;;;;;;;;;;MARK,oCAAM;;;MAGT,iCAAG;;;MAIH,oCAAM;;;;;;;IAkGR;;;;;;;;;;;;;MA1FK,iCAAM;;;MAiBT,mCAAQ;;;MAmBR,oCAAS;;;MAkBT,0CAAe;;;MAkBf,qCAAU;;;MAiBV,iCAAM;;;;;;;;;;;;;;;;IAyBO;;;;;;IAKA;;;;;;IAOK;;;;;;IAiBN;;;;;;IAKC;;;;;;IAKK;;;;;;IAKA;;;;;;IAiBN;;;;;;;;;;;;;;;;;;;AAsBV,YAAwB,6CACtB,oFAA4B,OAA0B,cACtD,oGAAmC,OAAiC,eACpE,mCAAmC,sCACnC,oEAAkB,OAAgB,gBAClC,8EAAuB,OAAqB,yBAC5C,sFAA2B,OAAyB,yBACpD,0GAAqC,OAAmC,yBACxE,uCAAuC;IAE3C;;AAGqB,YAAG,AAA8D,0BAA5C,MAAM,0BAAwB,eAAG,kBAAS;IAAE;;;UAI7E;UACA;UACD;UACC;UACK;UACA;UACN;UACM;AAEZ,YAAO,wEAC8C,QAAzB,wBAAwB,EAAxB,gBAAiC,0EACM,SAAhC,+BAA+B,EAA/B,iBAAwC,sFACA,UAApC,mCAAmC,EAAnC,kBAA4C,sEAClD,UAAf,cAAc,EAAd,kBAAuB,0DACU,UAAxB,uBAAuB,EAAvB,kBAAgC,+DAChB,UAApB,mBAAmB,EAAnB,kBAA4B,uEACgB,UAAhC,+BAA+B,EAA/B,kBAAwC,qFACJ,UAAlC,iCAAiC,EAAjC,kBAA0C;IAEjF;;AAGoB,YAAO,kBACzB,+BACA,sCACA,0CACA,qBACA,0BACA,8BACA,sCACA;IACD;YAGuB;;AACtB,uBAAU,iBAAN,KAAK,oBAAgB;AACvB,cAAO;;AAET,YAAa,AAQT,+BARG,KAAK,KAC0B,YAA/B,AAAM,KAAD,2BAA6B,kCACI,YAAtC,AAAM,KAAD,kCAAoC,yCACzC,AAAM,AAAoC,KAArC,wCAAwC,4CACxB,YAArB,AAAM,KAAD,iBAAmB,wBACxB,AAAM,AAAwB,KAAzB,4BAA4B,gCACjC,AAAM,AAAoB,KAArB,wBAAwB,4BAC7B,AAAM,AAAgC,KAAjC,oCAAoC,wCACzC,AAAM,AAAkC,KAAnC,sCAAsC;IACpD;;;QAhKO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAPA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;MAsEgC,wCAAK;;;MASL,uCAAI;;;;;oCAwK+B;AAAzB;AAC1C,cAAqB,AAAS,+DAC5B,yCACA,yBAAW,YAAY;MAE3B;;6CAOqF;AAAhC;AACnD,cAAqB,AAAS,+DAC5B,kDACiB,4CACf,SAAS,AAAY,WAAD,QACpB,gBAAgB,AAAY,WAAD;MAGjC;;kCAkCwD;UAA+B;AAA7C;AACxC,YAAI,IAAI,KAAiB;AACvB,gBAAqB,AAAS,+DAC5B,uCACK,cAAL,IAAI;;AAGN,gBAAO,AAAK,AAAuB,IAAxB,KAAiB,qCAAU,QAAQ;AAC9C,gBAAqB,AAAS,+DAC5B,2CACA,yBAAmB,eAAR,QAAQ;;MAGzB;;qCAsBsE;AAAzB;AAClB,QAAT,2DAAmC,QAAQ;AAE3D,YAAI,QAAQ;AACV,gBAAqB,AAAS,+DAC5B;;MAGN;;;AAW2C;AACzC,cAAqB,AAAS,+DAC5B;MAEJ;;mCAwDyD;AACvD,UAAI;AAEF,mDAAgB,KAAK;AACrB;;AAEF,UAAU,YAAN,KAAK,EAAI;AAGX;;AAEF,iDAAgB,KAAK;AACrB,8BAAkB;AAChB,cAAO,AAAc;AACrB,yBAAI,0CAAiB;AACK,UAAT,+DACb,wCACa,AAAE,eAAf;AAEF,oDAAe;;AAEjB,mDAAgB;;IAEpB;;AAMgD;IAAY;;;;EAE9D;;;;;;;;;MAN+B,wCAAa;;;;MAKb,uCAAY;;;;;iDAlSL;AAAS,UAAQ;;AACrD,eAAmB,OAAQ,KAAI;AAAO,iCAAL,IAAI;;;EACtC","file":"../../../../../../../../F:/packages/flutter/src/services/system_chrome.dart.lib.js"}');
  // Exports:
  return {
    src__services__system_chrome: system_chrome
  };
}));

//# sourceMappingURL=system_chrome.dart.lib.js.map

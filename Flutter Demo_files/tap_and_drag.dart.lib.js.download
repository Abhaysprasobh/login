// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/tap_and_drag.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/constants.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/vector_math/vector_math_64.dart'], (function load__packages__flutter__src__gestures__tap_and_drag_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__constants$46dart, packages__flutter__src__gestures__arena$46dart, packages__vector_math__vector_math_64$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const constants = packages__flutter__src__gestures__constants$46dart.src__gestures__constants;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  var tap_and_drag = Object.create(dart.library);
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOf_DragState: () => (T.ListOf_DragState = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__tap_and_drag|_DragState>")))(),
    _DragState: () => (T._DragState = dart.constFn(dart_rti.findType("flutter__src__gestures__tap_and_drag|_DragState")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    PointerDeviceKindN: () => (T.PointerDeviceKindN = dart.constFn(dart_rti.findType("ui|PointerDeviceKind?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    PointerDeviceKind: () => (T.PointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind")))(),
    DurationN: () => (T.DurationN = dart.constFn(dart_rti.findType("core|Duration?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))(),
    Velocity: () => (T.Velocity = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|Velocity")))(),
    PointerMoveEvent: () => (T.PointerMoveEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerMoveEvent")))(),
    PointerUpEvent: () => (T.PointerUpEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent")))(),
    PointerCancelEvent: () => (T.PointerCancelEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerCancelEvent")))(),
    PointerDownEventN: () => (T.PointerDownEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent?")))(),
    PointerUpEventN: () => (T.PointerUpEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerUpEvent?")))(),
    PointerEventTovoid: () => (T.PointerEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerEvent)")))(),
    PointerDownEventTovoid: () => (T.PointerDownEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerDownEvent)")))(),
    intTobool: () => (T.intTobool = dart.constFn(dart_rti.findType("core|bool(core|int)")))(),
    OffsetTobool: () => (T.OffsetTobool = dart.constFn(dart_rti.findType("core|bool(ui|Offset)")))(),
    PointerDownEventTobool: () => (T.PointerDownEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerDownEvent)")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    OffsetPairN: () => (T.OffsetPairN = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair?")))(),
    intN: () => (T.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti.findType("async|Timer?")))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart_rti.findType("ui|Offset?")))(),
    VoidToNvoid: () => (T.VoidToNvoid = dart.constFn(dart_rti.findType("~()?")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    PointerDownEvent: () => (T.PointerDownEvent = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerDownEvent")))(),
    OffsetPair: () => (T.OffsetPair = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|OffsetPair")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    PointerEventTobool: () => (T.PointerEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__gestures__events|PointerEvent)")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    PointerMoveEventTovoid: () => (T.PointerMoveEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerMoveEvent)")))(),
    PointerUpEventTovoid: () => (T.PointerUpEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__events|PointerUpEvent)")))(),
    DragStartBehavior: () => (T.DragStartBehavior = dart.constFn(dart_rti.findType("flutter__src__gestures__recognizer|DragStartBehavior")))(),
    TapDragDownDetailsToNvoid: () => (T.TapDragDownDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap_and_drag|TapDragDownDetails)?")))(),
    TapDragUpDetailsToNvoid: () => (T.TapDragUpDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap_and_drag|TapDragUpDetails)?")))(),
    TapDragStartDetailsToNvoid: () => (T.TapDragStartDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap_and_drag|TapDragStartDetails)?")))(),
    TapDragUpdateDetailsToNvoid: () => (T.TapDragUpdateDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap_and_drag|TapDragUpdateDetails)?")))(),
    TapDragEndDetailsToNvoid: () => (T.TapDragEndDetailsToNvoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap_and_drag|TapDragEndDetails)?")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    PointerEventN: () => (T.PointerEventN = dart.constFn(dart_rti.findType("flutter__src__gestures__events|PointerEvent?")))(),
    TapDragUpdateDetailsN: () => (T.TapDragUpdateDetailsN = dart.constFn(dart_rti.findType("flutter__src__gestures__tap_and_drag|TapDragUpdateDetails?")))(),
    SetOfint: () => (T.SetOfint = dart.constFn(dart_rti.findType("core|Set<core|int>")))(),
    PointerDeviceKindTobool: () => (T.PointerDeviceKindTobool = dart.constFn(dart_rti.findType("core|bool(ui|PointerDeviceKind)")))(),
    OffsetToOffset: () => (T.OffsetToOffset = dart.constFn(dart_rti.findType("ui|Offset(ui|Offset)")))(),
    OffsetTodouble: () => (T.OffsetTodouble = dart.constFn(dart_rti.findType("core|double(ui|Offset)")))(),
    OffsetTodoubleN: () => (T.OffsetTodoubleN = dart.constFn(dart_rti.findType("core|double?(ui|Offset)")))()
  };
  var G = {
    DiagnosticsPropertyOfOffset: () => (G.DiagnosticsPropertyOfOffset = dart.constFn(diagnostics.DiagnosticsProperty$(T.Offset())))(),
    DiagnosticsPropertyOfPointerDeviceKindN: () => (G.DiagnosticsPropertyOfPointerDeviceKindN = dart.constFn(diagnostics.DiagnosticsProperty$(T.PointerDeviceKindN())))(),
    DiagnosticsPropertyOfint: () => (G.DiagnosticsPropertyOfint = dart.constFn(diagnostics.DiagnosticsProperty$(T.int())))(),
    DiagnosticsPropertyOfDurationN: () => (G.DiagnosticsPropertyOfDurationN = dart.constFn(diagnostics.DiagnosticsProperty$(T.DurationN())))(),
    DiagnosticsPropertyOfdoubleN: () => (G.DiagnosticsPropertyOfdoubleN = dart.constFn(diagnostics.DiagnosticsProperty$(T.doubleN())))(),
    DiagnosticsPropertyOfVelocity: () => (G.DiagnosticsPropertyOfVelocity = dart.constFn(diagnostics.DiagnosticsProperty$(T.Velocity())))(),
    LinkedHashSetOfint: () => (G.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(T.int())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ready",
        [_Enum_index]: 0
      }, tap_and_drag._DragState.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "possible",
        [_Enum_index]: 1
      }, tap_and_drag._DragState.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "accepted",
        [_Enum_index]: 2
      }, tap_and_drag._DragState.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], T._DragState());
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Offset.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [Velocity_pixelsPerSecond]: C[4] || CT.C4
      }, velocity_tracker.Velocity.prototype));
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/gestures/tap_and_drag.dart",
    "dart:core",
    "dart:ui",
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/tap_and_drag.dart",
    "package:flutter/src/gestures/velocity_tracker.dart",
    "package:flutter/src/gestures/events.dart",
    "package:flutter/src/gestures/recognizer.dart",
    "dart:async"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  tap_and_drag._DragState = class _DragState extends core._Enum {
    [_enumToString]() {
      return "_DragState." + this[_name];
    }
  };
  (tap_and_drag._DragState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(tap_and_drag._DragState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = tap_and_drag._DragState.prototype;
  dart.addTypeTests(tap_and_drag._DragState);
  dart.addRtiResources(tap_and_drag._DragState, ["flutter__src__gestures__tap_and_drag|_DragState"]);
  dart.addTypeCaches(tap_and_drag._DragState);
  dart.setMethodSignature(tap_and_drag._DragState, () => dart.global.Object.setPrototypeOf({[_enumToString]: T.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag._DragState))));
  dart.setLibraryUri(tap_and_drag._DragState, I[0]);
  dart.setStaticFieldSignature(tap_and_drag._DragState, () => ['values', 'ready', 'possible', 'accepted']);
  dart.defineLazy(tap_and_drag._DragState, {
    /*tap_and_drag._DragState.values*/get values() {
      return C[0] || CT.C0;
    },
    /*tap_and_drag._DragState.ready*/get ready() {
      return C[1] || CT.C1;
    },
    /*tap_and_drag._DragState.possible*/get possible() {
      return C[2] || CT.C2;
    },
    /*tap_and_drag._DragState.accepted*/get accepted() {
      return C[3] || CT.C3;
    }
  }, false);
  var globalPosition$ = dart.privateName(tap_and_drag, "TapDragDownDetails.globalPosition");
  var localPosition$ = dart.privateName(tap_and_drag, "TapDragDownDetails.localPosition");
  var kind$ = dart.privateName(tap_and_drag, "TapDragDownDetails.kind");
  var consecutiveTapCount$ = dart.privateName(tap_and_drag, "TapDragDownDetails.consecutiveTapCount");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  tap_and_drag.TapDragDownDetails = class TapDragDownDetails extends Object_Diagnosticable$36 {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get consecutiveTapCount() {
      return this[consecutiveTapCount$];
    }
    set consecutiveTapCount(value) {
      super.consecutiveTapCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
      return new tap_and_drag.TapDragDownDetails.new({globalPosition: globalPosition, localPosition: localPosition, kind: kind, consecutiveTapCount: consecutiveTapCount});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("globalPosition", this.globalPosition));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition));
      properties.add(new (G.DiagnosticsPropertyOfPointerDeviceKindN()).new("kind", this.kind));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("consecutiveTapCount", this.consecutiveTapCount));
    }
  };
  (tap_and_drag.TapDragDownDetails.new = function(opts) {
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
    this[globalPosition$] = globalPosition;
    this[localPosition$] = localPosition;
    this[kind$] = kind;
    this[consecutiveTapCount$] = consecutiveTapCount;
    ;
  }).prototype = tap_and_drag.TapDragDownDetails.prototype;
  dart.addTypeTests(tap_and_drag.TapDragDownDetails);
  dart.addRtiResources(tap_and_drag.TapDragDownDetails, ["flutter__src__gestures__tap_and_drag|TapDragDownDetails"]);
  dart.addTypeCaches(tap_and_drag.TapDragDownDetails);
  dart.setLibraryUri(tap_and_drag.TapDragDownDetails, I[0]);
  dart.setFieldSignature(tap_and_drag.TapDragDownDetails, () => dart.global.Object.setPrototypeOf({
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    kind: {type: T.PointerDeviceKindN(), isConst: false, isFinal: true, libraryUri: I[2]},
    consecutiveTapCount: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.TapDragDownDetails))));
  var globalPosition$0 = dart.privateName(tap_and_drag, "TapDragUpDetails.globalPosition");
  var localPosition$0 = dart.privateName(tap_and_drag, "TapDragUpDetails.localPosition");
  var kind$0 = dart.privateName(tap_and_drag, "TapDragUpDetails.kind");
  var consecutiveTapCount$0 = dart.privateName(tap_and_drag, "TapDragUpDetails.consecutiveTapCount");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  tap_and_drag.TapDragUpDetails = class TapDragUpDetails extends Object_Diagnosticable$36$ {
    get globalPosition() {
      return this[globalPosition$0];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$0];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$0];
    }
    set kind(value) {
      super.kind = value;
    }
    get consecutiveTapCount() {
      return this[consecutiveTapCount$0];
    }
    set consecutiveTapCount(value) {
      super.consecutiveTapCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
      return new tap_and_drag.TapDragUpDetails.new({kind: kind, globalPosition: globalPosition, localPosition: localPosition, consecutiveTapCount: consecutiveTapCount});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("globalPosition", this.globalPosition));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition));
      properties.add(new (G.DiagnosticsPropertyOfPointerDeviceKindN()).new("kind", this.kind));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("consecutiveTapCount", this.consecutiveTapCount));
    }
  };
  (tap_and_drag.TapDragUpDetails.new = function(opts) {
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
    this[kind$0] = kind;
    this[globalPosition$0] = globalPosition;
    this[localPosition$0] = localPosition;
    this[consecutiveTapCount$0] = consecutiveTapCount;
    ;
  }).prototype = tap_and_drag.TapDragUpDetails.prototype;
  dart.addTypeTests(tap_and_drag.TapDragUpDetails);
  dart.addRtiResources(tap_and_drag.TapDragUpDetails, ["flutter__src__gestures__tap_and_drag|TapDragUpDetails"]);
  dart.addTypeCaches(tap_and_drag.TapDragUpDetails);
  dart.setLibraryUri(tap_and_drag.TapDragUpDetails, I[0]);
  dart.setFieldSignature(tap_and_drag.TapDragUpDetails, () => dart.global.Object.setPrototypeOf({
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    kind: {type: T.PointerDeviceKind(), isConst: false, isFinal: true, libraryUri: I[2]},
    consecutiveTapCount: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.TapDragUpDetails))));
  var sourceTimeStamp$ = dart.privateName(tap_and_drag, "TapDragStartDetails.sourceTimeStamp");
  var globalPosition$1 = dart.privateName(tap_and_drag, "TapDragStartDetails.globalPosition");
  var localPosition$1 = dart.privateName(tap_and_drag, "TapDragStartDetails.localPosition");
  var kind$1 = dart.privateName(tap_and_drag, "TapDragStartDetails.kind");
  var consecutiveTapCount$1 = dart.privateName(tap_and_drag, "TapDragStartDetails.consecutiveTapCount");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  tap_and_drag.TapDragStartDetails = class TapDragStartDetails extends Object_Diagnosticable$36$0 {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get globalPosition() {
      return this[globalPosition$1];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$1];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$1];
    }
    set kind(value) {
      super.kind = value;
    }
    get consecutiveTapCount() {
      return this[consecutiveTapCount$1];
    }
    set consecutiveTapCount(value) {
      super.consecutiveTapCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
      return new tap_and_drag.TapDragStartDetails.new({sourceTimeStamp: sourceTimeStamp, globalPosition: globalPosition, localPosition: localPosition, kind: kind, consecutiveTapCount: consecutiveTapCount});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfDurationN()).new("sourceTimeStamp", this.sourceTimeStamp));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("globalPosition", this.globalPosition));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition));
      properties.add(new (G.DiagnosticsPropertyOfPointerDeviceKindN()).new("kind", this.kind));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("consecutiveTapCount", this.consecutiveTapCount));
    }
  };
  (tap_and_drag.TapDragStartDetails.new = function(opts) {
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
    this[sourceTimeStamp$] = sourceTimeStamp;
    this[globalPosition$1] = globalPosition;
    this[localPosition$1] = localPosition;
    this[kind$1] = kind;
    this[consecutiveTapCount$1] = consecutiveTapCount;
    ;
  }).prototype = tap_and_drag.TapDragStartDetails.prototype;
  dart.addTypeTests(tap_and_drag.TapDragStartDetails);
  dart.addRtiResources(tap_and_drag.TapDragStartDetails, ["flutter__src__gestures__tap_and_drag|TapDragStartDetails"]);
  dart.addTypeCaches(tap_and_drag.TapDragStartDetails);
  dart.setLibraryUri(tap_and_drag.TapDragStartDetails, I[0]);
  dart.setFieldSignature(tap_and_drag.TapDragStartDetails, () => dart.global.Object.setPrototypeOf({
    sourceTimeStamp: {type: T.DurationN(), isConst: false, isFinal: true, libraryUri: I[1]},
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    kind: {type: T.PointerDeviceKindN(), isConst: false, isFinal: true, libraryUri: I[2]},
    consecutiveTapCount: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.TapDragStartDetails))));
  var sourceTimeStamp$0 = dart.privateName(tap_and_drag, "TapDragUpdateDetails.sourceTimeStamp");
  var delta$ = dart.privateName(tap_and_drag, "TapDragUpdateDetails.delta");
  var primaryDelta$ = dart.privateName(tap_and_drag, "TapDragUpdateDetails.primaryDelta");
  var globalPosition$2 = dart.privateName(tap_and_drag, "TapDragUpdateDetails.globalPosition");
  var localPosition$2 = dart.privateName(tap_and_drag, "TapDragUpdateDetails.localPosition");
  var kind$2 = dart.privateName(tap_and_drag, "TapDragUpdateDetails.kind");
  var offsetFromOrigin$ = dart.privateName(tap_and_drag, "TapDragUpdateDetails.offsetFromOrigin");
  var localOffsetFromOrigin$ = dart.privateName(tap_and_drag, "TapDragUpdateDetails.localOffsetFromOrigin");
  var consecutiveTapCount$2 = dart.privateName(tap_and_drag, "TapDragUpdateDetails.consecutiveTapCount");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  const Object_Diagnosticable$36$1 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$1.new = function() {
  }).prototype = Object_Diagnosticable$36$1.prototype;
  dart.applyMixin(Object_Diagnosticable$36$1, diagnostics.Diagnosticable);
  tap_and_drag.TapDragUpdateDetails = class TapDragUpdateDetails extends Object_Diagnosticable$36$1 {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$0];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
    get primaryDelta() {
      return this[primaryDelta$];
    }
    set primaryDelta(value) {
      super.primaryDelta = value;
    }
    get globalPosition() {
      return this[globalPosition$2];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$2];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get kind() {
      return this[kind$2];
    }
    set kind(value) {
      super.kind = value;
    }
    get offsetFromOrigin() {
      return this[offsetFromOrigin$];
    }
    set offsetFromOrigin(value) {
      super.offsetFromOrigin = value;
    }
    get localOffsetFromOrigin() {
      return this[localOffsetFromOrigin$];
    }
    set localOffsetFromOrigin(value) {
      super.localOffsetFromOrigin = value;
    }
    get consecutiveTapCount() {
      return this[consecutiveTapCount$2];
    }
    set consecutiveTapCount(value) {
      super.consecutiveTapCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
      let delta = opts && 'delta' in opts ? opts.delta : C[4] || CT.C4;
      let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let offsetFromOrigin = opts && 'offsetFromOrigin' in opts ? opts.offsetFromOrigin : null;
      let localOffsetFromOrigin = opts && 'localOffsetFromOrigin' in opts ? opts.localOffsetFromOrigin : null;
      let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
      return new tap_and_drag.TapDragUpdateDetails.new({sourceTimeStamp: sourceTimeStamp, delta: delta, primaryDelta: primaryDelta, globalPosition: globalPosition, kind: kind, localPosition: localPosition, offsetFromOrigin: offsetFromOrigin, localOffsetFromOrigin: localOffsetFromOrigin, consecutiveTapCount: consecutiveTapCount});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfDurationN()).new("sourceTimeStamp", this.sourceTimeStamp));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("delta", this.delta));
      properties.add(new (G.DiagnosticsPropertyOfdoubleN()).new("primaryDelta", this.primaryDelta));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("globalPosition", this.globalPosition));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition));
      properties.add(new (G.DiagnosticsPropertyOfPointerDeviceKindN()).new("kind", this.kind));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("offsetFromOrigin", this.offsetFromOrigin));
      properties.add(new (G.DiagnosticsPropertyOfOffset()).new("localOffsetFromOrigin", this.localOffsetFromOrigin));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("consecutiveTapCount", this.consecutiveTapCount));
    }
  };
  (tap_and_drag.TapDragUpdateDetails.new = function(opts) {
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let delta = opts && 'delta' in opts ? opts.delta : C[4] || CT.C4;
    let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let offsetFromOrigin = opts && 'offsetFromOrigin' in opts ? opts.offsetFromOrigin : null;
    let localOffsetFromOrigin = opts && 'localOffsetFromOrigin' in opts ? opts.localOffsetFromOrigin : null;
    let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
    this[sourceTimeStamp$0] = sourceTimeStamp;
    this[delta$] = delta;
    this[primaryDelta$] = primaryDelta;
    this[globalPosition$2] = globalPosition;
    this[kind$2] = kind;
    this[localPosition$2] = localPosition;
    this[offsetFromOrigin$] = offsetFromOrigin;
    this[localOffsetFromOrigin$] = localOffsetFromOrigin;
    this[consecutiveTapCount$2] = consecutiveTapCount;
    if (!(primaryDelta == null || primaryDelta === delta.dx && delta.dy === 0.0 || primaryDelta === delta.dy && delta.dx === 0.0)) dart.assertFailed(null, I[3], 260, 10, "primaryDelta == null\r\n           || (primaryDelta == delta.dx && delta.dy == 0.0)\r\n           || (primaryDelta == delta.dy && delta.dx == 0.0)");
    ;
  }).prototype = tap_and_drag.TapDragUpdateDetails.prototype;
  dart.addTypeTests(tap_and_drag.TapDragUpdateDetails);
  dart.addRtiResources(tap_and_drag.TapDragUpdateDetails, ["flutter__src__gestures__tap_and_drag|TapDragUpdateDetails"]);
  dart.addTypeCaches(tap_and_drag.TapDragUpdateDetails);
  dart.setLibraryUri(tap_and_drag.TapDragUpdateDetails, I[0]);
  dart.setFieldSignature(tap_and_drag.TapDragUpdateDetails, () => dart.global.Object.setPrototypeOf({
    sourceTimeStamp: {type: T.DurationN(), isConst: false, isFinal: true, libraryUri: I[1]},
    delta: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    primaryDelta: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    globalPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localPosition: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    kind: {type: T.PointerDeviceKindN(), isConst: false, isFinal: true, libraryUri: I[2]},
    offsetFromOrigin: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    localOffsetFromOrigin: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    consecutiveTapCount: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.TapDragUpdateDetails))));
  var velocity$ = dart.privateName(tap_and_drag, "TapDragEndDetails.velocity");
  var primaryVelocity$ = dart.privateName(tap_and_drag, "TapDragEndDetails.primaryVelocity");
  var consecutiveTapCount$3 = dart.privateName(tap_and_drag, "TapDragEndDetails.consecutiveTapCount");
  var Velocity_pixelsPerSecond = dart.privateName(velocity_tracker, "Velocity.pixelsPerSecond");
  const Object_Diagnosticable$36$2 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$2.new = function() {
  }).prototype = Object_Diagnosticable$36$2.prototype;
  dart.applyMixin(Object_Diagnosticable$36$2, diagnostics.Diagnosticable);
  tap_and_drag.TapDragEndDetails = class TapDragEndDetails extends Object_Diagnosticable$36$2 {
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get primaryVelocity() {
      return this[primaryVelocity$];
    }
    set primaryVelocity(value) {
      super.primaryVelocity = value;
    }
    get consecutiveTapCount() {
      return this[consecutiveTapCount$3];
    }
    set consecutiveTapCount(value) {
      super.consecutiveTapCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let velocity = opts && 'velocity' in opts ? opts.velocity : C[5] || CT.C5;
      let primaryVelocity = opts && 'primaryVelocity' in opts ? opts.primaryVelocity : null;
      let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
      return new tap_and_drag.TapDragEndDetails.new({velocity: velocity, primaryVelocity: primaryVelocity, consecutiveTapCount: consecutiveTapCount});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfVelocity()).new("velocity", this.velocity));
      properties.add(new (G.DiagnosticsPropertyOfdoubleN()).new("primaryVelocity", this.primaryVelocity));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("consecutiveTapCount", this.consecutiveTapCount));
    }
  };
  (tap_and_drag.TapDragEndDetails.new = function(opts) {
    let velocity = opts && 'velocity' in opts ? opts.velocity : C[5] || CT.C5;
    let primaryVelocity = opts && 'primaryVelocity' in opts ? opts.primaryVelocity : null;
    let consecutiveTapCount = opts && 'consecutiveTapCount' in opts ? opts.consecutiveTapCount : null;
    this[velocity$] = velocity;
    this[primaryVelocity$] = primaryVelocity;
    this[consecutiveTapCount$3] = consecutiveTapCount;
    if (!(primaryVelocity == null || primaryVelocity === velocity.pixelsPerSecond.dx || primaryVelocity === velocity.pixelsPerSecond.dy)) dart.assertFailed(null, I[3], 372, 10, "primaryVelocity == null\r\n           || primaryVelocity == velocity.pixelsPerSecond.dx\r\n           || primaryVelocity == velocity.pixelsPerSecond.dy");
    ;
  }).prototype = tap_and_drag.TapDragEndDetails.prototype;
  dart.addTypeTests(tap_and_drag.TapDragEndDetails);
  dart.addRtiResources(tap_and_drag.TapDragEndDetails, ["flutter__src__gestures__tap_and_drag|TapDragEndDetails"]);
  dart.addTypeCaches(tap_and_drag.TapDragEndDetails);
  dart.setLibraryUri(tap_and_drag.TapDragEndDetails, I[0]);
  dart.setFieldSignature(tap_and_drag.TapDragEndDetails, () => dart.global.Object.setPrototypeOf({
    velocity: {type: T.Velocity(), isConst: false, isFinal: true, libraryUri: I[4]},
    primaryVelocity: {type: T.doubleN(), isConst: false, isFinal: true, libraryUri: I[1]},
    consecutiveTapCount: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.TapDragEndDetails))));
  var _down = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._down");
  var _up = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._up");
  var _consecutiveTapCount = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._consecutiveTapCount");
  var _originPosition = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._originPosition");
  var _previousButtons = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._previousButtons");
  var _consecutiveTapTimer = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._consecutiveTapTimer");
  var _lastTapOffset = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin._lastTapOffset");
  var onTapTrackStart = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin.onTapTrackStart");
  var onTapTrackReset = dart.privateName(tap_and_drag, "_TapStatusTrackerMixin.onTapTrackReset");
  var _down$ = dart.privateName(tap_and_drag, "_down");
  var _up$ = dart.privateName(tap_and_drag, "_up");
  var _consecutiveTapCount$ = dart.privateName(tap_and_drag, "_consecutiveTapCount");
  var _originPosition$ = dart.privateName(tap_and_drag, "_originPosition");
  var _previousButtons$ = dart.privateName(tap_and_drag, "_previousButtons");
  var _consecutiveTapTimer$ = dart.privateName(tap_and_drag, "_consecutiveTapTimer");
  var _lastTapOffset$ = dart.privateName(tap_and_drag, "_lastTapOffset");
  var _tapTrackerReset = dart.privateName(tap_and_drag, "_tapTrackerReset");
  var _representsSameSeries = dart.privateName(tap_and_drag, "_representsSameSeries");
  var _consecutiveTapTimerStop = dart.privateName(tap_and_drag, "_consecutiveTapTimerStop");
  var _trackTap = dart.privateName(tap_and_drag, "_trackTap");
  var _is = dart.privateName(dart_rti, "_is");
  var _consecutiveTapTimerStart = dart.privateName(tap_and_drag, "_consecutiveTapTimerStart");
  var _hasSameButton = dart.privateName(tap_and_drag, "_hasSameButton");
  var _isWithinConsecutiveTapTolerance = dart.privateName(tap_and_drag, "_isWithinConsecutiveTapTolerance");
  var _consecutiveTapTimerTimeout = dart.privateName(tap_and_drag, "_consecutiveTapTimerTimeout");
  tap_and_drag._TapStatusTrackerMixin = class _TapStatusTrackerMixin extends recognizer.OneSequenceGestureRecognizer {};
  tap_and_drag._TapStatusTrackerMixin[dart.mixinOn] = OneSequenceGestureRecognizer => class _TapStatusTrackerMixin extends OneSequenceGestureRecognizer {
    get [_down$]() {
      return this[_down];
    }
    set [_down$](value) {
      this[_down] = value;
    }
    get [_up$]() {
      return this[_up];
    }
    set [_up$](value) {
      this[_up] = value;
    }
    get [_consecutiveTapCount$]() {
      return this[_consecutiveTapCount];
    }
    set [_consecutiveTapCount$](value) {
      this[_consecutiveTapCount] = value;
    }
    get [_originPosition$]() {
      return this[_originPosition];
    }
    set [_originPosition$](value) {
      this[_originPosition] = value;
    }
    get [_previousButtons$]() {
      return this[_previousButtons];
    }
    set [_previousButtons$](value) {
      this[_previousButtons] = value;
    }
    get [_consecutiveTapTimer$]() {
      return this[_consecutiveTapTimer];
    }
    set [_consecutiveTapTimer$](value) {
      this[_consecutiveTapTimer] = value;
    }
    get [_lastTapOffset$]() {
      return this[_lastTapOffset];
    }
    set [_lastTapOffset$](value) {
      this[_lastTapOffset] = value;
    }
    get onTapTrackStart() {
      return this[onTapTrackStart];
    }
    set onTapTrackStart(value) {
      this[onTapTrackStart] = value;
    }
    get onTapTrackReset() {
      return this[onTapTrackReset];
    }
    set onTapTrackReset(value) {
      this[onTapTrackReset] = value;
    }
    get currentDown() {
      return this[_down$];
    }
    get currentUp() {
      return this[_up$];
    }
    get consecutiveTapCount() {
      return this[_consecutiveTapCount$];
    }
    addAllowedPointer(event) {
      super.addAllowedPointer(event);
      if (this[_consecutiveTapTimer$] != null && !dart.nullCheck(this[_consecutiveTapTimer$]).isActive) {
        this[_tapTrackerReset]();
      }
      if (this.maxConsecutiveTap === this[_consecutiveTapCount$]) {
        this[_tapTrackerReset]();
      }
      this[_up$] = null;
      if (this[_down$] != null && !this[_representsSameSeries](event)) {
        this[_consecutiveTapCount$] = 1;
      } else {
        this[_consecutiveTapCount$] = this[_consecutiveTapCount$] + 1;
      }
      this[_consecutiveTapTimerStop]();
      this[_trackTap](event);
    }
    handleEvent(event) {
      if (T.PointerMoveEvent()[_is](event)) {
        let computedSlop = events.computeHitSlop(event.kind, this.gestureSettings);
        let isSlopPastTolerance = tap_and_drag._getGlobalDistance(event, this[_originPosition$]) > computedSlop;
        if (isSlopPastTolerance) {
          this[_consecutiveTapTimerStop]();
          this[_previousButtons$] = null;
          this[_lastTapOffset$] = null;
        }
      } else if (T.PointerUpEvent()[_is](event)) {
        this[_up$] = event;
        if (this[_down$] != null) {
          this[_consecutiveTapTimerStop]();
          this[_consecutiveTapTimerStart]();
        }
      } else if (T.PointerCancelEvent()[_is](event)) {
        this[_tapTrackerReset]();
      }
    }
    rejectGesture(pointer) {
      this[_tapTrackerReset]();
    }
    dispose() {
      this[_tapTrackerReset]();
      super.dispose();
    }
    [_trackTap](event) {
      let t$362;
      this[_down$] = event;
      this[_previousButtons$] = event.buttons;
      this[_lastTapOffset$] = event.position;
      this[_originPosition$] = new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
      t$362 = this.onTapTrackStart;
      t$362 == null ? null : t$362();
    }
    [_hasSameButton](buttons) {
      if (!(this[_previousButtons$] != null)) dart.assertFailed(null, I[3], 567, 12, "_previousButtons != null");
      if (buttons === dart.nullCheck(this[_previousButtons$])) {
        return true;
      } else {
        return false;
      }
    }
    [_isWithinConsecutiveTapTolerance](secondTapOffset) {
      if (this[_lastTapOffset$] == null) {
        return false;
      }
      let difference = secondTapOffset['-'](dart.nullCheck(this[_lastTapOffset$]));
      return difference.distance <= 100;
    }
    [_representsSameSeries](event) {
      return this[_consecutiveTapTimer$] != null && this[_isWithinConsecutiveTapTolerance](event.position) && this[_hasSameButton](event.buttons);
    }
    [_consecutiveTapTimerStart]() {
      this[_consecutiveTapTimer$] == null ? this[_consecutiveTapTimer$] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _consecutiveTapTimerTimeout)) : null;
    }
    [_consecutiveTapTimerStop]() {
      if (this[_consecutiveTapTimer$] != null) {
        dart.nullCheck(this[_consecutiveTapTimer$]).cancel();
        this[_consecutiveTapTimer$] = null;
      }
    }
    [_consecutiveTapTimerTimeout]() {
    }
    [_tapTrackerReset]() {
      let t$362;
      this[_consecutiveTapTimerStop]();
      this[_previousButtons$] = null;
      this[_originPosition$] = null;
      this[_lastTapOffset$] = null;
      this[_consecutiveTapCount$] = 0;
      this[_down$] = null;
      this[_up$] = null;
      t$362 = this.onTapTrackReset;
      t$362 == null ? null : t$362();
    }
  };
  (tap_and_drag._TapStatusTrackerMixin[dart.mixinNew] = function() {
    this[_down] = null;
    this[_up] = null;
    this[_consecutiveTapCount] = 0;
    this[_originPosition] = null;
    this[_previousButtons] = null;
    this[_consecutiveTapTimer] = null;
    this[_lastTapOffset] = null;
    this[onTapTrackStart] = null;
    this[onTapTrackReset] = null;
  }).prototype = tap_and_drag._TapStatusTrackerMixin.prototype;
  dart.addTypeTests(tap_and_drag._TapStatusTrackerMixin);
  dart.addRtiResources(tap_and_drag._TapStatusTrackerMixin, ["flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin"]);
  dart.addTypeCaches(tap_and_drag._TapStatusTrackerMixin);
  dart.setMethodSignature(tap_and_drag._TapStatusTrackerMixin, () => dart.global.Object.setPrototypeOf({
    handleEvent: T.PointerEventTovoid(),
    [_trackTap]: T.PointerDownEventTovoid(),
    [_hasSameButton]: T.intTobool(),
    [_isWithinConsecutiveTapTolerance]: T.OffsetTobool(),
    [_representsSameSeries]: T.PointerDownEventTobool(),
    [_consecutiveTapTimerStart]: T.VoidTovoid(),
    [_consecutiveTapTimerStop]: T.VoidTovoid(),
    [_consecutiveTapTimerTimeout]: T.VoidTovoid(),
    [_tapTrackerReset]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag._TapStatusTrackerMixin))));
  dart.setGetterSignature(tap_and_drag._TapStatusTrackerMixin, () => dart.global.Object.setPrototypeOf({
    currentDown: T.PointerDownEventN(),
    currentUp: T.PointerUpEventN(),
    consecutiveTapCount: T.int()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(tap_and_drag._TapStatusTrackerMixin))));
  dart.setLibraryUri(tap_and_drag._TapStatusTrackerMixin, I[0]);
  dart.setFieldSignature(tap_and_drag._TapStatusTrackerMixin, () => dart.global.Object.setPrototypeOf({
    [_down$]: {type: T.PointerDownEventN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_up$]: {type: T.PointerUpEventN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_consecutiveTapCount$]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_originPosition$]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_previousButtons$]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_consecutiveTapTimer$]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_lastTapOffset$]: {type: T.OffsetN(), isConst: false, isFinal: false, libraryUri: I[2]},
    onTapTrackStart: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    onTapTrackReset: {type: T.VoidToNvoid(), isConst: false, isFinal: false}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag._TapStatusTrackerMixin))));
  var dragStartBehavior = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.dragStartBehavior");
  var dragUpdateThrottleFrequency = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.dragUpdateThrottleFrequency");
  var maxConsecutiveTap = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.maxConsecutiveTap");
  var onTapDown = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onTapDown");
  var onTapUp = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onTapUp");
  var onDragStart = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onDragStart");
  var onDragUpdate = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onDragUpdate");
  var onDragEnd = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onDragEnd");
  var onCancel = dart.privateName(tap_and_drag, "BaseTapAndDragGestureRecognizer.onCancel");
  var _pastSlopTolerance = dart.privateName(tap_and_drag, "_pastSlopTolerance");
  var _sentTapDown = dart.privateName(tap_and_drag, "_sentTapDown");
  var _wonArenaForPrimaryPointer = dart.privateName(tap_and_drag, "_wonArenaForPrimaryPointer");
  var _primaryPointer = dart.privateName(tap_and_drag, "_primaryPointer");
  var _deadlineTimer = dart.privateName(tap_and_drag, "_deadlineTimer");
  var _dragState = dart.privateName(tap_and_drag, "_dragState");
  var _start = dart.privateName(tap_and_drag, "_start");
  var __BaseTapAndDragGestureRecognizer__initialPosition = dart.privateName(tap_and_drag, "_#BaseTapAndDragGestureRecognizer#_initialPosition");
  var __BaseTapAndDragGestureRecognizer__globalDistanceMoved = dart.privateName(tap_and_drag, "_#BaseTapAndDragGestureRecognizer#_globalDistanceMoved");
  var __BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes = dart.privateName(tap_and_drag, "_#BaseTapAndDragGestureRecognizer#_globalDistanceMovedAllAxes");
  var _correctedPosition = dart.privateName(tap_and_drag, "_correctedPosition");
  var _lastDragUpdateDetails = dart.privateName(tap_and_drag, "_lastDragUpdateDetails");
  var _dragUpdateThrottleTimer = dart.privateName(tap_and_drag, "_dragUpdateThrottleTimer");
  var _acceptedActivePointers = dart.privateName(tap_and_drag, "_acceptedActivePointers");
  var _deadline = dart.privateName(tap_and_drag, "_deadline");
  var _initialPosition = dart.privateName(tap_and_drag, "_initialPosition");
  var _globalDistanceMoved = dart.privateName(tap_and_drag, "_globalDistanceMoved");
  var _globalDistanceMovedAllAxes = dart.privateName(tap_and_drag, "_globalDistanceMovedAllAxes");
  var _handleDragUpdateThrottled = dart.privateName(tap_and_drag, "_handleDragUpdateThrottled");
  var _as = dart.privateName(dart_rti, "_as");
  var _didExceedDeadlineWithEvent = dart.privateName(tap_and_drag, "_didExceedDeadlineWithEvent");
  var _stopDeadlineTimer = dart.privateName(tap_and_drag, "_stopDeadlineTimer");
  var _checkTapDown = dart.privateName(tap_and_drag, "_checkTapDown");
  var _acceptDrag = dart.privateName(tap_and_drag, "_acceptDrag");
  var _checkTapUp = dart.privateName(tap_and_drag, "_checkTapUp");
  var _checkCancel = dart.privateName(tap_and_drag, "_checkCancel");
  var _checkDragEnd = dart.privateName(tap_and_drag, "_checkDragEnd");
  var _checkDragUpdate = dart.privateName(tap_and_drag, "_checkDragUpdate");
  var _checkDrag = dart.privateName(tap_and_drag, "_checkDrag");
  var _giveUpPointer = dart.privateName(tap_and_drag, "_giveUpPointer");
  var _resetTaps = dart.privateName(tap_and_drag, "_resetTaps");
  var _resetDragUpdateThrottle = dart.privateName(tap_and_drag, "_resetDragUpdateThrottle");
  var _checkDragStart = dart.privateName(tap_and_drag, "_checkDragStart");
  var _getDeltaForDetails = dart.privateName(tap_and_drag, "_getDeltaForDetails");
  var _getPrimaryValueFromOffset = dart.privateName(tap_and_drag, "_getPrimaryValueFromOffset");
  var _hasSufficientGlobalDistanceToAccept = dart.privateName(tap_and_drag, "_hasSufficientGlobalDistanceToAccept");
  var _didExceedDeadline = dart.privateName(tap_and_drag, "_didExceedDeadline");
  const OneSequenceGestureRecognizer__TapStatusTrackerMixin$36 = class OneSequenceGestureRecognizer__TapStatusTrackerMixin extends recognizer.OneSequenceGestureRecognizer {};
  (OneSequenceGestureRecognizer__TapStatusTrackerMixin$36.new = function(opts) {
    tap_and_drag._TapStatusTrackerMixin[dart.mixinNew].call(this);
    dart.global.Object.getPrototypeOf(OneSequenceGestureRecognizer__TapStatusTrackerMixin$36).new.call(this, opts);
  }).prototype = OneSequenceGestureRecognizer__TapStatusTrackerMixin$36.prototype;
  dart.applyMixin(OneSequenceGestureRecognizer__TapStatusTrackerMixin$36, tap_and_drag._TapStatusTrackerMixin);
  tap_and_drag.BaseTapAndDragGestureRecognizer = class BaseTapAndDragGestureRecognizer extends OneSequenceGestureRecognizer__TapStatusTrackerMixin$36 {
    get dragStartBehavior() {
      return this[dragStartBehavior];
    }
    set dragStartBehavior(value) {
      this[dragStartBehavior] = value;
    }
    get dragUpdateThrottleFrequency() {
      return this[dragUpdateThrottleFrequency];
    }
    set dragUpdateThrottleFrequency(value) {
      this[dragUpdateThrottleFrequency] = value;
    }
    get maxConsecutiveTap() {
      return this[maxConsecutiveTap];
    }
    set maxConsecutiveTap(value) {
      this[maxConsecutiveTap] = value;
    }
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onDragStart() {
      return this[onDragStart];
    }
    set onDragStart(value) {
      this[onDragStart] = value;
    }
    get onDragUpdate() {
      return this[onDragUpdate];
    }
    set onDragUpdate(value) {
      this[onDragUpdate] = value;
    }
    get onDragEnd() {
      return this[onDragEnd];
    }
    set onDragEnd(value) {
      this[onDragEnd] = value;
    }
    get onCancel() {
      return this[onCancel];
    }
    set onCancel(value) {
      this[onCancel] = value;
    }
    get [_initialPosition]() {
      let t$362;
      t$362 = this[__BaseTapAndDragGestureRecognizer__initialPosition];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_initialPosition")) : t$362;
    }
    set [_initialPosition](_initialPosition$35param) {
      this[__BaseTapAndDragGestureRecognizer__initialPosition] = _initialPosition$35param;
    }
    get [_globalDistanceMoved]() {
      let t$362;
      t$362 = this[__BaseTapAndDragGestureRecognizer__globalDistanceMoved];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_globalDistanceMoved")) : t$362;
    }
    set [_globalDistanceMoved](_globalDistanceMoved$35param) {
      this[__BaseTapAndDragGestureRecognizer__globalDistanceMoved] = _globalDistanceMoved$35param;
    }
    get [_globalDistanceMovedAllAxes]() {
      let t$362;
      t$362 = this[__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_globalDistanceMovedAllAxes")) : t$362;
    }
    set [_globalDistanceMovedAllAxes](_globalDistanceMovedAllAxes$35param) {
      this[__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes] = _globalDistanceMovedAllAxes$35param;
    }
    [_handleDragUpdateThrottled]() {
      if (!(this[_lastDragUpdateDetails] != null)) dart.assertFailed(null, I[3], 913, 12, "_lastDragUpdateDetails != null");
      if (this.onDragUpdate != null) {
        this.invokeCallback(T.void(), "onDragUpdate", dart.fn(() => dart.nullCheck(this.onDragUpdate)(dart.nullCheck(this[_lastDragUpdateDetails])), T.VoidTovoid()));
      }
      this[_dragUpdateThrottleTimer] = null;
      this[_lastDragUpdateDetails] = null;
    }
    isPointerAllowed(event) {
      if (this[_primaryPointer] == null) {
        switch (event.buttons) {
          case 1:
            {
              if (this.onTapDown == null && this.onDragStart == null && this.onDragUpdate == null && this.onDragEnd == null && this.onTapUp == null && this.onCancel == null) {
                return false;
              }
              break;
            }
          default:
            {
              return false;
            }
        }
      } else {
        if (event.pointer !== this[_primaryPointer]) {
          return false;
        }
      }
      return super.isPointerAllowed(T.PointerDownEvent()[_as](event));
    }
    addAllowedPointer(event) {
      if (this[_dragState] === tap_and_drag._DragState.ready) {
        super.addAllowedPointer(event);
        this[_primaryPointer] = event.pointer;
        this[_globalDistanceMoved] = 0.0;
        this[_globalDistanceMovedAllAxes] = 0.0;
        this[_dragState] = tap_and_drag._DragState.possible;
        this[_initialPosition] = new recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_deadlineTimer] = async.Timer.new(this[_deadline], dart.fn(() => this[_didExceedDeadlineWithEvent](event), T.VoidTovoid()));
      }
    }
    handleNonAllowedPointer(event) {
      if (event.buttons !== 1) {
        if (!this[_wonArenaForPrimaryPointer]) {
          super.handleNonAllowedPointer(event);
        }
      }
    }
    acceptGesture(pointer) {
      if (pointer !== this[_primaryPointer]) {
        return;
      }
      this[_stopDeadlineTimer]();
      if (!!this[_acceptedActivePointers].contains(pointer)) dart.assertFailed(null, I[3], 977, 12, "!_acceptedActivePointers.contains(pointer)");
      this[_acceptedActivePointers].add(pointer);
      if (this.currentDown != null) {
        this[_checkTapDown](dart.nullCheck(this.currentDown));
      }
      this[_wonArenaForPrimaryPointer] = true;
      if (this[_start] != null) {
        if (!(this[_dragState] === tap_and_drag._DragState.accepted)) dart.assertFailed(null, I[3], 990, 14, "_dragState == _DragState.accepted");
        if (!(this.currentUp == null)) dart.assertFailed(null, I[3], 991, 14, "currentUp == null");
        this[_acceptDrag](dart.nullCheck(this[_start]));
      }
      if (this.currentUp != null) {
        this[_checkTapUp](dart.nullCheck(this.currentUp));
      }
    }
    didStopTrackingLastPointer(pointer) {
      switch (this[_dragState]) {
        case C[1] || CT.C1:
          {
            this[_checkCancel]();
            this.resolve(arena.GestureDisposition.rejected);
            break;
          }
        case C[2] || CT.C2:
          {
            if (this[_pastSlopTolerance]) {
              if (this[_wonArenaForPrimaryPointer]) {
                if (this.currentDown != null) {
                  if (!this[_acceptedActivePointers].remove(pointer)) {
                    this.resolvePointer(pointer, arena.GestureDisposition.rejected);
                  }
                  this[_dragState] = tap_and_drag._DragState.accepted;
                  this[_acceptDrag](dart.nullCheck(this.currentDown));
                  this[_checkDragEnd]();
                }
              } else {
                this[_checkCancel]();
                this.resolve(arena.GestureDisposition.rejected);
              }
            } else {
              if (this.currentUp != null) {
                this[_checkTapUp](dart.nullCheck(this.currentUp));
              }
            }
            break;
          }
        case C[3] || CT.C3:
          {
            this[_checkDragEnd]();
          }
      }
      this[_stopDeadlineTimer]();
      this[_dragState] = tap_and_drag._DragState.ready;
      this[_pastSlopTolerance] = false;
    }
    handleEvent(event) {
      if (event.pointer !== this[_primaryPointer]) {
        return;
      }
      super.handleEvent(event);
      if (T.PointerMoveEvent()[_is](event)) {
        let computedSlop = events.computeHitSlop(event.kind, this.gestureSettings);
        this[_pastSlopTolerance] = this[_pastSlopTolerance] || tap_and_drag._getGlobalDistance(event, this[_initialPosition]) > computedSlop;
        if (this[_dragState] === tap_and_drag._DragState.accepted) {
          this[_checkDragUpdate](event);
        } else if (this[_dragState] === tap_and_drag._DragState.possible) {
          if (this[_start] == null) {
            this[_checkDrag](event);
          }
          if (this[_start] != null) {
            this[_acceptDrag](dart.nullCheck(this[_start]));
          }
        }
      } else if (T.PointerUpEvent()[_is](event)) {
        if (this[_dragState] === tap_and_drag._DragState.possible) {
          this.stopTrackingIfPointerNoLongerDown(event);
        } else if (this[_dragState] === tap_and_drag._DragState.accepted) {
          this[_giveUpPointer](event.pointer);
        }
      } else if (T.PointerCancelEvent()[_is](event)) {
        this[_dragState] = tap_and_drag._DragState.ready;
        this[_giveUpPointer](event.pointer);
      }
    }
    rejectGesture(pointer) {
      if (pointer !== this[_primaryPointer]) {
        return;
      }
      super.rejectGesture(pointer);
      this[_stopDeadlineTimer]();
      this[_giveUpPointer](pointer);
      this[_resetTaps]();
      this[_resetDragUpdateThrottle]();
    }
    dispose() {
      this[_stopDeadlineTimer]();
      this[_resetDragUpdateThrottle]();
      super.dispose();
    }
    get debugDescription() {
      return "tap_and_drag";
    }
    [_acceptDrag](event) {
      if (!this[_wonArenaForPrimaryPointer]) {
        return;
      }
      if (this.dragStartBehavior === recognizer.DragStartBehavior.start) {
        this[_initialPosition] = this[_initialPosition]['+'](new recognizer.OffsetPair.new({global: event.delta, local: event.localDelta}));
      }
      this[_checkDragStart](event);
      if (!dart.equals(event.localDelta, ui.Offset.zero)) {
        let localToGlobal = event.transform != null ? vector_math_64.Matrix4.tryInvert(dart.nullCheck(event.transform)) : null;
        let correctedLocalPosition = this[_initialPosition].local['+'](event.localDelta);
        let globalUpdateDelta = events.PointerEvent.transformDeltaViaPositions({untransformedEndPosition: correctedLocalPosition, untransformedDelta: event.localDelta, transform: localToGlobal});
        let updateDelta = new recognizer.OffsetPair.new({local: event.localDelta, global: globalUpdateDelta});
        this[_correctedPosition] = this[_initialPosition]['+'](updateDelta);
        this[_checkDragUpdate](event);
        this[_correctedPosition] = null;
      }
    }
    [_checkDrag](event) {
      let t$362;
      let localToGlobalTransform = event.transform == null ? null : vector_math_64.Matrix4.tryInvert(dart.nullCheck(event.transform));
      let movedLocally = this[_getDeltaForDetails](event.localDelta);
      this[_globalDistanceMoved] = this[_globalDistanceMoved] + events.PointerEvent.transformDeltaViaPositions({transform: localToGlobalTransform, untransformedDelta: movedLocally, untransformedEndPosition: event.localPosition}).distance * (t$362 = this[_getPrimaryValueFromOffset](movedLocally), t$362 == null ? 1.0 : t$362)[$sign];
      this[_globalDistanceMovedAllAxes] = this[_globalDistanceMovedAllAxes] + events.PointerEvent.transformDeltaViaPositions({transform: localToGlobalTransform, untransformedDelta: event.localDelta, untransformedEndPosition: event.localPosition}).distance * (1)[$sign];
      if (this[_hasSufficientGlobalDistanceToAccept](event.kind) || this[_wonArenaForPrimaryPointer] && this[_globalDistanceMovedAllAxes][$abs]() > events.computePanSlop(event.kind, this.gestureSettings)) {
        this[_start] = event;
        this[_dragState] = tap_and_drag._DragState.accepted;
        if (!this[_wonArenaForPrimaryPointer]) {
          this.resolve(arena.GestureDisposition.accepted);
        }
      }
    }
    [_checkTapDown](event) {
      if (this[_sentTapDown]) {
        return;
      }
      let details = new tap_and_drag.TapDragDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: this.getKindForPointer(event.pointer), consecutiveTapCount: this.consecutiveTapCount});
      if (this.onTapDown != null) {
        this.invokeCallback(T.void(), "onTapDown", dart.fn(() => dart.nullCheck(this.onTapDown)(details), T.VoidTovoid()));
      }
      this[_sentTapDown] = true;
    }
    [_checkTapUp](event) {
      if (!this[_wonArenaForPrimaryPointer]) {
        return;
      }
      let upDetails = new tap_and_drag.TapDragUpDetails.new({kind: event.kind, globalPosition: event.position, localPosition: event.localPosition, consecutiveTapCount: this.consecutiveTapCount});
      if (this.onTapUp != null) {
        this.invokeCallback(T.void(), "onTapUp", dart.fn(() => dart.nullCheck(this.onTapUp)(upDetails), T.VoidTovoid()));
      }
      this[_resetTaps]();
      if (!this[_acceptedActivePointers].remove(event.pointer)) {
        this.resolvePointer(event.pointer, arena.GestureDisposition.rejected);
      }
    }
    [_checkDragStart](event) {
      if (this.onDragStart != null) {
        let details = new tap_and_drag.TapDragStartDetails.new({sourceTimeStamp: event.timeStamp, globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local, kind: this.getKindForPointer(event.pointer), consecutiveTapCount: this.consecutiveTapCount});
        this.invokeCallback(T.void(), "onDragStart", dart.fn(() => dart.nullCheck(this.onDragStart)(details), T.VoidTovoid()));
      }
      this[_start] = null;
    }
    [_checkDragUpdate](event) {
      let globalPosition = this[_correctedPosition] != null ? dart.nullCheck(this[_correctedPosition]).global : event.position;
      let localPosition = this[_correctedPosition] != null ? dart.nullCheck(this[_correctedPosition]).local : event.localPosition;
      let details = new tap_and_drag.TapDragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.localDelta, globalPosition: globalPosition, kind: this.getKindForPointer(event.pointer), localPosition: localPosition, offsetFromOrigin: globalPosition['-'](this[_initialPosition].global), localOffsetFromOrigin: localPosition['-'](this[_initialPosition].local), consecutiveTapCount: this.consecutiveTapCount});
      if (this.dragUpdateThrottleFrequency != null) {
        this[_lastDragUpdateDetails] = details;
        this[_dragUpdateThrottleTimer] == null ? this[_dragUpdateThrottleTimer] = async.Timer.new(dart.nullCheck(this.dragUpdateThrottleFrequency), dart.bind(this, _handleDragUpdateThrottled)) : null;
      } else {
        if (this.onDragUpdate != null) {
          this.invokeCallback(T.void(), "onDragUpdate", dart.fn(() => dart.nullCheck(this.onDragUpdate)(details), T.VoidTovoid()));
        }
      }
    }
    [_checkDragEnd]() {
      if (this[_dragUpdateThrottleTimer] != null) {
        dart.nullCheck(this[_dragUpdateThrottleTimer]).cancel();
        this[_handleDragUpdateThrottled]();
      }
      let endDetails = new tap_and_drag.TapDragEndDetails.new({primaryVelocity: 0.0, consecutiveTapCount: this.consecutiveTapCount});
      if (this.onDragEnd != null) {
        this.invokeCallback(T.void(), "onDragEnd", dart.fn(() => dart.nullCheck(this.onDragEnd)(endDetails), T.VoidTovoid()));
      }
      this[_resetTaps]();
      this[_resetDragUpdateThrottle]();
    }
    [_checkCancel]() {
      if (!this[_sentTapDown]) {
        return;
      }
      if (this.onCancel != null) {
        this.invokeCallback(T.void(), "onCancel", dart.nullCheck(this.onCancel));
      }
      this[_resetDragUpdateThrottle]();
      this[_resetTaps]();
    }
    [_didExceedDeadlineWithEvent](event) {
      this[_didExceedDeadline]();
    }
    [_didExceedDeadline]() {
      if (this.currentDown != null) {
        this[_checkTapDown](dart.nullCheck(this.currentDown));
        if (this.consecutiveTapCount > 1) {
          this.resolve(arena.GestureDisposition.accepted);
        }
      }
    }
    [_giveUpPointer](pointer) {
      this.stopTrackingPointer(pointer);
      if (!this[_acceptedActivePointers].remove(pointer)) {
        this.resolvePointer(pointer, arena.GestureDisposition.rejected);
      }
    }
    [_resetTaps]() {
      this[_sentTapDown] = false;
      this[_wonArenaForPrimaryPointer] = false;
      this[_primaryPointer] = null;
    }
    [_resetDragUpdateThrottle]() {
      if (this.dragUpdateThrottleFrequency == null) {
        return;
      }
      this[_lastDragUpdateDetails] = null;
      if (this[_dragUpdateThrottleTimer] != null) {
        dart.nullCheck(this[_dragUpdateThrottleTimer]).cancel();
        this[_dragUpdateThrottleTimer] = null;
      }
    }
    [_stopDeadlineTimer]() {
      if (this[_deadlineTimer] != null) {
        dart.nullCheck(this[_deadlineTimer]).cancel();
        this[_deadlineTimer] = null;
      }
    }
  };
  (tap_and_drag.BaseTapAndDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[dragUpdateThrottleFrequency] = null;
    this[maxConsecutiveTap] = null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onDragStart] = null;
    this[onDragUpdate] = null;
    this[onDragEnd] = null;
    this[onCancel] = null;
    this[_pastSlopTolerance] = false;
    this[_sentTapDown] = false;
    this[_wonArenaForPrimaryPointer] = false;
    this[_primaryPointer] = null;
    this[_deadlineTimer] = null;
    this[_dragState] = tap_and_drag._DragState.ready;
    this[_start] = null;
    this[__BaseTapAndDragGestureRecognizer__initialPosition] = null;
    this[__BaseTapAndDragGestureRecognizer__globalDistanceMoved] = null;
    this[__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes] = null;
    this[_correctedPosition] = null;
    this[_lastDragUpdateDetails] = null;
    this[_dragUpdateThrottleTimer] = null;
    this[_acceptedActivePointers] = G.LinkedHashSetOfint().new();
    this[_deadline] = constants.kPressTimeout;
    this[dragStartBehavior] = recognizer.DragStartBehavior.start;
    dart.global.Object.getPrototypeOf(tap_and_drag.BaseTapAndDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = tap_and_drag.BaseTapAndDragGestureRecognizer.prototype;
  dart.addTypeTests(tap_and_drag.BaseTapAndDragGestureRecognizer);
  dart.addRtiResources(tap_and_drag.BaseTapAndDragGestureRecognizer, ["flutter__src__gestures__tap_and_drag|BaseTapAndDragGestureRecognizer"]);
  dart.addTypeCaches(tap_and_drag.BaseTapAndDragGestureRecognizer);
  dart.setMethodSignature(tap_and_drag.BaseTapAndDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_handleDragUpdateThrottled]: T.VoidTovoid(),
    isPointerAllowed: T.PointerEventTobool(),
    didStopTrackingLastPointer: T.intTovoid(),
    [_acceptDrag]: T.PointerEventTovoid(),
    [_checkDrag]: T.PointerMoveEventTovoid(),
    [_checkTapDown]: T.PointerDownEventTovoid(),
    [_checkTapUp]: T.PointerUpEventTovoid(),
    [_checkDragStart]: T.PointerEventTovoid(),
    [_checkDragUpdate]: T.PointerEventTovoid(),
    [_checkDragEnd]: T.VoidTovoid(),
    [_checkCancel]: T.VoidTovoid(),
    [_didExceedDeadlineWithEvent]: T.PointerDownEventTovoid(),
    [_didExceedDeadline]: T.VoidTovoid(),
    [_giveUpPointer]: T.intTovoid(),
    [_resetTaps]: T.VoidTovoid(),
    [_resetDragUpdateThrottle]: T.VoidTovoid(),
    [_stopDeadlineTimer]: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag.BaseTapAndDragGestureRecognizer))));
  dart.setGetterSignature(tap_and_drag.BaseTapAndDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_initialPosition]: T.OffsetPair(),
    [_globalDistanceMoved]: T.double(),
    [_globalDistanceMovedAllAxes]: T.double(),
    debugDescription: T.String()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(tap_and_drag.BaseTapAndDragGestureRecognizer))));
  dart.setSetterSignature(tap_and_drag.BaseTapAndDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_initialPosition]: T.OffsetPair(),
    [_globalDistanceMoved]: T.double(),
    [_globalDistanceMovedAllAxes]: T.double()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(tap_and_drag.BaseTapAndDragGestureRecognizer))));
  dart.setLibraryUri(tap_and_drag.BaseTapAndDragGestureRecognizer, I[0]);
  dart.setFieldSignature(tap_and_drag.BaseTapAndDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    dragStartBehavior: {type: T.DragStartBehavior(), isConst: false, isFinal: false, libraryUri: I[6]},
    dragUpdateThrottleFrequency: {type: T.DurationN(), isConst: false, isFinal: false, libraryUri: I[1]},
    maxConsecutiveTap: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    onTapDown: {type: T.TapDragDownDetailsToNvoid(), isConst: false, isFinal: false},
    onTapUp: {type: T.TapDragUpDetailsToNvoid(), isConst: false, isFinal: false},
    onDragStart: {type: T.TapDragStartDetailsToNvoid(), isConst: false, isFinal: false},
    onDragUpdate: {type: T.TapDragUpdateDetailsToNvoid(), isConst: false, isFinal: false},
    onDragEnd: {type: T.TapDragEndDetailsToNvoid(), isConst: false, isFinal: false},
    onCancel: {type: T.VoidToNvoid(), isConst: false, isFinal: false},
    [_pastSlopTolerance]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_sentTapDown]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_wonArenaForPrimaryPointer]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_primaryPointer]: {type: T.intN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_deadlineTimer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_deadline]: {type: T.Duration(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_dragState]: {type: T._DragState(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_start]: {type: T.PointerEventN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [__BaseTapAndDragGestureRecognizer__initialPosition]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [__BaseTapAndDragGestureRecognizer__globalDistanceMoved]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_correctedPosition]: {type: T.OffsetPairN(), isConst: false, isFinal: false, libraryUri: I[6]},
    [_lastDragUpdateDetails]: {type: T.TapDragUpdateDetailsN(), isConst: false, isFinal: false, libraryUri: I[0]},
    [_dragUpdateThrottleTimer]: {type: T.TimerN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_acceptedActivePointers]: {type: T.SetOfint(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tap_and_drag.BaseTapAndDragGestureRecognizer))));
  tap_and_drag.TapAndHorizontalDragGestureRecognizer = class TapAndHorizontalDragGestureRecognizer extends tap_and_drag.BaseTapAndDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      return new tap_and_drag.TapAndHorizontalDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind) {
      return this[_globalDistanceMoved][$abs]() > events.computeHitSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return new ui.Offset.new(delta.dx, 0.0);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dx;
    }
    get debugDescription() {
      return "tap and horizontal drag";
    }
  };
  (tap_and_drag.TapAndHorizontalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    dart.global.Object.getPrototypeOf(tap_and_drag.TapAndHorizontalDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = tap_and_drag.TapAndHorizontalDragGestureRecognizer.prototype;
  dart.addTypeTests(tap_and_drag.TapAndHorizontalDragGestureRecognizer);
  dart.addRtiResources(tap_and_drag.TapAndHorizontalDragGestureRecognizer, ["flutter__src__gestures__tap_and_drag|TapAndHorizontalDragGestureRecognizer"]);
  dart.addTypeCaches(tap_and_drag.TapAndHorizontalDragGestureRecognizer);
  dart.setMethodSignature(tap_and_drag.TapAndHorizontalDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodouble()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag.TapAndHorizontalDragGestureRecognizer))));
  dart.setLibraryUri(tap_and_drag.TapAndHorizontalDragGestureRecognizer, I[0]);
  tap_and_drag.TapAndPanGestureRecognizer = class TapAndPanGestureRecognizer extends tap_and_drag.BaseTapAndDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      return new tap_and_drag.TapAndPanGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind) {
      return this[_globalDistanceMoved][$abs]() > events.computePanSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return delta;
    }
    [_getPrimaryValueFromOffset](value) {
      return null;
    }
    get debugDescription() {
      return "tap and pan";
    }
  };
  (tap_and_drag.TapAndPanGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    dart.global.Object.getPrototypeOf(tap_and_drag.TapAndPanGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = tap_and_drag.TapAndPanGestureRecognizer.prototype;
  dart.addTypeTests(tap_and_drag.TapAndPanGestureRecognizer);
  dart.addRtiResources(tap_and_drag.TapAndPanGestureRecognizer, ["flutter__src__gestures__tap_and_drag|TapAndPanGestureRecognizer"]);
  dart.addTypeCaches(tap_and_drag.TapAndPanGestureRecognizer);
  dart.setMethodSignature(tap_and_drag.TapAndPanGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodoubleN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag.TapAndPanGestureRecognizer))));
  dart.setLibraryUri(tap_and_drag.TapAndPanGestureRecognizer, I[0]);
  tap_and_drag.TapAndDragGestureRecognizer = class TapAndDragGestureRecognizer extends tap_and_drag.BaseTapAndDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      return new tap_and_drag.TapAndDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices});
    }
    [_hasSufficientGlobalDistanceToAccept](pointerDeviceKind) {
      return this[_globalDistanceMoved][$abs]() > events.computePanSlop(pointerDeviceKind, this.gestureSettings);
    }
    [_getDeltaForDetails](delta) {
      return delta;
    }
    [_getPrimaryValueFromOffset](value) {
      return null;
    }
    get debugDescription() {
      return "tap and pan";
    }
  };
  (tap_and_drag.TapAndDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    dart.global.Object.getPrototypeOf(tap_and_drag.TapAndDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = tap_and_drag.TapAndDragGestureRecognizer.prototype;
  dart.addTypeTests(tap_and_drag.TapAndDragGestureRecognizer);
  dart.addRtiResources(tap_and_drag.TapAndDragGestureRecognizer, ["flutter__src__gestures__tap_and_drag|TapAndDragGestureRecognizer"]);
  dart.addTypeCaches(tap_and_drag.TapAndDragGestureRecognizer);
  dart.setMethodSignature(tap_and_drag.TapAndDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_hasSufficientGlobalDistanceToAccept]: T.PointerDeviceKindTobool(),
    [_getDeltaForDetails]: T.OffsetToOffset(),
    [_getPrimaryValueFromOffset]: T.OffsetTodoubleN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tap_and_drag.TapAndDragGestureRecognizer))));
  dart.setLibraryUri(tap_and_drag.TapAndDragGestureRecognizer, I[0]);
  tap_and_drag._getGlobalDistance = function _getGlobalDistance(event, originPosition) {
    if (!(originPosition != null)) dart.assertFailed(null, I[3], 21, 10, "originPosition != null");
    let offset = event.position['-'](dart.nullCheck(originPosition).global);
    return offset.distance;
  };
  dart.moduleConstCaches.set("packages/flutter/src/gestures/tap_and_drag.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__tap_and_drag|_DragState":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"ui|Offset":{"ui|OffsetBase":[]},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__gestures__events|PointerMoveEvent":{"flutter__src__gestures__events|_CopyPointerMoveEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerMoveEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_PointerEventDescription":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerUpEvent":{"flutter__src__gestures__events|_CopyPointerUpEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerUpEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerCancelEvent":{"flutter__src__gestures__events|_CopyPointerCancelEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerCancelEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|PointerDownEvent":{"flutter__src__gestures__events|_CopyPointerDownEvent":[],"flutter__src__gestures__events|PointerEvent":[],"flutter__src__gestures__events|_PointerEventDescription":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__events|_CopyPointerDownEvent":{"flutter__src__gestures__events|PointerEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|DragStartBehavior":{"core|_Enum":[],"core|Enum":[]},"flutter__src__gestures__tap_and_drag|TapDragDownDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapDragUpDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapDragStartDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapDragUpdateDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapDragEndDetails":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin":{"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":{"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__recognizer|GestureRecognizer":{"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|BaseTapAndDragGestureRecognizer":{"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapAndHorizontalDragGestureRecognizer":{"flutter__src__gestures__tap_and_drag|BaseTapAndDragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapAndPanGestureRecognizer":{"flutter__src__gestures__tap_and_drag|BaseTapAndDragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__gestures__tap_and_drag|TapAndDragGestureRecognizer":{"flutter__src__gestures__tap_and_drag|BaseTapAndDragGestureRecognizer":[],"flutter__src__gestures__recognizer|OneSequenceGestureRecognizer":[],"flutter__src__gestures__tap_and_drag|_TapStatusTrackerMixin":[],"flutter__src__gestures__recognizer|GestureRecognizer":[],"flutter__src__gestures__arena|GestureArenaMember":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/tap_and_drag.dart", {
    "package:flutter/src/gestures/tap_and_drag.dart": tap_and_drag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tap_and_drag.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/tap_and_drag.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__tap_and_drag: tap_and_drag
  };
}));

//# sourceMappingURL=tap_and_drag.dart.lib.js.map

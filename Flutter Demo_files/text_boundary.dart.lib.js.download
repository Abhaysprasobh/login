// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/services/text_boundary.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/characters/src/characters_impl.dart', 'packages/flutter/src/services/text_layout_metrics.dart'], (function load__packages__flutter__src__services__text_boundary_dart(dart_sdk, packages__characters__src__characters_impl$46dart, packages__flutter__src__services__text_layout_metrics$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const characters_impl = packages__characters__src__characters_impl$46dart.src__characters_impl;
  const text_layout_metrics = packages__flutter__src__services__text_layout_metrics$46dart.src__services__text_layout_metrics;
  var text_boundary = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $codeUnitAt = dartx.codeUnitAt;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    intTointN: () => (T.intTointN = dart.constFn(dart_rti.findType("core|int?(core|int)")))(),
    intToTextRange: () => (T.intToTextRange = dart.constFn(dart_rti.findType("ui|TextRange(core|int)")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    TextLayoutMetrics: () => (T.TextLayoutMetrics = dart.constFn(dart_rti.findType("flutter__src__services__text_layout_metrics|TextLayoutMetrics")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/services/text_boundary.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/text_boundary.dart",
    "dart:core",
    "package:flutter/src/services/text_layout_metrics.dart"
  ];
  text_boundary.TextBoundary = class TextBoundary extends core.Object {
    getLeadingTextBoundaryAt(position) {
      if (position < 0) {
        return null;
      }
      let start = this.getTextBoundaryAt(position).start;
      return start >= 0 ? start : null;
    }
    getTrailingTextBoundaryAt(position) {
      let end = this.getTextBoundaryAt(math.max(T.int(), 0, position)).end;
      return end >= 0 ? end : null;
    }
    getTextBoundaryAt(position) {
      let t$360, t$360$;
      let start = (t$360 = this.getLeadingTextBoundaryAt(position), t$360 == null ? -1 : t$360);
      let end = (t$360$ = this.getTrailingTextBoundaryAt(position), t$360$ == null ? -1 : t$360$);
      return new ui.TextRange.new({start: start, end: end});
    }
  };
  (text_boundary.TextBoundary.new = function() {
    ;
  }).prototype = text_boundary.TextBoundary.prototype;
  dart.addTypeTests(text_boundary.TextBoundary);
  dart.addRtiResources(text_boundary.TextBoundary, ["flutter__src__services__text_boundary|TextBoundary"]);
  dart.addTypeCaches(text_boundary.TextBoundary);
  dart.setMethodSignature(text_boundary.TextBoundary, () => dart.global.Object.setPrototypeOf({
    getLeadingTextBoundaryAt: T.intTointN(),
    getTrailingTextBoundaryAt: T.intTointN(),
    getTextBoundaryAt: T.intToTextRange()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_boundary.TextBoundary))));
  dart.setLibraryUri(text_boundary.TextBoundary, I[0]);
  var _text$ = dart.privateName(text_boundary, "CharacterBoundary._text");
  var _text = dart.privateName(text_boundary, "_text");
  text_boundary.CharacterBoundary = class CharacterBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.CharacterBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      if (position < 0) {
        return null;
      }
      let graphemeStart = characters_impl.StringCharacterRange.at(this[_text], math.min(T.int(), position, this[_text].length)).stringBeforeLength;
      if (!characters_impl.StringCharacterRange.at(this[_text], graphemeStart).isEmpty) dart.assertFailed(null, I[1], 85, 12, "CharacterRange.at(_text, graphemeStart).isEmpty");
      return graphemeStart;
    }
    getTrailingTextBoundaryAt(position) {
      if (position >= this[_text].length) {
        return null;
      }
      let rangeAtPosition = characters_impl.StringCharacterRange.at(this[_text], math.max(T.int(), 0, position + 1));
      let nextBoundary = rangeAtPosition.stringBeforeLength + rangeAtPosition.current.length;
      if (!(nextBoundary === this[_text].length || characters_impl.StringCharacterRange.at(this[_text], nextBoundary).isEmpty)) dart.assertFailed(null, I[1], 96, 12, "nextBoundary == _text.length || CharacterRange.at(_text, nextBoundary).isEmpty");
      return nextBoundary;
    }
    getTextBoundaryAt(position) {
      let t$360, t$360$, t$360$0;
      if (position < 0) {
        return new ui.TextRange.new({start: -1, end: (t$360 = this.getTrailingTextBoundaryAt(position), t$360 == null ? -1 : t$360)});
      } else if (position >= this[_text].length) {
        return new ui.TextRange.new({start: (t$360$ = this.getLeadingTextBoundaryAt(position), t$360$ == null ? -1 : t$360$), end: -1});
      }
      let rangeAtPosition = characters_impl.StringCharacterRange.at(this[_text], position);
      return rangeAtPosition.isNotEmpty ? new ui.TextRange.new({start: rangeAtPosition.stringBeforeLength, end: rangeAtPosition.stringBeforeLength + rangeAtPosition.current.length}) : new ui.TextRange.new({start: rangeAtPosition.stringBeforeLength, end: (t$360$0 = this.getTrailingTextBoundaryAt(position), t$360$0 == null ? -1 : t$360$0)});
    }
  };
  (text_boundary.CharacterBoundary.new = function(_text) {
    this[_text$] = _text;
    dart.global.Object.getPrototypeOf(text_boundary.CharacterBoundary).new.call(this);
    ;
  }).prototype = text_boundary.CharacterBoundary.prototype;
  dart.addTypeTests(text_boundary.CharacterBoundary);
  dart.addRtiResources(text_boundary.CharacterBoundary, ["flutter__src__services__text_boundary|CharacterBoundary"]);
  dart.addTypeCaches(text_boundary.CharacterBoundary);
  dart.setLibraryUri(text_boundary.CharacterBoundary, I[0]);
  dart.setFieldSignature(text_boundary.CharacterBoundary, () => dart.global.Object.setPrototypeOf({[_text]: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_boundary.CharacterBoundary))));
  var _textLayout$ = dart.privateName(text_boundary, "LineBoundary._textLayout");
  var _textLayout = dart.privateName(text_boundary, "_textLayout");
  text_boundary.LineBoundary = class LineBoundary extends text_boundary.TextBoundary {
    get [_textLayout]() {
      return this[_textLayout$];
    }
    set [_textLayout](value) {
      super[_textLayout] = value;
    }
    static ['_#new#tearOff'](_textLayout) {
      return new text_boundary.LineBoundary.new(_textLayout);
    }
    getTextBoundaryAt(position) {
      return this[_textLayout].getLineAtOffset(new ui.TextPosition.new({offset: math.max(T.int(), position, 0)}));
    }
  };
  (text_boundary.LineBoundary.new = function(_textLayout) {
    this[_textLayout$] = _textLayout;
    dart.global.Object.getPrototypeOf(text_boundary.LineBoundary).new.call(this);
    ;
  }).prototype = text_boundary.LineBoundary.prototype;
  dart.addTypeTests(text_boundary.LineBoundary);
  dart.addRtiResources(text_boundary.LineBoundary, ["flutter__src__services__text_boundary|LineBoundary"]);
  dart.addTypeCaches(text_boundary.LineBoundary);
  dart.setLibraryUri(text_boundary.LineBoundary, I[0]);
  dart.setFieldSignature(text_boundary.LineBoundary, () => dart.global.Object.setPrototypeOf({[_textLayout]: {type: T.TextLayoutMetrics(), isConst: false, isFinal: true, libraryUri: I[3]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_boundary.LineBoundary))));
  var _text$0 = dart.privateName(text_boundary, "ParagraphBoundary._text");
  text_boundary.ParagraphBoundary = class ParagraphBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$0];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.ParagraphBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      if (position < 0 || this[_text][$isEmpty]) {
        return null;
      }
      if (position >= this[_text].length) {
        return this[_text].length;
      }
      if (position === 0) {
        return 0;
      }
      let index = position;
      if (index > 1 && this[_text][$codeUnitAt](index) === 10 && this[_text][$codeUnitAt](index - 1) === 13) {
        index = index - 2;
      } else if (text_layout_metrics.TextLayoutMetrics.isLineTerminator(this[_text][$codeUnitAt](index))) {
        index = index - 1;
      }
      while (index > 0) {
        if (text_layout_metrics.TextLayoutMetrics.isLineTerminator(this[_text][$codeUnitAt](index))) {
          return index + 1;
        }
        index = index - 1;
      }
      return math.max(T.int(), index, 0);
    }
    getTrailingTextBoundaryAt(position) {
      if (position >= this[_text].length || this[_text][$isEmpty]) {
        return null;
      }
      if (position < 0) {
        return 0;
      }
      let index = position;
      while (!text_layout_metrics.TextLayoutMetrics.isLineTerminator(this[_text][$codeUnitAt](index))) {
        index = index + 1;
        if (index === this[_text].length) {
          return index;
        }
      }
      return index < this[_text].length - 1 && this[_text][$codeUnitAt](index) === 13 && this[_text][$codeUnitAt](index + 1) === 10 ? index + 2 : index + 1;
    }
  };
  (text_boundary.ParagraphBoundary.new = function(_text) {
    this[_text$0] = _text;
    dart.global.Object.getPrototypeOf(text_boundary.ParagraphBoundary).new.call(this);
    ;
  }).prototype = text_boundary.ParagraphBoundary.prototype;
  dart.addTypeTests(text_boundary.ParagraphBoundary);
  dart.addRtiResources(text_boundary.ParagraphBoundary, ["flutter__src__services__text_boundary|ParagraphBoundary"]);
  dart.addTypeCaches(text_boundary.ParagraphBoundary);
  dart.setLibraryUri(text_boundary.ParagraphBoundary, I[0]);
  dart.setFieldSignature(text_boundary.ParagraphBoundary, () => dart.global.Object.setPrototypeOf({[_text]: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_boundary.ParagraphBoundary))));
  var _text$1 = dart.privateName(text_boundary, "DocumentBoundary._text");
  text_boundary.DocumentBoundary = class DocumentBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$1];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.DocumentBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      return position < 0 ? null : 0;
    }
    getTrailingTextBoundaryAt(position) {
      return position >= this[_text].length ? null : this[_text].length;
    }
  };
  (text_boundary.DocumentBoundary.new = function(_text) {
    this[_text$1] = _text;
    dart.global.Object.getPrototypeOf(text_boundary.DocumentBoundary).new.call(this);
    ;
  }).prototype = text_boundary.DocumentBoundary.prototype;
  dart.addTypeTests(text_boundary.DocumentBoundary);
  dart.addRtiResources(text_boundary.DocumentBoundary, ["flutter__src__services__text_boundary|DocumentBoundary"]);
  dart.addTypeCaches(text_boundary.DocumentBoundary);
  dart.setLibraryUri(text_boundary.DocumentBoundary, I[0]);
  dart.setFieldSignature(text_boundary.DocumentBoundary, () => dart.global.Object.setPrototypeOf({[_text]: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_boundary.DocumentBoundary))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"flutter__src__services__text_boundary|CharacterBoundary":{"flutter__src__services__text_boundary|TextBoundary":[]},"flutter__src__services__text_boundary|LineBoundary":{"flutter__src__services__text_boundary|TextBoundary":[]},"flutter__src__services__text_boundary|ParagraphBoundary":{"flutter__src__services__text_boundary|TextBoundary":[]},"flutter__src__services__text_boundary|DocumentBoundary":{"flutter__src__services__text_boundary|TextBoundary":[]}}'));
  dart.trackLibraries("packages/flutter/src/services/text_boundary.dart", {
    "package:flutter/src/services/text_boundary.dart": text_boundary
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_boundary.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/services/text_boundary.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_boundary: text_boundary
  };
}));

//# sourceMappingURL=text_boundary.dart.lib.js.map

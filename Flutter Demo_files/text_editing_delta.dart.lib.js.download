// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/services/text_editing_delta.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/services/keyboard_inserted_content.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/foundation/serialization.dart', 'packages/flutter/src/services/keyboard_maps.g.dart', 'packages/flutter/src/services/keyboard_key.g.dart', 'packages/flutter/src/foundation/licenses.dart', 'packages/flutter/src/foundation/_isolates_web.dart', 'packages/flutter/src/services/service_extensions.dart', 'packages/flutter/src/services/binary_messenger.dart', 'packages/flutter/src/foundation/consolidate_response.dart'], (function load__packages__flutter__src__services__text_editing_delta_dart(dart_sdk, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__services__keyboard_inserted_content$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__foundation__serialization$46dart, packages__flutter__src__services__keyboard_maps$46g$46dart, packages__flutter__src__services__keyboard_key$46g$46dart, packages__flutter__src__foundation__licenses$46dart, packages__flutter__src__foundation___isolates_web$46dart, packages__flutter__src__services__service_extensions$46dart, packages__flutter__src__services__binary_messenger$46dart, packages__flutter__src__foundation__consolidate_response$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const io = dart_sdk.io;
  const _internal = dart_sdk._internal;
  const developer = dart_sdk.developer;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const keyboard_inserted_content = packages__flutter__src__services__keyboard_inserted_content$46dart.src__services__keyboard_inserted_content;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const binding$ = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const serialization = packages__flutter__src__foundation__serialization$46dart.src__foundation__serialization;
  const keyboard_maps$46g = packages__flutter__src__services__keyboard_maps$46g$46dart.src__services__keyboard_maps$46g;
  const keyboard_key$46g = packages__flutter__src__services__keyboard_key$46g$46dart.src__services__keyboard_key$46g;
  const licenses$ = packages__flutter__src__foundation__licenses$46dart.src__foundation__licenses;
  const isolates = packages__flutter__src__foundation___isolates_web$46dart.src__foundation__isolates;
  const service_extensions = packages__flutter__src__services__service_extensions$46dart.src__services__service_extensions;
  const binary_messenger = packages__flutter__src__services__binary_messenger$46dart.src__services__binary_messenger;
  const consolidate_response = packages__flutter__src__foundation__consolidate_response$46dart.src__foundation__consolidate_response;
  var text_editing_delta = Object.create(dart.library);
  var clipboard = Object.create(dart.library);
  var autofill = Object.create(dart.library);
  var text_input = Object.create(dart.library);
  var restoration = Object.create(dart.library);
  var _background_isolate_binary_messenger_web = Object.create(dart.library);
  var platform_channel = Object.create(dart.library);
  var message_codec = Object.create(dart.library);
  var message_codecs = Object.create(dart.library);
  var system_channels = Object.create(dart.library);
  var raw_keyboard_windows = Object.create(dart.library);
  var raw_keyboard_web = Object.create(dart.library);
  var raw_keyboard_macos = Object.create(dart.library);
  var raw_keyboard_linux = Object.create(dart.library);
  var raw_keyboard_ios = Object.create(dart.library);
  var raw_keyboard_fuchsia = Object.create(dart.library);
  var raw_keyboard_android = Object.create(dart.library);
  var raw_keyboard = Object.create(dart.library);
  var hardware_keyboard = Object.create(dart.library);
  var debug = Object.create(dart.library);
  var binding$0 = Object.create(dart.library);
  var asset_bundle = Object.create(dart.library);
  var $_get = dartx._get;
  var $isEmpty = dartx.isEmpty;
  var $substring = dartx.substring;
  var $replaceRange = dartx.replaceRange;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $toString = dartx.toString;
  var $any = dartx.any;
  var $clamp = dartx.clamp;
  var $hashCode = dartx.hashCode;
  var $runtimeType = dartx.runtimeType;
  var $contains = dartx.contains;
  var $toDouble = dartx.toDouble;
  var $cast = dartx.cast;
  var $keys = dartx.keys;
  var $where = dartx.where;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $remove = dartx.remove;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asByteData = dartx.asByteData;
  var $asUint8List = dartx.asUint8List;
  var $putIfAbsent = dartx.putIfAbsent;
  var $containsKey = dartx.containsKey;
  var $entries = dartx.entries;
  var $isNotEmpty = dartx.isNotEmpty;
  var $removeLast = dartx.removeLast;
  var $values = dartx.values;
  var $expand = dartx.expand;
  var $followedBy = dartx.followedBy;
  var $clear = dartx.clear;
  var $sort = dartx.sort;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $length = dartx.length;
  var $codeUnitAt = dartx.codeUnitAt;
  var $toLowerCase = dartx.toLowerCase;
  var $runes = dartx.runes;
  var $toSet = dartx.toSet;
  var $times = dartx['*'];
  var $split = dartx.split;
  var $indexOf = dartx.indexOf;
  var $insert = dartx.insert;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T$ = {
    String: () => (T$.String = dart.constFn(dart_rti.findType("core|String")))(),
    int: () => (T$.int = dart.constFn(dart_rti.findType("core|int")))(),
    intN: () => (T$.intN = dart.constFn(dart_rti.findType("core|int?")))(),
    StringN: () => (T$.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    boolN: () => (T$.boolN = dart.constFn(dart_rti.findType("core|bool?")))(),
    MapOfString$dynamicToTextEditingDelta: () => (T$.MapOfString$dynamicToTextEditingDelta = dart.constFn(dart_rti.findType("flutter__src__services__text_editing_delta|TextEditingDelta(core|Map<core|String,@>)")))(),
    TextSelection: () => (T$.TextSelection = dart.constFn(dart_rti.findType("flutter__src__services__text_editing|TextSelection")))(),
    TextRange: () => (T$.TextRange = dart.constFn(dart_rti.findType("ui|TextRange")))(),
    TextEditingValueToTextEditingValue: () => (T$.TextEditingValueToTextEditingValue = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextEditingValue(flutter__src__services__text_input|TextEditingValue)")))(),
    void: () => (T$.void = dart.constFn(dart_rti.findType("~")))(),
    dynamic: () => (T$.dynamic = dart.constFn(dart_rti.findType("@")))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>")))(),
    ClipboardDataN: () => (T$.ClipboardDataN = dart.constFn(dart_rti.findType("flutter__src__services__clipboard|ClipboardData?")))(),
    bool: () => (T$.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    ClipboardDataToFutureOfvoid: () => (T$.ClipboardDataToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(flutter__src__services__clipboard|ClipboardData)")))(),
    StringToFutureOfClipboardDataN: () => (T$.StringToFutureOfClipboardDataN = dart.constFn(dart_rti.findType("async|Future<flutter__src__services__clipboard|ClipboardData?>(core|String)")))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart.constFn(dart_rti.findType("async|Future<core|bool>()")))(),
    VoidToMapNOfString$dynamic: () => (T$.VoidToMapNOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>?()")))(),
    AutofillConfiguration: () => (T$.AutofillConfiguration = dart.constFn(dart_rti.findType("flutter__src__services__autofill|AutofillConfiguration")))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(dart_rti.findType("core|List<core|String>")))(),
    TextEditingValue: () => (T$.TextEditingValue = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextEditingValue")))(),
    TextInputConfigurationToMapOfString$dynamic: () => (T$.TextInputConfigurationToMapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>(flutter__src__services__text_input|TextInputConfiguration)")))(),
    __ToTextInputConfiguration: () => (T$.__ToTextInputConfiguration = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConfiguration({actionLabel:core|String?,allowedMimeTypes:core|List<core|String>?,autocorrect:core|bool?,autofillConfiguration:flutter__src__services__autofill|AutofillConfiguration?,enableDeltaModel:core|bool?,enableIMEPersonalizedLearning:core|bool?,enableInteractiveSelection:core|bool?,enableSuggestions:core|bool?,inputAction:flutter__src__services__text_input|TextInputAction?,inputType:flutter__src__services__text_input|TextInputType?,keyboardAppearance:ui|Brightness?,obscureText:core|bool?,readOnly:core|bool?,smartDashesType:flutter__src__services__text_input|SmartDashesType?,smartQuotesType:flutter__src__services__text_input|SmartQuotesType?,textCapitalization:flutter__src__services__text_input|TextCapitalization?})")))(),
    VoidToMapOfString$dynamic: () => (T$.VoidToMapOfString$dynamic = dart.constFn(dart_rti.findType("core|Map<core|String,@>()")))(),
    TextInputType: () => (T$.TextInputType = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputType")))(),
    SmartDashesType: () => (T$.SmartDashesType = dart.constFn(dart_rti.findType("flutter__src__services__text_input|SmartDashesType")))(),
    SmartQuotesType: () => (T$.SmartQuotesType = dart.constFn(dart_rti.findType("flutter__src__services__text_input|SmartQuotesType")))(),
    TextInputAction: () => (T$.TextInputAction = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputAction")))(),
    TextCapitalization: () => (T$.TextCapitalization = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextCapitalization")))(),
    Brightness: () => (T$.Brightness = dart.constFn(dart_rti.findType("ui|Brightness")))(),
    IterableOfTextInputConfiguration: () => (T$.IterableOfTextInputConfiguration = dart.constFn(dart_rti.findType("core|Iterable<flutter__src__services__text_input|TextInputConfiguration>")))(),
    AutofillClientTobool: () => (T$.AutofillClientTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__autofill|AutofillClient)")))(),
    TextInputConfiguration: () => (T$.TextInputConfiguration = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConfiguration")))(),
    AutofillClientToTextInputConfiguration: () => (T$.AutofillClientToTextInputConfiguration = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConfiguration(flutter__src__services__autofill|AutofillClient)")))(),
    TextInputClientAndTextInputConfigurationToTextInputConnection: () => (T$.TextInputClientAndTextInputConfigurationToTextInputConnection = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConnection(flutter__src__services__text_input|TextInputClient,flutter__src__services__text_input|TextInputConfiguration)")))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfSmartDashesType: () => (T$.ListOfSmartDashesType = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|SmartDashesType>")))(),
    ListOfSmartQuotesType: () => (T$.ListOfSmartQuotesType = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|SmartQuotesType>")))(),
    ListOfTextInputType: () => (T$.ListOfTextInputType = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|TextInputType>")))(),
    ListOfTextInputAction: () => (T$.ListOfTextInputAction = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|TextInputAction>")))(),
    ListOfTextCapitalization: () => (T$.ListOfTextCapitalization = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|TextCapitalization>")))(),
    ListOfFloatingCursorDragState: () => (T$.ListOfFloatingCursorDragState = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|FloatingCursorDragState>")))(),
    FloatingCursorDragState: () => (T$.FloatingCursorDragState = dart.constFn(dart_rti.findType("flutter__src__services__text_input|FloatingCursorDragState")))(),
    OffsetN: () => (T$.OffsetN = dart.constFn(dart_rti.findType("ui|Offset?")))(),
    RecNOfOffsetAndTextPosition: () => (T$.RecNOfOffsetAndTextPosition = dart.constFn(dart_rti.findType("+(ui|Offset,ui|TextPosition)?")))(),
    intToint: () => (T$.intToint = dart.constFn(dart_rti.findType("core|int(core|int)")))(),
    MapOfString$dynamicToTextEditingValue: () => (T$.MapOfString$dynamicToTextEditingValue = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextEditingValue(core|Map<core|String,@>)")))(),
    __ToTextEditingValue: () => (T$.__ToTextEditingValue = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextEditingValue({composing:ui|TextRange?,selection:flutter__src__services__text_editing|TextSelection?,text:core|String?})")))(),
    TextRangeAndStringToTextEditingValue: () => (T$.TextRangeAndStringToTextEditingValue = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextEditingValue(ui|TextRange,core|String)")))(),
    TextRangeAndStringTobool: () => (T$.TextRangeAndStringTobool = dart.constFn(dart_rti.findType("core|bool(ui|TextRange,core|String)")))(),
    ListOfSelectionChangedCause: () => (T$.ListOfSelectionChangedCause = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|SelectionChangedCause>")))(),
    SelectionChangedCause: () => (T$.SelectionChangedCause = dart.constFn(dart_rti.findType("flutter__src__services__text_input|SelectionChangedCause")))(),
    KeyboardInsertedContentTovoid: () => (T$.KeyboardInsertedContentTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__keyboard_inserted_content|KeyboardInsertedContent)")))(),
    TextInputControlNAndTextInputControlNTovoid: () => (T$.TextInputControlNAndTextInputControlNTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputControl?,flutter__src__services__text_input|TextInputControl?)")))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    SizeTovoid: () => (T$.SizeTovoid = dart.constFn(dart_rti.findType("~(ui|Size)")))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart_rti.findType("~(core|String)")))(),
    SelectionRect: () => (T$.SelectionRect = dart.constFn(dart_rti.findType("flutter__src__services__text_input|SelectionRect")))(),
    Rect: () => (T$.Rect = dart.constFn(dart_rti.findType("ui|Rect")))(),
    TextDirection: () => (T$.TextDirection = dart.constFn(dart_rti.findType("ui|TextDirection")))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    __Tovoid: () => (T$.__Tovoid = dart.constFn(dart_rti.findType("~({to:core|int})")))(),
    TextInputConfigurationTovoid: () => (T$.TextInputConfigurationTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputConfiguration)")))(),
    TextEditingValueTovoid: () => (T$.TextEditingValueTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextEditingValue)")))(),
    SizeAndMatrix4Tovoid: () => (T$.SizeAndMatrix4Tovoid = dart.constFn(dart_rti.findType("~(ui|Size,vector_math__vector_math_64|Matrix4)")))(),
    RectTovoid: () => (T$.RectTovoid = dart.constFn(dart_rti.findType("~(ui|Rect)")))(),
    ListOfSelectionRectTovoid: () => (T$.ListOfSelectionRectTovoid = dart.constFn(dart_rti.findType("~(core|List<flutter__src__services__text_input|SelectionRect>)")))(),
    __Tovoid$1: () => (T$.__Tovoid$1 = dart.constFn(dart_rti.findType("~({fontFamily!core|String?,fontSize!core|double?,fontWeight!ui|FontWeight?,textAlign!ui|TextAlign,textDirection!ui|TextDirection})")))(),
    SizeN: () => (T$.SizeN = dart.constFn(dart_rti.findType("ui|Size?")))(),
    Matrix4N: () => (T$.Matrix4N = dart.constFn(dart_rti.findType("vector_math__vector_math_64|Matrix4?")))(),
    RectN: () => (T$.RectN = dart.constFn(dart_rti.findType("ui|Rect?")))(),
    ListOfSelectionRect: () => (T$.ListOfSelectionRect = dart.constFn(dart_rti.findType("core|List<flutter__src__services__text_input|SelectionRect>")))(),
    TextInputClient: () => (T$.TextInputClient = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputClient")))(),
    TextInputControl: () => (T$.TextInputControl = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputControl")))(),
    ScribbleClient: () => (T$.ScribbleClient = dart.constFn(dart_rti.findType("flutter__src__services__text_input|ScribbleClient")))(),
    MethodCall: () => (T$.MethodCall = dart.constFn(dart_rti.findType("flutter__src__services__message_codec|MethodCall")))(),
    DiagnosticsNode: () => (T$.DiagnosticsNode = dart.constFn(dart_rti.findType("flutter__src__foundation__diagnostics|DiagnosticsNode")))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()")))(),
    Object: () => (T$.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    List: () => (T$.List = dart.constFn(dart_rti.findType("core|List<@>")))(),
    num: () => (T$.num = dart.constFn(dart_rti.findType("core|num")))(),
    double: () => (T$.double = dart.constFn(dart_rti.findType("core|double")))(),
    numTodouble: () => (T$.numTodouble = dart.constFn(dart_rti.findType("core|double(core|num)")))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart_rti.findType("core|bool(core|String)")))(),
    StringToList: () => (T$.StringToList = dart.constFn(dart_rti.findType("core|List<@>(core|String)")))(),
    DeltaTextInputClient: () => (T$.DeltaTextInputClient = dart.constFn(dart_rti.findType("flutter__src__services__text_input|DeltaTextInputClient")))(),
    TextEditingDelta: () => (T$.TextEditingDelta = dart.constFn(dart_rti.findType("flutter__src__services__text_editing_delta|TextEditingDelta")))(),
    MethodChannelTovoid: () => (T$.MethodChannelTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__platform_channel|MethodChannel)")))(),
    TextInputControlTovoid: () => (T$.TextInputControlTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputControl)")))(),
    TextInputControlNTovoid: () => (T$.TextInputControlNTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputControl?)")))(),
    TextInputConnectionAndTextInputConfigurationTovoid: () => (T$.TextInputConnectionAndTextInputConfigurationTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputConnection,flutter__src__services__text_input|TextInputConfiguration)")))(),
    TextInputActionTobool: () => (T$.TextInputActionTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__text_input|TextInputAction)")))(),
    MethodChannel: () => (T$.MethodChannel = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|MethodChannel")))(),
    MapOfString$ScribbleClient: () => (T$.MapOfString$ScribbleClient = dart.constFn(dart_rti.findType("core|Map<core|String,flutter__src__services__text_input|ScribbleClient>")))(),
    MethodCallToFuture: () => (T$.MethodCallToFuture = dart.constFn(dart_rti.findType("async|Future<@>(flutter__src__services__message_codec|MethodCall)")))(),
    TextInputClientAndTextInputConfigurationTovoid: () => (T$.TextInputClientAndTextInputConfigurationTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputClient,flutter__src__services__text_input|TextInputConfiguration)")))(),
    TextEditingValue__Tovoid: () => (T$.TextEditingValue__Tovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextEditingValue{exclude:flutter__src__services__text_input|TextInputControl?})")))(),
    __Tovoid$2: () => (T$.__Tovoid$2 = dart.constFn(dart_rti.findType("~({shouldSave:core|bool})")))(),
    StringAndScribbleClientTovoid: () => (T$.StringAndScribbleClientTovoid = dart.constFn(dart_rti.findType("~(core|String,flutter__src__services__text_input|ScribbleClient)")))(),
    TextInput: () => (T$.TextInput = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInput")))(),
    TextInputControlN: () => (T$.TextInputControlN = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputControl?")))(),
    SetOfTextInputControl: () => (T$.SetOfTextInputControl = dart.constFn(dart_rti.findType("core|Set<flutter__src__services__text_input|TextInputControl>")))(),
    MethodChannelN: () => (T$.MethodChannelN = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|MethodChannel?")))(),
    TextInputConnectionN: () => (T$.TextInputConnectionN = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConnection?")))(),
    TextInputConfigurationN: () => (T$.TextInputConfigurationN = dart.constFn(dart_rti.findType("flutter__src__services__text_input|TextInputConfiguration?")))(),
    TextInputClientTovoid: () => (T$.TextInputClientTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__text_input|TextInputClient)")))(),
    ListOfnum: () => (T$.ListOfnum = dart.constFn(dart_rti.findType("core|List<core|num>")))(),
    SelectionRectToListOfnum: () => (T$.SelectionRectToListOfnum = dart.constFn(dart_rti.findType("core|List<core|num>(flutter__src__services__text_input|SelectionRect)")))(),
    _PlatformTextInputControl: () => (T$._PlatformTextInputControl = dart.constFn(dart_rti.findType("flutter__src__services__text_input|_PlatformTextInputControl")))(),
    RestorationBucket: () => (T$.RestorationBucket = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationBucket")))(),
    RestorationBucketN: () => (T$.RestorationBucketN = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationBucket?")))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(dart_rti.findType("core|Map<core|Object?,core|Object?>")))(),
    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart_rti.findType("typed_data|Uint8List?")))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart_rti.findType("~(core|Duration)")))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart_rti.findType("core|Map<core|Object?,core|Object?>?")))(),
    FutureOfRestorationBucketN: () => (T$.FutureOfRestorationBucketN = dart.constFn(dart_rti.findType("async|Future<flutter__src__services__restoration|RestorationBucket?>")))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>()")))(),
    MapNOfObjectN$ObjectNTovoid: () => (T$.MapNOfObjectN$ObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Map<core|Object?,core|Object?>?)")))(),
    __Tovoid$3: () => (T$.__Tovoid$3 = dart.constFn(dart_rti.findType("~({data!typed_data|Uint8List?,enabled!core|bool})")))(),
    Uint8ListToFutureOfvoid: () => (T$.Uint8ListToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(typed_data|Uint8List)")))(),
    MethodCallToFutureOfvoid: () => (T$.MethodCallToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(flutter__src__services__message_codec|MethodCall)")))(),
    Uint8ListNToMapNOfObjectN$ObjectN: () => (T$.Uint8ListNToMapNOfObjectN$ObjectN = dart.constFn(dart_rti.findType("core|Map<core|Object?,core|Object?>?(typed_data|Uint8List?)")))(),
    MapOfObjectN$ObjectNToUint8List: () => (T$.MapOfObjectN$ObjectNToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List(core|Map<core|Object?,core|Object?>)")))(),
    RestorationBucketTovoid: () => (T$.RestorationBucketTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__restoration|RestorationBucket)")))(),
    CompleterNOfRestorationBucketN: () => (T$.CompleterNOfRestorationBucketN = dart.constFn(dart_rti.findType("async|Completer<flutter__src__services__restoration|RestorationBucket?>?")))(),
    SetOfRestorationBucket: () => (T$.SetOfRestorationBucket = dart.constFn(dart_rti.findType("core|Set<flutter__src__services__restoration|RestorationBucket>")))(),
    ListOfRestorationBucket: () => (T$.ListOfRestorationBucket = dart.constFn(dart_rti.findType("core|List<flutter__src__services__restoration|RestorationBucket>")))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart_rti.findType("core|Object?")))(),
    VoidToMapOfObjectN$ObjectN: () => (T$.VoidToMapOfObjectN$ObjectN = dart.constFn(dart_rti.findType("core|Map<core|Object?,core|Object?>()")))(),
    RestorationBucketToErrorDescription: () => (T$.RestorationBucketToErrorDescription = dart.constFn(dart_rti.findType("flutter__src__foundation__assertions|ErrorDescription(flutter__src__services__restoration|RestorationBucket)")))(),
    VoidToListOfRestorationBucket: () => (T$.VoidToListOfRestorationBucket = dart.constFn(dart_rti.findType("core|List<flutter__src__services__restoration|RestorationBucket>()")))(),
    ListOfRestorationBucketToListOfRestorationBucket: () => (T$.ListOfRestorationBucketToListOfRestorationBucket = dart.constFn(dart_rti.findType("core|List<flutter__src__services__restoration|RestorationBucket>(core|List<flutter__src__services__restoration|RestorationBucket>)")))(),
    StringToPN: () => (T$.StringToPN = dart.constFn(dart_rti.findType("0^?(core|String)<core|Object?>")))(),
    StringAndPTovoid: () => (T$.StringAndPTovoid = dart.constFn(dart_rti.findType("~(core|String,0^)<core|Object?>")))(),
    String__ToRestorationBucket: () => (T$.String__ToRestorationBucket = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationBucket(core|String{debugOwner!core|Object?})")))(),
    RestorationManagerNTovoid: () => (T$.RestorationManagerNTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__restoration|RestorationManager?)")))(),
    Fn__Tovoid: () => (T$.Fn__Tovoid = dart.constFn(dart_rti.findType("~(~(flutter__src__services__restoration|RestorationBucket){concurrentModification:core|bool})")))(),
    RestorationManagerN: () => (T$.RestorationManagerN = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationManager?")))(),
    MapOfString$RestorationBucket: () => (T$.MapOfString$RestorationBucket = dart.constFn(dart_rti.findType("core|Map<core|String,flutter__src__services__restoration|RestorationBucket>")))(),
    MapOfString$ListOfRestorationBucket: () => (T$.MapOfString$ListOfRestorationBucket = dart.constFn(dart_rti.findType("core|Map<core|String,core|List<flutter__src__services__restoration|RestorationBucket>>")))(),
    BinaryMessenger: () => (T$.BinaryMessenger = dart.constFn(dart_rti.findType("flutter__src__services__binary_messenger|BinaryMessenger")))(),
    FutureOfByteDataN: () => (T$.FutureOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>")))(),
    ByteDataN: () => (T$.ByteDataN = dart.constFn(dart_rti.findType("typed_data|ByteData?")))(),
    StringAndByteDataNAndFnToFutureOfvoid: () => (T$.StringAndByteDataNAndFnToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|String,typed_data|ByteData?,~(typed_data|ByteData?)?)")))(),
    StringAndStringAndByteDataNToFutureNOfByteDataN: () => (T$.StringAndStringAndByteDataNToFutureNOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>?(core|String,core|String,typed_data|ByteData?)")))(),
    StringAndByteDataNToFutureNOfByteDataN: () => (T$.StringAndByteDataNToFutureNOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>?(core|String,typed_data|ByteData?)")))(),
    StringAndFnTovoid: () => (T$.StringAndFnTovoid = dart.constFn(dart_rti.findType("~(core|String,async|Future<typed_data|ByteData?>?(typed_data|ByteData?)?)")))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    ByteDataNToFutureOfByteDataN: () => (T$.ByteDataNToFutureOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>(typed_data|ByteData?)")))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Object?)")))(),
    BinaryMessengerN: () => (T$.BinaryMessengerN = dart.constFn(dart_rti.findType("flutter__src__services__binary_messenger|BinaryMessenger?")))(),
    _ProfiledBinaryMessenger: () => (T$._ProfiledBinaryMessenger = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|_ProfiledBinaryMessenger")))(),
    Map: () => (T$.Map = dart.constFn(dart_rti.findType("core|Map<@,@>")))(),
    MissingPluginException: () => (T$.MissingPluginException = dart.constFn(dart_rti.findType("flutter__src__services__message_codec|MissingPluginException")))(),
    PlatformException: () => (T$.PlatformException = dart.constFn(dart_rti.findType("flutter__src__services__message_codec|PlatformException")))(),
    String__ToFutureOfTN: () => (T$.String__ToFutureOfTN = dart.constFn(dart_rti.findType("async|Future<0^?>(core|String{arguments:@,missingOk!core|bool})<core|Object?>")))(),
    StringAnddynamicToFutureOfTN: () => (T$.StringAnddynamicToFutureOfTN = dart.constFn(dart_rti.findType("async|Future<0^?>(core|String[@])<core|Object?>")))(),
    StringAnddynamicToFutureOfListNOfT: () => (T$.StringAnddynamicToFutureOfListNOfT = dart.constFn(dart_rti.findType("async|Future<core|List<0^>?>(core|String[@])<core|Object?>")))(),
    StringAnddynamicToFutureOfMapNOfK$V: () => (T$.StringAnddynamicToFutureOfMapNOfK$V = dart.constFn(dart_rti.findType("async|Future<core|Map<0^,1^>?>(core|String[@])<core|Object?,core|Object?>")))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart_rti.findType("~(async|Future<@>(flutter__src__services__message_codec|MethodCall)?)")))(),
    ByteDataNAndFnToFutureOfByteDataN: () => (T$.ByteDataNAndFnToFutureOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>(typed_data|ByteData?,async|Future<@>(flutter__src__services__message_codec|MethodCall))")))(),
    MethodCodec: () => (T$.MethodCodec = dart.constFn(dart_rti.findType("flutter__src__services__message_codec|MethodCodec")))(),
    Null: () => (T$.Null = dart.constFn(dart_rti.findType("core|Null")))(),
    ByteDataNToFutureOfNull: () => (T$.ByteDataNToFutureOfNull = dart.constFn(dart_rti.findType("async|Future<core|Null>(typed_data|ByteData?)")))(),
    dynamicToStream: () => (T$.dynamicToStream = dart.constFn(dart_rti.findType("async|Stream<@>([@])")))(),
    _PlatformChannelStatsAnd_PlatformChannelStatsToint: () => (T$._PlatformChannelStatsAnd_PlatformChannelStatsToint = dart.constFn(dart_rti.findType("core|int(flutter__src__services__platform_channel|_PlatformChannelStats,flutter__src__services__platform_channel|_PlatformChannelStats)")))(),
    _PlatformChannelStats: () => (T$._PlatformChannelStats = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|_PlatformChannelStats")))(),
    ByteDataNToByteDataN: () => (T$.ByteDataNToByteDataN = dart.constFn(dart_rti.findType("typed_data|ByteData?(typed_data|ByteData?)")))(),
    ObjectNToByteDataN: () => (T$.ObjectNToByteDataN = dart.constFn(dart_rti.findType("typed_data|ByteData?(core|Object?)")))(),
    ByteDataNToStringN: () => (T$.ByteDataNToStringN = dart.constFn(dart_rti.findType("core|String?(typed_data|ByteData?)")))(),
    ByteDataNTodynamic: () => (T$.ByteDataNTodynamic = dart.constFn(dart_rti.findType("@(typed_data|ByteData?)")))(),
    MethodCallToByteData: () => (T$.MethodCallToByteData = dart.constFn(dart_rti.findType("typed_data|ByteData(flutter__src__services__message_codec|MethodCall)")))(),
    ByteDataNToMethodCall: () => (T$.ByteDataNToMethodCall = dart.constFn(dart_rti.findType("flutter__src__services__message_codec|MethodCall(typed_data|ByteData?)")))(),
    ByteDataTodynamic: () => (T$.ByteDataTodynamic = dart.constFn(dart_rti.findType("@(typed_data|ByteData)")))(),
    ObjectNToByteData: () => (T$.ObjectNToByteData = dart.constFn(dart_rti.findType("typed_data|ByteData(core|Object?)")))(),
    __ToByteData: () => (T$.__ToByteData = dart.constFn(dart_rti.findType("typed_data|ByteData({code!core|String,details:core|Object?,message:core|String?})")))(),
    Uint8List: () => (T$.Uint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List")))(),
    Int32List: () => (T$.Int32List = dart.constFn(dart_rti.findType("typed_data|Int32List")))(),
    Int64List: () => (T$.Int64List = dart.constFn(dart_rti.findType("typed_data|Int64List")))(),
    Float32List: () => (T$.Float32List = dart.constFn(dart_rti.findType("typed_data|Float32List")))(),
    Float64List: () => (T$.Float64List = dart.constFn(dart_rti.findType("typed_data|Float64List")))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart_rti.findType("~(core|Object?,core|Object?)")))(),
    WriteBufferAndObjectNTovoid: () => (T$.WriteBufferAndObjectNTovoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__serialization|WriteBuffer,core|Object?)")))(),
    ReadBufferToObjectN: () => (T$.ReadBufferToObjectN = dart.constFn(dart_rti.findType("core|Object?(flutter__src__foundation__serialization|ReadBuffer)")))(),
    intAndReadBufferToObjectN: () => (T$.intAndReadBufferToObjectN = dart.constFn(dart_rti.findType("core|Object?(core|int,flutter__src__foundation__serialization|ReadBuffer)")))(),
    WriteBufferAndintTovoid: () => (T$.WriteBufferAndintTovoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__serialization|WriteBuffer,core|int)")))(),
    ReadBufferToint: () => (T$.ReadBufferToint = dart.constFn(dart_rti.findType("core|int(flutter__src__foundation__serialization|ReadBuffer)")))(),
    StandardMessageCodec: () => (T$.StandardMessageCodec = dart.constFn(dart_rti.findType("flutter__src__services__message_codecs|StandardMessageCodec")))(),
    BasicMessageChannelOfObjectN: () => (T$.BasicMessageChannelOfObjectN = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|BasicMessageChannel<core|Object?>")))(),
    BasicMessageChannelOfStringN: () => (T$.BasicMessageChannelOfStringN = dart.constFn(dart_rti.findType("flutter__src__services__platform_channel|BasicMessageChannel<core|String?>")))(),
    intAndintAndintToKeyboardSideN: () => (T$.intAndintAndintToKeyboardSideN = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|KeyboardSide?(core|int,core|int,core|int)")))(),
    RawKeyEventDataWindows: () => (T$.RawKeyEventDataWindows = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_windows|RawKeyEventDataWindows")))(),
    ModifierKey: () => (T$.ModifierKey = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|ModifierKey")))(),
    KeyboardSide: () => (T$.KeyboardSide = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|KeyboardSide")))(),
    RawKeyEventDataAndroid: () => (T$.RawKeyEventDataAndroid = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_android|RawKeyEventDataAndroid")))(),
    MapOfModifierKey$KeyboardSide: () => (T$.MapOfModifierKey$KeyboardSide = dart.constFn(dart_rti.findType("core|Map<flutter__src__services__raw_keyboard|ModifierKey,flutter__src__services__raw_keyboard|KeyboardSide>")))(),
    PhysicalKeyboardKey: () => (T$.PhysicalKeyboardKey = dart.constFn(dart_rti.findType("flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey")))(),
    LogicalKeyboardKey: () => (T$.LogicalKeyboardKey = dart.constFn(dart_rti.findType("flutter__src__services__keyboard_key$46g|LogicalKeyboardKey")))(),
    KeyboardSideAndintAndint__Tobool: () => (T$.KeyboardSideAndintAndint__Tobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__raw_keyboard|KeyboardSide,core|int,core|int,core|int)")))(),
    ModifierKey__Tobool: () => (T$.ModifierKey__Tobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__raw_keyboard|ModifierKey{side:flutter__src__services__raw_keyboard|KeyboardSide})")))(),
    ModifierKeyToKeyboardSideN: () => (T$.ModifierKeyToKeyboardSideN = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|KeyboardSide?(flutter__src__services__raw_keyboard|ModifierKey)")))(),
    RawKeyEventDataWeb: () => (T$.RawKeyEventDataWeb = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_web|RawKeyEventDataWeb")))(),
    ModifierKeyToKeyboardSide: () => (T$.ModifierKeyToKeyboardSide = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|KeyboardSide(flutter__src__services__raw_keyboard|ModifierKey)")))(),
    RawKeyEventDataMacOs: () => (T$.RawKeyEventDataMacOs = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_macos|RawKeyEventDataMacOs")))(),
    RawKeyEventDataLinux: () => (T$.RawKeyEventDataLinux = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_linux|RawKeyEventDataLinux")))(),
    KeyHelper: () => (T$.KeyHelper = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_linux|KeyHelper")))(),
    StringToKeyHelper: () => (T$.StringToKeyHelper = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_linux|KeyHelper(core|String)")))(),
    __Toint: () => (T$.__Toint = dart.constFn(dart_rti.findType("core|int({isDown!core|bool,keyCode!core|int,modifiers!core|int})")))(),
    ModifierKeyAndint__Tobool: () => (T$.ModifierKeyAndint__Tobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__raw_keyboard|ModifierKey,core|int{isDown!core|bool,keyCode!core|int,side:flutter__src__services__raw_keyboard|KeyboardSide})")))(),
    intToLogicalKeyboardKeyN: () => (T$.intToLogicalKeyboardKeyN = dart.constFn(dart_rti.findType("flutter__src__services__keyboard_key$46g|LogicalKeyboardKey?(core|int)")))(),
    RawKeyEventDataIos: () => (T$.RawKeyEventDataIos = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_ios|RawKeyEventDataIos")))(),
    RawKeyEventDataFuchsia: () => (T$.RawKeyEventDataFuchsia = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard_fuchsia|RawKeyEventDataFuchsia")))(),
    ListOfKeyboardSide: () => (T$.ListOfKeyboardSide = dart.constFn(dart_rti.findType("core|List<flutter__src__services__raw_keyboard|KeyboardSide>")))(),
    ListOfModifierKey: () => (T$.ListOfModifierKey = dart.constFn(dart_rti.findType("core|List<flutter__src__services__raw_keyboard|ModifierKey>")))(),
    VoidToRawKeyEventData: () => (T$.VoidToRawKeyEventData = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyEventData()")))(),
    RawKeyDownEvent: () => (T$.RawKeyDownEvent = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyDownEvent")))(),
    MapOfString$ObjectNToRawKeyEvent: () => (T$.MapOfString$ObjectNToRawKeyEvent = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyEvent(core|Map<core|String,core|Object?>)")))(),
    LogicalKeyboardKeyTobool: () => (T$.LogicalKeyboardKeyTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__keyboard_key$46g|LogicalKeyboardKey)")))(),
    RawKeyEventData: () => (T$.RawKeyEventData = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyEventData")))(),
    RawKeyEventTovoid: () => (T$.RawKeyEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__raw_keyboard|RawKeyEvent)")))(),
    RawKeyEventTobool: () => (T$.RawKeyEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__raw_keyboard|RawKeyEvent)")))(),
    KeyMessageTobool: () => (T$.KeyMessageTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__hardware_keyboard|KeyMessage)")))(),
    RawKeyUpEvent: () => (T$.RawKeyUpEvent = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyUpEvent")))(),
    RawKeyEvent: () => (T$.RawKeyEvent = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyEvent")))(),
    FnTovoid$1: () => (T$.FnTovoid$1 = dart.constFn(dart_rti.findType("~(~(flutter__src__services__raw_keyboard|RawKeyEvent))")))(),
    RawKeyEventToNbool: () => (T$.RawKeyEventToNbool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__raw_keyboard|RawKeyEvent)?")))(),
    SetOfLogicalKeyboardKey: () => (T$.SetOfLogicalKeyboardKey = dart.constFn(dart_rti.findType("core|Set<flutter__src__services__keyboard_key$46g|LogicalKeyboardKey>")))(),
    SetOfPhysicalKeyboardKey: () => (T$.SetOfPhysicalKeyboardKey = dart.constFn(dart_rti.findType("core|Set<flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey>")))(),
    PhysicalKeyboardKeyToLogicalKeyboardKeyN: () => (T$.PhysicalKeyboardKeyToLogicalKeyboardKeyN = dart.constFn(dart_rti.findType("flutter__src__services__keyboard_key$46g|LogicalKeyboardKey?(flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey)")))(),
    RawKeyboard: () => (T$.RawKeyboard = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyboard")))(),
    ListOfRawKeyEventTovoid: () => (T$.ListOfRawKeyEventTovoid = dart.constFn(dart_rti.findType("core|List<~(flutter__src__services__raw_keyboard|RawKeyEvent)>")))(),
    KeyMessageToNbool: () => (T$.KeyMessageToNbool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__hardware_keyboard|KeyMessage)?")))(),
    MapOf_ModifierSidePair$SetOfPhysicalKeyboardKey: () => (T$.MapOf_ModifierSidePair$SetOfPhysicalKeyboardKey = dart.constFn(dart_rti.findType("core|Map<flutter__src__services__raw_keyboard|_ModifierSidePair,core|Set<flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey>>")))(),
    MapOfPhysicalKeyboardKey$LogicalKeyboardKey: () => (T$.MapOfPhysicalKeyboardKey$LogicalKeyboardKey = dart.constFn(dart_rti.findType("core|Map<flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey,flutter__src__services__keyboard_key$46g|LogicalKeyboardKey>")))(),
    _ModifierSidePair: () => (T$._ModifierSidePair = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|_ModifierSidePair")))(),
    KeyboardSideN: () => (T$.KeyboardSideN = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|KeyboardSide?")))(),
    LogicalKeyboardKeyToKeyboardLockModeN: () => (T$.LogicalKeyboardKeyToKeyboardLockModeN = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyboardLockMode?(flutter__src__services__keyboard_key$46g|LogicalKeyboardKey)")))(),
    ListOfKeyboardLockMode: () => (T$.ListOfKeyboardLockMode = dart.constFn(dart_rti.findType("core|List<flutter__src__services__hardware_keyboard|KeyboardLockMode>")))(),
    MapOfint$KeyboardLockMode: () => (T$.MapOfint$KeyboardLockMode = dart.constFn(dart_rti.findType("core|Map<core|int,flutter__src__services__hardware_keyboard|KeyboardLockMode>")))(),
    KeyboardLockMode: () => (T$.KeyboardLockMode = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyboardLockMode")))(),
    Duration: () => (T$.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    KeyEventDeviceType: () => (T$.KeyEventDeviceType = dart.constFn(dart_rti.findType("ui|KeyEventDeviceType")))(),
    KeyEventTobool: () => (T$.KeyEventTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__hardware_keyboard|KeyEvent)")))(),
    KeyDownEvent: () => (T$.KeyDownEvent = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyDownEvent")))(),
    KeyRepeatEvent: () => (T$.KeyRepeatEvent = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyRepeatEvent")))(),
    KeyUpEvent: () => (T$.KeyUpEvent = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyUpEvent")))(),
    KeyEvent: () => (T$.KeyEvent = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyEvent")))(),
    HardwareKeyboard: () => (T$.HardwareKeyboard = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|HardwareKeyboard")))(),
    SetOfKeyboardLockMode: () => (T$.SetOfKeyboardLockMode = dart.constFn(dart_rti.findType("core|Set<flutter__src__services__hardware_keyboard|KeyboardLockMode>")))(),
    PhysicalKeyboardKeyTobool: () => (T$.PhysicalKeyboardKeyTobool = dart.constFn(dart_rti.findType("core|bool(flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey)")))(),
    KeyEventTovoid: () => (T$.KeyEventTovoid = dart.constFn(dart_rti.findType("~(flutter__src__services__hardware_keyboard|KeyEvent)")))(),
    FnTovoid$2: () => (T$.FnTovoid$2 = dart.constFn(dart_rti.findType("~(core|bool(flutter__src__services__hardware_keyboard|KeyEvent))")))(),
    VoidToListOfString: () => (T$.VoidToListOfString = dart.constFn(dart_rti.findType("core|List<core|String>()")))(),
    ListOfKeyEventTobool: () => (T$.ListOfKeyEventTobool = dart.constFn(dart_rti.findType("core|List<core|bool(flutter__src__services__hardware_keyboard|KeyEvent)>")))(),
    ListNOfKeyEventTobool: () => (T$.ListNOfKeyEventTobool = dart.constFn(dart_rti.findType("core|List<core|bool(flutter__src__services__hardware_keyboard|KeyEvent)>?")))(),
    ListOfKeyDataTransitMode: () => (T$.ListOfKeyDataTransitMode = dart.constFn(dart_rti.findType("core|List<flutter__src__services__hardware_keyboard|KeyDataTransitMode>")))(),
    KeyDataTransitMode: () => (T$.KeyDataTransitMode = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyDataTransitMode")))(),
    ListOfKeyEvent: () => (T$.ListOfKeyEvent = dart.constFn(dart_rti.findType("core|List<flutter__src__services__hardware_keyboard|KeyEvent>")))(),
    RawKeyEventN: () => (T$.RawKeyEventN = dart.constFn(dart_rti.findType("flutter__src__services__raw_keyboard|RawKeyEvent?")))(),
    KeyMessage: () => (T$.KeyMessage = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyMessage")))(),
    KeyDataTobool: () => (T$.KeyDataTobool = dart.constFn(dart_rti.findType("core|bool(ui|KeyData)")))(),
    ListOfKeyEventAndRawKeyEventNTobool: () => (T$.ListOfKeyEventAndRawKeyEventNTobool = dart.constFn(dart_rti.findType("core|bool(core|List<flutter__src__services__hardware_keyboard|KeyEvent>,flutter__src__services__raw_keyboard|RawKeyEvent?)")))(),
    dynamicToFutureOfMapOfString$dynamic: () => (T$.dynamicToFutureOfMapOfString$dynamic = dart.constFn(dart_rti.findType("async|Future<core|Map<core|String,@>>(@)")))(),
    RawKeyEventToKeyEventDeviceType: () => (T$.RawKeyEventToKeyEventDeviceType = dart.constFn(dart_rti.findType("ui|KeyEventDeviceType(flutter__src__services__raw_keyboard|RawKeyEvent)")))(),
    KeyDataToKeyEvent: () => (T$.KeyDataToKeyEvent = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyEvent(ui|KeyData)")))(),
    KeyDataTransitModeN: () => (T$.KeyDataTransitModeN = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyDataTransitMode?")))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(@)")))(),
    ServicesBinding: () => (T$.ServicesBinding = dart.constFn(dart_rti.findType("flutter__src__services__binding|ServicesBinding")))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart_rti.findType("core|Null(~)")))(),
    LicenseEntry: () => (T$.LicenseEntry = dart.constFn(dart_rti.findType("flutter__src__foundation__licenses|LicenseEntry")))(),
    ListOfLicenseEntry: () => (T$.ListOfLicenseEntry = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__licenses|LicenseEntry>")))(),
    StringToListOfLicenseEntry: () => (T$.StringToListOfLicenseEntry = dart.constFn(dart_rti.findType("core|List<flutter__src__foundation__licenses|LicenseEntry>(core|String)")))(),
    LicenseEntryTovoid: () => (T$.LicenseEntryTovoid = dart.constFn(dart_rti.findType("~(flutter__src__foundation__licenses|LicenseEntry)")))(),
    VoidToFutureOfString: () => (T$.VoidToFutureOfString = dart.constFn(dart_rti.findType("async|Future<core|String>()")))(),
    StringToFutureOfvoid: () => (T$.StringToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|String)")))(),
    boolToFutureOfvoid: () => (T$.boolToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|bool)")))(),
    AppLifecycleState: () => (T$.AppLifecycleState = dart.constFn(dart_rti.findType("ui|AppLifecycleState")))(),
    AppExitResponse: () => (T$.AppExitResponse = dart.constFn(dart_rti.findType("ui|AppExitResponse")))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(dart_rti.findType("core|Map<core|String,core|Object?>")))(),
    KeyEventManager: () => (T$.KeyEventManager = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyEventManager")))(),
    RootIsolateTokenN: () => (T$.RootIsolateTokenN = dart.constFn(dart_rti.findType("ui|RootIsolateToken?")))(),
    ChannelBuffers: () => (T$.ChannelBuffers = dart.constFn(dart_rti.findType("ui|ChannelBuffers")))(),
    VoidToBinaryMessenger: () => (T$.VoidToBinaryMessenger = dart.constFn(dart_rti.findType("flutter__src__services__binary_messenger|BinaryMessenger()")))(),
    ObjectToFutureOfvoid: () => (T$.ObjectToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|Object)")))(),
    VoidToStreamOfLicenseEntry: () => (T$.VoidToStreamOfLicenseEntry = dart.constFn(dart_rti.findType("async|Stream<flutter__src__foundation__licenses|LicenseEntry>()")))(),
    StringNToFutureOfStringN: () => (T$.StringNToFutureOfStringN = dart.constFn(dart_rti.findType("async|Future<core|String?>(core|String?)")))(),
    AppLifecycleStateNAndAppLifecycleStateToListOfAppLifecycleState: () => (T$.AppLifecycleStateNAndAppLifecycleStateToListOfAppLifecycleState = dart.constFn(dart_rti.findType("core|List<ui|AppLifecycleState>(ui|AppLifecycleState?,ui|AppLifecycleState)")))(),
    AppLifecycleStateNAndAppLifecycleStateTobool: () => (T$.AppLifecycleStateNAndAppLifecycleStateTobool = dart.constFn(dart_rti.findType("core|bool(ui|AppLifecycleState?,ui|AppLifecycleState)")))(),
    StringToAppLifecycleStateN: () => (T$.StringToAppLifecycleStateN = dart.constFn(dart_rti.findType("ui|AppLifecycleState?(core|String)")))(),
    VoidToFutureOfAppExitResponse: () => (T$.VoidToFutureOfAppExitResponse = dart.constFn(dart_rti.findType("async|Future<ui|AppExitResponse>()")))(),
    AppExitTypeAndintToFutureOfAppExitResponse: () => (T$.AppExitTypeAndintToFutureOfAppExitResponse = dart.constFn(dart_rti.findType("async|Future<ui|AppExitResponse>(ui|AppExitType[core|int])")))(),
    RestorationManager: () => (T$.RestorationManager = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationManager")))(),
    VoidToRestorationManager: () => (T$.VoidToRestorationManager = dart.constFn(dart_rti.findType("flutter__src__services__restoration|RestorationManager()")))(),
    FnTovoid$3: () => (T$.FnTovoid$3 = dart.constFn(dart_rti.findType("~(async|Future<~>(core|bool)?)")))(),
    ServicesBindingN: () => (T$.ServicesBindingN = dart.constFn(dart_rti.findType("flutter__src__services__binding|ServicesBinding?")))(),
    HardwareKeyboardN: () => (T$.HardwareKeyboardN = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|HardwareKeyboard?")))(),
    KeyEventManagerN: () => (T$.KeyEventManagerN = dart.constFn(dart_rti.findType("flutter__src__services__hardware_keyboard|KeyEventManager?")))(),
    ValueNotifierOfintN: () => (T$.ValueNotifierOfintN = dart.constFn(dart_rti.findType("flutter__src__foundation__change_notifier|ValueNotifier<core|int?>")))(),
    boolToNFutureOfvoid: () => (T$.boolToNFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|bool)?")))(),
    ByteDataNTovoid: () => (T$.ByteDataNTovoid = dart.constFn(dart_rti.findType("~(typed_data|ByteData?)")))(),
    ByteDataNAndFnToFutureOfvoid: () => (T$.ByteDataNAndFnToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(typed_data|ByteData?,~(typed_data|ByteData?))")))(),
    StringAndByteDataNToFutureOfByteDataN: () => (T$.StringAndByteDataNToFutureOfByteDataN = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData?>(core|String,typed_data|ByteData?)")))(),
    ImmutableBuffer: () => (T$.ImmutableBuffer = dart.constFn(dart_rti.findType("ui|ImmutableBuffer")))(),
    ByteData: () => (T$.ByteData = dart.constFn(dart_rti.findType("typed_data|ByteData")))(),
    ByteDataToString: () => (T$.ByteDataToString = dart.constFn(dart_rti.findType("core|String(typed_data|ByteData)")))(),
    StringToFutureOfImmutableBuffer: () => (T$.StringToFutureOfImmutableBuffer = dart.constFn(dart_rti.findType("async|Future<ui|ImmutableBuffer>(core|String)")))(),
    String__ToFutureOfString: () => (T$.String__ToFutureOfString = dart.constFn(dart_rti.findType("async|Future<core|String>(core|String{cache:core|bool})")))(),
    StringAndFnToFutureOfT: () => (T$.StringAndFnToFutureOfT = dart.constFn(dart_rti.findType("async|Future<0^>(core|String,async|Future<0^>(core|String))<core|Object?>")))(),
    StringAndFnToFutureOfT$1: () => (T$.StringAndFnToFutureOfT$1 = dart.constFn(dart_rti.findType("async|Future<0^>(core|String,0^/(typed_data|ByteData))<core|Object?>")))(),
    StringToUri: () => (T$.StringToUri = dart.constFn(dart_rti.findType("core|Uri(core|String)")))(),
    StringToFutureOfByteData: () => (T$.StringToFutureOfByteData = dart.constFn(dart_rti.findType("async|Future<typed_data|ByteData>(core|String)")))(),
    Uri: () => (T$.Uri = dart.constFn(dart_rti.findType("core|Uri")))(),
    HttpClient: () => (T$.HttpClient = dart.constFn(dart_rti.findType("_http|HttpClient")))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(dart_rti.findType("async|Future<core|String>")))(),
    Future: () => (T$.Future = dart.constFn(dart_rti.findType("async|Future<@>")))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart_rti.findType("core|Null(core|Object,core|StackTrace)")))(),
    MapOfString$FutureOfString: () => (T$.MapOfString$FutureOfString = dart.constFn(dart_rti.findType("core|Map<core|String,async|Future<core|String>>")))(),
    MapOfString$Future: () => (T$.MapOfString$Future = dart.constFn(dart_rti.findType("core|Map<core|String,async|Future<@>>")))(),
    ByteDataNToByteData: () => (T$.ByteDataNToByteData = dart.constFn(dart_rti.findType("typed_data|ByteData(typed_data|ByteData?)")))(),
    Exception: () => (T$.Exception = dart.constFn(dart_rti.findType("core|Exception")))()
  };
  var G = {
    DiagnosticsPropertyOfString: () => (G.DiagnosticsPropertyOfString = dart.constFn(diagnostics.DiagnosticsProperty$(T$.String())))(),
    DiagnosticsPropertyOfint: () => (G.DiagnosticsPropertyOfint = dart.constFn(diagnostics.DiagnosticsProperty$(T$.int())))(),
    DiagnosticsPropertyOfTextSelection: () => (G.DiagnosticsPropertyOfTextSelection = dart.constFn(diagnostics.DiagnosticsProperty$(T$.TextSelection())))(),
    DiagnosticsPropertyOfTextRange: () => (G.DiagnosticsPropertyOfTextRange = dart.constFn(diagnostics.DiagnosticsProperty$(T$.TextRange())))(),
    IdentityMapOfString$dynamic: () => (G.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.dynamic())))(),
    JSArrayOfSelectionRect: () => (G.JSArrayOfSelectionRect = dart.constFn(_interceptors.JSArray$(T$.SelectionRect())))(),
    LinkedHashSetOfTextInputControl: () => (G.LinkedHashSetOfTextInputControl = dart.constFn(collection.LinkedHashSet$(T$.TextInputControl())))(),
    IdentityMapOfString$ScribbleClient: () => (G.IdentityMapOfString$ScribbleClient = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.ScribbleClient())))(),
    DiagnosticsPropertyOfMethodCall: () => (G.DiagnosticsPropertyOfMethodCall = dart.constFn(diagnostics.DiagnosticsProperty$(T$.MethodCall())))(),
    JSArrayOfDiagnosticsNode: () => (G.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNode())))(),
    JSArrayOfTextEditingDelta: () => (G.JSArrayOfTextEditingDelta = dart.constFn(_interceptors.JSArray$(T$.TextEditingDelta())))(),
    JSArrayOfObject: () => (G.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(T$.Object())))(),
    JSArrayOfnum: () => (G.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(T$.num())))(),
    LinkedHashSetOfRestorationBucket: () => (G.LinkedHashSetOfRestorationBucket = dart.constFn(collection.LinkedHashSet$(T$.RestorationBucket())))(),
    SynchronousFutureOfRestorationBucketN: () => (G.SynchronousFutureOfRestorationBucketN = dart.constFn(synchronous_future.SynchronousFuture$(T$.RestorationBucketN())))(),
    CompleterOfRestorationBucketN: () => (G.CompleterOfRestorationBucketN = dart.constFn(async.Completer$(T$.RestorationBucketN())))(),
    IdentityMapOfString$RestorationBucket: () => (G.IdentityMapOfString$RestorationBucket = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.RestorationBucket())))(),
    IdentityMapOfString$ListOfRestorationBucket: () => (G.IdentityMapOfString$ListOfRestorationBucket = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.ListOfRestorationBucket())))(),
    IdentityMapOfString$ObjectN: () => (G.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.ObjectN())))(),
    LinkedMapOfObjectN$ObjectN: () => (G.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    JSArrayOfRestorationBucket: () => (G.JSArrayOfRestorationBucket = dart.constFn(_interceptors.JSArray$(T$.RestorationBucket())))(),
    ExpandoOfBinaryMessenger: () => (G.ExpandoOfBinaryMessenger = dart.constFn(core.Expando$(T$.BinaryMessenger())))(),
    IdentityMapOfString$_PlatformChannelStats: () => (G.IdentityMapOfString$_PlatformChannelStats = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$._PlatformChannelStats())))(),
    JSArrayOfObjectN: () => (G.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ListOfObjectN: () => (G.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    BasicMessageChannelOfObjectN: () => (G.BasicMessageChannelOfObjectN = dart.constFn(platform_channel.BasicMessageChannel$(T$.ObjectN())))(),
    BasicMessageChannelOfStringN: () => (G.BasicMessageChannelOfStringN = dart.constFn(platform_channel.BasicMessageChannel$(T$.StringN())))(),
    LinkedMapOfModifierKey$KeyboardSide: () => (G.LinkedMapOfModifierKey$KeyboardSide = dart.constFn(_js_helper.LinkedMap$(T$.ModifierKey(), T$.KeyboardSide())))(),
    DiagnosticsPropertyOfintN: () => (G.DiagnosticsPropertyOfintN = dart.constFn(diagnostics.DiagnosticsProperty$(T$.intN())))(),
    DiagnosticsPropertyOfbool: () => (G.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(T$.bool())))(),
    DiagnosticsPropertyOfLogicalKeyboardKey: () => (G.DiagnosticsPropertyOfLogicalKeyboardKey = dart.constFn(diagnostics.DiagnosticsProperty$(T$.LogicalKeyboardKey())))(),
    DiagnosticsPropertyOfPhysicalKeyboardKey: () => (G.DiagnosticsPropertyOfPhysicalKeyboardKey = dart.constFn(diagnostics.DiagnosticsProperty$(T$.PhysicalKeyboardKey())))(),
    JSArrayOfRawKeyEventTovoid: () => (G.JSArrayOfRawKeyEventTovoid = dart.constFn(_interceptors.JSArray$(T$.RawKeyEventTovoid())))(),
    LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey: () => (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey = dart.constFn(_js_helper.LinkedMap$(T$.PhysicalKeyboardKey(), T$.LogicalKeyboardKey())))(),
    ListOfRawKeyEventTovoid: () => (G.ListOfRawKeyEventTovoid = dart.constFn(core.List$(T$.RawKeyEventTovoid())))(),
    DiagnosticsPropertyOfRawKeyEvent: () => (G.DiagnosticsPropertyOfRawKeyEvent = dart.constFn(diagnostics.DiagnosticsProperty$(T$.RawKeyEvent())))(),
    LinkedHashSetOfPhysicalKeyboardKey: () => (G.LinkedHashSetOfPhysicalKeyboardKey = dart.constFn(collection.LinkedHashSet$(T$.PhysicalKeyboardKey())))(),
    LinkedMapOf_ModifierSidePair$SetOfPhysicalKeyboardKey: () => (G.LinkedMapOf_ModifierSidePair$SetOfPhysicalKeyboardKey = dart.constFn(_js_helper.LinkedMap$(T$._ModifierSidePair(), T$.SetOfPhysicalKeyboardKey())))(),
    IdentityMapOfint$KeyboardLockMode: () => (G.IdentityMapOfint$KeyboardLockMode = dart.constFn(_js_helper.IdentityMap$(T$.int(), T$.KeyboardLockMode())))(),
    DiagnosticsPropertyOfDuration: () => (G.DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(T$.Duration())))(),
    LinkedHashSetOfKeyboardLockMode: () => (G.LinkedHashSetOfKeyboardLockMode = dart.constFn(collection.LinkedHashSet$(T$.KeyboardLockMode())))(),
    JSArrayOfKeyEventTobool: () => (G.JSArrayOfKeyEventTobool = dart.constFn(_interceptors.JSArray$(T$.KeyEventTobool())))(),
    ListOfKeyEventTobool: () => (G.ListOfKeyEventTobool = dart.constFn(core.List$(T$.KeyEventTobool())))(),
    DiagnosticsPropertyOfKeyEvent: () => (G.DiagnosticsPropertyOfKeyEvent = dart.constFn(diagnostics.DiagnosticsProperty$(T$.KeyEvent())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T$.String())))(),
    JSArrayOfKeyEvent: () => (G.JSArrayOfKeyEvent = dart.constFn(_interceptors.JSArray$(T$.KeyEvent())))(),
    DiagnosticsPropertyOfKeyMessage: () => (G.DiagnosticsPropertyOfKeyMessage = dart.constFn(diagnostics.DiagnosticsProperty$(T$.KeyMessage())))(),
    ValueNotifierOfintN: () => (G.ValueNotifierOfintN = dart.constFn(change_notifier.ValueNotifier$(T$.intN())))(),
    StreamControllerOfLicenseEntry: () => (G.StreamControllerOfLicenseEntry = dart.constFn(async.StreamController$(T$.LicenseEntry())))(),
    JSArrayOfLicenseEntry: () => (G.JSArrayOfLicenseEntry = dart.constFn(_interceptors.JSArray$(T$.LicenseEntry())))(),
    JSArrayOfAppLifecycleState: () => (G.JSArrayOfAppLifecycleState = dart.constFn(_interceptors.JSArray$(T$.AppLifecycleState())))(),
    CompleterOfByteDataN: () => (G.CompleterOfByteDataN = dart.constFn(async.Completer$(T$.ByteDataN())))(),
    IdentityMapOfString$FutureOfString: () => (G.IdentityMapOfString$FutureOfString = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.FutureOfString())))(),
    IdentityMapOfString$Future: () => (G.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(T$.String(), T$.Future())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T$.String());
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [TextRange_end]: -1,
        [TextRange_start]: -1
      }, ui.TextRange.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "downstream",
        [_Enum_index]: 1
      }, ui.TextAffinity.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [TextRange_end]: -1,
        [TextRange_start]: -1,
        [TextSelection_isDirectional]: false,
        [TextSelection_affinity]: C[5] || CT.C5,
        [TextSelection_extentOffset]: -1,
        [TextSelection_baseOffset]: -1
      }, text_editing.TextSelection.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [TextEditingValue_composing]: C[3] || CT.C3,
        [TextEditingValue_selection]: C[4] || CT.C4,
        [TextEditingValue_text]: ""
      }, text_input.TextEditingValue.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [hintText$]: null,
        [currentEditingValue$]: C[2] || CT.C2,
        [autofillHints$]: C[0] || CT.C0,
        [uniqueIdentifier$]: "",
        [enabled$]: false
      }, autofill.AutofillConfiguration.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 0
      }, text_input.TextInputType.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "done",
        [_Enum_index]: 2
      }, text_input.TextInputAction.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "light",
        [_Enum_index]: 1
      }, ui.Brightness.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 3
      }, text_input.TextCapitalization.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "disabled",
        [_Enum_index]: 0
      }, text_input.SmartDashesType.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "enabled",
        [_Enum_index]: 1
      }, text_input.SmartDashesType.prototype));
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], T$.SmartDashesType());
    },
    get C14() {
      return C[14] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "disabled",
        [_Enum_index]: 0
      }, text_input.SmartQuotesType.prototype));
    },
    get C15() {
      return C[15] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "enabled",
        [_Enum_index]: 1
      }, text_input.SmartQuotesType.prototype));
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], T$.SmartQuotesType());
    },
    get C16() {
      return C[16] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 1
      }, text_input.TextInputType.prototype));
    },
    get C17() {
      return C[17] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: false,
        [TextInputType_signed]: false,
        [TextInputType_index]: 2
      }, text_input.TextInputType.prototype));
    },
    get C18() {
      return C[18] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 3
      }, text_input.TextInputType.prototype));
    },
    get C19() {
      return C[19] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 4
      }, text_input.TextInputType.prototype));
    },
    get C20() {
      return C[20] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 5
      }, text_input.TextInputType.prototype));
    },
    get C21() {
      return C[21] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 6
      }, text_input.TextInputType.prototype));
    },
    get C22() {
      return C[22] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 7
      }, text_input.TextInputType.prototype));
    },
    get C23() {
      return C[23] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 8
      }, text_input.TextInputType.prototype));
    },
    get C24() {
      return C[24] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 9
      }, text_input.TextInputType.prototype));
    },
    get C25() {
      return C[25] = dart.const(Object.setPrototypeOf({
        [TextInputType_decimal]: null,
        [TextInputType_signed]: null,
        [TextInputType_index]: 10
      }, text_input.TextInputType.prototype));
    },
    get C26() {
      return C[26] = dart.constList([C[6] || CT.C6, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25], T$.TextInputType());
    },
    get C27() {
      return C[27] = dart.constList(["text", "multiline", "number", "phone", "datetime", "emailAddress", "url", "visiblePassword", "name", "address", "none"], T$.String());
    },
    get C29() {
      return C[29] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "none",
        [_Enum_index]: 0
      }, text_input.TextInputAction.prototype));
    },
    get C30() {
      return C[30] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "unspecified",
        [_Enum_index]: 1
      }, text_input.TextInputAction.prototype));
    },
    get C31() {
      return C[31] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "go",
        [_Enum_index]: 3
      }, text_input.TextInputAction.prototype));
    },
    get C32() {
      return C[32] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "search",
        [_Enum_index]: 4
      }, text_input.TextInputAction.prototype));
    },
    get C33() {
      return C[33] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "send",
        [_Enum_index]: 5
      }, text_input.TextInputAction.prototype));
    },
    get C34() {
      return C[34] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "next",
        [_Enum_index]: 6
      }, text_input.TextInputAction.prototype));
    },
    get C35() {
      return C[35] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "previous",
        [_Enum_index]: 7
      }, text_input.TextInputAction.prototype));
    },
    get C36() {
      return C[36] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "continueAction",
        [_Enum_index]: 8
      }, text_input.TextInputAction.prototype));
    },
    get C37() {
      return C[37] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "join",
        [_Enum_index]: 9
      }, text_input.TextInputAction.prototype));
    },
    get C38() {
      return C[38] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "route",
        [_Enum_index]: 10
      }, text_input.TextInputAction.prototype));
    },
    get C39() {
      return C[39] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "emergencyCall",
        [_Enum_index]: 11
      }, text_input.TextInputAction.prototype));
    },
    get C40() {
      return C[40] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "newline",
        [_Enum_index]: 12
      }, text_input.TextInputAction.prototype));
    },
    get C28() {
      return C[28] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[7] || CT.C7, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], T$.TextInputAction());
    },
    get C42() {
      return C[42] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "words",
        [_Enum_index]: 0
      }, text_input.TextCapitalization.prototype));
    },
    get C43() {
      return C[43] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "sentences",
        [_Enum_index]: 1
      }, text_input.TextCapitalization.prototype));
    },
    get C44() {
      return C[44] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "characters",
        [_Enum_index]: 2
      }, text_input.TextCapitalization.prototype));
    },
    get C41() {
      return C[41] = dart.constList([C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[9] || CT.C9], T$.TextCapitalization());
    },
    get C46() {
      return C[46] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "Start",
        [_Enum_index]: 0
      }, text_input.FloatingCursorDragState.prototype));
    },
    get C47() {
      return C[47] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "Update",
        [_Enum_index]: 1
      }, text_input.FloatingCursorDragState.prototype));
    },
    get C48() {
      return C[48] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "End",
        [_Enum_index]: 2
      }, text_input.FloatingCursorDragState.prototype));
    },
    get C45() {
      return C[45] = dart.constList([C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48], T$.FloatingCursorDragState());
    },
    get C50() {
      return C[50] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "tap",
        [_Enum_index]: 0
      }, text_input.SelectionChangedCause.prototype));
    },
    get C51() {
      return C[51] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "doubleTap",
        [_Enum_index]: 1
      }, text_input.SelectionChangedCause.prototype));
    },
    get C52() {
      return C[52] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "longPress",
        [_Enum_index]: 2
      }, text_input.SelectionChangedCause.prototype));
    },
    get C53() {
      return C[53] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "forcePress",
        [_Enum_index]: 3
      }, text_input.SelectionChangedCause.prototype));
    },
    get C54() {
      return C[54] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "keyboard",
        [_Enum_index]: 4
      }, text_input.SelectionChangedCause.prototype));
    },
    get C55() {
      return C[55] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "toolbar",
        [_Enum_index]: 5
      }, text_input.SelectionChangedCause.prototype));
    },
    get C56() {
      return C[56] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "drag",
        [_Enum_index]: 6
      }, text_input.SelectionChangedCause.prototype));
    },
    get C57() {
      return C[57] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "scribble",
        [_Enum_index]: 7
      }, text_input.SelectionChangedCause.prototype));
    },
    get C49() {
      return C[49] = dart.constList([C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57], T$.SelectionChangedCause());
    },
    get C58() {
      return C[58] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    },
    get C59() {
      return C[59] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: -1
      }, ui.Size.prototype));
    },
    get C60() {
      return C[60] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[7] || CT.C7, C[33] || CT.C33, C[31] || CT.C31, C[32] || CT.C32, C[34] || CT.C34, C[35] || CT.C35, C[40] || CT.C40], T$.TextInputAction());
    },
    get C61() {
      return C[61] = dart.constList([C[30] || CT.C30, C[7] || CT.C7, C[33] || CT.C33, C[31] || CT.C31, C[32] || CT.C32, C[34] || CT.C34, C[40] || CT.C40, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39], T$.TextInputAction());
    },
    get C62() {
      return C[62] = dart.const(Object.setPrototypeOf({
      }, message_codecs.StandardMessageCodec.prototype));
    },
    get C63() {
      return C[63] = dart.const(Object.setPrototypeOf({
        [StandardMethodCodec_messageCodec]: C[62] || CT.C62
      }, message_codecs.StandardMethodCodec.prototype));
    },
    get C64() {
      return C[64] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 1000000
      }, core.Duration.prototype));
    },
    get C65() {
      return C[65] = dart.const(Object.setPrototypeOf({
      }, message_codecs.StringCodec.prototype));
    },
    get C66() {
      return C[66] = dart.const(Object.setPrototypeOf({
      }, message_codecs.JSONMessageCodec.prototype));
    },
    get C67() {
      return C[67] = dart.const(Object.setPrototypeOf({
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Message corrupted"
      }, core.FormatException.prototype));
    },
    get C68() {
      return C[68] = dart.const(Object.setPrototypeOf({
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid method call"
      }, core.FormatException.prototype));
    },
    get C69() {
      return C[69] = dart.const(Object.setPrototypeOf({
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Expected envelope, got nothing"
      }, core.FormatException.prototype));
    },
    get C70() {
      return C[70] = dart.const(Object.setPrototypeOf({
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid envelope"
      }, core.FormatException.prototype));
    },
    get C72() {
      return C[72] = dart.const(Object.setPrototypeOf({
      }, message_codecs.JSONMethodCodec.prototype));
    },
    get C71() {
      return C[71] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/navigation"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C73() {
      return C[73] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/platform"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C74() {
      return C[74] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/processtext"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C75() {
      return C[75] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/textinput"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C76() {
      return C[76] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/spellcheck"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C77() {
      return C[77] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/undomanager"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C78() {
      return C[78] = dart.const(Object.setPrototypeOf({
        $ti: T$.BasicMessageChannelOfObjectN(),
        [_binaryMessenger]: null,
        [codec$]: C[66] || CT.C66,
        [name$]: "flutter/keyevent"
      }, G.BasicMessageChannelOfObjectN().prototype));
    },
    get C79() {
      return C[79] = dart.const(Object.setPrototypeOf({
        $ti: T$.BasicMessageChannelOfStringN(),
        [_binaryMessenger]: null,
        [codec$]: C[65] || CT.C65,
        [name$]: "flutter/lifecycle"
      }, G.BasicMessageChannelOfStringN().prototype));
    },
    get C80() {
      return C[80] = dart.const(Object.setPrototypeOf({
        $ti: T$.BasicMessageChannelOfObjectN(),
        [_binaryMessenger]: null,
        [codec$]: C[66] || CT.C66,
        [name$]: "flutter/system"
      }, G.BasicMessageChannelOfObjectN().prototype));
    },
    get C81() {
      return C[81] = dart.const(Object.setPrototypeOf({
        $ti: T$.BasicMessageChannelOfObjectN(),
        [_binaryMessenger]: null,
        [codec$]: C[62] || CT.C62,
        [name$]: "flutter/accessibility"
      }, G.BasicMessageChannelOfObjectN().prototype));
    },
    get C82() {
      return C[82] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/platform_views"
      }, platform_channel.MethodChannel.prototype));
    },
    get C83() {
      return C[83] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/skia"
      }, platform_channel.MethodChannel.prototype));
    },
    get C84() {
      return C[84] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/mousecursor"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C85() {
      return C[85] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/restoration"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C86() {
      return C[86] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/deferredcomponent"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C87() {
      return C[87] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/localization"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C88() {
      return C[88] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/menu"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C89() {
      return C[89] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[72] || CT.C72,
        [name$0]: "flutter/contextmenu"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C90() {
      return C[90] = dart.const(Object.setPrototypeOf({
        [_binaryMessenger$0]: null,
        [codec$0]: C[63] || CT.C63,
        [name$0]: "flutter/keyboard"
      }, platform_channel.OptionalMethodChannel.prototype));
    },
    get C91() {
      return C[91] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "any",
        [_Enum_index]: 0
      }, raw_keyboard.KeyboardSide.prototype));
    },
    get C92() {
      return C[92] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "all",
        [_Enum_index]: 3
      }, raw_keyboard.KeyboardSide.prototype));
    },
    get C93() {
      return C[93] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "left",
        [_Enum_index]: 1
      }, raw_keyboard.KeyboardSide.prototype));
    },
    get C94() {
      return C[94] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "right",
        [_Enum_index]: 2
      }, raw_keyboard.KeyboardSide.prototype));
    },
    get C95() {
      return C[95] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "controlModifier",
        [_Enum_index]: 0
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C96() {
      return C[96] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "shiftModifier",
        [_Enum_index]: 1
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C97() {
      return C[97] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "altModifier",
        [_Enum_index]: 2
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C98() {
      return C[98] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "metaModifier",
        [_Enum_index]: 3
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C99() {
      return C[99] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "capsLockModifier",
        [_Enum_index]: 4
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C100() {
      return C[100] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "scrollLockModifier",
        [_Enum_index]: 6
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C101() {
      return C[101] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "numLockModifier",
        [_Enum_index]: 5
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C102() {
      return C[102] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "functionModifier",
        [_Enum_index]: 7
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C103() {
      return C[103] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "symbolModifier",
        [_Enum_index]: 8
      }, raw_keyboard.ModifierKey.prototype));
    },
    get C104() {
      return C[104] = dart.constList([C[91] || CT.C91, C[93] || CT.C93, C[94] || CT.C94, C[92] || CT.C92], T$.KeyboardSide());
    },
    get C105() {
      return C[105] = dart.constList([C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[101] || CT.C101, C[100] || CT.C100, C[102] || CT.C102, C[103] || CT.C103], T$.ModifierKey());
    },
    get C106() {
      return C[106] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[93] || CT.C93,
        [_ModifierSidePair_modifier]: C[97] || CT.C97
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C107() {
      return C[107] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[94] || CT.C94,
        [_ModifierSidePair_modifier]: C[97] || CT.C97
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C108() {
      return C[108] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[97] || CT.C97
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C109() {
      return C[109] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[91] || CT.C91,
        [_ModifierSidePair_modifier]: C[97] || CT.C97
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C110() {
      return C[110] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[93] || CT.C93,
        [_ModifierSidePair_modifier]: C[96] || CT.C96
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C111() {
      return C[111] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[94] || CT.C94,
        [_ModifierSidePair_modifier]: C[96] || CT.C96
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C112() {
      return C[112] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[96] || CT.C96
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C113() {
      return C[113] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[91] || CT.C91,
        [_ModifierSidePair_modifier]: C[96] || CT.C96
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C114() {
      return C[114] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[93] || CT.C93,
        [_ModifierSidePair_modifier]: C[95] || CT.C95
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C115() {
      return C[115] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[94] || CT.C94,
        [_ModifierSidePair_modifier]: C[95] || CT.C95
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C116() {
      return C[116] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[95] || CT.C95
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C117() {
      return C[117] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[91] || CT.C91,
        [_ModifierSidePair_modifier]: C[95] || CT.C95
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C118() {
      return C[118] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[93] || CT.C93,
        [_ModifierSidePair_modifier]: C[98] || CT.C98
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C119() {
      return C[119] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[94] || CT.C94,
        [_ModifierSidePair_modifier]: C[98] || CT.C98
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C120() {
      return C[120] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[98] || CT.C98
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C121() {
      return C[121] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[91] || CT.C91,
        [_ModifierSidePair_modifier]: C[98] || CT.C98
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C122() {
      return C[122] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[99] || CT.C99
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C123() {
      return C[123] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[101] || CT.C101
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C124() {
      return C[124] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[100] || CT.C100
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C125() {
      return C[125] = dart.const(Object.setPrototypeOf({
        [_ModifierSidePair_side]: C[92] || CT.C92,
        [_ModifierSidePair_modifier]: C[102] || CT.C102
      }, raw_keyboard._ModifierSidePair.prototype));
    },
    get C128() {
      return C[128] = dart.const(Object.setPrototypeOf({
        [LogicalKeyboardKey_keyId]: 4294967562.0
      }, keyboard_key$46g.LogicalKeyboardKey.prototype));
    },
    get C127() {
      return C[127] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "numLock",
        [_Enum_index]: 0,
        logicalKey: C[128] || CT.C128
      }, hardware_keyboard.KeyboardLockMode.prototype));
    },
    get C130() {
      return C[130] = dart.const(Object.setPrototypeOf({
        [LogicalKeyboardKey_keyId]: 4294967564.0
      }, keyboard_key$46g.LogicalKeyboardKey.prototype));
    },
    get C129() {
      return C[129] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "scrollLock",
        [_Enum_index]: 1,
        logicalKey: C[130] || CT.C130
      }, hardware_keyboard.KeyboardLockMode.prototype));
    },
    get C132() {
      return C[132] = dart.const(Object.setPrototypeOf({
        [LogicalKeyboardKey_keyId]: 4294967556.0
      }, keyboard_key$46g.LogicalKeyboardKey.prototype));
    },
    get C131() {
      return C[131] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "capsLock",
        [_Enum_index]: 2,
        logicalKey: C[132] || CT.C132
      }, hardware_keyboard.KeyboardLockMode.prototype));
    },
    get C126() {
      return C[126] = dart.constList([C[127] || CT.C127, C[129] || CT.C129, C[131] || CT.C131], T$.KeyboardLockMode());
    },
    get C133() {
      return C[133] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "keyboard",
        [_Enum_index]: 0
      }, ui.KeyEventDeviceType.prototype));
    },
    get C135() {
      return C[135] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rawKeyData",
        [_Enum_index]: 0
      }, hardware_keyboard.KeyDataTransitMode.prototype));
    },
    get C136() {
      return C[136] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "keyDataThenRawKeyData",
        [_Enum_index]: 1
      }, hardware_keyboard.KeyDataTransitMode.prototype));
    },
    get C134() {
      return C[134] = dart.constList([C[135] || CT.C135, C[136] || CT.C136], T$.KeyDataTransitMode());
    },
    get C137() {
      return C[137] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "down",
        [_Enum_index]: 0
      }, ui.KeyEventType.prototype));
    },
    get C138() {
      return C[138] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "up",
        [_Enum_index]: 1
      }, ui.KeyEventType.prototype));
    },
    get C139() {
      return C[139] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "repeat",
        [_Enum_index]: 2
      }, ui.KeyEventType.prototype));
    },
    get C140() {
      return C[140] = dart.constList([], T$.Object());
    },
    get C141() {
      return C[141] = dart.const(Object.setPrototypeOf({
      }, binding$0._DefaultBinaryMessenger.prototype));
    },
    get C142() {
      return C[142] = dart.fn(binding$0.ServicesBinding._parseLicenses, T$.StringToListOfLicenseEntry());
    },
    get C143() {
      return C[143] = dart.constList([], T$.AppLifecycleState());
    },
    get C145() {
      return C[145] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "detached",
        [_Enum_index]: 0
      }, ui.AppLifecycleState.prototype));
    },
    get C144() {
      return C[144] = dart.constList([C[145] || CT.C145], T$.AppLifecycleState());
    },
    get C146() {
      return C[146] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "resumed",
        [_Enum_index]: 1
      }, ui.AppLifecycleState.prototype));
    },
    get C147() {
      return C[147] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "inactive",
        [_Enum_index]: 2
      }, ui.AppLifecycleState.prototype));
    },
    get C148() {
      return C[148] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "hidden",
        [_Enum_index]: 3
      }, ui.AppLifecycleState.prototype));
    },
    get C149() {
      return C[149] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "paused",
        [_Enum_index]: 4
      }, ui.AppLifecycleState.prototype));
    },
    get C150() {
      return C[150] = dart.fn(asset_bundle.AssetBundle._utf8decode, T$.ByteDataToString());
    }
  }, false);
  var C = Array(151).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/services/text_editing_delta.dart",
    "package:flutter/src/services/text_editing_delta.dart",
    "dart:core",
    "package:flutter/src/services/text_editing.dart",
    "dart:ui",
    "package:flutter/src/services/clipboard.dart",
    "package:flutter/src/services/autofill.dart",
    "package:flutter/src/services/text_input.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/autofill.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/text_input.dart",
    "package:vector_math/vector_math_64.dart",
    "package:flutter/src/services/platform_channel.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/restoration.dart",
    "package:flutter/src/services/restoration.dart",
    "dart:async",
    "package:flutter/src/services/_background_isolate_binary_messenger_web.dart",
    "package:flutter/src/services/binary_messenger.dart",
    "package:flutter/src/services/message_codec.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/platform_channel.dart",
    "package:flutter/src/services/message_codecs.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/message_codecs.dart",
    "package:flutter/src/services/system_channels.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/raw_keyboard_windows.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/raw_keyboard.dart",
    "package:flutter/src/services/raw_keyboard.dart",
    "package:flutter/src/services/raw_keyboard_windows.dart",
    "package:flutter/src/services/raw_keyboard_web.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/raw_keyboard_macos.dart",
    "package:flutter/src/services/raw_keyboard_macos.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/raw_keyboard_linux.dart",
    "package:flutter/src/services/raw_keyboard_linux.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/raw_keyboard_ios.dart",
    "package:flutter/src/services/raw_keyboard_ios.dart",
    "package:flutter/src/services/raw_keyboard_fuchsia.dart",
    "package:flutter/src/services/raw_keyboard_android.dart",
    "package:flutter/src/services/hardware_keyboard.dart",
    "package:flutter/src/services/keyboard_key.g.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/hardware_keyboard.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/debug.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/binding.dart",
    "package:flutter/src/services/binding.dart",
    "package:flutter/src/foundation/change_notifier.dart",
    "package:flutter/src/services/asset_bundle.dart",
    "dart:_http",
    "file:///C:/src/flutter/packages/flutter/lib/src/services/asset_bundle.dart"
  ];
  var oldText$ = dart.privateName(text_editing_delta, "TextEditingDelta.oldText");
  var selection$ = dart.privateName(text_editing_delta, "TextEditingDelta.selection");
  var composing$ = dart.privateName(text_editing_delta, "TextEditingDelta.composing");
  var _as = dart.privateName(dart_rti, "_as");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  text_editing_delta.TextEditingDelta = class TextEditingDelta extends Object_Diagnosticable$36 {
    get oldText() {
      return this[oldText$];
    }
    set oldText(value) {
      super.oldText = value;
    }
    get selection() {
      return this[selection$];
    }
    set selection(value) {
      super.selection = value;
    }
    get composing() {
      return this[composing$];
    }
    set composing(value) {
      super.composing = value;
    }
    static fromJSON(encoded) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3;
      let oldText = T$.String()[_as](encoded[$_get]("oldText"));
      let replacementDestinationStart = T$.int()[_as](encoded[$_get]("deltaStart"));
      let replacementDestinationEnd = T$.int()[_as](encoded[$_get]("deltaEnd"));
      let replacementSource = T$.String()[_as](encoded[$_get]("deltaText"));
      let replacementSourceEnd = replacementSource.length;
      let isNonTextUpdate = replacementDestinationStart === -1 && replacementDestinationStart === replacementDestinationEnd;
      let newComposing = new ui.TextRange.new({start: (t$360 = T$.intN()[_as](encoded[$_get]("composingBase")), t$360 == null ? -1 : t$360), end: (t$360$ = T$.intN()[_as](encoded[$_get]("composingExtent")), t$360$ == null ? -1 : t$360$)});
      let newSelection = new text_editing.TextSelection.new({baseOffset: (t$360$0 = T$.intN()[_as](encoded[$_get]("selectionBase")), t$360$0 == null ? -1 : t$360$0), extentOffset: (t$360$1 = T$.intN()[_as](encoded[$_get]("selectionExtent")), t$360$1 == null ? -1 : t$360$1), affinity: (t$360$2 = text_editing_delta._toTextAffinity(T$.StringN()[_as](encoded[$_get]("selectionAffinity"))), t$360$2 == null ? ui.TextAffinity.downstream : t$360$2), isDirectional: (t$360$3 = T$.boolN()[_as](encoded[$_get]("selectionIsDirectional")), t$360$3 == null ? false : t$360$3)});
      if (isNonTextUpdate) {
        if (!text_editing_delta._debugTextRangeIsValid(newSelection, oldText)) dart.assertFailed("The selection range: " + dart.str(newSelection) + " is not within the bounds of text: " + oldText + " of length: " + dart.strSafe(oldText.length), I[0], 131, 14, "_debugTextRangeIsValid(newSelection, oldText)");
        if (!text_editing_delta._debugTextRangeIsValid(newComposing, oldText)) dart.assertFailed("The composing range: " + dart.str(newComposing) + " is not within the bounds of text: " + oldText + " of length: " + dart.strSafe(oldText.length), I[0], 132, 14, "_debugTextRangeIsValid(newComposing, oldText)");
        return new text_editing_delta.TextEditingDeltaNonTextUpdate.new({oldText: oldText, selection: newSelection, composing: newComposing});
      }
      if (!text_editing_delta._debugTextRangeIsValid(new ui.TextRange.new({start: replacementDestinationStart, end: replacementDestinationEnd}), oldText)) dart.assertFailed("The delta range: " + dart.str(new ui.TextRange.new({start: 0, end: replacementSourceEnd})) + " is not within the bounds of text: " + oldText + " of length: " + dart.strSafe(oldText.length), I[0], 141, 12, "_debugTextRangeIsValid(TextRange(start: replacementDestinationStart, end: replacementDestinationEnd), oldText)");
      let newText = text_editing_delta._replace(oldText, replacementSource, new ui.TextRange.new({start: replacementDestinationStart, end: replacementDestinationEnd}));
      if (!text_editing_delta._debugTextRangeIsValid(newSelection, newText)) dart.assertFailed("The selection range: " + dart.str(newSelection) + " is not within the bounds of text: " + newText + " of length: " + dart.strSafe(newText.length), I[0], 145, 12, "_debugTextRangeIsValid(newSelection, newText)");
      if (!text_editing_delta._debugTextRangeIsValid(newComposing, newText)) dart.assertFailed("The composing range: " + dart.str(newComposing) + " is not within the bounds of text: " + newText + " of length: " + dart.strSafe(newText.length), I[0], 146, 12, "_debugTextRangeIsValid(newComposing, newText)");
      let isEqual = oldText === newText;
      let isDeletionGreaterThanOne = replacementDestinationEnd - replacementDestinationStart - (replacementSourceEnd - 0) > 1;
      let isDeletingByReplacingWithEmpty = replacementSource[$isEmpty] && 0 === 0 && 0 === replacementSourceEnd;
      let isReplacedByShorter = isDeletionGreaterThanOne && replacementSourceEnd - 0 < replacementDestinationEnd - replacementDestinationStart;
      let isReplacedByLonger = replacementSourceEnd - 0 > replacementDestinationEnd - replacementDestinationStart;
      let isReplacedBySame = replacementSourceEnd - 0 === replacementDestinationEnd - replacementDestinationStart;
      let isInsertingInsideComposingRegion = replacementDestinationStart + replacementSourceEnd > replacementDestinationEnd;
      let isDeletingInsideComposingRegion = !isReplacedByShorter && !isDeletingByReplacingWithEmpty && replacementDestinationStart + replacementSourceEnd < replacementDestinationEnd;
      let newComposingText = null;
      let originalComposingText = null;
      if (isDeletingByReplacingWithEmpty || isDeletingInsideComposingRegion || isReplacedByShorter) {
        newComposingText = replacementSource[$substring](0, replacementSourceEnd);
        originalComposingText = oldText[$substring](replacementDestinationStart, replacementDestinationStart + replacementSourceEnd);
      } else {
        newComposingText = replacementSource[$substring](0, 0 + (replacementDestinationEnd - replacementDestinationStart));
        originalComposingText = oldText[$substring](replacementDestinationStart, replacementDestinationEnd);
      }
      let isOriginalComposingRegionTextChanged = originalComposingText !== newComposingText;
      let isReplaced = isOriginalComposingRegionTextChanged || isReplacedByLonger || isReplacedByShorter || isReplacedBySame;
      if (isEqual) {
        return new text_editing_delta.TextEditingDeltaNonTextUpdate.new({oldText: oldText, selection: newSelection, composing: newComposing});
      } else if ((isDeletingByReplacingWithEmpty || isDeletingInsideComposingRegion) && !isOriginalComposingRegionTextChanged) {
        let actualStart = replacementDestinationStart;
        if (!isDeletionGreaterThanOne) {
          actualStart = replacementDestinationEnd - 1;
        }
        return new text_editing_delta.TextEditingDeltaDeletion.new({oldText: oldText, deletedRange: new ui.TextRange.new({start: actualStart, end: replacementDestinationEnd}), selection: newSelection, composing: newComposing});
      } else if ((replacementDestinationStart === replacementDestinationEnd || isInsertingInsideComposingRegion) && !isOriginalComposingRegionTextChanged) {
        return new text_editing_delta.TextEditingDeltaInsertion.new({oldText: oldText, textInserted: replacementSource[$substring](replacementDestinationEnd - replacementDestinationStart, replacementDestinationEnd - replacementDestinationStart + (replacementSource.length - (replacementDestinationEnd - replacementDestinationStart))), insertionOffset: replacementDestinationEnd, selection: newSelection, composing: newComposing});
      } else if (isReplaced) {
        return new text_editing_delta.TextEditingDeltaReplacement.new({oldText: oldText, replacementText: replacementSource, replacedRange: new ui.TextRange.new({start: replacementDestinationStart, end: replacementDestinationEnd}), selection: newSelection, composing: newComposing});
      }
      if (!false) dart.assertFailed(null, I[0], 220, 12, "false");
      return new text_editing_delta.TextEditingDeltaNonTextUpdate.new({oldText: oldText, selection: newSelection, composing: newComposing});
    }
    static ['_#fromJSON#tearOff'](encoded) {
      return text_editing_delta.TextEditingDelta.fromJSON(encoded);
    }
  };
  (text_editing_delta.TextEditingDelta.new = function(opts) {
    let oldText = opts && 'oldText' in opts ? opts.oldText : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let composing = opts && 'composing' in opts ? opts.composing : null;
    this[oldText$] = oldText;
    this[selection$] = selection;
    this[composing$] = composing;
    ;
  }).prototype = text_editing_delta.TextEditingDelta.prototype;
  dart.addTypeTests(text_editing_delta.TextEditingDelta);
  dart.addRtiResources(text_editing_delta.TextEditingDelta, ["flutter__src__services__text_editing_delta|TextEditingDelta"]);
  dart.addTypeCaches(text_editing_delta.TextEditingDelta);
  dart.setStaticMethodSignature(text_editing_delta.TextEditingDelta, () => ['fromJSON']);
  dart.setLibraryUri(text_editing_delta.TextEditingDelta, I[1]);
  dart.setFieldSignature(text_editing_delta.TextEditingDelta, () => dart.global.Object.setPrototypeOf({
    oldText: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    selection: {type: T$.TextSelection(), isConst: false, isFinal: true, libraryUri: I[3]},
    composing: {type: T$.TextRange(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDelta))));
  var textInserted$ = dart.privateName(text_editing_delta, "TextEditingDeltaInsertion.textInserted");
  var insertionOffset$ = dart.privateName(text_editing_delta, "TextEditingDeltaInsertion.insertionOffset");
  text_editing_delta.TextEditingDeltaInsertion = class TextEditingDeltaInsertion extends text_editing_delta.TextEditingDelta {
    get textInserted() {
      return this[textInserted$];
    }
    set textInserted(value) {
      super.textInserted = value;
    }
    get insertionOffset() {
      return this[insertionOffset$];
    }
    set insertionOffset(value) {
      super.insertionOffset = value;
    }
    static ['_#new#tearOff'](opts) {
      let oldText = opts && 'oldText' in opts ? opts.oldText : null;
      let textInserted = opts && 'textInserted' in opts ? opts.textInserted : null;
      let insertionOffset = opts && 'insertionOffset' in opts ? opts.insertionOffset : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_editing_delta.TextEditingDeltaInsertion.new({oldText: oldText, textInserted: textInserted, insertionOffset: insertionOffset, selection: selection, composing: composing});
    }
    apply(value) {
      let newText = this.oldText;
      if (!text_editing_delta._debugTextRangeIsValid(new ui.TextRange.collapsed(this.insertionOffset), newText)) dart.assertFailed("Applying TextEditingDeltaInsertion failed, the insertionOffset: " + dart.strSafe(this.insertionOffset) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 277, 12, "_debugTextRangeIsValid(TextRange.collapsed(insertionOffset), newText)");
      newText = text_editing_delta._replace(newText, this.textInserted, new ui.TextRange.collapsed(this.insertionOffset));
      if (!text_editing_delta._debugTextRangeIsValid(this.selection, newText)) dart.assertFailed("Applying TextEditingDeltaInsertion failed, the selection range: " + dart.str(this.selection) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 279, 12, "_debugTextRangeIsValid(selection, newText)");
      if (!text_editing_delta._debugTextRangeIsValid(this.composing, newText)) dart.assertFailed("Applying TextEditingDeltaInsertion failed, the composing range: " + dart.str(this.composing) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 280, 12, "_debugTextRangeIsValid(composing, newText)");
      return value.copyWith({text: newText, selection: this.selection, composing: this.composing});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("oldText", this.oldText));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("textInserted", this.textInserted));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("insertionOffset", this.insertionOffset));
      properties.add(new (G.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("composing", this.composing));
    }
  };
  (text_editing_delta.TextEditingDeltaInsertion.new = function(opts) {
    let oldText = opts && 'oldText' in opts ? opts.oldText : null;
    let textInserted = opts && 'textInserted' in opts ? opts.textInserted : null;
    let insertionOffset = opts && 'insertionOffset' in opts ? opts.insertionOffset : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let composing = opts && 'composing' in opts ? opts.composing : null;
    this[textInserted$] = textInserted;
    this[insertionOffset$] = insertionOffset;
    dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaInsertion).new.call(this, {oldText: oldText, selection: selection, composing: composing});
    ;
  }).prototype = text_editing_delta.TextEditingDeltaInsertion.prototype;
  dart.addTypeTests(text_editing_delta.TextEditingDeltaInsertion);
  dart.addRtiResources(text_editing_delta.TextEditingDeltaInsertion, ["flutter__src__services__text_editing_delta|TextEditingDeltaInsertion"]);
  dart.addTypeCaches(text_editing_delta.TextEditingDeltaInsertion);
  dart.setMethodSignature(text_editing_delta.TextEditingDeltaInsertion, () => dart.global.Object.setPrototypeOf({apply: T$.TextEditingValueToTextEditingValue()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaInsertion))));
  dart.setLibraryUri(text_editing_delta.TextEditingDeltaInsertion, I[1]);
  dart.setFieldSignature(text_editing_delta.TextEditingDeltaInsertion, () => dart.global.Object.setPrototypeOf({
    textInserted: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    insertionOffset: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaInsertion))));
  var deletedRange$ = dart.privateName(text_editing_delta, "TextEditingDeltaDeletion.deletedRange");
  text_editing_delta.TextEditingDeltaDeletion = class TextEditingDeltaDeletion extends text_editing_delta.TextEditingDelta {
    get deletedRange() {
      return this[deletedRange$];
    }
    set deletedRange(value) {
      super.deletedRange = value;
    }
    static ['_#new#tearOff'](opts) {
      let oldText = opts && 'oldText' in opts ? opts.oldText : null;
      let deletedRange = opts && 'deletedRange' in opts ? opts.deletedRange : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_editing_delta.TextEditingDeltaDeletion.new({oldText: oldText, deletedRange: deletedRange, selection: selection, composing: composing});
    }
    get textDeleted() {
      return this.oldText[$substring](this.deletedRange.start, this.deletedRange.end);
    }
    apply(value) {
      let newText = this.oldText;
      if (!text_editing_delta._debugTextRangeIsValid(this.deletedRange, newText)) dart.assertFailed("Applying TextEditingDeltaDeletion failed, the deletedRange: " + dart.str(this.deletedRange) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 321, 12, "_debugTextRangeIsValid(deletedRange, newText)");
      newText = text_editing_delta._replace(newText, "", this.deletedRange);
      if (!text_editing_delta._debugTextRangeIsValid(this.selection, newText)) dart.assertFailed("Applying TextEditingDeltaDeletion failed, the selection range: " + dart.str(this.selection) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 323, 12, "_debugTextRangeIsValid(selection, newText)");
      if (!text_editing_delta._debugTextRangeIsValid(this.composing, newText)) dart.assertFailed("Applying TextEditingDeltaDeletion failed, the composing range: " + dart.str(this.composing) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 324, 12, "_debugTextRangeIsValid(composing, newText)");
      return value.copyWith({text: newText, selection: this.selection, composing: this.composing});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("oldText", this.oldText));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("textDeleted", this.textDeleted));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("deletedRange", this.deletedRange));
      properties.add(new (G.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("composing", this.composing));
    }
  };
  (text_editing_delta.TextEditingDeltaDeletion.new = function(opts) {
    let oldText = opts && 'oldText' in opts ? opts.oldText : null;
    let deletedRange = opts && 'deletedRange' in opts ? opts.deletedRange : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let composing = opts && 'composing' in opts ? opts.composing : null;
    this[deletedRange$] = deletedRange;
    dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaDeletion).new.call(this, {oldText: oldText, selection: selection, composing: composing});
    ;
  }).prototype = text_editing_delta.TextEditingDeltaDeletion.prototype;
  dart.addTypeTests(text_editing_delta.TextEditingDeltaDeletion);
  dart.addRtiResources(text_editing_delta.TextEditingDeltaDeletion, ["flutter__src__services__text_editing_delta|TextEditingDeltaDeletion"]);
  dart.addTypeCaches(text_editing_delta.TextEditingDeltaDeletion);
  dart.setMethodSignature(text_editing_delta.TextEditingDeltaDeletion, () => dart.global.Object.setPrototypeOf({apply: T$.TextEditingValueToTextEditingValue()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaDeletion))));
  dart.setGetterSignature(text_editing_delta.TextEditingDeltaDeletion, () => dart.global.Object.setPrototypeOf({textDeleted: T$.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaDeletion))));
  dart.setLibraryUri(text_editing_delta.TextEditingDeltaDeletion, I[1]);
  dart.setFieldSignature(text_editing_delta.TextEditingDeltaDeletion, () => dart.global.Object.setPrototypeOf({deletedRange: {type: T$.TextRange(), isConst: false, isFinal: true, libraryUri: I[4]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaDeletion))));
  var replacementText$ = dart.privateName(text_editing_delta, "TextEditingDeltaReplacement.replacementText");
  var replacedRange$ = dart.privateName(text_editing_delta, "TextEditingDeltaReplacement.replacedRange");
  text_editing_delta.TextEditingDeltaReplacement = class TextEditingDeltaReplacement extends text_editing_delta.TextEditingDelta {
    get replacementText() {
      return this[replacementText$];
    }
    set replacementText(value) {
      super.replacementText = value;
    }
    get replacedRange() {
      return this[replacedRange$];
    }
    set replacedRange(value) {
      super.replacedRange = value;
    }
    static ['_#new#tearOff'](opts) {
      let oldText = opts && 'oldText' in opts ? opts.oldText : null;
      let replacementText = opts && 'replacementText' in opts ? opts.replacementText : null;
      let replacedRange = opts && 'replacedRange' in opts ? opts.replacedRange : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_editing_delta.TextEditingDeltaReplacement.new({oldText: oldText, replacementText: replacementText, replacedRange: replacedRange, selection: selection, composing: composing});
    }
    get textReplaced() {
      return this.oldText[$substring](this.replacedRange.start, this.replacedRange.end);
    }
    apply(value) {
      let newText = this.oldText;
      if (!text_editing_delta._debugTextRangeIsValid(this.replacedRange, newText)) dart.assertFailed("Applying TextEditingDeltaReplacement failed, the replacedRange: " + dart.str(this.replacedRange) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 375, 12, "_debugTextRangeIsValid(replacedRange, newText)");
      newText = text_editing_delta._replace(newText, this.replacementText, this.replacedRange);
      if (!text_editing_delta._debugTextRangeIsValid(this.selection, newText)) dart.assertFailed("Applying TextEditingDeltaReplacement failed, the selection range: " + dart.str(this.selection) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 377, 12, "_debugTextRangeIsValid(selection, newText)");
      if (!text_editing_delta._debugTextRangeIsValid(this.composing, newText)) dart.assertFailed("Applying TextEditingDeltaReplacement failed, the composing range: " + dart.str(this.composing) + " is not within the bounds of " + newText + " of length: " + dart.strSafe(newText.length), I[0], 378, 12, "_debugTextRangeIsValid(composing, newText)");
      return value.copyWith({text: newText, selection: this.selection, composing: this.composing});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("oldText", this.oldText));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("textReplaced", this.textReplaced));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("replacementText", this.replacementText));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("replacedRange", this.replacedRange));
      properties.add(new (G.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("composing", this.composing));
    }
  };
  (text_editing_delta.TextEditingDeltaReplacement.new = function(opts) {
    let oldText = opts && 'oldText' in opts ? opts.oldText : null;
    let replacementText = opts && 'replacementText' in opts ? opts.replacementText : null;
    let replacedRange = opts && 'replacedRange' in opts ? opts.replacedRange : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let composing = opts && 'composing' in opts ? opts.composing : null;
    this[replacementText$] = replacementText;
    this[replacedRange$] = replacedRange;
    dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaReplacement).new.call(this, {oldText: oldText, selection: selection, composing: composing});
    ;
  }).prototype = text_editing_delta.TextEditingDeltaReplacement.prototype;
  dart.addTypeTests(text_editing_delta.TextEditingDeltaReplacement);
  dart.addRtiResources(text_editing_delta.TextEditingDeltaReplacement, ["flutter__src__services__text_editing_delta|TextEditingDeltaReplacement"]);
  dart.addTypeCaches(text_editing_delta.TextEditingDeltaReplacement);
  dart.setMethodSignature(text_editing_delta.TextEditingDeltaReplacement, () => dart.global.Object.setPrototypeOf({apply: T$.TextEditingValueToTextEditingValue()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaReplacement))));
  dart.setGetterSignature(text_editing_delta.TextEditingDeltaReplacement, () => dart.global.Object.setPrototypeOf({textReplaced: T$.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaReplacement))));
  dart.setLibraryUri(text_editing_delta.TextEditingDeltaReplacement, I[1]);
  dart.setFieldSignature(text_editing_delta.TextEditingDeltaReplacement, () => dart.global.Object.setPrototypeOf({
    replacementText: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    replacedRange: {type: T$.TextRange(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaReplacement))));
  text_editing_delta.TextEditingDeltaNonTextUpdate = class TextEditingDeltaNonTextUpdate extends text_editing_delta.TextEditingDelta {
    static ['_#new#tearOff'](opts) {
      let oldText = opts && 'oldText' in opts ? opts.oldText : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_editing_delta.TextEditingDeltaNonTextUpdate.new({oldText: oldText, selection: selection, composing: composing});
    }
    apply(value) {
      if (!text_editing_delta._debugTextRangeIsValid(this.selection, this.oldText)) dart.assertFailed("Applying TextEditingDeltaNonTextUpdate failed, the selection range: " + dart.str(this.selection) + " is not within the bounds of " + this.oldText + " of length: " + dart.strSafe(this.oldText.length), I[0], 418, 12, "_debugTextRangeIsValid(selection, oldText)");
      if (!text_editing_delta._debugTextRangeIsValid(this.composing, this.oldText)) dart.assertFailed("Applying TextEditingDeltaNonTextUpdate failed, the composing region: " + dart.str(this.composing) + " is not within the bounds of " + this.oldText + " of length: " + dart.strSafe(this.oldText.length), I[0], 419, 12, "_debugTextRangeIsValid(composing, oldText)");
      return new text_input.TextEditingValue.new({text: this.oldText, selection: this.selection, composing: this.composing});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("oldText", this.oldText));
      properties.add(new (G.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (G.DiagnosticsPropertyOfTextRange()).new("composing", this.composing));
    }
  };
  (text_editing_delta.TextEditingDeltaNonTextUpdate.new = function(opts) {
    let oldText = opts && 'oldText' in opts ? opts.oldText : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let composing = opts && 'composing' in opts ? opts.composing : null;
    dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaNonTextUpdate).new.call(this, {oldText: oldText, selection: selection, composing: composing});
    ;
  }).prototype = text_editing_delta.TextEditingDeltaNonTextUpdate.prototype;
  dart.addTypeTests(text_editing_delta.TextEditingDeltaNonTextUpdate);
  dart.addRtiResources(text_editing_delta.TextEditingDeltaNonTextUpdate, ["flutter__src__services__text_editing_delta|TextEditingDeltaNonTextUpdate"]);
  dart.addTypeCaches(text_editing_delta.TextEditingDeltaNonTextUpdate);
  dart.setMethodSignature(text_editing_delta.TextEditingDeltaNonTextUpdate, () => dart.global.Object.setPrototypeOf({apply: T$.TextEditingValueToTextEditingValue()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_editing_delta.TextEditingDeltaNonTextUpdate))));
  dart.setLibraryUri(text_editing_delta.TextEditingDeltaNonTextUpdate, I[1]);
  text_editing_delta._toTextAffinity = function _toTextAffinity(affinity) {
    switch (affinity) {
      case "TextAffinity.downstream":
        {
          return ui.TextAffinity.downstream;
        }
      case "TextAffinity.upstream":
        {
          return ui.TextAffinity.upstream;
        }
    }
    return null;
  };
  text_editing_delta._replace = function _replace(originalText, replacementText, replacementRange) {
    if (!replacementRange.isValid) dart.assertFailed(null, I[0], 30, 10, "replacementRange.isValid");
    return originalText[$replaceRange](replacementRange.start, replacementRange.end, replacementText);
  };
  text_editing_delta._debugTextRangeIsValid = function _debugTextRangeIsValid(range, text) {
    if (!range.isValid) {
      return true;
    }
    return range.start >= 0 && range.start <= text.length && range.end >= 0 && range.end <= text.length;
  };
  var text$ = dart.privateName(clipboard, "ClipboardData.text");
  clipboard.ClipboardData = class ClipboardData extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      return new clipboard.ClipboardData.new({text: text});
    }
  };
  (clipboard.ClipboardData.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$] = text;
    ;
  }).prototype = clipboard.ClipboardData.prototype;
  dart.addTypeTests(clipboard.ClipboardData);
  dart.addRtiResources(clipboard.ClipboardData, ["flutter__src__services__clipboard|ClipboardData"]);
  dart.addTypeCaches(clipboard.ClipboardData);
  dart.setLibraryUri(clipboard.ClipboardData, I[5]);
  dart.setFieldSignature(clipboard.ClipboardData, () => dart.global.Object.setPrototypeOf({text: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(clipboard.ClipboardData))));
  clipboard.Clipboard = class Clipboard extends core.Object {
    static setData(data) {
      return async.async(T$.void(), function* setData() {
        yield system_channels.SystemChannels.platform.invokeMethod(T$.void(), "Clipboard.setData", new (G.IdentityMapOfString$dynamic()).from(["text", data.text]));
      });
    }
    static getData(format) {
      return async.async(T$.ClipboardDataN(), function* getData() {
        let result = (yield system_channels.SystemChannels.platform.invokeMethod(T$.MapOfString$dynamic(), "Clipboard.getData", format));
        if (result == null) {
          return null;
        }
        return new clipboard.ClipboardData.new({text: T$.String()[_as](result[$_get]("text"))});
      });
    }
    static hasStrings() {
      return async.async(T$.bool(), function* hasStrings() {
        let result = (yield system_channels.SystemChannels.platform.invokeMethod(T$.MapOfString$dynamic(), "Clipboard.hasStrings", "text/plain"));
        if (result == null) {
          return false;
        }
        return T$.bool()[_as](result[$_get]("value"));
      });
    }
  };
  (clipboard.Clipboard.new = function() {
    ;
  }).prototype = clipboard.Clipboard.prototype;
  dart.addTypeTests(clipboard.Clipboard);
  dart.addRtiResources(clipboard.Clipboard, ["flutter__src__services__clipboard|Clipboard"]);
  dart.addTypeCaches(clipboard.Clipboard);
  dart.setStaticMethodSignature(clipboard.Clipboard, () => ['setData', 'getData', 'hasStrings']);
  dart.setLibraryUri(clipboard.Clipboard, I[5]);
  dart.setStaticFieldSignature(clipboard.Clipboard, () => ['kTextPlain']);
  dart.defineLazy(clipboard.Clipboard, {
    /*clipboard.Clipboard.kTextPlain*/get kTextPlain() {
      return "text/plain";
    }
  }, false);
  autofill.AutofillHints = class AutofillHints extends core.Object {
    static ['_#_#tearOff']() {
      return new autofill.AutofillHints.__();
    }
  };
  (autofill.AutofillHints.__ = function() {
    ;
  }).prototype = autofill.AutofillHints.prototype;
  dart.addTypeTests(autofill.AutofillHints);
  dart.addRtiResources(autofill.AutofillHints, ["flutter__src__services__autofill|AutofillHints"]);
  dart.addTypeCaches(autofill.AutofillHints);
  dart.setLibraryUri(autofill.AutofillHints, I[6]);
  dart.setStaticFieldSignature(autofill.AutofillHints, () => ['addressCity', 'addressCityAndState', 'addressState', 'birthday', 'birthdayDay', 'birthdayMonth', 'birthdayYear', 'countryCode', 'countryName', 'creditCardExpirationDate', 'creditCardExpirationDay', 'creditCardExpirationMonth', 'creditCardExpirationYear', 'creditCardFamilyName', 'creditCardGivenName', 'creditCardMiddleName', 'creditCardName', 'creditCardNumber', 'creditCardSecurityCode', 'creditCardType', 'email', 'familyName', 'fullStreetAddress', 'gender', 'givenName', 'impp', 'jobTitle', 'language', 'location', 'middleInitial', 'middleName', 'name_', 'namePrefix', 'nameSuffix', 'newPassword', 'newUsername', 'nickname', 'oneTimeCode', 'organizationName', 'password', 'photo', 'postalAddress', 'postalAddressExtended', 'postalAddressExtendedPostalCode', 'postalCode', 'streetAddressLevel1', 'streetAddressLevel2', 'streetAddressLevel3', 'streetAddressLevel4', 'streetAddressLine1', 'streetAddressLine2', 'streetAddressLine3', 'sublocality', 'telephoneNumber', 'telephoneNumberAreaCode', 'telephoneNumberCountryCode', 'telephoneNumberDevice', 'telephoneNumberExtension', 'telephoneNumberLocal', 'telephoneNumberLocalPrefix', 'telephoneNumberLocalSuffix', 'telephoneNumberNational', 'transactionAmount', 'transactionCurrency', 'url', 'username']);
  dart.defineLazy(autofill.AutofillHints, {
    /*autofill.AutofillHints.addressCity*/get addressCity() {
      return "addressCity";
    },
    /*autofill.AutofillHints.addressCityAndState*/get addressCityAndState() {
      return "addressCityAndState";
    },
    /*autofill.AutofillHints.addressState*/get addressState() {
      return "addressState";
    },
    /*autofill.AutofillHints.birthday*/get birthday() {
      return "birthday";
    },
    /*autofill.AutofillHints.birthdayDay*/get birthdayDay() {
      return "birthdayDay";
    },
    /*autofill.AutofillHints.birthdayMonth*/get birthdayMonth() {
      return "birthdayMonth";
    },
    /*autofill.AutofillHints.birthdayYear*/get birthdayYear() {
      return "birthdayYear";
    },
    /*autofill.AutofillHints.countryCode*/get countryCode() {
      return "countryCode";
    },
    /*autofill.AutofillHints.countryName*/get countryName() {
      return "countryName";
    },
    /*autofill.AutofillHints.creditCardExpirationDate*/get creditCardExpirationDate() {
      return "creditCardExpirationDate";
    },
    /*autofill.AutofillHints.creditCardExpirationDay*/get creditCardExpirationDay() {
      return "creditCardExpirationDay";
    },
    /*autofill.AutofillHints.creditCardExpirationMonth*/get creditCardExpirationMonth() {
      return "creditCardExpirationMonth";
    },
    /*autofill.AutofillHints.creditCardExpirationYear*/get creditCardExpirationYear() {
      return "creditCardExpirationYear";
    },
    /*autofill.AutofillHints.creditCardFamilyName*/get creditCardFamilyName() {
      return "creditCardFamilyName";
    },
    /*autofill.AutofillHints.creditCardGivenName*/get creditCardGivenName() {
      return "creditCardGivenName";
    },
    /*autofill.AutofillHints.creditCardMiddleName*/get creditCardMiddleName() {
      return "creditCardMiddleName";
    },
    /*autofill.AutofillHints.creditCardName*/get creditCardName() {
      return "creditCardName";
    },
    /*autofill.AutofillHints.creditCardNumber*/get creditCardNumber() {
      return "creditCardNumber";
    },
    /*autofill.AutofillHints.creditCardSecurityCode*/get creditCardSecurityCode() {
      return "creditCardSecurityCode";
    },
    /*autofill.AutofillHints.creditCardType*/get creditCardType() {
      return "creditCardType";
    },
    /*autofill.AutofillHints.email*/get email() {
      return "email";
    },
    /*autofill.AutofillHints.familyName*/get familyName() {
      return "familyName";
    },
    /*autofill.AutofillHints.fullStreetAddress*/get fullStreetAddress() {
      return "fullStreetAddress";
    },
    /*autofill.AutofillHints.gender*/get gender() {
      return "gender";
    },
    /*autofill.AutofillHints.givenName*/get givenName() {
      return "givenName";
    },
    /*autofill.AutofillHints.impp*/get impp() {
      return "impp";
    },
    /*autofill.AutofillHints.jobTitle*/get jobTitle() {
      return "jobTitle";
    },
    /*autofill.AutofillHints.language*/get language() {
      return "language";
    },
    /*autofill.AutofillHints.location*/get location() {
      return "location";
    },
    /*autofill.AutofillHints.middleInitial*/get middleInitial() {
      return "middleInitial";
    },
    /*autofill.AutofillHints.middleName*/get middleName() {
      return "middleName";
    },
    /*autofill.AutofillHints.name_*/get name_() {
      return "name";
    },
    /*autofill.AutofillHints.namePrefix*/get namePrefix() {
      return "namePrefix";
    },
    /*autofill.AutofillHints.nameSuffix*/get nameSuffix() {
      return "nameSuffix";
    },
    /*autofill.AutofillHints.newPassword*/get newPassword() {
      return "newPassword";
    },
    /*autofill.AutofillHints.newUsername*/get newUsername() {
      return "newUsername";
    },
    /*autofill.AutofillHints.nickname*/get nickname() {
      return "nickname";
    },
    /*autofill.AutofillHints.oneTimeCode*/get oneTimeCode() {
      return "oneTimeCode";
    },
    /*autofill.AutofillHints.organizationName*/get organizationName() {
      return "organizationName";
    },
    /*autofill.AutofillHints.password*/get password() {
      return "password";
    },
    /*autofill.AutofillHints.photo*/get photo() {
      return "photo";
    },
    /*autofill.AutofillHints.postalAddress*/get postalAddress() {
      return "postalAddress";
    },
    /*autofill.AutofillHints.postalAddressExtended*/get postalAddressExtended() {
      return "postalAddressExtended";
    },
    /*autofill.AutofillHints.postalAddressExtendedPostalCode*/get postalAddressExtendedPostalCode() {
      return "postalAddressExtendedPostalCode";
    },
    /*autofill.AutofillHints.postalCode*/get postalCode() {
      return "postalCode";
    },
    /*autofill.AutofillHints.streetAddressLevel1*/get streetAddressLevel1() {
      return "streetAddressLevel1";
    },
    /*autofill.AutofillHints.streetAddressLevel2*/get streetAddressLevel2() {
      return "streetAddressLevel2";
    },
    /*autofill.AutofillHints.streetAddressLevel3*/get streetAddressLevel3() {
      return "streetAddressLevel3";
    },
    /*autofill.AutofillHints.streetAddressLevel4*/get streetAddressLevel4() {
      return "streetAddressLevel4";
    },
    /*autofill.AutofillHints.streetAddressLine1*/get streetAddressLine1() {
      return "streetAddressLine1";
    },
    /*autofill.AutofillHints.streetAddressLine2*/get streetAddressLine2() {
      return "streetAddressLine2";
    },
    /*autofill.AutofillHints.streetAddressLine3*/get streetAddressLine3() {
      return "streetAddressLine3";
    },
    /*autofill.AutofillHints.sublocality*/get sublocality() {
      return "sublocality";
    },
    /*autofill.AutofillHints.telephoneNumber*/get telephoneNumber() {
      return "telephoneNumber";
    },
    /*autofill.AutofillHints.telephoneNumberAreaCode*/get telephoneNumberAreaCode() {
      return "telephoneNumberAreaCode";
    },
    /*autofill.AutofillHints.telephoneNumberCountryCode*/get telephoneNumberCountryCode() {
      return "telephoneNumberCountryCode";
    },
    /*autofill.AutofillHints.telephoneNumberDevice*/get telephoneNumberDevice() {
      return "telephoneNumberDevice";
    },
    /*autofill.AutofillHints.telephoneNumberExtension*/get telephoneNumberExtension() {
      return "telephoneNumberExtension";
    },
    /*autofill.AutofillHints.telephoneNumberLocal*/get telephoneNumberLocal() {
      return "telephoneNumberLocal";
    },
    /*autofill.AutofillHints.telephoneNumberLocalPrefix*/get telephoneNumberLocalPrefix() {
      return "telephoneNumberLocalPrefix";
    },
    /*autofill.AutofillHints.telephoneNumberLocalSuffix*/get telephoneNumberLocalSuffix() {
      return "telephoneNumberLocalSuffix";
    },
    /*autofill.AutofillHints.telephoneNumberNational*/get telephoneNumberNational() {
      return "telephoneNumberNational";
    },
    /*autofill.AutofillHints.transactionAmount*/get transactionAmount() {
      return "transactionAmount";
    },
    /*autofill.AutofillHints.transactionCurrency*/get transactionCurrency() {
      return "transactionCurrency";
    },
    /*autofill.AutofillHints.url*/get url() {
      return "url";
    },
    /*autofill.AutofillHints.username*/get username() {
      return "username";
    }
  }, false);
  var enabled$ = dart.privateName(autofill, "AutofillConfiguration.enabled");
  var uniqueIdentifier$ = dart.privateName(autofill, "AutofillConfiguration.uniqueIdentifier");
  var autofillHints$ = dart.privateName(autofill, "AutofillConfiguration.autofillHints");
  var currentEditingValue$ = dart.privateName(autofill, "AutofillConfiguration.currentEditingValue");
  var hintText$ = dart.privateName(autofill, "AutofillConfiguration.hintText");
  var TextRange_end = dart.privateName(ui, "TextRange.end");
  var TextRange_start = dart.privateName(ui, "TextRange.start");
  var TextEditingValue_composing = dart.privateName(text_input, "TextEditingValue.composing");
  var TextSelection_isDirectional = dart.privateName(text_editing, "TextSelection.isDirectional");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var TextSelection_affinity = dart.privateName(text_editing, "TextSelection.affinity");
  var TextSelection_extentOffset = dart.privateName(text_editing, "TextSelection.extentOffset");
  var TextSelection_baseOffset = dart.privateName(text_editing, "TextSelection.baseOffset");
  var TextEditingValue_selection = dart.privateName(text_input, "TextEditingValue.selection");
  var TextEditingValue_text = dart.privateName(text_input, "TextEditingValue.text");
  autofill.AutofillConfiguration = class AutofillConfiguration extends core.Object {
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get uniqueIdentifier() {
      return this[uniqueIdentifier$];
    }
    set uniqueIdentifier(value) {
      super.uniqueIdentifier = value;
    }
    get autofillHints() {
      return this[autofillHints$];
    }
    set autofillHints(value) {
      super.autofillHints = value;
    }
    get currentEditingValue() {
      return this[currentEditingValue$];
    }
    set currentEditingValue(value) {
      super.currentEditingValue = value;
    }
    get hintText() {
      return this[hintText$];
    }
    set hintText(value) {
      super.hintText = value;
    }
    static ['_#new#tearOff'](opts) {
      let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
      let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
      let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
      let hintText = opts && 'hintText' in opts ? opts.hintText : null;
      return new autofill.AutofillConfiguration.new({uniqueIdentifier: uniqueIdentifier, autofillHints: autofillHints, currentEditingValue: currentEditingValue, hintText: hintText});
    }
    static ['_#_#tearOff'](opts) {
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
      let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : C[0] || CT.C0;
      let hintText = opts && 'hintText' in opts ? opts.hintText : null;
      let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
      return new autofill.AutofillConfiguration.__({enabled: enabled, uniqueIdentifier: uniqueIdentifier, autofillHints: autofillHints, hintText: hintText, currentEditingValue: currentEditingValue});
    }
    toJson() {
      return this.enabled ? (() => {
        let t$360 = new (G.IdentityMapOfString$dynamic()).new();
        t$360[$_set]("uniqueIdentifier", this.uniqueIdentifier);
        t$360[$_set]("hints", this.autofillHints);
        t$360[$_set]("editingValue", this.currentEditingValue.toJSON());
        if (this.hintText != null) t$360[$_set]("hintText", this.hintText);
        return t$360;
      })() : null;
    }
  };
  (autofill.AutofillConfiguration.new = function(opts) {
    let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
    let hintText = opts && 'hintText' in opts ? opts.hintText : null;
    autofill.AutofillConfiguration.__.call(this, {enabled: true, uniqueIdentifier: uniqueIdentifier, autofillHints: autofillHints, currentEditingValue: currentEditingValue, hintText: hintText});
  }).prototype = autofill.AutofillConfiguration.prototype;
  (autofill.AutofillConfiguration.__ = function(opts) {
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : C[0] || CT.C0;
    let hintText = opts && 'hintText' in opts ? opts.hintText : null;
    let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
    this[enabled$] = enabled;
    this[uniqueIdentifier$] = uniqueIdentifier;
    this[autofillHints$] = autofillHints;
    this[hintText$] = hintText;
    this[currentEditingValue$] = currentEditingValue;
    ;
  }).prototype = autofill.AutofillConfiguration.prototype;
  dart.addTypeTests(autofill.AutofillConfiguration);
  dart.addRtiResources(autofill.AutofillConfiguration, ["flutter__src__services__autofill|AutofillConfiguration"]);
  dart.addTypeCaches(autofill.AutofillConfiguration);
  dart.setMethodSignature(autofill.AutofillConfiguration, () => dart.global.Object.setPrototypeOf({toJson: T$.VoidToMapNOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(autofill.AutofillConfiguration))));
  dart.setLibraryUri(autofill.AutofillConfiguration, I[6]);
  dart.setFieldSignature(autofill.AutofillConfiguration, () => dart.global.Object.setPrototypeOf({
    enabled: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    uniqueIdentifier: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    autofillHints: {type: T$.ListOfString(), isConst: false, isFinal: true, libraryUri: I[2]},
    currentEditingValue: {type: T$.TextEditingValue(), isConst: false, isFinal: true, libraryUri: I[7]},
    hintText: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(autofill.AutofillConfiguration))));
  dart.setStaticFieldSignature(autofill.AutofillConfiguration, () => ['disabled']);
  dart.defineLazy(autofill.AutofillConfiguration, {
    /*autofill.AutofillConfiguration.disabled*/get disabled() {
      return C[1] || CT.C1;
    }
  }, false);
  autofill.AutofillClient = class AutofillClient extends core.Object {};
  (autofill.AutofillClient.new = function() {
    ;
  }).prototype = autofill.AutofillClient.prototype;
  dart.addTypeTests(autofill.AutofillClient);
  dart.addRtiResources(autofill.AutofillClient, ["flutter__src__services__autofill|AutofillClient"]);
  dart.addTypeCaches(autofill.AutofillClient);
  dart.setLibraryUri(autofill.AutofillClient, I[6]);
  autofill.AutofillScope = class AutofillScope extends core.Object {};
  (autofill.AutofillScope.new = function() {
    ;
  }).prototype = autofill.AutofillScope.prototype;
  dart.addTypeTests(autofill.AutofillScope);
  dart.addRtiResources(autofill.AutofillScope, ["flutter__src__services__autofill|AutofillScope"]);
  dart.addTypeCaches(autofill.AutofillScope);
  dart.setLibraryUri(autofill.AutofillScope, I[6]);
  var inputType$ = dart.privateName(text_input, "TextInputConfiguration.inputType");
  var readOnly$ = dart.privateName(text_input, "TextInputConfiguration.readOnly");
  var obscureText$ = dart.privateName(text_input, "TextInputConfiguration.obscureText");
  var autocorrect$ = dart.privateName(text_input, "TextInputConfiguration.autocorrect");
  var autofillConfiguration$ = dart.privateName(text_input, "TextInputConfiguration.autofillConfiguration");
  var smartDashesType$ = dart.privateName(text_input, "TextInputConfiguration.smartDashesType");
  var smartQuotesType$ = dart.privateName(text_input, "TextInputConfiguration.smartQuotesType");
  var enableSuggestions$ = dart.privateName(text_input, "TextInputConfiguration.enableSuggestions");
  var enableInteractiveSelection$ = dart.privateName(text_input, "TextInputConfiguration.enableInteractiveSelection");
  var actionLabel$ = dart.privateName(text_input, "TextInputConfiguration.actionLabel");
  var inputAction$ = dart.privateName(text_input, "TextInputConfiguration.inputAction");
  var textCapitalization$ = dart.privateName(text_input, "TextInputConfiguration.textCapitalization");
  var keyboardAppearance$ = dart.privateName(text_input, "TextInputConfiguration.keyboardAppearance");
  var enableIMEPersonalizedLearning$ = dart.privateName(text_input, "TextInputConfiguration.enableIMEPersonalizedLearning");
  var allowedMimeTypes$ = dart.privateName(text_input, "TextInputConfiguration.allowedMimeTypes");
  var enableDeltaModel$ = dart.privateName(text_input, "TextInputConfiguration.enableDeltaModel");
  var TextInputType_decimal = dart.privateName(text_input, "TextInputType.decimal");
  var TextInputType_signed = dart.privateName(text_input, "TextInputType.signed");
  var TextInputType_index = dart.privateName(text_input, "TextInputType.index");
  text_input.TextInputConfiguration = class TextInputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
    get autocorrect() {
      return this[autocorrect$];
    }
    set autocorrect(value) {
      super.autocorrect = value;
    }
    get autofillConfiguration() {
      return this[autofillConfiguration$];
    }
    set autofillConfiguration(value) {
      super.autofillConfiguration = value;
    }
    get smartDashesType() {
      return this[smartDashesType$];
    }
    set smartDashesType(value) {
      super.smartDashesType = value;
    }
    get smartQuotesType() {
      return this[smartQuotesType$];
    }
    set smartQuotesType(value) {
      super.smartQuotesType = value;
    }
    get enableSuggestions() {
      return this[enableSuggestions$];
    }
    set enableSuggestions(value) {
      super.enableSuggestions = value;
    }
    get enableInteractiveSelection() {
      return this[enableInteractiveSelection$];
    }
    set enableInteractiveSelection(value) {
      super.enableInteractiveSelection = value;
    }
    get actionLabel() {
      return this[actionLabel$];
    }
    set actionLabel(value) {
      super.actionLabel = value;
    }
    get inputAction() {
      return this[inputAction$];
    }
    set inputAction(value) {
      super.inputAction = value;
    }
    get textCapitalization() {
      return this[textCapitalization$];
    }
    set textCapitalization(value) {
      super.textCapitalization = value;
    }
    get keyboardAppearance() {
      return this[keyboardAppearance$];
    }
    set keyboardAppearance(value) {
      super.keyboardAppearance = value;
    }
    get enableIMEPersonalizedLearning() {
      return this[enableIMEPersonalizedLearning$];
    }
    set enableIMEPersonalizedLearning(value) {
      super.enableIMEPersonalizedLearning = value;
    }
    get allowedMimeTypes() {
      return this[allowedMimeTypes$];
    }
    set allowedMimeTypes(value) {
      super.allowedMimeTypes = value;
    }
    get enableDeltaModel() {
      return this[enableDeltaModel$];
    }
    set enableDeltaModel(value) {
      super.enableDeltaModel = value;
    }
    static ['_#new#tearOff'](opts) {
      let inputType = opts && 'inputType' in opts ? opts.inputType : C[6] || CT.C6;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
      let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
      let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
      let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
      let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
      let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : true;
      let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
      let inputAction = opts && 'inputAction' in opts ? opts.inputAction : C[7] || CT.C7;
      let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : C[8] || CT.C8;
      let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[9] || CT.C9;
      let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : C[1] || CT.C1;
      let enableIMEPersonalizedLearning = opts && 'enableIMEPersonalizedLearning' in opts ? opts.enableIMEPersonalizedLearning : true;
      let allowedMimeTypes = opts && 'allowedMimeTypes' in opts ? opts.allowedMimeTypes : C[0] || CT.C0;
      let enableDeltaModel = opts && 'enableDeltaModel' in opts ? opts.enableDeltaModel : false;
      return new text_input.TextInputConfiguration.new({inputType: inputType, readOnly: readOnly, obscureText: obscureText, autocorrect: autocorrect, smartDashesType: smartDashesType, smartQuotesType: smartQuotesType, enableSuggestions: enableSuggestions, enableInteractiveSelection: enableInteractiveSelection, actionLabel: actionLabel, inputAction: inputAction, keyboardAppearance: keyboardAppearance, textCapitalization: textCapitalization, autofillConfiguration: autofillConfiguration, enableIMEPersonalizedLearning: enableIMEPersonalizedLearning, allowedMimeTypes: allowedMimeTypes, enableDeltaModel: enableDeltaModel});
    }
    copyWith(opts) {
      let t$361, t$361$, t$361$0, t$361$1, t$361$2, t$361$3, t$361$4, t$361$5, t$361$6, t$361$7, t$361$8, t$361$9, t$361$10, t$361$11, t$361$12;
      let inputType = opts && 'inputType' in opts ? opts.inputType : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
      let obscureText = opts && 'obscureText' in opts ? opts.obscureText : null;
      let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : null;
      let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
      let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
      let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : null;
      let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
      let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
      let inputAction = opts && 'inputAction' in opts ? opts.inputAction : null;
      let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
      let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : null;
      let enableIMEPersonalizedLearning = opts && 'enableIMEPersonalizedLearning' in opts ? opts.enableIMEPersonalizedLearning : null;
      let allowedMimeTypes = opts && 'allowedMimeTypes' in opts ? opts.allowedMimeTypes : null;
      let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : null;
      let enableDeltaModel = opts && 'enableDeltaModel' in opts ? opts.enableDeltaModel : null;
      return new text_input.TextInputConfiguration.new({inputType: (t$361 = inputType, t$361 == null ? this.inputType : t$361), readOnly: (t$361$ = readOnly, t$361$ == null ? this.readOnly : t$361$), obscureText: (t$361$0 = obscureText, t$361$0 == null ? this.obscureText : t$361$0), autocorrect: (t$361$1 = autocorrect, t$361$1 == null ? this.autocorrect : t$361$1), smartDashesType: (t$361$2 = smartDashesType, t$361$2 == null ? this.smartDashesType : t$361$2), smartQuotesType: (t$361$3 = smartQuotesType, t$361$3 == null ? this.smartQuotesType : t$361$3), enableSuggestions: (t$361$4 = enableSuggestions, t$361$4 == null ? this.enableSuggestions : t$361$4), enableInteractiveSelection: (t$361$5 = enableInteractiveSelection, t$361$5 == null ? this.enableInteractiveSelection : t$361$5), inputAction: (t$361$6 = inputAction, t$361$6 == null ? this.inputAction : t$361$6), textCapitalization: (t$361$7 = textCapitalization, t$361$7 == null ? this.textCapitalization : t$361$7), keyboardAppearance: (t$361$8 = keyboardAppearance, t$361$8 == null ? this.keyboardAppearance : t$361$8), enableIMEPersonalizedLearning: (t$361$9 = enableIMEPersonalizedLearning, t$361$9 == null ? this.enableIMEPersonalizedLearning : t$361$9), allowedMimeTypes: (t$361$10 = allowedMimeTypes, t$361$10 == null ? this.allowedMimeTypes : t$361$10), autofillConfiguration: (t$361$11 = autofillConfiguration, t$361$11 == null ? this.autofillConfiguration : t$361$11), enableDeltaModel: (t$361$12 = enableDeltaModel, t$361$12 == null ? this.enableDeltaModel : t$361$12)});
    }
    toJson() {
      let autofill = this.autofillConfiguration.toJson();
      return (() => {
        let t$361 = new (G.IdentityMapOfString$dynamic()).new();
        t$361[$_set]("inputType", this.inputType.toJson());
        t$361[$_set]("readOnly", this.readOnly);
        t$361[$_set]("obscureText", this.obscureText);
        t$361[$_set]("autocorrect", this.autocorrect);
        t$361[$_set]("smartDashesType", this.smartDashesType.index[$toString]());
        t$361[$_set]("smartQuotesType", this.smartQuotesType.index[$toString]());
        t$361[$_set]("enableSuggestions", this.enableSuggestions);
        t$361[$_set]("enableInteractiveSelection", this.enableInteractiveSelection);
        t$361[$_set]("actionLabel", this.actionLabel);
        t$361[$_set]("inputAction", dart.toString(this.inputAction));
        t$361[$_set]("textCapitalization", dart.toString(this.textCapitalization));
        t$361[$_set]("keyboardAppearance", dart.toString(this.keyboardAppearance));
        t$361[$_set]("enableIMEPersonalizedLearning", this.enableIMEPersonalizedLearning);
        t$361[$_set]("contentCommitMimeTypes", this.allowedMimeTypes);
        if (autofill != null) t$361[$_set]("autofill", autofill);
        t$361[$_set]("enableDeltaModel", this.enableDeltaModel);
        return t$361;
      })();
    }
  };
  (text_input.TextInputConfiguration.new = function(opts) {
    let t$361, t$361$;
    let inputType = opts && 'inputType' in opts ? opts.inputType : C[6] || CT.C6;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : true;
    let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
    let inputAction = opts && 'inputAction' in opts ? opts.inputAction : C[7] || CT.C7;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : C[8] || CT.C8;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[9] || CT.C9;
    let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : C[1] || CT.C1;
    let enableIMEPersonalizedLearning = opts && 'enableIMEPersonalizedLearning' in opts ? opts.enableIMEPersonalizedLearning : true;
    let allowedMimeTypes = opts && 'allowedMimeTypes' in opts ? opts.allowedMimeTypes : C[0] || CT.C0;
    let enableDeltaModel = opts && 'enableDeltaModel' in opts ? opts.enableDeltaModel : false;
    this[inputType$] = inputType;
    this[readOnly$] = readOnly;
    this[obscureText$] = obscureText;
    this[autocorrect$] = autocorrect;
    this[enableSuggestions$] = enableSuggestions;
    this[enableInteractiveSelection$] = enableInteractiveSelection;
    this[actionLabel$] = actionLabel;
    this[inputAction$] = inputAction;
    this[keyboardAppearance$] = keyboardAppearance;
    this[textCapitalization$] = textCapitalization;
    this[autofillConfiguration$] = autofillConfiguration;
    this[enableIMEPersonalizedLearning$] = enableIMEPersonalizedLearning;
    this[allowedMimeTypes$] = allowedMimeTypes;
    this[enableDeltaModel$] = enableDeltaModel;
    this[smartDashesType$] = (t$361 = smartDashesType, t$361 == null ? obscureText ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t$361);
    this[smartQuotesType$] = (t$361$ = smartQuotesType, t$361$ == null ? obscureText ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t$361$);
    ;
  }).prototype = text_input.TextInputConfiguration.prototype;
  dart.addTypeTests(text_input.TextInputConfiguration);
  dart.addRtiResources(text_input.TextInputConfiguration, ["flutter__src__services__text_input|TextInputConfiguration"]);
  dart.addTypeCaches(text_input.TextInputConfiguration);
  dart.setMethodSignature(text_input.TextInputConfiguration, () => dart.global.Object.setPrototypeOf({
    copyWith: T$.__ToTextInputConfiguration(),
    toJson: T$.VoidToMapOfString$dynamic()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputConfiguration))));
  dart.setLibraryUri(text_input.TextInputConfiguration, I[7]);
  dart.setFieldSignature(text_input.TextInputConfiguration, () => dart.global.Object.setPrototypeOf({
    inputType: {type: T$.TextInputType(), isConst: false, isFinal: true, libraryUri: I[7]},
    readOnly: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    obscureText: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    autocorrect: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    autofillConfiguration: {type: T$.AutofillConfiguration(), isConst: false, isFinal: true, libraryUri: I[6]},
    smartDashesType: {type: T$.SmartDashesType(), isConst: false, isFinal: true, libraryUri: I[7]},
    smartQuotesType: {type: T$.SmartQuotesType(), isConst: false, isFinal: true, libraryUri: I[7]},
    enableSuggestions: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    enableInteractiveSelection: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    actionLabel: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]},
    inputAction: {type: T$.TextInputAction(), isConst: false, isFinal: true, libraryUri: I[7]},
    textCapitalization: {type: T$.TextCapitalization(), isConst: false, isFinal: true, libraryUri: I[7]},
    keyboardAppearance: {type: T$.Brightness(), isConst: false, isFinal: true, libraryUri: I[4]},
    enableIMEPersonalizedLearning: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    allowedMimeTypes: {type: T$.ListOfString(), isConst: false, isFinal: true, libraryUri: I[2]},
    enableDeltaModel: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.TextInputConfiguration))));
  autofill._AutofillScopeTextInputConfiguration = class _AutofillScopeTextInputConfiguration extends text_input.TextInputConfiguration {
    static ['_#new#tearOff'](opts) {
      let allConfigurations = opts && 'allConfigurations' in opts ? opts.allConfigurations : null;
      let currentClientConfiguration = opts && 'currentClientConfiguration' in opts ? opts.currentClientConfiguration : null;
      return new autofill._AutofillScopeTextInputConfiguration.new({allConfigurations: allConfigurations, currentClientConfiguration: currentClientConfiguration});
    }
    toJson() {
      let result = super.toJson();
      result[$_set]("fields", this.allConfigurations[$map](T$.MapOfString$dynamic(), dart.fn(configuration => configuration.toJson(), T$.TextInputConfigurationToMapOfString$dynamic()))[$toList]({growable: false}));
      return result;
    }
  };
  (autofill._AutofillScopeTextInputConfiguration.new = function(opts) {
    let allConfigurations = opts && 'allConfigurations' in opts ? opts.allConfigurations : null;
    let currentClientConfiguration = opts && 'currentClientConfiguration' in opts ? opts.currentClientConfiguration : null;
    this.allConfigurations = allConfigurations;
    dart.global.Object.getPrototypeOf(autofill._AutofillScopeTextInputConfiguration).new.call(this, {inputType: currentClientConfiguration.inputType, obscureText: currentClientConfiguration.obscureText, autocorrect: currentClientConfiguration.autocorrect, smartDashesType: currentClientConfiguration.smartDashesType, smartQuotesType: currentClientConfiguration.smartQuotesType, enableSuggestions: currentClientConfiguration.enableSuggestions, inputAction: currentClientConfiguration.inputAction, textCapitalization: currentClientConfiguration.textCapitalization, keyboardAppearance: currentClientConfiguration.keyboardAppearance, actionLabel: currentClientConfiguration.actionLabel, autofillConfiguration: currentClientConfiguration.autofillConfiguration});
    ;
  }).prototype = autofill._AutofillScopeTextInputConfiguration.prototype;
  dart.addTypeTests(autofill._AutofillScopeTextInputConfiguration);
  dart.addRtiResources(autofill._AutofillScopeTextInputConfiguration, ["flutter__src__services__autofill|_AutofillScopeTextInputConfiguration"]);
  dart.addTypeCaches(autofill._AutofillScopeTextInputConfiguration);
  dart.setLibraryUri(autofill._AutofillScopeTextInputConfiguration, I[6]);
  dart.setFieldSignature(autofill._AutofillScopeTextInputConfiguration, () => dart.global.Object.setPrototypeOf({allConfigurations: {type: T$.IterableOfTextInputConfiguration(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(autofill._AutofillScopeTextInputConfiguration))));
  autofill.AutofillScopeMixin = class AutofillScopeMixin extends core.Object {};
  autofill.AutofillScopeMixin[dart.mixinOn] = Object => class AutofillScopeMixin extends Object {
    attach(trigger, configuration) {
      if (!!this.autofillClients[$any](dart.fn(client => !client.textInputConfiguration.autofillConfiguration.enabled, T$.AutofillClientTobool()))) dart.assertFailed("Every client in AutofillScope.autofillClients must enable autofill", I[8], 840, 7, "!autofillClients.any((AutofillClient client) => !client.textInputConfiguration.autofillConfiguration.enabled)");
      let inputConfiguration = new autofill._AutofillScopeTextInputConfiguration.new({allConfigurations: this.autofillClients[$map](T$.TextInputConfiguration(), dart.fn(client => client.textInputConfiguration, T$.AutofillClientToTextInputConfiguration())), currentClientConfiguration: configuration});
      return text_input.TextInput.attach(trigger, inputConfiguration);
    }
  };
  (autofill.AutofillScopeMixin[dart.mixinNew] = function() {
  }).prototype = autofill.AutofillScopeMixin.prototype;
  dart.addTypeTests(autofill.AutofillScopeMixin);
  dart.addRtiResources(autofill.AutofillScopeMixin, ["flutter__src__services__autofill|AutofillScopeMixin", "flutter__src__services__autofill|AutofillScope"]);
  dart.addTypeCaches(autofill.AutofillScopeMixin);
  dart.setMethodSignature(autofill.AutofillScopeMixin, () => dart.global.Object.setPrototypeOf({attach: T$.TextInputClientAndTextInputConfigurationToTextInputConnection()}, dart.getMethods(dart.global.Object.getPrototypeOf(autofill.AutofillScopeMixin))));
  dart.setLibraryUri(autofill.AutofillScopeMixin, I[6]);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  text_input.SmartDashesType = class SmartDashesType extends core._Enum {
    [_enumToString]() {
      return "SmartDashesType." + this[_name];
    }
  };
  (text_input.SmartDashesType.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.SmartDashesType).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.SmartDashesType.prototype;
  dart.addTypeTests(text_input.SmartDashesType);
  dart.addRtiResources(text_input.SmartDashesType, ["flutter__src__services__text_input|SmartDashesType"]);
  dart.addTypeCaches(text_input.SmartDashesType);
  dart.setMethodSignature(text_input.SmartDashesType, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.SmartDashesType))));
  dart.setLibraryUri(text_input.SmartDashesType, I[7]);
  dart.setStaticFieldSignature(text_input.SmartDashesType, () => ['values', 'disabled', 'enabled']);
  dart.defineLazy(text_input.SmartDashesType, {
    /*text_input.SmartDashesType.values*/get values() {
      return C[10] || CT.C10;
    },
    /*text_input.SmartDashesType.disabled*/get disabled() {
      return C[11] || CT.C11;
    },
    /*text_input.SmartDashesType.enabled*/get enabled() {
      return C[12] || CT.C12;
    }
  }, false);
  text_input.SmartQuotesType = class SmartQuotesType extends core._Enum {
    [_enumToString]() {
      return "SmartQuotesType." + this[_name];
    }
  };
  (text_input.SmartQuotesType.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.SmartQuotesType).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.SmartQuotesType.prototype;
  dart.addTypeTests(text_input.SmartQuotesType);
  dart.addRtiResources(text_input.SmartQuotesType, ["flutter__src__services__text_input|SmartQuotesType"]);
  dart.addTypeCaches(text_input.SmartQuotesType);
  dart.setMethodSignature(text_input.SmartQuotesType, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.SmartQuotesType))));
  dart.setLibraryUri(text_input.SmartQuotesType, I[7]);
  dart.setStaticFieldSignature(text_input.SmartQuotesType, () => ['values', 'disabled', 'enabled']);
  dart.defineLazy(text_input.SmartQuotesType, {
    /*text_input.SmartQuotesType.values*/get values() {
      return C[13] || CT.C13;
    },
    /*text_input.SmartQuotesType.disabled*/get disabled() {
      return C[14] || CT.C14;
    },
    /*text_input.SmartQuotesType.enabled*/get enabled() {
      return C[15] || CT.C15;
    }
  }, false);
  var _name$ = dart.privateName(text_input, "_name");
  var _is = dart.privateName(dart_rti, "_is");
  const index$ = TextInputType_index;
  const signed$ = TextInputType_signed;
  const decimal$ = TextInputType_decimal;
  text_input.TextInputType = class TextInputType extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get signed() {
      return this[signed$];
    }
    set signed(value) {
      super.signed = value;
    }
    get decimal() {
      return this[decimal$];
    }
    set decimal(value) {
      super.decimal = value;
    }
    static ['_#_#tearOff'](index) {
      return new text_input.TextInputType.__(index);
    }
    static ['_#numberWithOptions#tearOff'](opts) {
      let signed = opts && 'signed' in opts ? opts.signed : false;
      let decimal = opts && 'decimal' in opts ? opts.decimal : false;
      return new text_input.TextInputType.numberWithOptions({signed: signed, decimal: decimal});
    }
    get [_name$]() {
      return "TextInputType." + text_input.TextInputType._names[$_get](this.index);
    }
    toJson() {
      return new (G.IdentityMapOfString$dynamic()).from(["name", this[_name$], "signed", this.signed, "decimal", this.decimal]);
    }
    toString() {
      return object.objectRuntimeType(this, "TextInputType") + "(" + "name: " + this[_name$] + ", " + "signed: " + dart.str(this.signed) + ", " + "decimal: " + dart.str(this.decimal) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return T$.TextInputType()[_is](other) && other.index === this.index && other.signed == this.signed && other.decimal == this.decimal;
    }
    get hashCode() {
      return core.Object.hash(this.index, this.signed, this.decimal);
    }
  };
  (text_input.TextInputType.__ = function(index) {
    this[index$] = index;
    this[signed$] = null;
    this[decimal$] = null;
    ;
  }).prototype = text_input.TextInputType.prototype;
  (text_input.TextInputType.numberWithOptions = function(opts) {
    let signed = opts && 'signed' in opts ? opts.signed : false;
    let decimal = opts && 'decimal' in opts ? opts.decimal : false;
    this[signed$] = signed;
    this[decimal$] = decimal;
    this[index$] = 2;
    ;
  }).prototype = text_input.TextInputType.prototype;
  dart.addTypeTests(text_input.TextInputType);
  dart.addRtiResources(text_input.TextInputType, ["flutter__src__services__text_input|TextInputType"]);
  dart.addTypeCaches(text_input.TextInputType);
  dart.setMethodSignature(text_input.TextInputType, () => dart.global.Object.setPrototypeOf({toJson: T$.VoidToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputType))));
  dart.setGetterSignature(text_input.TextInputType, () => dart.global.Object.setPrototypeOf({[_name$]: T$.String()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_input.TextInputType))));
  dart.setLibraryUri(text_input.TextInputType, I[7]);
  dart.setFieldSignature(text_input.TextInputType, () => dart.global.Object.setPrototypeOf({
    index: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    signed: {type: T$.boolN(), isConst: false, isFinal: true, libraryUri: I[2]},
    decimal: {type: T$.boolN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.TextInputType))));
  dart.setStaticFieldSignature(text_input.TextInputType, () => ['text', 'multiline', 'number', 'phone', 'datetime', 'emailAddress', 'url', 'visiblePassword', 'name_', 'streetAddress', 'none', 'values', '_names']);
  dart.defineExtensionMethods(text_input.TextInputType, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextInputType, ['hashCode']);
  dart.defineLazy(text_input.TextInputType, {
    /*text_input.TextInputType.text*/get text() {
      return C[6] || CT.C6;
    },
    /*text_input.TextInputType.multiline*/get multiline() {
      return C[16] || CT.C16;
    },
    /*text_input.TextInputType.number*/get number() {
      return C[17] || CT.C17;
    },
    /*text_input.TextInputType.phone*/get phone() {
      return C[18] || CT.C18;
    },
    /*text_input.TextInputType.datetime*/get datetime() {
      return C[19] || CT.C19;
    },
    /*text_input.TextInputType.emailAddress*/get emailAddress() {
      return C[20] || CT.C20;
    },
    /*text_input.TextInputType.url*/get url() {
      return C[21] || CT.C21;
    },
    /*text_input.TextInputType.visiblePassword*/get visiblePassword() {
      return C[22] || CT.C22;
    },
    /*text_input.TextInputType.name_*/get name_() {
      return C[23] || CT.C23;
    },
    /*text_input.TextInputType.streetAddress*/get streetAddress() {
      return C[24] || CT.C24;
    },
    /*text_input.TextInputType.none*/get none() {
      return C[25] || CT.C25;
    },
    /*text_input.TextInputType.values*/get values() {
      return C[26] || CT.C26;
    },
    /*text_input.TextInputType._names*/get _names() {
      return C[27] || CT.C27;
    }
  }, false);
  text_input.TextInputAction = class TextInputAction extends core._Enum {
    [_enumToString]() {
      return "TextInputAction." + this[_name];
    }
  };
  (text_input.TextInputAction.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.TextInputAction).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.TextInputAction.prototype;
  dart.addTypeTests(text_input.TextInputAction);
  dart.addRtiResources(text_input.TextInputAction, ["flutter__src__services__text_input|TextInputAction"]);
  dart.addTypeCaches(text_input.TextInputAction);
  dart.setMethodSignature(text_input.TextInputAction, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputAction))));
  dart.setLibraryUri(text_input.TextInputAction, I[7]);
  dart.setStaticFieldSignature(text_input.TextInputAction, () => ['values', 'none', 'unspecified', 'done', 'go', 'search', 'send', 'next', 'previous', 'continueAction', 'join', 'route', 'emergencyCall', 'newline']);
  dart.defineLazy(text_input.TextInputAction, {
    /*text_input.TextInputAction.values*/get values() {
      return C[28] || CT.C28;
    },
    /*text_input.TextInputAction.none*/get none() {
      return C[29] || CT.C29;
    },
    /*text_input.TextInputAction.unspecified*/get unspecified() {
      return C[30] || CT.C30;
    },
    /*text_input.TextInputAction.done*/get done() {
      return C[7] || CT.C7;
    },
    /*text_input.TextInputAction.go*/get go() {
      return C[31] || CT.C31;
    },
    /*text_input.TextInputAction.search*/get search() {
      return C[32] || CT.C32;
    },
    /*text_input.TextInputAction.send*/get send() {
      return C[33] || CT.C33;
    },
    /*text_input.TextInputAction.next*/get next() {
      return C[34] || CT.C34;
    },
    /*text_input.TextInputAction.previous*/get previous() {
      return C[35] || CT.C35;
    },
    /*text_input.TextInputAction.continueAction*/get continueAction() {
      return C[36] || CT.C36;
    },
    /*text_input.TextInputAction.join*/get join() {
      return C[37] || CT.C37;
    },
    /*text_input.TextInputAction.route*/get route() {
      return C[38] || CT.C38;
    },
    /*text_input.TextInputAction.emergencyCall*/get emergencyCall() {
      return C[39] || CT.C39;
    },
    /*text_input.TextInputAction.newline*/get newline() {
      return C[40] || CT.C40;
    }
  }, false);
  text_input.TextCapitalization = class TextCapitalization extends core._Enum {
    [_enumToString]() {
      return "TextCapitalization." + this[_name];
    }
  };
  (text_input.TextCapitalization.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.TextCapitalization).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.TextCapitalization.prototype;
  dart.addTypeTests(text_input.TextCapitalization);
  dart.addRtiResources(text_input.TextCapitalization, ["flutter__src__services__text_input|TextCapitalization"]);
  dart.addTypeCaches(text_input.TextCapitalization);
  dart.setMethodSignature(text_input.TextCapitalization, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextCapitalization))));
  dart.setLibraryUri(text_input.TextCapitalization, I[7]);
  dart.setStaticFieldSignature(text_input.TextCapitalization, () => ['values', 'words', 'sentences', 'characters', 'none']);
  dart.defineLazy(text_input.TextCapitalization, {
    /*text_input.TextCapitalization.values*/get values() {
      return C[41] || CT.C41;
    },
    /*text_input.TextCapitalization.words*/get words() {
      return C[42] || CT.C42;
    },
    /*text_input.TextCapitalization.sentences*/get sentences() {
      return C[43] || CT.C43;
    },
    /*text_input.TextCapitalization.characters*/get characters() {
      return C[44] || CT.C44;
    },
    /*text_input.TextCapitalization.none*/get none() {
      return C[9] || CT.C9;
    }
  }, false);
  text_input.FloatingCursorDragState = class FloatingCursorDragState extends core._Enum {
    [_enumToString]() {
      return "FloatingCursorDragState." + this[_name];
    }
  };
  (text_input.FloatingCursorDragState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.FloatingCursorDragState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.FloatingCursorDragState.prototype;
  dart.addTypeTests(text_input.FloatingCursorDragState);
  dart.addRtiResources(text_input.FloatingCursorDragState, ["flutter__src__services__text_input|FloatingCursorDragState"]);
  dart.addTypeCaches(text_input.FloatingCursorDragState);
  dart.setMethodSignature(text_input.FloatingCursorDragState, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.FloatingCursorDragState))));
  dart.setLibraryUri(text_input.FloatingCursorDragState, I[7]);
  dart.setStaticFieldSignature(text_input.FloatingCursorDragState, () => ['values', 'Start', 'Update', 'End']);
  dart.defineLazy(text_input.FloatingCursorDragState, {
    /*text_input.FloatingCursorDragState.values*/get values() {
      return C[45] || CT.C45;
    },
    /*text_input.FloatingCursorDragState.Start*/get Start() {
      return C[46] || CT.C46;
    },
    /*text_input.FloatingCursorDragState.Update*/get Update() {
      return C[47] || CT.C47;
    },
    /*text_input.FloatingCursorDragState.End*/get End() {
      return C[48] || CT.C48;
    }
  }, false);
  var offset$ = dart.privateName(text_input, "RawFloatingCursorPoint.offset");
  var startLocation$ = dart.privateName(text_input, "RawFloatingCursorPoint.startLocation");
  var state$ = dart.privateName(text_input, "RawFloatingCursorPoint.state");
  text_input.RawFloatingCursorPoint = class RawFloatingCursorPoint extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get startLocation() {
      return this[startLocation$];
    }
    set startLocation(value) {
      super.startLocation = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](opts) {
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let startLocation = opts && 'startLocation' in opts ? opts.startLocation : null;
      let state = opts && 'state' in opts ? opts.state : null;
      return new text_input.RawFloatingCursorPoint.new({offset: offset, startLocation: startLocation, state: state});
    }
  };
  (text_input.RawFloatingCursorPoint.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let startLocation = opts && 'startLocation' in opts ? opts.startLocation : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[offset$] = offset;
    this[startLocation$] = startLocation;
    this[state$] = state;
    if (!(state !== text_input.FloatingCursorDragState.Update || offset != null)) dart.assertFailed(null, I[9], 749, 15, "state != FloatingCursorDragState.Update || offset != null");
    ;
  }).prototype = text_input.RawFloatingCursorPoint.prototype;
  dart.addTypeTests(text_input.RawFloatingCursorPoint);
  dart.addRtiResources(text_input.RawFloatingCursorPoint, ["flutter__src__services__text_input|RawFloatingCursorPoint"]);
  dart.addTypeCaches(text_input.RawFloatingCursorPoint);
  dart.setLibraryUri(text_input.RawFloatingCursorPoint, I[7]);
  dart.setFieldSignature(text_input.RawFloatingCursorPoint, () => dart.global.Object.setPrototypeOf({
    offset: {type: T$.OffsetN(), isConst: false, isFinal: true, libraryUri: I[4]},
    startLocation: {type: T$.RecNOfOffsetAndTextPosition(), isConst: false, isFinal: true},
    state: {type: T$.FloatingCursorDragState(), isConst: false, isFinal: true, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.RawFloatingCursorPoint))));
  const text$0 = TextEditingValue_text;
  const selection$0 = TextEditingValue_selection;
  const composing$0 = TextEditingValue_composing;
  text_input.TextEditingValue = class TextEditingValue extends core.Object {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get selection() {
      return this[selection$0];
    }
    set selection(value) {
      super.selection = value;
    }
    get composing() {
      return this[composing$0];
    }
    set composing(value) {
      super.composing = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : "";
      let selection = opts && 'selection' in opts ? opts.selection : C[4] || CT.C4;
      let composing = opts && 'composing' in opts ? opts.composing : C[3] || CT.C3;
      return new text_input.TextEditingValue.new({text: text, selection: selection, composing: composing});
    }
    static fromJSON(encoded) {
      let t$3612, t$3612$, t$3612$0, t$3612$1, t$3612$2, t$3612$3;
      let text = T$.String()[_as](encoded[$_get]("text"));
      let selection = new text_editing.TextSelection.new({baseOffset: (t$3612 = T$.intN()[_as](encoded[$_get]("selectionBase")), t$3612 == null ? -1 : t$3612), extentOffset: (t$3612$ = T$.intN()[_as](encoded[$_get]("selectionExtent")), t$3612$ == null ? -1 : t$3612$), affinity: (t$3612$0 = text_input._toTextAffinity(T$.StringN()[_as](encoded[$_get]("selectionAffinity"))), t$3612$0 == null ? ui.TextAffinity.downstream : t$3612$0), isDirectional: (t$3612$1 = T$.boolN()[_as](encoded[$_get]("selectionIsDirectional")), t$3612$1 == null ? false : t$3612$1)});
      let composing = new ui.TextRange.new({start: (t$3612$2 = T$.intN()[_as](encoded[$_get]("composingBase")), t$3612$2 == null ? -1 : t$3612$2), end: (t$3612$3 = T$.intN()[_as](encoded[$_get]("composingExtent")), t$3612$3 == null ? -1 : t$3612$3)});
      if (!text_input.TextEditingValue._textRangeIsValid(selection, text)) dart.assertFailed(null, I[9], 792, 12, "_textRangeIsValid(selection, text)");
      if (!text_input.TextEditingValue._textRangeIsValid(composing, text)) dart.assertFailed(null, I[9], 793, 12, "_textRangeIsValid(composing, text)");
      return new text_input.TextEditingValue.new({text: text, selection: selection, composing: composing});
    }
    static ['_#fromJSON#tearOff'](encoded) {
      return text_input.TextEditingValue.fromJSON(encoded);
    }
    copyWith(opts) {
      let t$3612, t$3612$, t$3612$0;
      let text = opts && 'text' in opts ? opts.text : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_input.TextEditingValue.new({text: (t$3612 = text, t$3612 == null ? this.text : t$3612), selection: (t$3612$ = selection, t$3612$ == null ? this.selection : t$3612$), composing: (t$3612$0 = composing, t$3612$0 == null ? this.composing : t$3612$0)});
    }
    get isComposingRangeValid() {
      return this.composing.isValid && this.composing.isNormalized && this.composing.end <= this.text.length;
    }
    replaced(replacementRange, replacementString) {
      if (!replacementRange.isValid) {
        return this;
      }
      let newText = this.text[$replaceRange](replacementRange.start, replacementRange.end, replacementString);
      if (replacementRange.end - replacementRange.start === replacementString.length) {
        return this.copyWith({text: newText});
      }
      function adjustIndex(originalIndex) {
        let replacedLength = originalIndex <= replacementRange.start && originalIndex < replacementRange.end ? 0 : replacementString.length;
        let removedLength = originalIndex[$clamp](replacementRange.start, replacementRange.end) - replacementRange.start;
        return originalIndex + replacedLength - removedLength;
      }
      dart.fn(adjustIndex, T$.intToint());
      let adjustedSelection = new text_editing.TextSelection.new({baseOffset: adjustIndex(this.selection.baseOffset), extentOffset: adjustIndex(this.selection.extentOffset)});
      let adjustedComposing = new ui.TextRange.new({start: adjustIndex(this.composing.start), end: adjustIndex(this.composing.end)});
      if (!text_input.TextEditingValue._textRangeIsValid(adjustedSelection, newText)) dart.assertFailed(null, I[9], 910, 12, "_textRangeIsValid(adjustedSelection, newText)");
      if (!text_input.TextEditingValue._textRangeIsValid(adjustedComposing, newText)) dart.assertFailed(null, I[9], 911, 12, "_textRangeIsValid(adjustedComposing, newText)");
      return new text_input.TextEditingValue.new({text: newText, selection: adjustedSelection, composing: adjustedComposing});
    }
    toJSON() {
      if (!text_input.TextEditingValue._textRangeIsValid(this.selection, this.text)) dart.assertFailed(null, I[9], 921, 12, "_textRangeIsValid(selection, text)");
      if (!text_input.TextEditingValue._textRangeIsValid(this.composing, this.text)) dart.assertFailed(null, I[9], 922, 12, "_textRangeIsValid(composing, text)");
      return new (G.IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.selection.baseOffset, "selectionExtent", this.selection.extentOffset, "selectionAffinity", dart.toString(this.selection.affinity), "selectionIsDirectional", this.selection.isDirectional, "composingBase", this.composing.start, "composingExtent", this.composing.end]);
    }
    toString() {
      return object.objectRuntimeType(this, "TextEditingValue") + "(text: ┤" + this.text + "├, selection: " + dart.str(this.selection) + ", composing: " + dart.str(this.composing) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T$.TextEditingValue()[_is](other) && other.text === this.text && dart.equals(other.selection, this.selection) && dart.equals(other.composing, this.composing);
    }
    get hashCode() {
      return core.Object.hash(this.text[$hashCode], dart.hashCode(this.selection), dart.hashCode(this.composing));
    }
    static _textRangeIsValid(range, text) {
      if (range.start === -1 && range.end === -1) {
        return true;
      }
      if (!(range.start >= 0 && range.start <= text.length)) dart.assertFailed("Range start " + dart.strSafe(range.start) + " is out of text of length " + dart.strSafe(text.length), I[9], 966, 12, "range.start >= 0 && range.start <= text.length");
      if (!(range.end >= 0 && range.end <= text.length)) dart.assertFailed("Range end " + dart.strSafe(range.end) + " is out of text of length " + dart.strSafe(text.length), I[9], 968, 12, "range.end >= 0 && range.end <= text.length");
      return true;
    }
  };
  (text_input.TextEditingValue.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : "";
    let selection = opts && 'selection' in opts ? opts.selection : C[4] || CT.C4;
    let composing = opts && 'composing' in opts ? opts.composing : C[3] || CT.C3;
    this[text$0] = text;
    this[selection$0] = selection;
    this[composing$0] = composing;
    ;
  }).prototype = text_input.TextEditingValue.prototype;
  dart.addTypeTests(text_input.TextEditingValue);
  dart.addRtiResources(text_input.TextEditingValue, ["flutter__src__services__text_input|TextEditingValue"]);
  dart.addTypeCaches(text_input.TextEditingValue);
  dart.setMethodSignature(text_input.TextEditingValue, () => dart.global.Object.setPrototypeOf({
    copyWith: T$.__ToTextEditingValue(),
    replaced: T$.TextRangeAndStringToTextEditingValue(),
    toJSON: T$.VoidToMapOfString$dynamic()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextEditingValue))));
  dart.setStaticMethodSignature(text_input.TextEditingValue, () => ['fromJSON', '_textRangeIsValid']);
  dart.setGetterSignature(text_input.TextEditingValue, () => dart.global.Object.setPrototypeOf({isComposingRangeValid: T$.bool()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_input.TextEditingValue))));
  dart.setLibraryUri(text_input.TextEditingValue, I[7]);
  dart.setFieldSignature(text_input.TextEditingValue, () => dart.global.Object.setPrototypeOf({
    text: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    selection: {type: T$.TextSelection(), isConst: false, isFinal: true, libraryUri: I[3]},
    composing: {type: T$.TextRange(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.TextEditingValue))));
  dart.setStaticFieldSignature(text_input.TextEditingValue, () => ['empty']);
  dart.defineExtensionMethods(text_input.TextEditingValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextEditingValue, ['hashCode']);
  dart.defineLazy(text_input.TextEditingValue, {
    /*text_input.TextEditingValue.empty*/get empty() {
      return C[2] || CT.C2;
    }
  }, false);
  text_input.SelectionChangedCause = class SelectionChangedCause extends core._Enum {
    [_enumToString]() {
      return "SelectionChangedCause." + this[_name];
    }
  };
  (text_input.SelectionChangedCause.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_input.SelectionChangedCause).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_input.SelectionChangedCause.prototype;
  dart.addTypeTests(text_input.SelectionChangedCause);
  dart.addRtiResources(text_input.SelectionChangedCause, ["flutter__src__services__text_input|SelectionChangedCause"]);
  dart.addTypeCaches(text_input.SelectionChangedCause);
  dart.setMethodSignature(text_input.SelectionChangedCause, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.SelectionChangedCause))));
  dart.setLibraryUri(text_input.SelectionChangedCause, I[7]);
  dart.setStaticFieldSignature(text_input.SelectionChangedCause, () => ['values', 'tap', 'doubleTap', 'longPress', 'forcePress', 'keyboard', 'toolbar', 'drag', 'scribble']);
  dart.defineLazy(text_input.SelectionChangedCause, {
    /*text_input.SelectionChangedCause.values*/get values() {
      return C[49] || CT.C49;
    },
    /*text_input.SelectionChangedCause.tap*/get tap() {
      return C[50] || CT.C50;
    },
    /*text_input.SelectionChangedCause.doubleTap*/get doubleTap() {
      return C[51] || CT.C51;
    },
    /*text_input.SelectionChangedCause.longPress*/get longPress() {
      return C[52] || CT.C52;
    },
    /*text_input.SelectionChangedCause.forcePress*/get forcePress() {
      return C[53] || CT.C53;
    },
    /*text_input.SelectionChangedCause.keyboard*/get keyboard() {
      return C[54] || CT.C54;
    },
    /*text_input.SelectionChangedCause.toolbar*/get toolbar() {
      return C[55] || CT.C55;
    },
    /*text_input.SelectionChangedCause.drag*/get drag() {
      return C[56] || CT.C56;
    },
    /*text_input.SelectionChangedCause.scribble*/get scribble() {
      return C[57] || CT.C57;
    }
  }, false);
  text_input.TextSelectionDelegate = class TextSelectionDelegate extends core.Object {};
  text_input.TextSelectionDelegate[dart.mixinOn] = Object => class TextSelectionDelegate extends Object {
    get cutEnabled() {
      return true;
    }
    get copyEnabled() {
      return true;
    }
    get pasteEnabled() {
      return true;
    }
    get selectAllEnabled() {
      return true;
    }
    get lookUpEnabled() {
      return true;
    }
    get searchWebEnabled() {
      return true;
    }
    get shareEnabled() {
      return true;
    }
    get liveTextInputEnabled() {
      return false;
    }
  };
  (text_input.TextSelectionDelegate[dart.mixinNew] = function() {
  }).prototype = text_input.TextSelectionDelegate.prototype;
  dart.addTypeTests(text_input.TextSelectionDelegate);
  dart.addRtiResources(text_input.TextSelectionDelegate, ["flutter__src__services__text_input|TextSelectionDelegate"]);
  dart.addTypeCaches(text_input.TextSelectionDelegate);
  dart.setGetterSignature(text_input.TextSelectionDelegate, () => dart.global.Object.setPrototypeOf({
    cutEnabled: T$.bool(),
    copyEnabled: T$.bool(),
    pasteEnabled: T$.bool(),
    selectAllEnabled: T$.bool(),
    lookUpEnabled: T$.bool(),
    searchWebEnabled: T$.bool(),
    shareEnabled: T$.bool(),
    liveTextInputEnabled: T$.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_input.TextSelectionDelegate))));
  dart.setLibraryUri(text_input.TextSelectionDelegate, I[7]);
  text_input.TextInputClient = class TextInputClient extends core.Object {};
  text_input.TextInputClient[dart.mixinOn] = Object => class TextInputClient extends Object {
    insertContent(content) {
    }
    didChangeInputControl(oldControl, newControl) {
    }
    showToolbar() {
    }
    insertTextPlaceholder(size) {
    }
    removeTextPlaceholder() {
    }
    performSelector(selectorName) {
    }
  };
  (text_input.TextInputClient[dart.mixinNew] = function() {
  }).prototype = text_input.TextInputClient.prototype;
  dart.addTypeTests(text_input.TextInputClient);
  dart.addRtiResources(text_input.TextInputClient, ["flutter__src__services__text_input|TextInputClient"]);
  dart.addTypeCaches(text_input.TextInputClient);
  dart.setMethodSignature(text_input.TextInputClient, () => dart.global.Object.setPrototypeOf({
    insertContent: T$.KeyboardInsertedContentTovoid(),
    didChangeInputControl: T$.TextInputControlNAndTextInputControlNTovoid(),
    showToolbar: T$.VoidTovoid(),
    insertTextPlaceholder: T$.SizeTovoid(),
    removeTextPlaceholder: T$.VoidTovoid(),
    performSelector: T$.StringTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputClient))));
  dart.setLibraryUri(text_input.TextInputClient, I[7]);
  text_input.ScribbleClient = class ScribbleClient extends core.Object {};
  (text_input.ScribbleClient.new = function() {
    ;
  }).prototype = text_input.ScribbleClient.prototype;
  dart.addTypeTests(text_input.ScribbleClient);
  dart.addRtiResources(text_input.ScribbleClient, ["flutter__src__services__text_input|ScribbleClient"]);
  dart.addTypeCaches(text_input.ScribbleClient);
  dart.setLibraryUri(text_input.ScribbleClient, I[7]);
  var position$ = dart.privateName(text_input, "SelectionRect.position");
  var bounds$ = dart.privateName(text_input, "SelectionRect.bounds");
  var direction$ = dart.privateName(text_input, "SelectionRect.direction");
  text_input.SelectionRect = class SelectionRect extends core.Object {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    static ['_#new#tearOff'](opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let bounds = opts && 'bounds' in opts ? opts.bounds : null;
      let direction = opts && 'direction' in opts ? opts.direction : C[58] || CT.C58;
      return new text_input.SelectionRect.new({position: position, bounds: bounds, direction: direction});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(this), dart.runtimeType(other))) {
        return false;
      }
      return T$.SelectionRect()[_is](other) && other.position === this.position && dart.equals(other.bounds, this.bounds) && other.direction === this.direction;
    }
    get hashCode() {
      return core.Object.hash(this.position, this.bounds);
    }
    toString() {
      return "SelectionRect(" + dart.strSafe(this.position) + ", " + dart.str(this.bounds) + ")";
    }
  };
  (text_input.SelectionRect.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let direction = opts && 'direction' in opts ? opts.direction : C[58] || CT.C58;
    this[position$] = position;
    this[bounds$] = bounds;
    this[direction$] = direction;
    ;
  }).prototype = text_input.SelectionRect.prototype;
  dart.addTypeTests(text_input.SelectionRect);
  dart.addRtiResources(text_input.SelectionRect, ["flutter__src__services__text_input|SelectionRect"]);
  dart.addTypeCaches(text_input.SelectionRect);
  dart.setLibraryUri(text_input.SelectionRect, I[7]);
  dart.setFieldSignature(text_input.SelectionRect, () => dart.global.Object.setPrototypeOf({
    position: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    bounds: {type: T$.Rect(), isConst: false, isFinal: true, libraryUri: I[4]},
    direction: {type: T$.TextDirection(), isConst: false, isFinal: true, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.SelectionRect))));
  dart.defineExtensionMethods(text_input.SelectionRect, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_input.SelectionRect, ['hashCode']);
  text_input.DeltaTextInputClient = class DeltaTextInputClient extends core.Object {};
  text_input.DeltaTextInputClient[dart.mixinOn] = Object => class DeltaTextInputClient extends Object {};
  (text_input.DeltaTextInputClient[dart.mixinNew] = function() {
  }).prototype = text_input.DeltaTextInputClient.prototype;
  dart.addTypeTests(text_input.DeltaTextInputClient);
  dart.addRtiResources(text_input.DeltaTextInputClient, ["flutter__src__services__text_input|DeltaTextInputClient", "flutter__src__services__text_input|TextInputClient"]);
  dart.addTypeCaches(text_input.DeltaTextInputClient);
  dart.setLibraryUri(text_input.DeltaTextInputClient, I[7]);
  var _cachedSize = dart.privateName(text_input, "_cachedSize");
  var _cachedTransform = dart.privateName(text_input, "_cachedTransform");
  var _cachedRect = dart.privateName(text_input, "_cachedRect");
  var _cachedCaretRect = dart.privateName(text_input, "_cachedCaretRect");
  var _cachedSelectionRects = dart.privateName(text_input, "_cachedSelectionRects");
  var _client$ = dart.privateName(text_input, "_client");
  var _id = dart.privateName(text_input, "_id");
  var _currentConnection = dart.privateName(text_input, "_currentConnection");
  var _show = dart.privateName(text_input, "_show");
  var _requestAutofill = dart.privateName(text_input, "_requestAutofill");
  var _updateConfig = dart.privateName(text_input, "_updateConfig");
  var _setEditingState = dart.privateName(text_input, "_setEditingState");
  var _setEditableSizeAndTransform = dart.privateName(text_input, "_setEditableSizeAndTransform");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _setComposingTextRect = dart.privateName(text_input, "_setComposingTextRect");
  var _setCaretRect = dart.privateName(text_input, "_setCaretRect");
  var _setSelectionRects = dart.privateName(text_input, "_setSelectionRects");
  var _setStyle = dart.privateName(text_input, "_setStyle");
  var _clearClient = dart.privateName(text_input, "_clearClient");
  text_input.TextInputConnection = class TextInputConnection extends core.Object {
    static ['_#_#tearOff'](_client) {
      return new text_input.TextInputConnection.__(_client);
    }
    static debugResetId(opts) {
      let to = opts && 'to' in opts ? opts.to : 1;
      if (!dart.fn(() => {
        text_input.TextInputConnection._nextId = to;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[9], 1334, 12, "() {\r\n      _nextId = to;\r\n      return true;\r\n    }()");
    }
    get attached() {
      return dart.equals(text_input.TextInput._instance[_currentConnection], this);
    }
    get scribbleInProgress() {
      return text_input.TextInput._instance.scribbleInProgress;
    }
    show() {
      if (!this.attached) dart.assertFailed(null, I[9], 1353, 12, "attached");
      text_input.TextInput._instance[_show]();
    }
    requestAutofill() {
      if (!this.attached) dart.assertFailed(null, I[9], 1366, 12, "attached");
      text_input.TextInput._instance[_requestAutofill]();
    }
    updateConfig(configuration) {
      if (!this.attached) dart.assertFailed(null, I[9], 1373, 12, "attached");
      text_input.TextInput._instance[_updateConfig](configuration);
    }
    setEditingState(value) {
      if (!this.attached) dart.assertFailed(null, I[9], 1380, 12, "attached");
      text_input.TextInput._instance[_setEditingState](value);
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
      if (!dart.equals(editableBoxSize, this[_cachedSize]) || !dart.equals(transform, this[_cachedTransform])) {
        this[_cachedSize] = editableBoxSize;
        this[_cachedTransform] = transform;
        text_input.TextInput._instance[_setEditableSizeAndTransform](editableBoxSize, transform);
      }
    }
    setComposingRect(rect) {
      if (dart.equals(rect, this[_cachedRect])) {
        return;
      }
      this[_cachedRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[59] || CT.C59);
      text_input.TextInput._instance[_setComposingTextRect](validRect);
    }
    setCaretRect(rect) {
      if (dart.equals(rect, this[_cachedCaretRect])) {
        return;
      }
      this[_cachedCaretRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[59] || CT.C59);
      text_input.TextInput._instance[_setCaretRect](validRect);
    }
    setSelectionRects(selectionRects) {
      if (!collections.listEquals(T$.SelectionRect(), this[_cachedSelectionRects], selectionRects)) {
        this[_cachedSelectionRects] = selectionRects;
        text_input.TextInput._instance[_setSelectionRects](selectionRects);
      }
    }
    setStyle(opts) {
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      if (!this.attached) dart.assertFailed(null, I[9], 1452, 12, "attached");
      text_input.TextInput._instance[_setStyle]({fontFamily: fontFamily, fontSize: fontSize, fontWeight: fontWeight, textDirection: textDirection, textAlign: textAlign});
    }
    close() {
      if (this.attached) {
        text_input.TextInput._instance[_clearClient]();
      }
      if (!!this.attached) dart.assertFailed(null, I[9], 1471, 12, "!attached");
    }
    connectionClosedReceived() {
      text_input.TextInput._instance[_currentConnection] = null;
      if (!!this.attached) dart.assertFailed(null, I[9], 1479, 12, "!attached");
    }
  };
  (text_input.TextInputConnection.__ = function(_client) {
    let t$3614;
    this[_cachedSize] = null;
    this[_cachedTransform] = null;
    this[_cachedRect] = null;
    this[_cachedCaretRect] = null;
    this[_cachedSelectionRects] = G.JSArrayOfSelectionRect().of([]);
    this[_client$] = _client;
    this[_id] = (t$3614 = text_input.TextInputConnection._nextId, text_input.TextInputConnection._nextId = dart.notNull(t$3614) + 1, t$3614);
    ;
  }).prototype = text_input.TextInputConnection.prototype;
  dart.addTypeTests(text_input.TextInputConnection);
  dart.addRtiResources(text_input.TextInputConnection, ["flutter__src__services__text_input|TextInputConnection"]);
  dart.addTypeCaches(text_input.TextInputConnection);
  dart.setMethodSignature(text_input.TextInputConnection, () => dart.global.Object.setPrototypeOf({
    show: T$.VoidTovoid(),
    requestAutofill: T$.VoidTovoid(),
    updateConfig: T$.TextInputConfigurationTovoid(),
    setEditingState: T$.TextEditingValueTovoid(),
    setEditableSizeAndTransform: T$.SizeAndMatrix4Tovoid(),
    setComposingRect: T$.RectTovoid(),
    setCaretRect: T$.RectTovoid(),
    setSelectionRects: T$.ListOfSelectionRectTovoid(),
    setStyle: T$.__Tovoid$1(),
    close: T$.VoidTovoid(),
    connectionClosedReceived: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputConnection))));
  dart.setStaticMethodSignature(text_input.TextInputConnection, () => ['debugResetId']);
  dart.setGetterSignature(text_input.TextInputConnection, () => dart.global.Object.setPrototypeOf({
    attached: T$.bool(),
    scribbleInProgress: T$.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_input.TextInputConnection))));
  dart.setLibraryUri(text_input.TextInputConnection, I[7]);
  dart.setFieldSignature(text_input.TextInputConnection, () => dart.global.Object.setPrototypeOf({
    [_cachedSize]: {type: T$.SizeN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_cachedTransform]: {type: T$.Matrix4N(), isConst: false, isFinal: false, libraryUri: I[10]},
    [_cachedRect]: {type: T$.RectN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_cachedCaretRect]: {type: T$.RectN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_cachedSelectionRects]: {type: T$.ListOfSelectionRect(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_id]: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_client$]: {type: T$.TextInputClient(), isConst: false, isFinal: true, libraryUri: I[7]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.TextInputConnection))));
  dart.setStaticFieldSignature(text_input.TextInputConnection, () => ['_nextId']);
  dart.defineLazy(text_input.TextInputConnection, {
    /*text_input.TextInputConnection._nextId*/get _nextId() {
      return 1;
    },
    set _nextId(value) {}
  }, false);
  var _currentControl = dart.privateName(text_input, "_currentControl");
  var _inputControls = dart.privateName(text_input, "_inputControls");
  var __TextInput__channel = dart.privateName(text_input, "_#TextInput#_channel");
  var __TextInput__currentConfiguration = dart.privateName(text_input, "_#TextInput#_currentConfiguration");
  var _scribbleClients = dart.privateName(text_input, "_scribbleClients");
  var _scribbleInProgress = dart.privateName(text_input, "_scribbleInProgress");
  var _hidePending = dart.privateName(text_input, "_hidePending");
  var _channel = dart.privateName(text_input, "_channel");
  var _loudlyHandleTextInputInvocation = dart.privateName(text_input, "_loudlyHandleTextInputInvocation");
  var _attach = dart.privateName(text_input, "_attach");
  var _currentConfiguration = dart.privateName(text_input, "_currentConfiguration");
  var _setClient = dart.privateName(text_input, "_setClient");
  var _handleTextInputInvocation = dart.privateName(text_input, "_handleTextInputInvocation");
  var _updateEditingValue = dart.privateName(text_input, "_updateEditingValue");
  var _hide = dart.privateName(text_input, "_hide");
  var _scheduleHide = dart.privateName(text_input, "_scheduleHide");
  text_input.TextInput = class TextInput extends core.Object {
    static ['_#_#tearOff']() {
      return new text_input.TextInput.__();
    }
    static setChannel(newChannel) {
      if (!dart.fn(() => {
        let t$3614;
        text_input.TextInput._instance[_channel] = (t$3614 = newChannel, (() => {
          t$3614.setMethodCallHandler(dart.bind(text_input.TextInput._instance, _loudlyHandleTextInputInvocation));
          return t$3614;
        })());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[9], 1603, 12, "() {\r\n      _instance._channel = newChannel..setMethodCallHandler(_instance._loudlyHandleTextInputInvocation);\r\n      return true;\r\n    }()");
    }
    static _addInputControl(control) {
      if (!dart.equals(control, text_input._PlatformTextInputControl.instance)) {
        text_input.TextInput._instance[_inputControls].add(control);
      }
    }
    static _removeInputControl(control) {
      if (!dart.equals(control, text_input._PlatformTextInputControl.instance)) {
        text_input.TextInput._instance[_inputControls].remove(control);
      }
    }
    static setInputControl(newControl) {
      let t$3614, t$3614$;
      let oldControl = text_input.TextInput._instance[_currentControl];
      if (dart.equals(newControl, oldControl)) {
        return;
      }
      if (newControl != null) {
        text_input.TextInput._addInputControl(newControl);
      }
      if (oldControl != null) {
        text_input.TextInput._removeInputControl(oldControl);
      }
      text_input.TextInput._instance[_currentControl] = newControl;
      let client = (t$3614 = text_input.TextInput._instance[_currentConnection], t$3614 == null ? null : t$3614[_client$]);
      t$3614$ = client;
      t$3614$ == null ? null : t$3614$.didChangeInputControl(oldControl, newControl);
    }
    static restorePlatformInputControl() {
      text_input.TextInput.setInputControl(text_input._PlatformTextInputControl.instance);
    }
    static ensureInitialized() {
      text_input.TextInput._instance;
    }
    static attach(client, configuration) {
      let connection = new text_input.TextInputConnection.__(client);
      text_input.TextInput._instance[_attach](connection, configuration);
      return connection;
    }
    [_attach](connection, configuration) {
      if (!text_input.TextInput._debugEnsureInputActionWorksOnPlatform(configuration.inputAction)) dart.assertFailed(null, I[9], 1720, 12, "_debugEnsureInputActionWorksOnPlatform(configuration.inputAction)");
      this[_currentConnection] = connection;
      this[_currentConfiguration] = configuration;
      this[_setClient](connection[_client$], configuration);
    }
    static _debugEnsureInputActionWorksOnPlatform(inputAction) {
      if (!dart.fn(() => {
        {
          return true;
        }
        if (io.Platform.isIOS) {
          if (!text_input.TextInput._iOSSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on iOS.", I[9], 1734, 11, "_iOSSupportedInputActions.contains(inputAction)");
        } else if (io.Platform.isAndroid) {
          if (!text_input.TextInput._androidSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on Android.", I[9], 1739, 11, "_androidSupportedInputActions.contains(inputAction)");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[9], 1727, 12, "() {\r\n      if (kIsWeb) {\r\n        // TODO(flutterweb): what makes sense here?\r\n        return true;\r\n      }\r\n      if (Platform.isIOS) {\r\n        assert(\r\n          _iOSSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on iOS.',\r\n        );\r\n      } else if (Platform.isAndroid) {\r\n        assert(\r\n          _androidSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on Android.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    get [_channel]() {
      let t$3614;
      t$3614 = this[__TextInput__channel];
      return t$3614 == null ? dart.throw(new _internal.LateError.fieldNI("_channel")) : t$3614;
    }
    set [_channel](_channel$35param) {
      this[__TextInput__channel] = _channel$35param;
    }
    get [_currentConfiguration]() {
      let t$3614;
      t$3614 = this[__TextInput__currentConfiguration];
      return t$3614 == null ? dart.throw(new _internal.LateError.fieldNI("_currentConfiguration")) : t$3614;
    }
    set [_currentConfiguration](_currentConfiguration$35param) {
      this[__TextInput__currentConfiguration] = _currentConfiguration$35param;
    }
    static get scribbleClients() {
      return text_input.TextInput._instance[_scribbleClients];
    }
    get scribbleInProgress() {
      return this[_scribbleInProgress];
    }
    [_loudlyHandleTextInputInvocation](call) {
      return async.async(T$.dynamic(), (function* _loudlyHandleTextInputInvocation() {
        try {
          return yield this[_handleTextInputInvocation](call);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during method call " + call.method), informationCollector: dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfMethodCall()).new("call", call, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T$.VoidToListOfDiagnosticsNode())}));
            dart.rethrow(t$36$35e);
          } else
            throw t$36$35e;
        }
      }).bind(this));
    }
    [_handleTextInputInvocation](methodCall) {
      return async.async(T$.dynamic(), (function* _handleTextInputInvocation() {
        let t$3615, t$3616;
        let method = methodCall.method;
        if (method === "TextInputClient.focusElement") {
          let args = T$.List()[_as](methodCall.arguments);
          t$3615 = this[_scribbleClients][$_get](args[$_get](0));
          t$3615 == null ? null : t$3615.onScribbleFocus(new ui.Offset.new(T$.num()[_as](args[$_get](1))[$toDouble](), T$.num()[_as](args[$_get](2))[$toDouble]()));
          return;
        } else if (method === "TextInputClient.requestElementsInRect") {
          let args = T$.List()[_as](methodCall.arguments)[$cast](T$.num())[$map](T$.double(), dart.fn(value => value[$toDouble](), T$.numTodouble()))[$toList]();
          return this[_scribbleClients][$keys][$where](dart.fn(elementIdentifier => {
            let t$3615, t$3615$, t$3615$0, t$3615$1;
            let rect = new ui.Rect.fromLTWH(args[$_get](0), args[$_get](1), args[$_get](2), args[$_get](3));
            if (!dart.test((t$3615$ = (t$3615 = this[_scribbleClients][$_get](elementIdentifier), t$3615 == null ? null : t$3615.isInScribbleRect(rect)), t$3615$ == null ? false : t$3615$))) {
              return false;
            }
            let bounds = (t$3615$1 = (t$3615$0 = this[_scribbleClients][$_get](elementIdentifier), t$3615$0 == null ? null : t$3615$0.bounds), t$3615$1 == null ? ui.Rect.zero : t$3615$1);
            return !(dart.equals(bounds, ui.Rect.zero) || bounds.hasNaN || bounds.isInfinite);
          }, T$.StringTobool()))[$map](T$.List(), dart.fn(elementIdentifier => {
            let bounds = dart.nullCheck(this[_scribbleClients][$_get](elementIdentifier)).bounds;
            return (() => {
              let t$3615 = [elementIdentifier];
              t$3615[$addAll]([bounds.left, bounds.top, bounds.width, bounds.height]);
              return t$3615;
            })();
          }, T$.StringToList()))[$toList]();
        } else if (method === "TextInputClient.scribbleInteractionBegan") {
          this[_scribbleInProgress] = true;
          return;
        } else if (method === "TextInputClient.scribbleInteractionFinished") {
          this[_scribbleInProgress] = false;
          return;
        }
        if (this[_currentConnection] == null) {
          return;
        }
        if (method === "TextInputClient.requestExistingInputState") {
          this[_attach](dart.nullCheck(this[_currentConnection]), this[_currentConfiguration]);
          let editingValue = dart.nullCheck(this[_currentConnection])[_client$].currentTextEditingValue;
          if (editingValue != null) {
            this[_setEditingState](editingValue);
          }
          return;
        }
        let args = T$.List()[_as](methodCall.arguments);
        if (method === "TextInputClient.updateEditingStateWithTag") {
          let client = dart.nullCheck(this[_currentConnection])[_client$];
          let scope = client.currentAutofillScope;
          let editingValue = T$.MapOfString$dynamic()[_as](args[$_get](1));
          for (let tag of editingValue[$keys]) {
            let textEditingValue = text_input.TextEditingValue.fromJSON(T$.MapOfString$dynamic()[_as](editingValue[$_get](tag)));
            let client = (t$3616 = scope, t$3616 == null ? null : t$3616.getAutofillClient(tag));
            if (client != null && client.textInputConfiguration.autofillConfiguration.enabled) {
              client.autofill(textEditingValue);
            }
          }
          return;
        }
        let client = T$.int()[_as](args[$_get](0));
        if (client !== dart.nullCheck(this[_currentConnection])[_id]) {
          let debugAllowAnyway = false;
          if (!dart.fn(() => {
            if (client === -1) {
              debugAllowAnyway = true;
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[9], 1847, 14, "() {\r\n        // In debug builds we allow \"-1\" as a magical client ID that ignores\r\n        // this verification step so that tests can always get through, even\r\n        // when they are not mocking the engine side of text input.\r\n        if (client == -1) {\r\n          debugAllowAnyway = true;\r\n        }\r\n        return true;\r\n      }()");
          if (!debugAllowAnyway) {
            return;
          }
        }
        switch (method) {
          case "TextInputClient.updateEditingState":
            {
              let value = text_input.TextEditingValue.fromJSON(T$.MapOfString$dynamic()[_as](args[$_get](1)));
              text_input.TextInput._instance[_updateEditingValue](value, {exclude: text_input._PlatformTextInputControl.instance});
              break;
            }
          case "TextInputClient.updateEditingStateWithDeltas":
            {
              if (!T$.DeltaTextInputClient()[_is](dart.nullCheck(this[_currentConnection])[_client$])) dart.assertFailed("You must be using a DeltaTextInputClient if TextInputConfiguration.enableDeltaModel is set to true", I[9], 1866, 16, "_currentConnection!._client is DeltaTextInputClient");
              let deltas = G.JSArrayOfTextEditingDelta().of([]);
              let encoded = T$.MapOfString$dynamic()[_as](args[$_get](1));
              for (let encodedDelta of T$.List()[_as](encoded[$_get]("deltas"))) {
                let delta = text_editing_delta.TextEditingDelta.fromJSON(T$.MapOfString$dynamic()[_as](encodedDelta));
                deltas[$add](delta);
              }
              T$.DeltaTextInputClient()[_as](dart.nullCheck(this[_currentConnection])[_client$]).updateEditingValueWithDeltas(deltas);
              break;
            }
          case "TextInputClient.performAction":
            {
              if (T$.String()[_as](args[$_get](1)) === "TextInputAction.commitContent") {
                let content = new keyboard_inserted_content.KeyboardInsertedContent.fromJson(T$.MapOfString$dynamic()[_as](args[$_get](2)));
                dart.nullCheck(this[_currentConnection])[_client$].insertContent(content);
              } else {
                dart.nullCheck(this[_currentConnection])[_client$].performAction(text_input._toTextInputAction(T$.String()[_as](args[$_get](1))));
              }
              break;
            }
          case "TextInputClient.performSelectors":
            {
              let selectors = T$.List()[_as](args[$_get](1))[$cast](T$.String());
              selectors[$forEach](dart.bind(dart.nullCheck(this[_currentConnection])[_client$], 'performSelector'));
              break;
            }
          case "TextInputClient.performPrivateCommand":
            {
              let firstArg = T$.MapOfString$dynamic()[_as](args[$_get](1));
              dart.nullCheck(this[_currentConnection])[_client$].performPrivateCommand(T$.String()[_as](firstArg[$_get]("action")), firstArg[$_get]("data") == null ? new (G.IdentityMapOfString$dynamic()).new() : T$.MapOfString$dynamic()[_as](firstArg[$_get]("data")));
              break;
            }
          case "TextInputClient.updateFloatingCursor":
            {
              dart.nullCheck(this[_currentConnection])[_client$].updateFloatingCursor(text_input._toTextPoint(text_input._toTextCursorAction(T$.String()[_as](args[$_get](1))), T$.MapOfString$dynamic()[_as](args[$_get](2))));
              break;
            }
          case "TextInputClient.onConnectionClosed":
            {
              dart.nullCheck(this[_currentConnection])[_client$].connectionClosed();
              break;
            }
          case "TextInputClient.showAutocorrectionPromptRect":
            {
              dart.nullCheck(this[_currentConnection])[_client$].showAutocorrectionPromptRect(T$.int()[_as](args[$_get](1)), T$.int()[_as](args[$_get](2)));
              break;
            }
          case "TextInputClient.showToolbar":
            {
              dart.nullCheck(this[_currentConnection])[_client$].showToolbar();
              break;
            }
          case "TextInputClient.insertTextPlaceholder":
            {
              dart.nullCheck(this[_currentConnection])[_client$].insertTextPlaceholder(new ui.Size.new(T$.num()[_as](args[$_get](1))[$toDouble](), T$.num()[_as](args[$_get](2))[$toDouble]()));
              break;
            }
          case "TextInputClient.removeTextPlaceholder":
            {
              dart.nullCheck(this[_currentConnection])[_client$].removeTextPlaceholder();
              break;
            }
          default:
            {
              dart.throw(new message_codec.MissingPluginException.new());
            }
        }
      }).bind(this));
    }
    [_scheduleHide]() {
      if (this[_hidePending]) {
        return;
      }
      this[_hidePending] = true;
      async.scheduleMicrotask(dart.fn(() => {
        this[_hidePending] = false;
        if (this[_currentConnection] == null) {
          this[_hide]();
        }
      }, T$.VoidTovoid()));
    }
    [_setClient](client, configuration) {
      for (let control of this[_inputControls]) {
        control.attach(client, configuration);
      }
    }
    [_clearClient]() {
      let client = dart.nullCheck(this[_currentConnection])[_client$];
      for (let control of this[_inputControls]) {
        control.detach(client);
      }
      this[_currentConnection] = null;
      this[_scheduleHide]();
    }
    [_updateConfig](configuration) {
      for (let control of this[_inputControls]) {
        control.updateConfig(configuration);
      }
    }
    [_setEditingState](value) {
      for (let control of this[_inputControls]) {
        control.setEditingState(value);
      }
    }
    [_show]() {
      for (let control of this[_inputControls]) {
        control.show();
      }
    }
    [_hide]() {
      for (let control of this[_inputControls]) {
        control.hide();
      }
    }
    [_setEditableSizeAndTransform](editableBoxSize, transform) {
      for (let control of this[_inputControls]) {
        control.setEditableSizeAndTransform(editableBoxSize, transform);
      }
    }
    [_setComposingTextRect](rect) {
      for (let control of this[_inputControls]) {
        control.setComposingRect(rect);
      }
    }
    [_setCaretRect](rect) {
      for (let control of this[_inputControls]) {
        control.setCaretRect(rect);
      }
    }
    [_setSelectionRects](selectionRects) {
      for (let control of this[_inputControls]) {
        control.setSelectionRects(selectionRects);
      }
    }
    [_setStyle](opts) {
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      for (let control of this[_inputControls]) {
        control.setStyle({fontFamily: fontFamily, fontSize: fontSize, fontWeight: fontWeight, textDirection: textDirection, textAlign: textAlign});
      }
    }
    [_requestAutofill]() {
      for (let control of this[_inputControls]) {
        control.requestAutofill();
      }
    }
    [_updateEditingValue](value, opts) {
      let exclude = opts && 'exclude' in opts ? opts.exclude : null;
      if (this[_currentConnection] == null) {
        return;
      }
      for (let control of text_input.TextInput._instance[_inputControls]) {
        if (!dart.equals(control, exclude)) {
          control.setEditingState(value);
        }
      }
      dart.nullCheck(text_input.TextInput._instance[_currentConnection])[_client$].updateEditingValue(value);
    }
    static updateEditingValue(value) {
      text_input.TextInput._instance[_updateEditingValue](value, {exclude: text_input.TextInput._instance[_currentControl]});
    }
    static finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
      for (let control of text_input.TextInput._instance[_inputControls]) {
        control.finishAutofillContext({shouldSave: shouldSave});
      }
    }
    static registerScribbleElement(elementIdentifier, scribbleClient) {
      text_input.TextInput._instance[_scribbleClients][$_set](elementIdentifier, scribbleClient);
    }
    static unregisterScribbleElement(elementIdentifier) {
      text_input.TextInput._instance[_scribbleClients][$remove](elementIdentifier);
    }
  };
  (text_input.TextInput.__ = function() {
    this[_currentControl] = text_input._PlatformTextInputControl.instance;
    this[_inputControls] = G.LinkedHashSetOfTextInputControl().from([text_input._PlatformTextInputControl.instance]);
    this[__TextInput__channel] = null;
    this[_currentConnection] = null;
    this[__TextInput__currentConfiguration] = null;
    this[_scribbleClients] = new (G.IdentityMapOfString$ScribbleClient()).new();
    this[_scribbleInProgress] = false;
    this[_hidePending] = false;
    this[_channel] = system_channels.SystemChannels.textInput;
    this[_channel].setMethodCallHandler(dart.bind(this, _loudlyHandleTextInputInvocation));
  }).prototype = text_input.TextInput.prototype;
  dart.addTypeTests(text_input.TextInput);
  dart.addRtiResources(text_input.TextInput, ["flutter__src__services__text_input|TextInput"]);
  dart.addTypeCaches(text_input.TextInput);
  dart.setMethodSignature(text_input.TextInput, () => dart.global.Object.setPrototypeOf({
    [_attach]: T$.TextInputConnectionAndTextInputConfigurationTovoid(),
    [_loudlyHandleTextInputInvocation]: T$.MethodCallToFuture(),
    [_handleTextInputInvocation]: T$.MethodCallToFuture(),
    [_scheduleHide]: T$.VoidTovoid(),
    [_setClient]: T$.TextInputClientAndTextInputConfigurationTovoid(),
    [_clearClient]: T$.VoidTovoid(),
    [_updateConfig]: T$.TextInputConfigurationTovoid(),
    [_setEditingState]: T$.TextEditingValueTovoid(),
    [_show]: T$.VoidTovoid(),
    [_hide]: T$.VoidTovoid(),
    [_setEditableSizeAndTransform]: T$.SizeAndMatrix4Tovoid(),
    [_setComposingTextRect]: T$.RectTovoid(),
    [_setCaretRect]: T$.RectTovoid(),
    [_setSelectionRects]: T$.ListOfSelectionRectTovoid(),
    [_setStyle]: T$.__Tovoid$1(),
    [_requestAutofill]: T$.VoidTovoid(),
    [_updateEditingValue]: T$.TextEditingValue__Tovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInput))));
  dart.setStaticMethodSignature(text_input.TextInput, () => ['setChannel', '_addInputControl', '_removeInputControl', 'setInputControl', 'restorePlatformInputControl', 'ensureInitialized', 'attach', '_debugEnsureInputActionWorksOnPlatform', 'updateEditingValue', 'finishAutofillContext', 'registerScribbleElement', 'unregisterScribbleElement']);
  dart.setGetterSignature(text_input.TextInput, () => dart.global.Object.setPrototypeOf({
    [_channel]: T$.MethodChannel(),
    [_currentConfiguration]: T$.TextInputConfiguration(),
    scribbleInProgress: T$.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_input.TextInput))));
  dart.setSetterSignature(text_input.TextInput, () => dart.global.Object.setPrototypeOf({
    [_channel]: T$.MethodChannel(),
    [_currentConfiguration]: T$.TextInputConfiguration()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(text_input.TextInput))));
  dart.setStaticGetterSignature(text_input.TextInput, () => ['scribbleClients']);
  dart.setLibraryUri(text_input.TextInput, I[7]);
  dart.setFieldSignature(text_input.TextInput, () => dart.global.Object.setPrototypeOf({
    [_currentControl]: {type: T$.TextInputControlN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_inputControls]: {type: T$.SetOfTextInputControl(), isConst: false, isFinal: true, libraryUri: I[2]},
    [__TextInput__channel]: {type: T$.MethodChannelN(), isConst: false, isFinal: false, libraryUri: I[11]},
    [_currentConnection]: {type: T$.TextInputConnectionN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [__TextInput__currentConfiguration]: {type: T$.TextInputConfigurationN(), isConst: false, isFinal: false, libraryUri: I[7]},
    [_scribbleClients]: {type: T$.MapOfString$ScribbleClient(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_scribbleInProgress]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_hidePending]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_input.TextInput))));
  dart.setStaticFieldSignature(text_input.TextInput, () => ['_instance', '_androidSupportedInputActions', '_iOSSupportedInputActions']);
  dart.defineLazy(text_input.TextInput, {
    /*text_input.TextInput._instance*/get _instance() {
      return new text_input.TextInput.__();
    },
    /*text_input.TextInput._androidSupportedInputActions*/get _androidSupportedInputActions() {
      return C[60] || CT.C60;
    },
    /*text_input.TextInput._iOSSupportedInputActions*/get _iOSSupportedInputActions() {
      return C[61] || CT.C61;
    }
  }, false);
  text_input.TextInputControl = class TextInputControl extends core.Object {};
  text_input.TextInputControl[dart.mixinOn] = Object => class TextInputControl extends Object {
    attach(client, configuration) {
    }
    detach(client) {
    }
    show() {
    }
    hide() {
    }
    updateConfig(configuration) {
    }
    setEditingState(value) {
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
    }
    setComposingRect(rect) {
    }
    setCaretRect(rect) {
    }
    setSelectionRects(selectionRects) {
    }
    setStyle(opts) {
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    }
    requestAutofill() {
    }
    finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
    }
  };
  (text_input.TextInputControl[dart.mixinNew] = function() {
  }).prototype = text_input.TextInputControl.prototype;
  dart.addTypeTests(text_input.TextInputControl);
  dart.addRtiResources(text_input.TextInputControl, ["flutter__src__services__text_input|TextInputControl"]);
  dart.addTypeCaches(text_input.TextInputControl);
  dart.setMethodSignature(text_input.TextInputControl, () => dart.global.Object.setPrototypeOf({
    attach: T$.TextInputClientAndTextInputConfigurationTovoid(),
    detach: T$.TextInputClientTovoid(),
    show: T$.VoidTovoid(),
    hide: T$.VoidTovoid(),
    updateConfig: T$.TextInputConfigurationTovoid(),
    setEditingState: T$.TextEditingValueTovoid(),
    setEditableSizeAndTransform: T$.SizeAndMatrix4Tovoid(),
    setComposingRect: T$.RectTovoid(),
    setCaretRect: T$.RectTovoid(),
    setSelectionRects: T$.ListOfSelectionRectTovoid(),
    setStyle: T$.__Tovoid$1(),
    requestAutofill: T$.VoidTovoid(),
    finishAutofillContext: T$.__Tovoid$2()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_input.TextInputControl))));
  dart.setLibraryUri(text_input.TextInputControl, I[7]);
  var _configurationToJson = dart.privateName(text_input, "_configurationToJson");
  const Object_TextInputControl$36 = class Object_TextInputControl extends core.Object {};
  (Object_TextInputControl$36.new = function() {
  }).prototype = Object_TextInputControl$36.prototype;
  dart.applyMixin(Object_TextInputControl$36, text_input.TextInputControl);
  text_input._PlatformTextInputControl = class _PlatformTextInputControl extends Object_TextInputControl$36 {
    static ['_#_#tearOff']() {
      return new text_input._PlatformTextInputControl.__();
    }
    get [_channel]() {
      return text_input.TextInput._instance[_channel];
    }
    [_configurationToJson](configuration) {
      let json = configuration.toJson();
      if (!dart.equals(text_input.TextInput._instance[_currentControl], text_input._PlatformTextInputControl.instance)) {
        let none = text_input.TextInputType.none.toJson();
        {
          none[$_set]("isMultiline", dart.equals(configuration.inputType, text_input.TextInputType.multiline));
        }
        json[$_set]("inputType", none);
      }
      return json;
    }
    attach(client, configuration) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setClient", G.JSArrayOfObject().of([dart.nullCheck(text_input.TextInput._instance[_currentConnection])[_id], this[_configurationToJson](configuration)]));
    }
    detach(client) {
      this[_channel].invokeMethod(T$.void(), "TextInput.clearClient");
    }
    updateConfig(configuration) {
      this[_channel].invokeMethod(T$.void(), "TextInput.updateConfig", this[_configurationToJson](configuration));
    }
    setEditingState(value) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setEditingState", value.toJSON());
    }
    show() {
      this[_channel].invokeMethod(T$.void(), "TextInput.show");
    }
    hide() {
      this[_channel].invokeMethod(T$.void(), "TextInput.hide");
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setEditableSizeAndTransform", new (G.IdentityMapOfString$dynamic()).from(["width", editableBoxSize.width, "height", editableBoxSize.height, "transform", transform.storage]));
    }
    setComposingRect(rect) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setMarkedTextRect", new (G.IdentityMapOfString$dynamic()).from(["width", rect.width, "height", rect.height, "x", rect.left, "y", rect.top]));
    }
    setCaretRect(rect) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setCaretRect", new (G.IdentityMapOfString$dynamic()).from(["width", rect.width, "height", rect.height, "x", rect.left, "y", rect.top]));
    }
    setSelectionRects(selectionRects) {
      this[_channel].invokeMethod(T$.void(), "TextInput.setSelectionRects", selectionRects[$map](T$.ListOfnum(), dart.fn(rect => G.JSArrayOfnum().of([rect.bounds.left, rect.bounds.top, rect.bounds.width, rect.bounds.height, rect.position, rect.direction.index]), T$.SelectionRectToListOfnum()))[$toList]());
    }
    setStyle(opts) {
      let t$3616;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      this[_channel].invokeMethod(T$.void(), "TextInput.setStyle", new (G.IdentityMapOfString$dynamic()).from(["fontFamily", fontFamily, "fontSize", fontSize, "fontWeightIndex", (t$3616 = fontWeight, t$3616 == null ? null : t$3616.index), "textAlignIndex", textAlign.index, "textDirectionIndex", textDirection.index]));
    }
    requestAutofill() {
      this[_channel].invokeMethod(T$.void(), "TextInput.requestAutofill");
    }
    finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
      this[_channel].invokeMethod(T$.void(), "TextInput.finishAutofillContext", shouldSave);
    }
  };
  (text_input._PlatformTextInputControl.__ = function() {
    ;
  }).prototype = text_input._PlatformTextInputControl.prototype;
  dart.addTypeTests(text_input._PlatformTextInputControl);
  dart.addRtiResources(text_input._PlatformTextInputControl, ["flutter__src__services__text_input|_PlatformTextInputControl"]);
  dart.addTypeCaches(text_input._PlatformTextInputControl);
  dart.setMethodSignature(text_input._PlatformTextInputControl, () => dart.global.Object.setPrototypeOf({[_configurationToJson]: T$.TextInputConfigurationToMapOfString$dynamic()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_input._PlatformTextInputControl))));
  dart.setGetterSignature(text_input._PlatformTextInputControl, () => dart.global.Object.setPrototypeOf({[_channel]: T$.MethodChannel()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_input._PlatformTextInputControl))));
  dart.setLibraryUri(text_input._PlatformTextInputControl, I[7]);
  dart.setStaticFieldSignature(text_input._PlatformTextInputControl, () => ['instance']);
  dart.defineLazy(text_input._PlatformTextInputControl, {
    /*text_input._PlatformTextInputControl.instance*/get instance() {
      return new text_input._PlatformTextInputControl.__();
    }
  }, false);
  text_input._toTextAffinity = function _toTextAffinity$(affinity) {
    switch (affinity) {
      case "TextAffinity.downstream":
        {
          return ui.TextAffinity.downstream;
        }
      case "TextAffinity.upstream":
        {
          return ui.TextAffinity.upstream;
        }
    }
    return null;
  };
  text_input._toTextInputAction = function _toTextInputAction(action) {
    switch (action) {
      case "TextInputAction.none":
        {
          return text_input.TextInputAction.none;
        }
      case "TextInputAction.unspecified":
        {
          return text_input.TextInputAction.unspecified;
        }
      case "TextInputAction.go":
        {
          return text_input.TextInputAction.go;
        }
      case "TextInputAction.search":
        {
          return text_input.TextInputAction.search;
        }
      case "TextInputAction.send":
        {
          return text_input.TextInputAction.send;
        }
      case "TextInputAction.next":
        {
          return text_input.TextInputAction.next;
        }
      case "TextInputAction.previous":
        {
          return text_input.TextInputAction.previous;
        }
      case "TextInputAction.continueAction":
        {
          return text_input.TextInputAction.continueAction;
        }
      case "TextInputAction.join":
        {
          return text_input.TextInputAction.join;
        }
      case "TextInputAction.route":
        {
          return text_input.TextInputAction.route;
        }
      case "TextInputAction.emergencyCall":
        {
          return text_input.TextInputAction.emergencyCall;
        }
      case "TextInputAction.done":
        {
          return text_input.TextInputAction.done;
        }
      case "TextInputAction.newline":
        {
          return text_input.TextInputAction.newline;
        }
    }
    dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text input action: " + action)])));
  };
  text_input._toTextCursorAction = function _toTextCursorAction(state) {
    switch (state) {
      case "FloatingCursorDragState.start":
        {
          return text_input.FloatingCursorDragState.Start;
        }
      case "FloatingCursorDragState.update":
        {
          return text_input.FloatingCursorDragState.Update;
        }
      case "FloatingCursorDragState.end":
        {
          return text_input.FloatingCursorDragState.End;
        }
    }
    dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text cursor action: " + state)])));
  };
  text_input._toTextPoint = function _toTextPoint(state, encoded) {
    if (!(encoded[$_get]("X") != null)) dart.assertFailed("You must provide a value for the horizontal location of the floating cursor.", I[9], 1528, 10, "encoded['X'] != null");
    if (!(encoded[$_get]("Y") != null)) dart.assertFailed("You must provide a value for the vertical location of the floating cursor.", I[9], 1529, 10, "encoded['Y'] != null");
    let offset = state === text_input.FloatingCursorDragState.Update ? new ui.Offset.new(T$.num()[_as](encoded[$_get]("X"))[$toDouble](), T$.num()[_as](encoded[$_get]("Y"))[$toDouble]()) : ui.Offset.zero;
    return new text_input.RawFloatingCursorPoint.new({offset: offset, state: state});
  };
  var _rootBucket = dart.privateName(restoration, "_rootBucket");
  var _pendingRootBucket = dart.privateName(restoration, "_pendingRootBucket");
  var _rootBucketIsValid = dart.privateName(restoration, "_rootBucketIsValid");
  var _isReplacing = dart.privateName(restoration, "_isReplacing");
  var _debugDoingUpdate = dart.privateName(restoration, "_debugDoingUpdate");
  var _serializationScheduled = dart.privateName(restoration, "_serializationScheduled");
  var _bucketsNeedingSerialization = dart.privateName(restoration, "_bucketsNeedingSerialization");
  var _methodHandler = dart.privateName(restoration, "_methodHandler");
  var _getRootBucketFromEngine = dart.privateName(restoration, "_getRootBucketFromEngine");
  var _parseAndHandleRestorationUpdateFromEngine = dart.privateName(restoration, "_parseAndHandleRestorationUpdateFromEngine");
  var _decodeRestorationData = dart.privateName(restoration, "_decodeRestorationData");
  var _encodeRestorationData = dart.privateName(restoration, "_encodeRestorationData");
  var _manager = dart.privateName(restoration, "_manager");
  var _doSerialization = dart.privateName(restoration, "_doSerialization");
  var _rawData = dart.privateName(restoration, "_rawData");
  restoration.RestorationManager = class RestorationManager extends change_notifier.ChangeNotifier {
    static ['_#new#tearOff']() {
      return new restoration.RestorationManager.new();
    }
    initChannels() {
      system_channels.SystemChannels.restoration.setMethodCallHandler(dart.bind(this, _methodHandler));
    }
    get rootBucket() {
      if (this[_rootBucketIsValid]) {
        return new (G.SynchronousFutureOfRestorationBucketN()).new(this[_rootBucket]);
      }
      if (this[_pendingRootBucket] == null) {
        this[_pendingRootBucket] = G.CompleterOfRestorationBucketN().new();
        this[_getRootBucketFromEngine]();
      }
      return dart.nullCheck(this[_pendingRootBucket]).future;
    }
    get isReplacing() {
      return this[_isReplacing];
    }
    [_getRootBucketFromEngine]() {
      return async.async(T$.void(), (function* _getRootBucketFromEngine() {
        let config = (yield system_channels.SystemChannels.restoration.invokeMethod(T$.MapOfObjectN$ObjectN(), "get"));
        if (this[_pendingRootBucket] == null) {
          return;
        }
        if (!(this[_rootBucket] == null)) dart.assertFailed(null, I[12], 238, 12, "_rootBucket == null");
        this[_parseAndHandleRestorationUpdateFromEngine](config);
      }).bind(this));
    }
    [_parseAndHandleRestorationUpdateFromEngine](update) {
      this.handleRestorationUpdateFromEngine({enabled: update != null && T$.bool()[_as](dart.nullCheck(update[$_get]("enabled"))), data: update == null ? null : T$.Uint8ListN()[_as](update[$_get]("data"))});
    }
    handleRestorationUpdateFromEngine(opts) {
      let t$3616, t$3616$;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let data = opts && 'data' in opts ? opts.data : null;
      if (!(enabled || data == null)) dart.assertFailed(null, I[12], 265, 12, "enabled || data == null");
      this[_isReplacing] = this[_rootBucketIsValid] && enabled;
      if (this[_isReplacing]) {
        binding.SchedulerBinding.instance.addPostFrameCallback(dart.fn(_ => {
          this[_isReplacing] = false;
        }, T$.DurationTovoid()), {debugLabel: "RestorationManager.resetIsReplacing"});
      }
      let oldRoot = this[_rootBucket];
      this[_rootBucket] = enabled ? new restoration.RestorationBucket.root({manager: this, rawData: this[_decodeRestorationData](data)}) : null;
      this[_rootBucketIsValid] = true;
      if (!(this[_pendingRootBucket] == null || !dart.nullCheck(this[_pendingRootBucket]).isCompleted)) dart.assertFailed(null, I[12], 279, 12, "_pendingRootBucket == null || !_pendingRootBucket!.isCompleted");
      t$3616 = this[_pendingRootBucket];
      t$3616 == null ? null : t$3616.complete(this[_rootBucket]);
      this[_pendingRootBucket] = null;
      if (!dart.equals(this[_rootBucket], oldRoot)) {
        this.notifyListeners();
        t$3616$ = oldRoot;
        t$3616$ == null ? null : t$3616$.dispose();
      }
    }
    sendToEngine(encodedData) {
      return system_channels.SystemChannels.restoration.invokeMethod(T$.void(), "put", encodedData);
    }
    [_methodHandler](call) {
      return async.async(T$.void(), (function* _methodHandler() {
        switch (call.method) {
          case "push":
            {
              this[_parseAndHandleRestorationUpdateFromEngine](T$.MapOfObjectN$ObjectN()[_as](call.arguments));
              break;
            }
          default:
            {
              dart.throw(new core.UnimplementedError.new(call.method + " was invoked but isn't implemented by " + dart.str(dart.runtimeType(this))));
            }
        }
      }).bind(this));
    }
    [_decodeRestorationData](data) {
      if (data == null) {
        return null;
      }
      let encoded = data[$buffer][$asByteData](data[$offsetInBytes], data[$lengthInBytes]);
      return T$.MapNOfObjectN$ObjectN()[_as]((C[62] || CT.C62).decodeMessage(encoded));
    }
    [_encodeRestorationData](data) {
      let encoded = dart.nullCheck((C[62] || CT.C62).encodeMessage(data));
      return encoded[$buffer][$asUint8List](encoded[$offsetInBytes], encoded[$lengthInBytes]);
    }
    scheduleSerializationFor(bucket) {
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[12], 347, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[12], 348, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].add(bucket);
      if (!this[_serializationScheduled]) {
        this[_serializationScheduled] = true;
        binding.SchedulerBinding.instance.addPostFrameCallback(dart.fn(_ => this[_doSerialization](), T$.DurationTovoid()), {debugLabel: "RestorationManager.doSerialization"});
      }
    }
    unscheduleSerializationFor(bucket) {
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[12], 371, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[12], 372, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].remove(bucket);
    }
    [_doSerialization]() {
      if (!this[_serializationScheduled]) {
        return;
      }
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 380, 12, "() {\r\n      _debugDoingUpdate = true;\r\n      return true;\r\n    }()");
      this[_serializationScheduled] = false;
      for (let bucket of this[_bucketsNeedingSerialization]) {
        bucket.finalize();
      }
      this[_bucketsNeedingSerialization].clear();
      this.sendToEngine(this[_encodeRestorationData](dart.nullCheck(this[_rootBucket])[_rawData]));
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = false;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 392, 12, "() {\r\n      _debugDoingUpdate = false;\r\n      return true;\r\n    }()");
    }
    flushData() {
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[12], 416, 12, "!_debugDoingUpdate");
      if (binding.SchedulerBinding.instance.hasScheduledFrame) {
        return;
      }
      this[_doSerialization]();
      if (!!this[_serializationScheduled]) dart.assertFailed(null, I[12], 421, 12, "!_serializationScheduled");
    }
    dispose() {
      let t$3616;
      t$3616 = this[_rootBucket];
      t$3616 == null ? null : t$3616.dispose();
      super.dispose();
    }
  };
  (restoration.RestorationManager.new = function() {
    this[_rootBucket] = null;
    this[_pendingRootBucket] = null;
    this[_rootBucketIsValid] = false;
    this[_isReplacing] = false;
    this[_debugDoingUpdate] = false;
    this[_serializationScheduled] = false;
    this[_bucketsNeedingSerialization] = G.LinkedHashSetOfRestorationBucket().new();
    dart.global.Object.getPrototypeOf(restoration.RestorationManager).new.call(this);
    {
      change_notifier.ChangeNotifier.maybeDispatchObjectCreation(this);
    }
    this.initChannels();
  }).prototype = restoration.RestorationManager.prototype;
  dart.addTypeTests(restoration.RestorationManager);
  dart.addRtiResources(restoration.RestorationManager, ["flutter__src__services__restoration|RestorationManager"]);
  dart.addTypeCaches(restoration.RestorationManager);
  dart.setMethodSignature(restoration.RestorationManager, () => dart.global.Object.setPrototypeOf({
    initChannels: T$.VoidTovoid(),
    [_getRootBucketFromEngine]: T$.VoidToFutureOfvoid(),
    [_parseAndHandleRestorationUpdateFromEngine]: T$.MapNOfObjectN$ObjectNTovoid(),
    handleRestorationUpdateFromEngine: T$.__Tovoid$3(),
    sendToEngine: T$.Uint8ListToFutureOfvoid(),
    [_methodHandler]: T$.MethodCallToFutureOfvoid(),
    [_decodeRestorationData]: T$.Uint8ListNToMapNOfObjectN$ObjectN(),
    [_encodeRestorationData]: T$.MapOfObjectN$ObjectNToUint8List(),
    scheduleSerializationFor: T$.RestorationBucketTovoid(),
    unscheduleSerializationFor: T$.RestorationBucketTovoid(),
    [_doSerialization]: T$.VoidTovoid(),
    flushData: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(restoration.RestorationManager))));
  dart.setGetterSignature(restoration.RestorationManager, () => dart.global.Object.setPrototypeOf({
    rootBucket: T$.FutureOfRestorationBucketN(),
    isReplacing: T$.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(restoration.RestorationManager))));
  dart.setLibraryUri(restoration.RestorationManager, I[13]);
  dart.setFieldSignature(restoration.RestorationManager, () => dart.global.Object.setPrototypeOf({
    [_rootBucket]: {type: T$.RestorationBucketN(), isConst: false, isFinal: false, libraryUri: I[13]},
    [_pendingRootBucket]: {type: T$.CompleterNOfRestorationBucketN(), isConst: false, isFinal: false, libraryUri: I[14]},
    [_rootBucketIsValid]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_isReplacing]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_debugDoingUpdate]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_serializationScheduled]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_bucketsNeedingSerialization]: {type: T$.SetOfRestorationBucket(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(restoration.RestorationManager))));
  var _debugOwner = dart.privateName(restoration, "_debugOwner");
  var _claimedChildren = dart.privateName(restoration, "_claimedChildren");
  var _childrenToAdd = dart.privateName(restoration, "_childrenToAdd");
  var _needsSerialization = dart.privateName(restoration, "_needsSerialization");
  var _debugDisposed = dart.privateName(restoration, "_debugDisposed");
  var _parent = dart.privateName(restoration, "_parent");
  var _restorationId = dart.privateName(restoration, "_restorationId");
  var _maybeDispatchObjectCreation = dart.privateName(restoration, "_maybeDispatchObjectCreation");
  var _rawChildren = dart.privateName(restoration, "_rawChildren");
  var _debugAssertNotDisposed = dart.privateName(restoration, "_debugAssertNotDisposed");
  var _rawValues = dart.privateName(restoration, "_rawValues");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _markNeedsSerialization = dart.privateName(restoration, "_markNeedsSerialization");
  var _removeChildData = dart.privateName(restoration, "_removeChildData");
  var _addChildData = dart.privateName(restoration, "_addChildData");
  var _recursivelyUpdateManager = dart.privateName(restoration, "_recursivelyUpdateManager");
  var _updateManager = dart.privateName(restoration, "_updateManager");
  var _visitChildren = dart.privateName(restoration, "_visitChildren");
  var _dropChild = dart.privateName(restoration, "_dropChild");
  var _debugAssertIntegrity = dart.privateName(restoration, "_debugAssertIntegrity");
  var _finalizeAddChildData = dart.privateName(restoration, "_finalizeAddChildData");
  restoration.RestorationBucket = class RestorationBucket extends core.Object {
    static ['_#empty#tearOff'](opts) {
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      return new restoration.RestorationBucket.empty({restorationId: restorationId, debugOwner: debugOwner});
    }
    static ['_#root#tearOff'](opts) {
      let manager = opts && 'manager' in opts ? opts.manager : null;
      let rawData = opts && 'rawData' in opts ? opts.rawData : null;
      return new restoration.RestorationBucket.root({manager: manager, rawData: rawData});
    }
    static ['_#child#tearOff'](opts) {
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let parent = opts && 'parent' in opts ? opts.parent : null;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      return new restoration.RestorationBucket.child({restorationId: restorationId, parent: parent, debugOwner: debugOwner});
    }
    get debugOwner() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 594, 12, "_debugAssertNotDisposed()");
      return this[_debugOwner];
    }
    get isReplacing() {
      let t$3616, t$3616$;
      t$3616$ = (t$3616 = this[_manager], t$3616 == null ? null : t$3616.isReplacing);
      return t$3616$ == null ? false : t$3616$;
    }
    get restorationId() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 618, 12, "_debugAssertNotDisposed()");
      return this[_restorationId];
    }
    get [_rawChildren]() {
      return T$.MapOfObjectN$ObjectN()[_as](dart.nullCheck(this[_rawData][$putIfAbsent]("c", dart.fn(() => new (G.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    get [_rawValues]() {
      return T$.MapOfObjectN$ObjectN()[_as](dart.nullCheck(this[_rawData][$putIfAbsent]("v", dart.fn(() => new (G.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    read(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 643, 12, "_debugAssertNotDisposed()");
      return P[_eval]("0?")[_as](this[_rawValues][$_get](restorationId));
    }
    write(P, restorationId, value) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 664, 12, "_debugAssertNotDisposed()");
      if (!restoration.debugIsSerializableForRestoration(value)) dart.assertFailed(null, I[12], 665, 12, "debugIsSerializableForRestoration(value)");
      if (!dart.equals(this[_rawValues][$_get](restorationId), value) || !this[_rawValues][$containsKey](restorationId)) {
        this[_rawValues][$_set](restorationId, value);
        this[_markNeedsSerialization]();
      }
    }
    remove(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 685, 12, "_debugAssertNotDisposed()");
      let needsUpdate = this[_rawValues][$containsKey](restorationId);
      let result = P[_eval]("0?")[_as](this[_rawValues][$remove](restorationId));
      if (this[_rawValues][$isEmpty]) {
        this[_rawData][$remove]("v");
      }
      if (needsUpdate) {
        this[_markNeedsSerialization]();
      }
      return result;
    }
    contains(restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 706, 12, "_debugAssertNotDisposed()");
      return this[_rawValues][$containsKey](restorationId);
    }
    claimChild(restorationId, opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 741, 12, "_debugAssertNotDisposed()");
      if (this[_claimedChildren][$containsKey](restorationId) || !this[_rawChildren][$containsKey](restorationId)) {
        let child = new restoration.RestorationBucket.empty({debugOwner: debugOwner, restorationId: restorationId});
        this.adoptChild(child);
        return child;
      }
      if (!(this[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[12], 767, 12, "_rawChildren[restorationId] != null");
      let child = new restoration.RestorationBucket.child({restorationId: restorationId, parent: this, debugOwner: debugOwner});
      this[_claimedChildren][$_set](restorationId, child);
      return child;
    }
    adoptChild(child) {
      let t$3616;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 790, 12, "_debugAssertNotDisposed()");
      if (!dart.equals(child[_parent], this)) {
        t$3616 = child[_parent];
        t$3616 == null ? null : t$3616[_removeChildData](child);
        child[_parent] = this;
        this[_addChildData](child);
        if (!dart.equals(child[_manager], this[_manager])) {
          this[_recursivelyUpdateManager](child);
        }
      }
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[12], 799, 12, "child._parent == this");
      if (!dart.equals(child[_manager], this[_manager])) dart.assertFailed(null, I[12], 800, 12, "child._manager == _manager");
    }
    [_dropChild](child) {
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[12], 804, 12, "child._parent == this");
      this[_removeChildData](child);
      child[_parent] = null;
      if (child[_manager] != null) {
        child[_updateManager](null);
        child[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
      }
    }
    [_markNeedsSerialization]() {
      let t$3616;
      if (!this[_needsSerialization]) {
        this[_needsSerialization] = true;
        t$3616 = this[_manager];
        t$3616 == null ? null : t$3616.scheduleSerializationFor(this);
      }
    }
    finalize() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 827, 12, "_debugAssertNotDisposed()");
      if (!this[_needsSerialization]) dart.assertFailed(null, I[12], 828, 12, "_needsSerialization");
      this[_needsSerialization] = false;
      if (!this[_debugAssertIntegrity]()) dart.assertFailed(null, I[12], 830, 12, "_debugAssertIntegrity()");
    }
    [_recursivelyUpdateManager](bucket) {
      bucket[_updateManager](this[_manager]);
      bucket[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
    }
    [_updateManager](newManager) {
      let t$3616;
      if (dart.equals(this[_manager], newManager)) {
        return;
      }
      if (this[_needsSerialization]) {
        t$3616 = this[_manager];
        t$3616 == null ? null : t$3616.unscheduleSerializationFor(this);
      }
      this[_manager] = newManager;
      if (this[_needsSerialization] && this[_manager] != null) {
        this[_needsSerialization] = false;
        this[_markNeedsSerialization]();
      }
    }
    [_debugAssertIntegrity]() {
      if (!dart.fn(() => {
        if (this[_childrenToAdd][$isEmpty]) {
          return true;
        }
        let error = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Multiple owners claimed child RestorationBuckets with the same IDs."), new assertions.ErrorDescription.new("The following IDs were claimed multiple times from the parent " + dart.str(this) + ":")]);
        for (let child of this[_childrenToAdd][$entries]) {
          let id = child.key;
          let buckets = child.value;
          if (!buckets[$isNotEmpty]) dart.assertFailed(null, I[12], 864, 16, "buckets.isNotEmpty");
          if (!this[_claimedChildren][$containsKey](id)) dart.assertFailed(null, I[12], 865, 16, "_claimedChildren.containsKey(id)");
          error[$addAll]((() => {
            let t$3616 = G.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new(" * \"" + id + "\" was claimed by:")]);
            t$3616[$addAll](buckets[$map](T$.DiagnosticsNode(), dart.fn(bucket => new assertions.ErrorDescription.new("   * " + dart.str(bucket.debugOwner)), T$.RestorationBucketToErrorDescription())));
            t$3616.push(new assertions.ErrorDescription.new("   * " + dart.str(dart.nullCheck(this[_claimedChildren][$_get](id)).debugOwner) + " (current owner)"));
            return t$3616;
          })());
        }
        dart.throw(new assertions.FlutterError.fromParts(error));
      }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 853, 12, "() {\r\n      if (_childrenToAdd.isEmpty) {\r\n        return true;\r\n      }\r\n      final List<DiagnosticsNode> error = <DiagnosticsNode>[\r\n        ErrorSummary('Multiple owners claimed child RestorationBuckets with the same IDs.'),\r\n        ErrorDescription('The following IDs were claimed multiple times from the parent $this:'),\r\n      ];\r\n      for (final MapEntry<String, List<RestorationBucket>> child in _childrenToAdd.entries) {\r\n        final String id = child.key;\r\n        final List<RestorationBucket> buckets = child.value;\r\n        assert(buckets.isNotEmpty);\r\n        assert(_claimedChildren.containsKey(id));\r\n        error.addAll(<DiagnosticsNode>[\r\n          ErrorDescription(' * \"$id\" was claimed by:'),\r\n          ...buckets.map((RestorationBucket bucket) => ErrorDescription('   * ${bucket.debugOwner}')),\r\n          ErrorDescription('   * ${_claimedChildren[id]!.debugOwner} (current owner)'),\r\n        ]);\r\n      }\r\n      throw FlutterError.fromParts(error);\r\n    }()");
      return true;
    }
    [_removeChildData](child) {
      let t$3617, t$3617$, t$3617$0;
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[12], 878, 12, "child._parent == this");
      if (dart.equals(this[_claimedChildren][$remove](child.restorationId), child)) {
        this[_rawChildren][$remove](child.restorationId);
        let pendingChildren = this[_childrenToAdd][$_get](child.restorationId);
        if (pendingChildren != null) {
          let toAdd = pendingChildren[$removeLast]();
          this[_finalizeAddChildData](toAdd);
          if (pendingChildren[$isEmpty]) {
            this[_childrenToAdd][$remove](child.restorationId);
          }
        }
        if (this[_rawChildren][$isEmpty]) {
          this[_rawData][$remove]("c");
        }
        this[_markNeedsSerialization]();
        return;
      }
      t$3617 = this[_childrenToAdd][$_get](child.restorationId);
      t$3617 == null ? null : t$3617[$remove](child);
      if (dart.test((t$3617$0 = (t$3617$ = this[_childrenToAdd][$_get](child.restorationId), t$3617$ == null ? null : t$3617$[$isEmpty]), t$3617$0 == null ? false : t$3617$0))) {
        this[_childrenToAdd][$remove](child.restorationId);
      }
    }
    [_addChildData](child) {
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[12], 902, 12, "child._parent == this");
      if (this[_claimedChildren][$containsKey](child.restorationId)) {
        this[_childrenToAdd][$putIfAbsent](child.restorationId, dart.fn(() => G.JSArrayOfRestorationBucket().of([]), T$.VoidToListOfRestorationBucket()))[$add](child);
        this[_markNeedsSerialization]();
        return;
      }
      this[_finalizeAddChildData](child);
      this[_markNeedsSerialization]();
    }
    [_finalizeAddChildData](child) {
      if (!(this[_claimedChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[12], 916, 12, "_claimedChildren[child.restorationId] == null");
      if (!(this[_rawChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[12], 917, 12, "_rawChildren[child.restorationId] == null");
      this[_claimedChildren][$_set](child.restorationId, child);
      this[_rawChildren][$_set](child.restorationId, child[_rawData]);
    }
    [_visitChildren](visitor, opts) {
      let concurrentModification = opts && 'concurrentModification' in opts ? opts.concurrentModification : false;
      let children = this[_claimedChildren][$values][$followedBy](this[_childrenToAdd][$values][$expand](T$.RestorationBucket(), dart.fn(buckets => buckets, T$.ListOfRestorationBucketToListOfRestorationBucket())));
      if (concurrentModification) {
        children = children[$toList]({growable: false});
      }
      children[$forEach](visitor);
    }
    rename(newRestorationId) {
      let t$3617, t$3617$;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 943, 12, "_debugAssertNotDisposed()");
      if (newRestorationId === this.restorationId) {
        return;
      }
      t$3617 = this[_parent];
      t$3617 == null ? null : t$3617[_removeChildData](this);
      this[_restorationId] = newRestorationId;
      t$3617$ = this[_parent];
      t$3617$ == null ? null : t$3617$[_addChildData](this);
    }
    [_maybeDispatchObjectCreation]() {
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/services.dart", className: dart.strSafe(dart_rti.createRuntimeType(T$.RestorationBucket())), object: this});
      }
    }
    dispose() {
      let t$3617;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[12], 978, 12, "_debugAssertNotDisposed()");
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      this[_visitChildren](dart.bind(this, _dropChild), {concurrentModification: true});
      this[_claimedChildren][$clear]();
      this[_childrenToAdd][$clear]();
      t$3617 = this[_parent];
      t$3617 == null ? null : t$3617[_removeChildData](this);
      this[_parent] = null;
      this[_updateManager](null);
      this[_debugDisposed] = true;
    }
    toString() {
      return object.objectRuntimeType(this, "RestorationBucket") + "(restorationId: " + this.restorationId + ", owner: " + dart.str(this.debugOwner) + ")";
    }
    [_debugAssertNotDisposed]() {
      if (!dart.fn(() => {
        if (this[_debugDisposed]) {
          dart.throw(assertions.FlutterError.new("A " + dart.str(dart.runtimeType(this)) + " was used after being disposed.\n" + "Once you have called dispose() on a " + dart.str(dart.runtimeType(this)) + ", it can no longer be used."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 998, 12, "() {\r\n      if (_debugDisposed) {\r\n        throw FlutterError(\r\n            'A $runtimeType was used after being disposed.\\n'\r\n            'Once you have called dispose() on a $runtimeType, it can no longer be used.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
  };
  (restoration.RestorationBucket.empty = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (G.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (G.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    this[_manager] = null;
    this[_restorationId] = restorationId;
    this[_rawData] = new (G.IdentityMapOfString$ObjectN()).new();
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 512, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
    {
      this[_maybeDispatchObjectCreation]();
    }
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.root = function(opts) {
    let t$3616;
    let manager = opts && 'manager' in opts ? opts.manager : null;
    let rawData = opts && 'rawData' in opts ? opts.rawData : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (G.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (G.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    this[_manager] = manager;
    this[_rawData] = (t$3616 = rawData, t$3616 == null ? new (G.LinkedMapOfObjectN$ObjectN()).new() : t$3616);
    this[_restorationId] = "root";
    if (!dart.fn(() => {
      this[_debugOwner] = manager;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 548, 12, "() {\r\n      _debugOwner = manager;\r\n      return true;\r\n    }()");
    {
      this[_maybeDispatchObjectCreation]();
    }
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.child = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (G.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (G.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    if (!(parent[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[12], 569, 15, "parent._rawChildren[restorationId] != null");
    this[_manager] = parent[_manager];
    this[_parent] = parent;
    this[_rawData] = T$.MapOfObjectN$ObjectN()[_as](dart.nullCheck(parent[_rawChildren][$_get](restorationId)));
    this[_restorationId] = restorationId;
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 574, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
    {
      this[_maybeDispatchObjectCreation]();
    }
  }).prototype = restoration.RestorationBucket.prototype;
  dart.addTypeTests(restoration.RestorationBucket);
  dart.addRtiResources(restoration.RestorationBucket, ["flutter__src__services__restoration|RestorationBucket"]);
  dart.addTypeCaches(restoration.RestorationBucket);
  dart.setMethodSignature(restoration.RestorationBucket, () => dart.global.Object.setPrototypeOf({
    read: T$.StringToPN(),
    write: T$.StringAndPTovoid(),
    remove: T$.StringToPN(),
    contains: T$.StringTobool(),
    claimChild: T$.String__ToRestorationBucket(),
    adoptChild: T$.RestorationBucketTovoid(),
    [_dropChild]: T$.RestorationBucketTovoid(),
    [_markNeedsSerialization]: T$.VoidTovoid(),
    finalize: T$.VoidTovoid(),
    [_recursivelyUpdateManager]: T$.RestorationBucketTovoid(),
    [_updateManager]: T$.RestorationManagerNTovoid(),
    [_debugAssertIntegrity]: T$.VoidTobool(),
    [_removeChildData]: T$.RestorationBucketTovoid(),
    [_addChildData]: T$.RestorationBucketTovoid(),
    [_finalizeAddChildData]: T$.RestorationBucketTovoid(),
    [_visitChildren]: T$.Fn__Tovoid(),
    rename: T$.StringTovoid(),
    [_maybeDispatchObjectCreation]: T$.VoidTovoid(),
    dispose: T$.VoidTovoid(),
    [_debugAssertNotDisposed]: T$.VoidTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(restoration.RestorationBucket))));
  dart.setMethodsDefaultTypeArgSignature(restoration.RestorationBucket, () => dart.global.Object.setPrototypeOf({
    read: [T$.dynamic()],
    write: [T$.dynamic()],
    remove: [T$.dynamic()]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(restoration.RestorationBucket))));
  dart.setGetterSignature(restoration.RestorationBucket, () => dart.global.Object.setPrototypeOf({
    debugOwner: T$.ObjectN(),
    isReplacing: T$.bool(),
    restorationId: T$.String(),
    [_rawChildren]: T$.MapOfObjectN$ObjectN(),
    [_rawValues]: T$.MapOfObjectN$ObjectN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(restoration.RestorationBucket))));
  dart.setLibraryUri(restoration.RestorationBucket, I[13]);
  dart.setFieldSignature(restoration.RestorationBucket, () => dart.global.Object.setPrototypeOf({
    [_rawData]: {type: T$.MapOfObjectN$ObjectN(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_debugOwner]: {type: T$.ObjectN(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_manager]: {type: T$.RestorationManagerN(), isConst: false, isFinal: false, libraryUri: I[13]},
    [_parent]: {type: T$.RestorationBucketN(), isConst: false, isFinal: false, libraryUri: I[13]},
    [_restorationId]: {type: T$.String(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_claimedChildren]: {type: T$.MapOfString$RestorationBucket(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_childrenToAdd]: {type: T$.MapOfString$ListOfRestorationBucket(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_needsSerialization]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_debugDisposed]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(restoration.RestorationBucket))));
  dart.setStaticFieldSignature(restoration.RestorationBucket, () => ['_childrenMapKey', '_valuesMapKey']);
  dart.defineExtensionMethods(restoration.RestorationBucket, ['toString']);
  dart.defineLazy(restoration.RestorationBucket, {
    /*restoration.RestorationBucket._childrenMapKey*/get _childrenMapKey() {
      return "c";
    },
    /*restoration.RestorationBucket._valuesMapKey*/get _valuesMapKey() {
      return "v";
    }
  }, false);
  restoration.debugIsSerializableForRestoration = function debugIsSerializableForRestoration(object) {
    let result = false;
    if (!dart.fn(() => {
      try {
        (C[62] || CT.C62).encodeMessage(object);
        result = true;
      } catch (t$36$35e) {
        let error = dart.getThrown(t$36$35e);
        if (T$.Object()[_is](error)) {
          result = false;
        } else
          throw t$36$35e;
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[12], 1019, 10, "() {\r\n    try {\r\n      const StandardMessageCodec().encodeMessage(object);\r\n      result = true;\r\n    } catch (error) {\r\n      // This is only used in asserts, so reporting the exception isn't\r\n      // particularly useful, since the assert itself will likely fail.\r\n      result = false;\r\n    }\r\n    return true;\r\n  }()");
    return result;
  };
  _background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger = class BackgroundIsolateBinaryMessenger extends core.Object {
    static get instance() {
      dart.throw(new core.UnsupportedError.new("Isolates not supported on web."));
    }
    static ['_#new#tearOff']() {
      return new _background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger.new();
    }
  };
  (_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger.new = function() {
    ;
  }).prototype = _background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger.prototype;
  dart.addTypeTests(_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger);
  dart.addRtiResources(_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger, ["flutter__src__services___background_isolate_binary_messenger_web|BackgroundIsolateBinaryMessenger"]);
  dart.addTypeCaches(_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger);
  dart.setStaticGetterSignature(_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger, () => ['instance']);
  dart.setLibraryUri(_background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger, I[15]);
  var proxy$ = dart.privateName(platform_channel, "_ProfiledBinaryMessenger.proxy");
  var channelTypeName$ = dart.privateName(platform_channel, "_ProfiledBinaryMessenger.channelTypeName");
  var codecTypeName$ = dart.privateName(platform_channel, "_ProfiledBinaryMessenger.codecTypeName");
  platform_channel._ProfiledBinaryMessenger = class _ProfiledBinaryMessenger extends core.Object {
    get proxy() {
      return this[proxy$];
    }
    set proxy(value) {
      super.proxy = value;
    }
    get channelTypeName() {
      return this[channelTypeName$];
    }
    set channelTypeName(value) {
      super.channelTypeName = value;
    }
    get codecTypeName() {
      return this[codecTypeName$];
    }
    set codecTypeName(value) {
      super.codecTypeName = value;
    }
    static ['_#new#tearOff'](proxy, channelTypeName, codecTypeName) {
      return new platform_channel._ProfiledBinaryMessenger.new(proxy, channelTypeName, codecTypeName);
    }
    handlePlatformMessage(channel, data, callback) {
      return this.proxy.handlePlatformMessage(channel, data, callback);
    }
    sendWithPostfix(channel, postfix, message) {
      return async.async(T$.ByteDataN(), (function* sendWithPostfix() {
        let t$3618;
        platform_channel._debugRecordUpStream(this.channelTypeName, channel + postfix, this.codecTypeName, message);
        let timelineTask = (t$3618 = new developer.TimelineTask.new(), (() => {
          t$3618.start("Platform Channel send " + channel + postfix);
          return t$3618;
        })());
        let result = null;
        try {
          result = (yield async.awaitWithTypeCheck(T$.FutureOfByteDataN(), this.proxy.send(channel, message)));
        } finally {
          timelineTask.finish();
        }
        platform_channel._debugRecordDownStream(this.channelTypeName, channel + postfix, this.codecTypeName, result);
        return result;
      }).bind(this));
    }
    send(channel, message) {
      return this.sendWithPostfix(channel, "", message);
    }
    setMessageHandler(channel, handler) {
      this.proxy.setMessageHandler(channel, handler);
    }
  };
  (platform_channel._ProfiledBinaryMessenger.new = function(proxy, channelTypeName, codecTypeName) {
    this[proxy$] = proxy;
    this[channelTypeName$] = channelTypeName;
    this[codecTypeName$] = codecTypeName;
    ;
  }).prototype = platform_channel._ProfiledBinaryMessenger.prototype;
  dart.addTypeTests(platform_channel._ProfiledBinaryMessenger);
  dart.addRtiResources(platform_channel._ProfiledBinaryMessenger, ["flutter__src__services__platform_channel|_ProfiledBinaryMessenger", "flutter__src__services__binary_messenger|BinaryMessenger"]);
  dart.addTypeCaches(platform_channel._ProfiledBinaryMessenger);
  dart.setMethodSignature(platform_channel._ProfiledBinaryMessenger, () => dart.global.Object.setPrototypeOf({
    handlePlatformMessage: T$.StringAndByteDataNAndFnToFutureOfvoid(),
    sendWithPostfix: T$.StringAndStringAndByteDataNToFutureNOfByteDataN(),
    send: T$.StringAndByteDataNToFutureNOfByteDataN(),
    setMessageHandler: T$.StringAndFnTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(platform_channel._ProfiledBinaryMessenger))));
  dart.setLibraryUri(platform_channel._ProfiledBinaryMessenger, I[11]);
  dart.setFieldSignature(platform_channel._ProfiledBinaryMessenger, () => dart.global.Object.setPrototypeOf({
    proxy: {type: T$.BinaryMessenger(), isConst: false, isFinal: true, libraryUri: I[16]},
    channelTypeName: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    codecTypeName: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(platform_channel._ProfiledBinaryMessenger))));
  var _upCount = dart.privateName(platform_channel, "_upCount");
  var _upBytes = dart.privateName(platform_channel, "_upBytes");
  var _downCount = dart.privateName(platform_channel, "_downCount");
  var _downBytes = dart.privateName(platform_channel, "_downBytes");
  platform_channel._PlatformChannelStats = class _PlatformChannelStats extends core.Object {
    static ['_#new#tearOff'](channel, codec, type) {
      return new platform_channel._PlatformChannelStats.new(channel, codec, type);
    }
    get upBytes() {
      return this[_upBytes];
    }
    addUpStream(bytes) {
      this[_upCount] = this[_upCount] + 1;
      this[_upBytes] = this[_upBytes] + bytes;
    }
    get downBytes() {
      return this[_downBytes];
    }
    addDownStream(bytes) {
      this[_downCount] = this[_downCount] + 1;
      this[_downBytes] = this[_downBytes] + bytes;
    }
    get averageUpPayload() {
      return this[_upBytes] / this[_upCount];
    }
    get averageDownPayload() {
      return this[_downBytes] / this[_downCount];
    }
  };
  (platform_channel._PlatformChannelStats.new = function(channel, codec, type) {
    this[_upCount] = 0;
    this[_upBytes] = 0;
    this[_downCount] = 0;
    this[_downBytes] = 0;
    this.channel = channel;
    this.codec = codec;
    this.type = type;
    ;
  }).prototype = platform_channel._PlatformChannelStats.prototype;
  dart.addTypeTests(platform_channel._PlatformChannelStats);
  dart.addRtiResources(platform_channel._PlatformChannelStats, ["flutter__src__services__platform_channel|_PlatformChannelStats"]);
  dart.addTypeCaches(platform_channel._PlatformChannelStats);
  dart.setMethodSignature(platform_channel._PlatformChannelStats, () => dart.global.Object.setPrototypeOf({
    addUpStream: T$.intTovoid(),
    addDownStream: T$.intTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(platform_channel._PlatformChannelStats))));
  dart.setGetterSignature(platform_channel._PlatformChannelStats, () => dart.global.Object.setPrototypeOf({
    upBytes: T$.int(),
    downBytes: T$.int(),
    averageUpPayload: T$.double(),
    averageDownPayload: T$.double()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(platform_channel._PlatformChannelStats))));
  dart.setLibraryUri(platform_channel._PlatformChannelStats, I[11]);
  dart.setFieldSignature(platform_channel._PlatformChannelStats, () => dart.global.Object.setPrototypeOf({
    channel: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    codec: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    type: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_upCount]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_upBytes]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_downCount]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_downBytes]: {type: T$.int(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(platform_channel._PlatformChannelStats))));
  var name$ = dart.privateName(platform_channel, "BasicMessageChannel.name");
  var codec$ = dart.privateName(platform_channel, "BasicMessageChannel.codec");
  var _binaryMessenger = dart.privateName(platform_channel, "BasicMessageChannel._binaryMessenger");
  var _binaryMessenger$ = dart.privateName(platform_channel, "_binaryMessenger");
  const _is_BasicMessageChannel_default = Symbol('_is_BasicMessageChannel_default');
  platform_channel.BasicMessageChannel$ = dart.generic(T => {
    var __t$BasicMessageChannelOfT = () => (__t$BasicMessageChannelOfT = dart.constFn(T[_eval]("flutter__src__services__platform_channel|BasicMessageChannel<0>")))();
    var __t$TN = () => (__t$TN = dart.constFn(T[_eval]("0?")))();
    var __t$TNToNFutureOfT = () => (__t$TNToNFutureOfT = dart.constFn(T[_eval]("async|Future<0>(0?)?")))();
    var __t$ObjectNToFutureOfTN = () => (__t$ObjectNToFutureOfTN = dart.constFn(T[_eval]("async|Future<0?>(core|Object?)")))();
    var __t$MessageCodecOfT = () => (__t$MessageCodecOfT = dart.constFn(T[_eval]("flutter__src__services__message_codec|MessageCodec<0>")))();
    class BasicMessageChannel extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get codec() {
        return this[codec$];
      }
      set codec(value) {
        super.codec = value;
      }
      get [_binaryMessenger$]() {
        return this[_binaryMessenger];
      }
      set [_binaryMessenger$](value) {
        super[_binaryMessenger$] = value;
      }
      static ['_#new#tearOff'](T, name, codec, opts) {
        let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
        return new (platform_channel.BasicMessageChannel$(T)).new(name, codec, {binaryMessenger: binaryMessenger});
      }
      get binaryMessenger() {
        let t$3618, t$3620, t$3619, t$3618$;
        let result = (t$3618 = this[_binaryMessenger$], t$3618 == null ? platform_channel._findBinaryMessenger() : t$3618);
        return platform_channel.shouldProfilePlatformChannels ? (t$3618$ = platform_channel._profiledBinaryMessengers, t$3619 = t$3618$._get(this), t$3619 == null ? (t$3620 = new platform_channel._ProfiledBinaryMessenger.new(result, dart.toString(dart.runtimeType(this)), dart.toString(dart.runtimeType(this.codec))), t$3618$._set(this, t$3620), t$3620) : t$3619) : result;
      }
      send(message) {
        T[_as](message);
        return async.async(__t$TN(), (function* send() {
          return this.codec.decodeMessage(yield async.awaitWithTypeCheck(T$.FutureOfByteDataN(), this.binaryMessenger.send(this.name, this.codec.encodeMessage(message))));
        }).bind(this));
      }
      setMessageHandler(handler) {
        __t$TNToNFutureOfT()[_as](handler);
        if (handler == null) {
          this.binaryMessenger.setMessageHandler(this.name, null);
        } else {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(message => async.async(T$.ByteDataN(), (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), T$.ByteDataNToFutureOfByteDataN()));
        }
      }
    }
    (BasicMessageChannel.new = function(name, codec, opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      this[name$] = name;
      this[codec$] = codec;
      this[_binaryMessenger] = binaryMessenger;
      this.$ti = this.$ti || __t$BasicMessageChannelOfT();
      ;
    }).prototype = BasicMessageChannel.prototype;
    dart.addTypeTests(BasicMessageChannel);
    BasicMessageChannel.prototype[_is_BasicMessageChannel_default] = true;
    dart.addRtiResources(BasicMessageChannel, ["flutter__src__services__platform_channel|BasicMessageChannel"]);
    dart.addTypeCaches(BasicMessageChannel);
    dart.setMethodSignature(BasicMessageChannel, () => dart.global.Object.setPrototypeOf({
      send: __t$ObjectNToFutureOfTN(),
      setMessageHandler: T$.ObjectNTovoid()
    }, dart.getMethods(dart.global.Object.getPrototypeOf(BasicMessageChannel))));
    dart.setGetterSignature(BasicMessageChannel, () => dart.global.Object.setPrototypeOf({binaryMessenger: T$.BinaryMessenger()}, dart.getGetters(dart.global.Object.getPrototypeOf(BasicMessageChannel))));
    dart.setLibraryUri(BasicMessageChannel, I[11]);
    dart.setFieldSignature(BasicMessageChannel, () => dart.global.Object.setPrototypeOf({
      name: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
      codec: {type: __t$MessageCodecOfT(), isConst: false, isFinal: true, libraryUri: I[17]},
      [_binaryMessenger$]: {type: T$.BinaryMessengerN(), isConst: false, isFinal: true, libraryUri: I[16]}
    }, dart.getFields(dart.global.Object.getPrototypeOf(BasicMessageChannel))));
    return BasicMessageChannel;
  });
  platform_channel.BasicMessageChannel = platform_channel.BasicMessageChannel$();
  dart.addTypeTests(platform_channel.BasicMessageChannel, _is_BasicMessageChannel_default);
  var name$0 = dart.privateName(platform_channel, "MethodChannel.name");
  var codec$0 = dart.privateName(platform_channel, "MethodChannel.codec");
  var _binaryMessenger$0 = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var _invokeMethod = dart.privateName(platform_channel, "_invokeMethod");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _handleAsMethodCall = dart.privateName(platform_channel, "_handleAsMethodCall");
  platform_channel.MethodChannel = class MethodChannel extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger$]() {
      return this[_binaryMessenger$0];
    }
    set [_binaryMessenger$](value) {
      super[_binaryMessenger$] = value;
    }
    static ['_#new#tearOff'](name, codec = C[63] || CT.C63, binaryMessenger = null) {
      return new platform_channel.MethodChannel.new(name, codec, binaryMessenger);
    }
    get binaryMessenger() {
      let t$3618, t$3620, t$3619, t$3618$;
      let result = (t$3618 = this[_binaryMessenger$], t$3618 == null ? platform_channel._findBinaryMessenger() : t$3618);
      return platform_channel.shouldProfilePlatformChannels ? (t$3618$ = platform_channel._profiledBinaryMessengers, t$3619 = t$3618$._get(this), t$3619 == null ? (t$3620 = new platform_channel._ProfiledBinaryMessenger.new(result, dart.toString(dart.runtimeType(this)), dart.toString(dart.runtimeType(this.codec))), t$3618$._set(this, t$3620), t$3620) : t$3619) : result;
    }
    [_invokeMethod](T, method, opts) {
      let missingOk = opts && 'missingOk' in opts ? opts.missingOk : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return async.async(T[_eval]("0?"), (function* _invokeMethod() {
        let input = this.codec.encodeMethodCall(new message_codec.MethodCall.new(method, $arguments));
        let result = platform_channel.shouldProfilePlatformChannels ? (yield async.awaitWithTypeCheck(T$.FutureOfByteDataN(), T$._ProfiledBinaryMessenger()[_as](this.binaryMessenger).sendWithPostfix(this.name, "#" + method, input))) : (yield async.awaitWithTypeCheck(T$.FutureOfByteDataN(), this.binaryMessenger.send(this.name, input)));
        if (result == null) {
          if (missingOk) {
            return null;
          }
          dart.throw(new message_codec.MissingPluginException.new("No implementation found for method " + method + " on channel " + this.name));
        }
        return T[_eval]("0?")[_as](this.codec.decodeEnvelope(result));
      }).bind(this));
    }
    invokeMethod(T, method, $arguments = null) {
      return this[_invokeMethod](T, method, {missingOk: false, arguments: $arguments});
    }
    invokeListMethod(T, method, $arguments = null) {
      return async.async(T[_eval]("core|List<0>?"), (function* invokeListMethod() {
        let t$3618;
        let result = (yield this.invokeMethod(T$.List(), method, $arguments));
        t$3618 = result;
        return t$3618 == null ? null : t$3618[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, $arguments = null) {
      return async.async(K[_eval]("@<0>")[_bind](V)[_eval]("core|Map<1,2>?"), (function* invokeMapMethod() {
        let t$3618;
        let result = (yield this.invokeMethod(T$.Map(), method, $arguments));
        t$3618 = result;
        return t$3618 == null ? null : t$3618[$cast](K, V);
      }).bind(this));
    }
    setMethodCallHandler(handler) {
      if (!(this[_binaryMessenger$] != null || binding$.BindingBase.debugBindingType() != null)) dart.assertFailed("Cannot set the method call handler before the binary messenger has been initialized. This happens when you call setMethodCallHandler() before the WidgetsFlutterBinding has been initialized. You can fix this by either calling WidgetsFlutterBinding.ensureInitialized() before this or by passing a custom BinaryMessenger instance to MethodChannel().", I[18], 554, 7, "_binaryMessenger != null || BindingBase.debugBindingType() != null");
      this.binaryMessenger.setMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), T$.ByteDataNToFutureOfByteDataN()));
    }
    [_handleAsMethodCall](message, handler) {
      return async.async(T$.ByteDataN(), (function* _handleAsMethodCall() {
        let call = this.codec.decodeMethodCall(message);
        try {
          return this.codec.encodeSuccessEnvelope(yield handler(call));
        } catch (t$36$35e) {
          let t$36$35ex = dart.getThrown(t$36$35e);
          if (T$.PlatformException()[_is](t$36$35ex)) {
            let e = t$36$35ex;
            return this.codec.encodeErrorEnvelope({code: e.code, message: e.message, details: e.details});
          } else if (T$.MissingPluginException()[_is](t$36$35ex)) {
            return null;
          } else if (T$.Object()[_is](t$36$35ex)) {
            let error = t$36$35ex;
            return this.codec.encodeErrorEnvelope({code: "error", message: dart.toString(error)});
          } else
            throw t$36$35e;
        }
      }).bind(this));
    }
  };
  (platform_channel.MethodChannel.new = function(name, codec = C[63] || CT.C63, binaryMessenger = null) {
    this[name$0] = name;
    this[codec$0] = codec;
    this[_binaryMessenger$0] = binaryMessenger;
    ;
  }).prototype = platform_channel.MethodChannel.prototype;
  dart.addTypeTests(platform_channel.MethodChannel);
  dart.addRtiResources(platform_channel.MethodChannel, ["flutter__src__services__platform_channel|MethodChannel"]);
  dart.addTypeCaches(platform_channel.MethodChannel);
  dart.setMethodSignature(platform_channel.MethodChannel, () => dart.global.Object.setPrototypeOf({
    [_invokeMethod]: T$.String__ToFutureOfTN(),
    invokeMethod: T$.StringAnddynamicToFutureOfTN(),
    invokeListMethod: T$.StringAnddynamicToFutureOfListNOfT(),
    invokeMapMethod: T$.StringAnddynamicToFutureOfMapNOfK$V(),
    setMethodCallHandler: T$.FnTovoid(),
    [_handleAsMethodCall]: T$.ByteDataNAndFnToFutureOfByteDataN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(platform_channel.MethodChannel))));
  dart.setMethodsDefaultTypeArgSignature(platform_channel.MethodChannel, () => dart.global.Object.setPrototypeOf({
    [_invokeMethod]: [T$.dynamic()],
    invokeMethod: [T$.dynamic()],
    invokeListMethod: [T$.dynamic()],
    invokeMapMethod: [T$.dynamic(), T$.dynamic()]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(platform_channel.MethodChannel))));
  dart.setGetterSignature(platform_channel.MethodChannel, () => dart.global.Object.setPrototypeOf({binaryMessenger: T$.BinaryMessenger()}, dart.getGetters(dart.global.Object.getPrototypeOf(platform_channel.MethodChannel))));
  dart.setLibraryUri(platform_channel.MethodChannel, I[11]);
  dart.setFieldSignature(platform_channel.MethodChannel, () => dart.global.Object.setPrototypeOf({
    name: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    codec: {type: T$.MethodCodec(), isConst: false, isFinal: true, libraryUri: I[17]},
    [_binaryMessenger$]: {type: T$.BinaryMessengerN(), isConst: false, isFinal: true, libraryUri: I[16]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(platform_channel.MethodChannel))));
  const _invokeMethod$ = Symbol("_invokeMethod");
  platform_channel.OptionalMethodChannel = class OptionalMethodChannel extends platform_channel.MethodChannel {
    static ['_#new#tearOff'](name, codec = C[63] || CT.C63, binaryMessenger = null) {
      return new platform_channel.OptionalMethodChannel.new(name, codec, binaryMessenger);
    }
    invokeMethod(T, method, $arguments = null) {
      return async.async(T[_eval]("0?"), (function* invokeMethod() {
        return this[_invokeMethod$](T, method, {missingOk: true, arguments: $arguments});
      }).bind(this));
    }
    [_invokeMethod$](T, method, opts) {
      return super[_invokeMethod](T, method, opts);
    }
  };
  (platform_channel.OptionalMethodChannel.new = function(name, codec = C[63] || CT.C63, binaryMessenger = null) {
    dart.global.Object.getPrototypeOf(platform_channel.OptionalMethodChannel).new.call(this, name, codec, binaryMessenger);
    ;
  }).prototype = platform_channel.OptionalMethodChannel.prototype;
  dart.addTypeTests(platform_channel.OptionalMethodChannel);
  dart.addRtiResources(platform_channel.OptionalMethodChannel, ["flutter__src__services__platform_channel|OptionalMethodChannel"]);
  dart.addTypeCaches(platform_channel.OptionalMethodChannel);
  dart.setLibraryUri(platform_channel.OptionalMethodChannel, I[11]);
  var name$1 = dart.privateName(platform_channel, "EventChannel.name");
  var codec$1 = dart.privateName(platform_channel, "EventChannel.codec");
  var _binaryMessenger$1 = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  platform_channel.EventChannel = class EventChannel extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$1];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger$]() {
      return this[_binaryMessenger$1];
    }
    set [_binaryMessenger$](value) {
      super[_binaryMessenger$] = value;
    }
    static ['_#new#tearOff'](name, codec = C[63] || CT.C63, binaryMessenger = null) {
      return new platform_channel.EventChannel.new(name, codec, binaryMessenger);
    }
    get binaryMessenger() {
      let t$3620;
      t$3620 = this[_binaryMessenger$];
      return t$3620 == null ? platform_channel._findBinaryMessenger() : t$3620;
    }
    receiveBroadcastStream($arguments = null) {
      let methodChannel = new platform_channel.MethodChannel.new(this.name, this.codec);
      let t$36$35controller = null;
      function t$36$35controller$35get() {
        let t$3621;
        t$3621 = t$36$35controller;
        return t$3621 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t$3621;
      }
      function t$36$35controller$35set(controller$35param) {
        return t$36$35controller = controller$35param;
      }
      t$36$35controller$35set(async.StreamController.broadcast({onListen: dart.fn(() => async.async(T$.void(), (function*() {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(reply => async.async(T$.Null(), (function*() {
            if (reply == null) {
              t$36$35controller$35get().close();
            } else {
              try {
                t$36$35controller$35get().add(this.codec.decodeEnvelope(reply));
              } catch (t$36$35e) {
                let e = dart.getThrown(t$36$35e);
                if (T$.PlatformException()[_is](e)) {
                  t$36$35controller$35get().addError(e);
                } else
                  throw t$36$35e;
              }
            }
            return null;
          }).bind(this)), T$.ByteDataNToFutureOfNull()));
          try {
            yield methodChannel.invokeMethod(T$.void(), "listen", $arguments);
          } catch (t$36$35e) {
            let exception = dart.getThrown(t$36$35e);
            let stack = dart.stackTrace(t$36$35e);
            if (T$.Object()[_is](exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while activating platform stream on channel " + this.name)}));
            } else
              throw t$36$35e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => async.async(T$.void(), (function*() {
          this.binaryMessenger.setMessageHandler(this.name, null);
          try {
            yield methodChannel.invokeMethod(T$.void(), "cancel", $arguments);
          } catch (t$36$35e) {
            let exception = dart.getThrown(t$36$35e);
            let stack = dart.stackTrace(t$36$35e);
            if (T$.Object()[_is](exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while de-activating platform stream on channel " + this.name)}));
            } else
              throw t$36$35e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid())}));
      return t$36$35controller$35get().stream;
    }
  };
  (platform_channel.EventChannel.new = function(name, codec = C[63] || CT.C63, binaryMessenger = null) {
    this[name$1] = name;
    this[codec$1] = codec;
    this[_binaryMessenger$1] = binaryMessenger;
    ;
  }).prototype = platform_channel.EventChannel.prototype;
  dart.addTypeTests(platform_channel.EventChannel);
  dart.addRtiResources(platform_channel.EventChannel, ["flutter__src__services__platform_channel|EventChannel"]);
  dart.addTypeCaches(platform_channel.EventChannel);
  dart.setMethodSignature(platform_channel.EventChannel, () => dart.global.Object.setPrototypeOf({receiveBroadcastStream: T$.dynamicToStream()}, dart.getMethods(dart.global.Object.getPrototypeOf(platform_channel.EventChannel))));
  dart.setGetterSignature(platform_channel.EventChannel, () => dart.global.Object.setPrototypeOf({binaryMessenger: T$.BinaryMessenger()}, dart.getGetters(dart.global.Object.getPrototypeOf(platform_channel.EventChannel))));
  dart.setLibraryUri(platform_channel.EventChannel, I[11]);
  dart.setFieldSignature(platform_channel.EventChannel, () => dart.global.Object.setPrototypeOf({
    name: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    codec: {type: T$.MethodCodec(), isConst: false, isFinal: true, libraryUri: I[17]},
    [_binaryMessenger$]: {type: T$.BinaryMessengerN(), isConst: false, isFinal: true, libraryUri: I[16]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(platform_channel.EventChannel))));
  platform_channel._debugLaunchProfilePlatformChannels = function _debugLaunchProfilePlatformChannels() {
    return async.async(T$.void(), function* _debugLaunchProfilePlatformChannels() {
      if (!platform_channel._profilePlatformChannelsIsRunning) {
        platform_channel._profilePlatformChannelsIsRunning = true;
        yield async.Future.delayed(platform_channel._profilePlatformChannelsRate);
        platform_channel._profilePlatformChannelsIsRunning = false;
        let log = new core.StringBuffer.new();
        log.writeln("Platform Channel Stats:");
        let allStats = platform_channel._profilePlatformChannelsStats[$values][$toList]();
        allStats[$sort](dart.fn((x, y) => y.upBytes + y.downBytes - (x.upBytes + x.downBytes), T$._PlatformChannelStatsAnd_PlatformChannelStatsToint()));
        for (let stats of allStats) {
          log.writeln("  (name:\"" + stats.channel + "\" type:\"" + stats.type + "\" codec:\"" + stats.codec + "\" upBytes:" + dart.strSafe(stats.upBytes) + " upBytes_avg:" + stats.averageUpPayload[$toStringAsFixed](1) + " downBytes:" + dart.strSafe(stats.downBytes) + " downBytes_avg:" + stats.averageDownPayload[$toStringAsFixed](1) + ")");
        }
        print.debugPrint(dart.toString(log));
        platform_channel._profilePlatformChannelsStats[$clear]();
      }
    });
  };
  platform_channel._debugRecordUpStream = function _debugRecordUpStream(channelTypeName, name, codecTypeName, bytes) {
    let t$3629, t$3628, t$3627, t$3626, t$3626$, t$3626$0;
    let stats = (t$3626 = platform_channel._profilePlatformChannelsStats, t$3627 = name, t$3628 = t$3626[$_get](t$3627), t$3628 == null ? (t$3629 = new platform_channel._PlatformChannelStats.new(name, codecTypeName, channelTypeName), t$3626[$_set](t$3627, t$3629), t$3629) : t$3628);
    stats.addUpStream((t$3626$0 = (t$3626$ = bytes, t$3626$ == null ? null : t$3626$[$lengthInBytes]), t$3626$0 == null ? 0 : t$3626$0));
    platform_channel._debugLaunchProfilePlatformChannels();
  };
  platform_channel._debugRecordDownStream = function _debugRecordDownStream(channelTypeName, name, codecTypeName, bytes) {
    let t$3629, t$3628, t$3627, t$3626, t$3626$, t$3626$0;
    let stats = (t$3626 = platform_channel._profilePlatformChannelsStats, t$3627 = name, t$3628 = t$3626[$_get](t$3627), t$3628 == null ? (t$3629 = new platform_channel._PlatformChannelStats.new(name, codecTypeName, channelTypeName), t$3626[$_set](t$3627, t$3629), t$3629) : t$3628);
    stats.addDownStream((t$3626$0 = (t$3626$ = bytes, t$3626$ == null ? null : t$3626$[$lengthInBytes]), t$3626$0 == null ? 0 : t$3626$0));
    platform_channel._debugLaunchProfilePlatformChannels();
  };
  platform_channel._findBinaryMessenger = function _findBinaryMessenger() {
    return false && binding$0.ServicesBinding.rootIsolateToken == null ? _background_isolate_binary_messenger_web.BackgroundIsolateBinaryMessenger.instance : binding$0.ServicesBinding.instance.defaultBinaryMessenger;
  };
  dart.copyProperties(platform_channel, {
    get shouldProfilePlatformChannels() {
      return false || true && debug.debugProfilePlatformChannels;
    }
  });
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(platform_channel, {
    /*platform_channel.kProfilePlatformChannels*/get kProfilePlatformChannels() {
      return false;
    },
    /*platform_channel._profilePlatformChannelsIsRunning*/get _profilePlatformChannelsIsRunning() {
      return false;
    },
    set _profilePlatformChannelsIsRunning(value) {},
    /*platform_channel._profilePlatformChannelsRate*/get _profilePlatformChannelsRate() {
      return C[64] || CT.C64;
    },
    /*platform_channel._profiledBinaryMessengers*/get _profiledBinaryMessengers() {
      return new (G.ExpandoOfBinaryMessenger()).new();
    },
    /*platform_channel._profilePlatformChannelsStats*/get _profilePlatformChannelsStats() {
      return new (G.IdentityMapOfString$_PlatformChannelStats()).new();
    }
  }, false);
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  message_codec.MessageCodec$ = dart.generic(T => {
    var __t$MessageCodecOfT = () => (__t$MessageCodecOfT = dart.constFn(T[_eval]("flutter__src__services__message_codec|MessageCodec<0>")))();
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      this.$ti = this.$ti || __t$MessageCodecOfT();
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.addRtiResources(MessageCodec, ["flutter__src__services__message_codec|MessageCodec"]);
    dart.addTypeCaches(MessageCodec);
    dart.setLibraryUri(MessageCodec, I[17]);
    return MessageCodec;
  });
  message_codec.MessageCodec = message_codec.MessageCodec$();
  dart.addTypeTests(message_codec.MessageCodec, _is_MessageCodec_default);
  var method$ = dart.privateName(message_codec, "MethodCall.method");
  var $arguments$ = dart.privateName(message_codec, "MethodCall.arguments");
  message_codec.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    static ['_#new#tearOff'](method, $arguments = null) {
      return new message_codec.MethodCall.new(method, $arguments);
    }
    toString() {
      return object.objectRuntimeType(this, "MethodCall") + "(" + this.method + ", " + dart.str(this.arguments) + ")";
    }
  };
  (message_codec.MethodCall.new = function(method, $arguments = null) {
    this[method$] = method;
    this[$arguments$] = $arguments;
    ;
  }).prototype = message_codec.MethodCall.prototype;
  dart.addTypeTests(message_codec.MethodCall);
  dart.addRtiResources(message_codec.MethodCall, ["flutter__src__services__message_codec|MethodCall"]);
  dart.addTypeCaches(message_codec.MethodCall);
  dart.setLibraryUri(message_codec.MethodCall, I[17]);
  dart.setFieldSignature(message_codec.MethodCall, () => dart.global.Object.setPrototypeOf({
    method: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    arguments: {type: T$.dynamic(), isConst: false, isFinal: true}
  }, dart.getFields(dart.global.Object.getPrototypeOf(message_codec.MethodCall))));
  dart.defineExtensionMethods(message_codec.MethodCall, ['toString']);
  message_codec.MethodCodec = class MethodCodec extends core.Object {};
  (message_codec.MethodCodec.new = function() {
    ;
  }).prototype = message_codec.MethodCodec.prototype;
  dart.addTypeTests(message_codec.MethodCodec);
  dart.addRtiResources(message_codec.MethodCodec, ["flutter__src__services__message_codec|MethodCodec"]);
  dart.addTypeCaches(message_codec.MethodCodec);
  dart.setLibraryUri(message_codec.MethodCodec, I[17]);
  var code$ = dart.privateName(message_codec, "PlatformException.code");
  var message$ = dart.privateName(message_codec, "PlatformException.message");
  var details$ = dart.privateName(message_codec, "PlatformException.details");
  var stacktrace$ = dart.privateName(message_codec, "PlatformException.stacktrace");
  message_codec.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    get stacktrace() {
      return this[stacktrace$];
    }
    set stacktrace(value) {
      super.stacktrace = value;
    }
    static ['_#new#tearOff'](opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let stacktrace = opts && 'stacktrace' in opts ? opts.stacktrace : null;
      return new message_codec.PlatformException.new({code: code, message: message, details: details, stacktrace: stacktrace});
    }
    toString() {
      return "PlatformException(" + this.code + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ", " + dart.str(this.stacktrace) + ")";
    }
  };
  (message_codec.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    let stacktrace = opts && 'stacktrace' in opts ? opts.stacktrace : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    this[stacktrace$] = stacktrace;
    ;
  }).prototype = message_codec.PlatformException.prototype;
  dart.addTypeTests(message_codec.PlatformException);
  dart.addRtiResources(message_codec.PlatformException, ["flutter__src__services__message_codec|PlatformException", "core|Exception"]);
  dart.addTypeCaches(message_codec.PlatformException);
  dart.setLibraryUri(message_codec.PlatformException, I[17]);
  dart.setFieldSignature(message_codec.PlatformException, () => dart.global.Object.setPrototypeOf({
    code: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    message: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]},
    details: {type: T$.dynamic(), isConst: false, isFinal: true},
    stacktrace: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(message_codec.PlatformException))));
  dart.defineExtensionMethods(message_codec.PlatformException, ['toString']);
  var message$0 = dart.privateName(message_codec, "MissingPluginException.message");
  message_codec.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message = null) {
      return new message_codec.MissingPluginException.new(message);
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (message_codec.MissingPluginException.new = function(message = null) {
    this[message$0] = message;
    ;
  }).prototype = message_codec.MissingPluginException.prototype;
  dart.addTypeTests(message_codec.MissingPluginException);
  dart.addRtiResources(message_codec.MissingPluginException, ["flutter__src__services__message_codec|MissingPluginException", "core|Exception"]);
  dart.addTypeCaches(message_codec.MissingPluginException);
  dart.setLibraryUri(message_codec.MissingPluginException, I[17]);
  dart.setFieldSignature(message_codec.MissingPluginException, () => dart.global.Object.setPrototypeOf({message: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(message_codec.MissingPluginException))));
  dart.defineExtensionMethods(message_codec.MissingPluginException, ['toString']);
  message_codecs.BinaryCodec = class BinaryCodec extends core.Object {
    static ['_#new#tearOff']() {
      return new message_codecs.BinaryCodec.new();
    }
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      T$.ByteDataN()[_as](message);
      return message;
    }
  };
  (message_codecs.BinaryCodec.new = function() {
    ;
  }).prototype = message_codecs.BinaryCodec.prototype;
  dart.addTypeTests(message_codecs.BinaryCodec);
  dart.addRtiResources(message_codecs.BinaryCodec, ["flutter__src__services__message_codecs|BinaryCodec", "flutter__src__services__message_codec|MessageCodec"]);
  dart.addTypeCaches(message_codecs.BinaryCodec);
  dart.setMethodSignature(message_codecs.BinaryCodec, () => dart.global.Object.setPrototypeOf({
    decodeMessage: T$.ByteDataNToByteDataN(),
    encodeMessage: T$.ObjectNToByteDataN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.BinaryCodec))));
  dart.setLibraryUri(message_codecs.BinaryCodec, I[19]);
  message_codecs.StringCodec = class StringCodec extends core.Object {
    static ['_#new#tearOff']() {
      return new message_codecs.StringCodec.new();
    }
    decodeMessage(message) {
      if (message == null) {
        return null;
      }
      return convert.utf8.decode(typed_data.Uint8List.sublistView(message));
    }
    encodeMessage(message) {
      T$.StringN()[_as](message);
      if (message == null) {
        return null;
      }
      return typed_data.ByteData.sublistView(convert.utf8.encode(message));
    }
  };
  (message_codecs.StringCodec.new = function() {
    ;
  }).prototype = message_codecs.StringCodec.prototype;
  dart.addTypeTests(message_codecs.StringCodec);
  dart.addRtiResources(message_codecs.StringCodec, ["flutter__src__services__message_codecs|StringCodec", "flutter__src__services__message_codec|MessageCodec"]);
  dart.addTypeCaches(message_codecs.StringCodec);
  dart.setMethodSignature(message_codecs.StringCodec, () => dart.global.Object.setPrototypeOf({
    decodeMessage: T$.ByteDataNToStringN(),
    encodeMessage: T$.ObjectNToByteDataN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.StringCodec))));
  dart.setLibraryUri(message_codecs.StringCodec, I[19]);
  message_codecs.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    static ['_#new#tearOff']() {
      return new message_codecs.JSONMessageCodec.new();
    }
    encodeMessage(message) {
      if (message == null) {
        return null;
      }
      return (C[65] || CT.C65).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) {
        return message;
      }
      return convert.json.decode(dart.nullCheck((C[65] || CT.C65).decodeMessage(message)));
    }
  };
  (message_codecs.JSONMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMessageCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMessageCodec);
  dart.addRtiResources(message_codecs.JSONMessageCodec, ["flutter__src__services__message_codecs|JSONMessageCodec", "flutter__src__services__message_codec|MessageCodec"]);
  dart.addTypeCaches(message_codecs.JSONMessageCodec);
  dart.setMethodSignature(message_codecs.JSONMessageCodec, () => dart.global.Object.setPrototypeOf({
    encodeMessage: T$.ObjectNToByteDataN(),
    decodeMessage: T$.ByteDataNTodynamic()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.JSONMessageCodec))));
  dart.setLibraryUri(message_codecs.JSONMessageCodec, I[19]);
  message_codecs.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    static ['_#new#tearOff']() {
      return new message_codecs.JSONMethodCodec.new();
    }
    encodeMethodCall(methodCall) {
      return dart.nullCheck((C[66] || CT.C66).encodeMessage(new (G.IdentityMapOfString$ObjectN()).from(["method", methodCall.method, "args", methodCall.arguments])));
    }
    decodeMethodCall(methodCall) {
      let decoded = (C[66] || CT.C66).decodeMessage(methodCall);
      if (!T$.Map()[_is](decoded)) {
        dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      }
      let method = decoded[$_get]("method");
      let $arguments = decoded[$_get]("args");
      if (typeof method == 'string') {
        return new message_codec.MethodCall.new(method, $arguments);
      }
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (C[66] || CT.C66).decodeMessage(envelope);
      if (!T$.List()[_is](decoded)) {
        dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      }
      if (decoded[$length] === 1) {
        return decoded[$_get](0);
      }
      if (decoded[$length] === 3 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string')) {
        dart.throw(new message_codec.PlatformException.new({code: T$.String()[_as](decoded[$_get](0)), message: T$.StringN()[_as](decoded[$_get](1)), details: decoded[$_get](2)}));
      }
      if (decoded[$length] === 4 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string') && (decoded[$_get](3) == null || typeof decoded[$_get](3) == 'string')) {
        dart.throw(new message_codec.PlatformException.new({code: T$.String()[_as](decoded[$_get](0)), message: T$.StringN()[_as](decoded[$_get](1)), details: decoded[$_get](2), stacktrace: T$.StringN()[_as](decoded[$_get](3))}));
      }
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return dart.nullCheck((C[66] || CT.C66).encodeMessage(G.JSArrayOfObjectN().of([result])));
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      return dart.nullCheck((C[66] || CT.C66).encodeMessage(G.JSArrayOfObjectN().of([code, message, details])));
    }
  };
  (message_codecs.JSONMethodCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMethodCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMethodCodec);
  dart.addRtiResources(message_codecs.JSONMethodCodec, ["flutter__src__services__message_codecs|JSONMethodCodec", "flutter__src__services__message_codec|MethodCodec"]);
  dart.addTypeCaches(message_codecs.JSONMethodCodec);
  dart.setMethodSignature(message_codecs.JSONMethodCodec, () => dart.global.Object.setPrototypeOf({
    encodeMethodCall: T$.MethodCallToByteData(),
    decodeMethodCall: T$.ByteDataNToMethodCall(),
    decodeEnvelope: T$.ByteDataTodynamic(),
    encodeSuccessEnvelope: T$.ObjectNToByteData(),
    encodeErrorEnvelope: T$.__ToByteData()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.JSONMethodCodec))));
  dart.setLibraryUri(message_codecs.JSONMethodCodec, I[19]);
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  message_codecs.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    static ['_#new#tearOff']() {
      return new message_codecs.StandardMessageCodec.new();
    }
    encodeMessage(message) {
      if (message == null) {
        return null;
      }
      let buffer = serialization.WriteBuffer.new({startCapacity: 64});
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) {
        return null;
      }
      let buffer = new serialization.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (buffer.hasRemaining) {
        dart.throw(C[67] || CT.C67);
      }
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(0);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? 1 : 2);
      } else if (typeof value == 'number') {
        buffer.putUint8(6);
        buffer.putFloat64(value);
      } else if (T$.int()[_is](value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(3);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(4);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(7);
        let asciiBytes = _native_typed_data.NativeUint8List.new(value.length);
        let utf8Bytes = null;
        let utf8Offset = 0;
        for (let i = 0; i < value.length; i = i + 1) {
          let char = value[$codeUnitAt](i);
          if (char <= 127) {
            asciiBytes[$_set](i, char);
          } else {
            utf8Bytes = convert.utf8.encode(value[$substring](i));
            utf8Offset = i;
            break;
          }
        }
        if (utf8Bytes != null) {
          this.writeSize(buffer, utf8Offset + utf8Bytes[$length]);
          buffer.putUint8List(typed_data.Uint8List.sublistView(asciiBytes, 0, utf8Offset));
          buffer.putUint8List(utf8Bytes);
        } else {
          this.writeSize(buffer, asciiBytes[$length]);
          buffer.putUint8List(asciiBytes);
        }
      } else if (T$.Uint8List()[_is](value)) {
        buffer.putUint8(8);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (T$.Int32List()[_is](value)) {
        buffer.putUint8(9);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (T$.Int64List()[_is](value)) {
        buffer.putUint8(10);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (T$.Float32List()[_is](value)) {
        buffer.putUint8(14);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat32List(value);
      } else if (T$.Float64List()[_is](value)) {
        buffer.putUint8(11);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (T$.List()[_is](value)) {
        buffer.putUint8(12);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (T$.Map()[_is](value)) {
        buffer.putUint8(13);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, T$.ObjectNAndObjectNTovoid()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!buffer.hasRemaining) {
        dart.throw(C[67] || CT.C67);
      }
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 0:
          {
            return null;
          }
        case 1:
          {
            return true;
          }
        case 2:
          {
            return false;
          }
        case 3:
          {
            return buffer.getInt32();
          }
        case 4:
          {
            return buffer.getInt64();
          }
        case 6:
          {
            return buffer.getFloat64();
          }
        case 5:
        case 7:
          {
            let length = this.readSize(buffer);
            return convert.utf8.decoder.convert(buffer.getUint8List(length));
          }
        case 8:
          {
            let length = this.readSize(buffer);
            return buffer.getUint8List(length);
          }
        case 9:
          {
            let length = this.readSize(buffer);
            return buffer.getInt32List(length);
          }
        case 10:
          {
            let length = this.readSize(buffer);
            return buffer.getInt64List(length);
          }
        case 14:
          {
            let length = this.readSize(buffer);
            return buffer.getFloat32List(length);
          }
        case 11:
          {
            let length = this.readSize(buffer);
            return buffer.getFloat64List(length);
          }
        case 12:
          {
            let length = this.readSize(buffer);
            let result = G.ListOfObjectN().filled(length, null);
            for (let i = 0; i < length; i = i + 1) {
              result[$_set](i, this.readValue(buffer));
            }
            return result;
          }
        case 13:
          {
            let length = this.readSize(buffer);
            let result = new (G.LinkedMapOfObjectN$ObjectN()).new();
            for (let i = 0; i < length; i = i + 1) {
              result[$_set](this.readValue(buffer), this.readValue(buffer));
            }
            return result;
          }
        default:
          {
            dart.throw(C[67] || CT.C67);
          }
      }
    }
    writeSize(buffer, value) {
      if (!(0 <= value && value <= 4294967295)) dart.assertFailed(null, I[20], 542, 12, "0 <= value && value <= 0xffffffff");
      if (value < 254) {
        buffer.putUint8(value);
      } else if (value <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
          {
            return buffer.getUint16();
          }
        case 255:
          {
            return buffer.getUint32();
          }
        default:
          {
            return value;
          }
      }
    }
  };
  (message_codecs.StandardMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.StandardMessageCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMessageCodec);
  dart.addRtiResources(message_codecs.StandardMessageCodec, ["flutter__src__services__message_codecs|StandardMessageCodec", "flutter__src__services__message_codec|MessageCodec"]);
  dart.addTypeCaches(message_codecs.StandardMessageCodec);
  dart.setMethodSignature(message_codecs.StandardMessageCodec, () => dart.global.Object.setPrototypeOf({
    encodeMessage: T$.ObjectNToByteDataN(),
    decodeMessage: T$.ByteDataNTodynamic(),
    writeValue: T$.WriteBufferAndObjectNTovoid(),
    readValue: T$.ReadBufferToObjectN(),
    readValueOfType: T$.intAndReadBufferToObjectN(),
    writeSize: T$.WriteBufferAndintTovoid(),
    readSize: T$.ReadBufferToint()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.StandardMessageCodec))));
  dart.setLibraryUri(message_codecs.StandardMessageCodec, I[19]);
  dart.setStaticFieldSignature(message_codecs.StandardMessageCodec, () => ['_valueNull', '_valueTrue', '_valueFalse', '_valueInt32', '_valueInt64', '_valueLargeInt', '_valueFloat64', '_valueString', '_valueUint8List', '_valueInt32List', '_valueInt64List', '_valueFloat64List', '_valueList', '_valueMap', '_valueFloat32List']);
  dart.defineLazy(message_codecs.StandardMessageCodec, {
    /*message_codecs.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*message_codecs.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*message_codecs.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*message_codecs.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*message_codecs.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*message_codecs.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*message_codecs.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*message_codecs.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*message_codecs.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*message_codecs.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*message_codecs.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*message_codecs.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    },
    /*message_codecs.StandardMessageCodec._valueFloat32List*/get _valueFloat32List() {
      return 14;
    }
  }, false);
  const messageCodec$ = StandardMethodCodec_messageCodec;
  message_codecs.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    static ['_#new#tearOff'](messageCodec = C[62] || CT.C62) {
      return new message_codecs.StandardMethodCodec.new(messageCodec);
    }
    encodeMethodCall(methodCall) {
      let buffer = serialization.WriteBuffer.new({startCapacity: 64});
      this.messageCodec.writeValue(buffer, methodCall.method);
      this.messageCodec.writeValue(buffer, methodCall.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new serialization.ReadBuffer.new(dart.nullCheck(methodCall));
      let method = this.messageCodec.readValue(buffer);
      let $arguments = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !buffer.hasRemaining) {
        return new message_codec.MethodCall.new(method, $arguments);
      } else {
        dart.throw(C[68] || CT.C68);
      }
    }
    encodeSuccessEnvelope(result) {
      let buffer = serialization.WriteBuffer.new({startCapacity: 64});
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = serialization.WriteBuffer.new({startCapacity: 64});
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) {
        dart.throw(C[69] || CT.C69);
      }
      let buffer = new serialization.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) {
        return this.messageCodec.readValue(buffer);
      }
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      let errorStacktrace = buffer.hasRemaining ? T$.StringN()[_as](this.messageCodec.readValue(buffer)) : null;
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !buffer.hasRemaining) {
        dart.throw(new message_codec.PlatformException.new({code: errorCode, message: T$.StringN()[_as](errorMessage), details: errorDetails, stacktrace: errorStacktrace}));
      } else {
        dart.throw(C[70] || CT.C70);
      }
    }
  };
  (message_codecs.StandardMethodCodec.new = function(messageCodec = C[62] || CT.C62) {
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = message_codecs.StandardMethodCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMethodCodec);
  dart.addRtiResources(message_codecs.StandardMethodCodec, ["flutter__src__services__message_codecs|StandardMethodCodec", "flutter__src__services__message_codec|MethodCodec"]);
  dart.addTypeCaches(message_codecs.StandardMethodCodec);
  dart.setMethodSignature(message_codecs.StandardMethodCodec, () => dart.global.Object.setPrototypeOf({
    encodeMethodCall: T$.MethodCallToByteData(),
    decodeMethodCall: T$.ByteDataNToMethodCall(),
    encodeSuccessEnvelope: T$.ObjectNToByteData(),
    encodeErrorEnvelope: T$.__ToByteData(),
    decodeEnvelope: T$.ByteDataTodynamic()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(message_codecs.StandardMethodCodec))));
  dart.setLibraryUri(message_codecs.StandardMethodCodec, I[19]);
  dart.setFieldSignature(message_codecs.StandardMethodCodec, () => dart.global.Object.setPrototypeOf({messageCodec: {type: T$.StandardMessageCodec(), isConst: false, isFinal: true, libraryUri: I[19]}}, dart.getFields(dart.global.Object.getPrototypeOf(message_codecs.StandardMethodCodec))));
  dart.defineLazy(message_codecs, {
    /*message_codecs._writeBufferStartCapacity*/get _writeBufferStartCapacity() {
      return 64;
    }
  }, false);
  system_channels.SystemChannels = class SystemChannels extends core.Object {};
  (system_channels.SystemChannels.new = function() {
    ;
  }).prototype = system_channels.SystemChannels.prototype;
  dart.addTypeTests(system_channels.SystemChannels);
  dart.addRtiResources(system_channels.SystemChannels, ["flutter__src__services__system_channels|SystemChannels"]);
  dart.addTypeCaches(system_channels.SystemChannels);
  dart.setLibraryUri(system_channels.SystemChannels, I[21]);
  dart.setStaticFieldSignature(system_channels.SystemChannels, () => ['navigation', 'platform', 'processText', 'textInput', 'spellCheck', 'undoManager', 'keyEvent', 'lifecycle', 'system', 'accessibility', 'platform_views', 'skia', 'mouseCursor', 'restoration', 'deferredComponent', 'localization', 'menu', 'contextMenu', 'keyboard']);
  dart.defineLazy(system_channels.SystemChannels, {
    /*system_channels.SystemChannels.navigation*/get navigation() {
      return C[71] || CT.C71;
    },
    /*system_channels.SystemChannels.platform*/get platform() {
      return C[73] || CT.C73;
    },
    /*system_channels.SystemChannels.processText*/get processText() {
      return C[74] || CT.C74;
    },
    /*system_channels.SystemChannels.textInput*/get textInput() {
      return C[75] || CT.C75;
    },
    /*system_channels.SystemChannels.spellCheck*/get spellCheck() {
      return C[76] || CT.C76;
    },
    /*system_channels.SystemChannels.undoManager*/get undoManager() {
      return C[77] || CT.C77;
    },
    /*system_channels.SystemChannels.keyEvent*/get keyEvent() {
      return C[78] || CT.C78;
    },
    /*system_channels.SystemChannels.lifecycle*/get lifecycle() {
      return C[79] || CT.C79;
    },
    /*system_channels.SystemChannels.system*/get system() {
      return C[80] || CT.C80;
    },
    /*system_channels.SystemChannels.accessibility*/get accessibility() {
      return C[81] || CT.C81;
    },
    /*system_channels.SystemChannels.platform_views*/get platform_views() {
      return C[82] || CT.C82;
    },
    /*system_channels.SystemChannels.skia*/get skia() {
      return C[83] || CT.C83;
    },
    /*system_channels.SystemChannels.mouseCursor*/get mouseCursor() {
      return C[84] || CT.C84;
    },
    /*system_channels.SystemChannels.restoration*/get restoration() {
      return C[85] || CT.C85;
    },
    /*system_channels.SystemChannels.deferredComponent*/get deferredComponent() {
      return C[86] || CT.C86;
    },
    /*system_channels.SystemChannels.localization*/get localization() {
      return C[87] || CT.C87;
    },
    /*system_channels.SystemChannels.menu*/get menu() {
      return C[88] || CT.C88;
    },
    /*system_channels.SystemChannels.contextMenu*/get contextMenu() {
      return C[89] || CT.C89;
    },
    /*system_channels.SystemChannels.keyboard*/get keyboard() {
      return C[90] || CT.C90;
    }
  }, false);
  var keyCode$ = dart.privateName(raw_keyboard_windows, "RawKeyEventDataWindows.keyCode");
  var scanCode$ = dart.privateName(raw_keyboard_windows, "RawKeyEventDataWindows.scanCode");
  var characterCodePoint$ = dart.privateName(raw_keyboard_windows, "RawKeyEventDataWindows.characterCodePoint");
  var modifiers$ = dart.privateName(raw_keyboard_windows, "RawKeyEventDataWindows.modifiers");
  var _isLeftRightModifierPressed = dart.privateName(raw_keyboard_windows, "_isLeftRightModifierPressed");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  raw_keyboard.RawKeyEventData = class RawKeyEventData extends Object_Diagnosticable$36$ {
    get isControlPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.controlModifier);
    }
    get isShiftPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.shiftModifier);
    }
    get isAltPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.altModifier);
    }
    get isMetaPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.metaModifier);
    }
    get modifiersPressed() {
      let result = new (G.LinkedMapOfModifierKey$KeyboardSide()).new();
      for (let key of raw_keyboard.ModifierKey.values) {
        if (this.isModifierPressed(key)) {
          let side = this.getModifierSide(key);
          if (side != null) {
            result[$_set](key, side);
          }
          if (!dart.fn(() => {
            if (side == null) {
              print.debugPrint("Raw key data is returning inconsistent information for " + "pressed modifiers. isModifierPressed returns true for " + dart.str(key) + " " + "being pressed, but when getModifierSide is called, it says " + "that no modifiers are pressed.");
              if (T$.RawKeyEventDataAndroid()[_is](this)) {
                print.debugPrint("Android raw key metaState: " + dart.strSafe(T$.RawKeyEventDataAndroid()[_as](this).metaState));
              }
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[23], 252, 16, "() {\r\n          if (side == null) {\r\n            debugPrint(\r\n              'Raw key data is returning inconsistent information for '\r\n              'pressed modifiers. isModifierPressed returns true for $key '\r\n              'being pressed, but when getModifierSide is called, it says '\r\n              'that no modifiers are pressed.',\r\n            );\r\n            if (this is RawKeyEventDataAndroid) {\r\n              debugPrint('Android raw key metaState: ${(this as RawKeyEventDataAndroid).metaState}');\r\n            }\r\n          }\r\n          return true;\r\n        }()");
        }
      }
      return result;
    }
    shouldDispatchEvent() {
      return true;
    }
  };
  (raw_keyboard.RawKeyEventData.new = function() {
    ;
  }).prototype = raw_keyboard.RawKeyEventData.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyEventData);
  dart.addRtiResources(raw_keyboard.RawKeyEventData, ["flutter__src__services__raw_keyboard|RawKeyEventData"]);
  dart.addTypeCaches(raw_keyboard.RawKeyEventData);
  dart.setMethodSignature(raw_keyboard.RawKeyEventData, () => dart.global.Object.setPrototypeOf({shouldDispatchEvent: T$.VoidTobool()}, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyEventData))));
  dart.setGetterSignature(raw_keyboard.RawKeyEventData, () => dart.global.Object.setPrototypeOf({
    isControlPressed: T$.bool(),
    isShiftPressed: T$.bool(),
    isAltPressed: T$.bool(),
    isMetaPressed: T$.bool(),
    modifiersPressed: T$.MapOfModifierKey$KeyboardSide()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyEventData))));
  dart.setLibraryUri(raw_keyboard.RawKeyEventData, I[24]);
  raw_keyboard_windows.RawKeyEventDataWindows = class RawKeyEventDataWindows extends raw_keyboard.RawKeyEventData {
    get keyCode() {
      return this[keyCode$];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get scanCode() {
      return this[scanCode$];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get characterCodePoint() {
      return this[characterCodePoint$];
    }
    set characterCodePoint(value) {
      super.characterCodePoint = value;
    }
    get modifiers() {
      return this[modifiers$];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    static ['_#new#tearOff'](opts) {
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
      let characterCodePoint = opts && 'characterCodePoint' in opts ? opts.characterCodePoint : 0;
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
      return new raw_keyboard_windows.RawKeyEventDataWindows.new({keyCode: keyCode, scanCode: scanCode, characterCodePoint: characterCodePoint, modifiers: modifiers});
    }
    get keyLabel() {
      return this.characterCodePoint === 0 ? "" : core.String.fromCharCode(this.characterCodePoint);
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kWindowsToPhysicalKey[$_get](this.scanCode);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(94489280512.0 + this.scanCode) : t$3626;
    }
    get logicalKey() {
      let t$3626;
      let numPadKey = keyboard_maps$46g.kWindowsNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel[$isNotEmpty] && !keyboard_key$46g.LogicalKeyboardKey.isControlCharacter(this.keyLabel)) {
        let keyId = (0 | (this.characterCodePoint & 4294967295.0) >>> 0) >>> 0;
        t$3626 = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyId) : t$3626;
      }
      let newKey = keyboard_maps$46g.kWindowsToLogicalKey[$_get](this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.keyCode | 94489280512.0) >>> 0);
    }
    [_isLeftRightModifierPressed](side, anyMask, leftMask, rightMask) {
      if ((this.modifiers & anyMask) === 0 && (this.modifiers & leftMask) === 0 && (this.modifiers & rightMask) === 0) {
        return false;
      }
      let anyOnly = (this.modifiers & (leftMask | rightMask | anyMask) >>> 0) >>> 0 === anyMask;
      switch (side) {
        case C[91] || CT.C91:
          {
            return true;
          }
        case C[92] || CT.C92:
          {
            return (this.modifiers & leftMask) !== 0 && (this.modifiers & rightMask) !== 0 || anyOnly;
          }
        case C[93] || CT.C93:
          {
            return (this.modifiers & leftMask) !== 0 || anyOnly;
          }
        case C[94] || CT.C94:
          {
            return (this.modifiers & rightMask) !== 0 || anyOnly;
          }
      }
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      let result = null;
      switch (key) {
        case C[95] || CT.C95:
          {
            result = this[_isLeftRightModifierPressed](side, 8, 16, 32);
            break;
          }
        case C[96] || CT.C96:
          {
            result = this[_isLeftRightModifierPressed](side, 1, 2, 4);
            break;
          }
        case C[97] || CT.C97:
          {
            result = this[_isLeftRightModifierPressed](side, 64, 128, 256);
            break;
          }
        case C[98] || CT.C98:
          {
            result = this[_isLeftRightModifierPressed](side, (512 | 1024) >>> 0, 512, 1024);
            break;
          }
        case C[99] || CT.C99:
          {
            result = (this.modifiers & 2048) !== 0;
            break;
          }
        case C[100] || CT.C100:
          {
            result = (this.modifiers & 8192) !== 0;
            break;
          }
        case C[101] || CT.C101:
          {
            result = (this.modifiers & 4096) !== 0;
            break;
          }
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            result = false;
          }
      }
      if (!(!result || this.getModifierSide(key) != null)) dart.assertFailed(dart.str(dart.runtimeType(this)) + " thinks that a modifier is pressed, but can't figure out what side it's on.", I[22], 151, 12, "!result || getModifierSide(key) != null");
      return result;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask, anyMask) => {
        let combinedMask = (leftMask | rightMask) >>> 0;
        let combined = (this.modifiers & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask || (this.modifiers & (combinedMask | anyMask) >>> 0) >>> 0 === anyMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, T$.intAndintAndintToKeyboardSideN());
      switch (key) {
        case C[95] || CT.C95:
          {
            return findSide(16, 32, 8);
          }
        case C[96] || CT.C96:
          {
            return findSide(2, 4, 1);
          }
        case C[97] || CT.C97:
          {
            return findSide(128, 256, 64);
          }
        case C[98] || CT.C98:
          {
            return findSide(512, 1024, 0);
          }
        case C[99] || CT.C99:
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return raw_keyboard.KeyboardSide.all;
          }
      }
    }
    shouldDispatchEvent() {
      return this.keyCode !== 229;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("scanCode", this.scanCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("characterCodePoint", this.characterCodePoint));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("modifiers", this.modifiers));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataWindows()[_is](other) && other.keyCode === this.keyCode && other.scanCode === this.scanCode && other.characterCodePoint === this.characterCodePoint && other.modifiers === this.modifiers;
    }
    get hashCode() {
      return core.Object.hash(this.keyCode, this.scanCode, this.characterCodePoint, this.modifiers);
    }
  };
  (raw_keyboard_windows.RawKeyEventDataWindows.new = function(opts) {
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let characterCodePoint = opts && 'characterCodePoint' in opts ? opts.characterCodePoint : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[keyCode$] = keyCode;
    this[scanCode$] = scanCode;
    this[characterCodePoint$] = characterCodePoint;
    this[modifiers$] = modifiers;
    dart.global.Object.getPrototypeOf(raw_keyboard_windows.RawKeyEventDataWindows).new.call(this);
    ;
  }).prototype = raw_keyboard_windows.RawKeyEventDataWindows.prototype;
  dart.addTypeTests(raw_keyboard_windows.RawKeyEventDataWindows);
  dart.addRtiResources(raw_keyboard_windows.RawKeyEventDataWindows, ["flutter__src__services__raw_keyboard_windows|RawKeyEventDataWindows"]);
  dart.addTypeCaches(raw_keyboard_windows.RawKeyEventDataWindows);
  dart.setMethodSignature(raw_keyboard_windows.RawKeyEventDataWindows, () => dart.global.Object.setPrototypeOf({
    [_isLeftRightModifierPressed]: T$.KeyboardSideAndintAndint__Tobool(),
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSideN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_windows.RawKeyEventDataWindows))));
  dart.setGetterSignature(raw_keyboard_windows.RawKeyEventDataWindows, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_windows.RawKeyEventDataWindows))));
  dart.setLibraryUri(raw_keyboard_windows.RawKeyEventDataWindows, I[25]);
  dart.setFieldSignature(raw_keyboard_windows.RawKeyEventDataWindows, () => dart.global.Object.setPrototypeOf({
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    scanCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    characterCodePoint: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    modifiers: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_windows.RawKeyEventDataWindows))));
  dart.setStaticFieldSignature(raw_keyboard_windows.RawKeyEventDataWindows, () => ['modifierShift', 'modifierLeftShift', 'modifierRightShift', 'modifierControl', 'modifierLeftControl', 'modifierRightControl', 'modifierAlt', 'modifierLeftAlt', 'modifierRightAlt', 'modifierLeftMeta', 'modifierRightMeta', 'modifierCaps', 'modifierNumLock', 'modifierScrollLock']);
  dart.defineExtensionMethods(raw_keyboard_windows.RawKeyEventDataWindows, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_windows.RawKeyEventDataWindows, ['hashCode']);
  dart.defineLazy(raw_keyboard_windows.RawKeyEventDataWindows, {
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierControl*/get modifierControl() {
      return 8;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierLeftControl*/get modifierLeftControl() {
      return 16;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierRightControl*/get modifierRightControl() {
      return 32;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierAlt*/get modifierAlt() {
      return 64;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierLeftAlt*/get modifierLeftAlt() {
      return 128;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierRightAlt*/get modifierRightAlt() {
      return 256;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierLeftMeta*/get modifierLeftMeta() {
      return 512;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierRightMeta*/get modifierRightMeta() {
      return 1024;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierCaps*/get modifierCaps() {
      return 2048;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierNumLock*/get modifierNumLock() {
      return 4096;
    },
    /*raw_keyboard_windows.RawKeyEventDataWindows.modifierScrollLock*/get modifierScrollLock() {
      return 8192;
    }
  }, false);
  dart.defineLazy(raw_keyboard_windows, {
    /*raw_keyboard_windows._vkProcessKey*/get _vkProcessKey() {
      return 229;
    }
  }, false);
  var code$0 = dart.privateName(raw_keyboard_web, "RawKeyEventDataWeb.code");
  var key$ = dart.privateName(raw_keyboard_web, "RawKeyEventDataWeb.key");
  var location$ = dart.privateName(raw_keyboard_web, "RawKeyEventDataWeb.location");
  var metaState$ = dart.privateName(raw_keyboard_web, "RawKeyEventDataWeb.metaState");
  var keyCode$0 = dart.privateName(raw_keyboard_web, "RawKeyEventDataWeb.keyCode");
  raw_keyboard_web.RawKeyEventDataWeb = class RawKeyEventDataWeb extends raw_keyboard.RawKeyEventData {
    get code() {
      return this[code$0];
    }
    set code(value) {
      super.code = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get location() {
      return this[location$];
    }
    set location(value) {
      super.location = value;
    }
    get metaState() {
      return this[metaState$];
    }
    set metaState(value) {
      super.metaState = value;
    }
    get keyCode() {
      return this[keyCode$0];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    static ['_#new#tearOff'](opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let location = opts && 'location' in opts ? opts.location : 0;
      let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      return new raw_keyboard_web.RawKeyEventDataWeb.new({code: code, key: key, location: location, metaState: metaState, keyCode: keyCode});
    }
    get keyLabel() {
      let t$3626;
      return this.key === "Unidentified" ? "" : (t$3626 = raw_keyboard_web._unicodeChar(this.key), t$3626 == null ? "" : t$3626);
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kWebToPhysicalKey[$_get](this.code);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(98784247808.0 + this.code[$hashCode]) : t$3626;
    }
    get logicalKey() {
      let t$3626;
      let maybeLocationKey = (t$3626 = keyboard_maps$46g.kWebLocationMap[$_get](this.key), t$3626 == null ? null : t$3626[$_get](this.location));
      if (maybeLocationKey != null) {
        return maybeLocationKey;
      }
      let newKey = keyboard_maps$46g.kWebToLogicalKey[$_get](this.key);
      if (newKey != null) {
        return newKey;
      }
      let isPrintable = this.key.length === 1;
      if (isPrintable) {
        return new keyboard_key$46g.LogicalKeyboardKey.new(this.key[$toLowerCase]()[$codeUnitAt](0));
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new(this.code[$hashCode] + 98784247808.0);
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      switch (key) {
        case C[95] || CT.C95:
          {
            return (this.metaState & 4) !== 0;
          }
        case C[96] || CT.C96:
          {
            return (this.metaState & 1) !== 0;
          }
        case C[97] || CT.C97:
          {
            return (this.metaState & 2) !== 0;
          }
        case C[98] || CT.C98:
          {
            return (this.metaState & 8) !== 0;
          }
        case C[101] || CT.C101:
          {
            return (this.metaState & 16) !== 0;
          }
        case C[99] || CT.C99:
          {
            return (this.metaState & 32) !== 0;
          }
        case C[100] || CT.C100:
          {
            return (this.metaState & 64) !== 0;
          }
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return false;
          }
      }
    }
    getModifierSide(key) {
      return raw_keyboard.KeyboardSide.any;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("code", this.code));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("key", this.key));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("location", this.location));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("metaState", this.metaState));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataWeb()[_is](other) && other.code === this.code && other.key === this.key && other.location === this.location && other.metaState === this.metaState && other.keyCode === this.keyCode;
    }
    get hashCode() {
      return core.Object.hash(this.code, this.key, this.location, this.metaState, this.keyCode);
    }
  };
  (raw_keyboard_web.RawKeyEventDataWeb.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let location = opts && 'location' in opts ? opts.location : 0;
    let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    this[code$0] = code;
    this[key$] = key;
    this[location$] = location;
    this[metaState$] = metaState;
    this[keyCode$0] = keyCode;
    dart.global.Object.getPrototypeOf(raw_keyboard_web.RawKeyEventDataWeb).new.call(this);
    ;
  }).prototype = raw_keyboard_web.RawKeyEventDataWeb.prototype;
  dart.addTypeTests(raw_keyboard_web.RawKeyEventDataWeb);
  dart.addRtiResources(raw_keyboard_web.RawKeyEventDataWeb, ["flutter__src__services__raw_keyboard_web|RawKeyEventDataWeb"]);
  dart.addTypeCaches(raw_keyboard_web.RawKeyEventDataWeb);
  dart.setMethodSignature(raw_keyboard_web.RawKeyEventDataWeb, () => dart.global.Object.setPrototypeOf({
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSide()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_web.RawKeyEventDataWeb))));
  dart.setGetterSignature(raw_keyboard_web.RawKeyEventDataWeb, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_web.RawKeyEventDataWeb))));
  dart.setLibraryUri(raw_keyboard_web.RawKeyEventDataWeb, I[26]);
  dart.setFieldSignature(raw_keyboard_web.RawKeyEventDataWeb, () => dart.global.Object.setPrototypeOf({
    code: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    key: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    location: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    metaState: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_web.RawKeyEventDataWeb))));
  dart.setStaticFieldSignature(raw_keyboard_web.RawKeyEventDataWeb, () => ['modifierNone', 'modifierShift', 'modifierAlt', 'modifierControl', 'modifierMeta', 'modifierNumLock', 'modifierCapsLock', 'modifierScrollLock']);
  dart.defineExtensionMethods(raw_keyboard_web.RawKeyEventDataWeb, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_web.RawKeyEventDataWeb, ['hashCode']);
  dart.defineLazy(raw_keyboard_web.RawKeyEventDataWeb, {
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierNone*/get modifierNone() {
      return 0;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierAlt*/get modifierAlt() {
      return 2;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierControl*/get modifierControl() {
      return 4;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierMeta*/get modifierMeta() {
      return 8;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierNumLock*/get modifierNumLock() {
      return 16;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierCapsLock*/get modifierCapsLock() {
      return 32;
    },
    /*raw_keyboard_web.RawKeyEventDataWeb.modifierScrollLock*/get modifierScrollLock() {
      return 64;
    }
  }, false);
  raw_keyboard_web._unicodeChar = function _unicodeChar(key) {
    if (key.length === 1) {
      return key[$substring](0, 1);
    }
    return null;
  };
  var characters$ = dart.privateName(raw_keyboard_macos, "RawKeyEventDataMacOs.characters");
  var charactersIgnoringModifiers$ = dart.privateName(raw_keyboard_macos, "RawKeyEventDataMacOs.charactersIgnoringModifiers");
  var keyCode$1 = dart.privateName(raw_keyboard_macos, "RawKeyEventDataMacOs.keyCode");
  var modifiers$0 = dart.privateName(raw_keyboard_macos, "RawKeyEventDataMacOs.modifiers");
  var specifiedLogicalKey$ = dart.privateName(raw_keyboard_macos, "RawKeyEventDataMacOs.specifiedLogicalKey");
  var _isLeftRightModifierPressed$ = dart.privateName(raw_keyboard_macos, "_isLeftRightModifierPressed");
  raw_keyboard_macos.RawKeyEventDataMacOs = class RawKeyEventDataMacOs extends raw_keyboard.RawKeyEventData {
    get characters() {
      return this[characters$];
    }
    set characters(value) {
      super.characters = value;
    }
    get charactersIgnoringModifiers() {
      return this[charactersIgnoringModifiers$];
    }
    set charactersIgnoringModifiers(value) {
      super.charactersIgnoringModifiers = value;
    }
    get keyCode() {
      return this[keyCode$1];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$0];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get specifiedLogicalKey() {
      return this[specifiedLogicalKey$];
    }
    set specifiedLogicalKey(value) {
      super.specifiedLogicalKey = value;
    }
    static ['_#new#tearOff'](opts) {
      let characters = opts && 'characters' in opts ? opts.characters : "";
      let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
      let specifiedLogicalKey = opts && 'specifiedLogicalKey' in opts ? opts.specifiedLogicalKey : null;
      return new raw_keyboard_macos.RawKeyEventDataMacOs.new({characters: characters, charactersIgnoringModifiers: charactersIgnoringModifiers, keyCode: keyCode, modifiers: modifiers, specifiedLogicalKey: specifiedLogicalKey});
    }
    get keyLabel() {
      return this.charactersIgnoringModifiers;
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kMacOsToPhysicalKey[$_get](this.keyCode);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(94489280512.0 + this.keyCode) : t$3626;
    }
    get logicalKey() {
      let t$3626, t$3626$;
      if (this.specifiedLogicalKey != null) {
        let key = dart.nullCheck(this.specifiedLogicalKey);
        t$3626 = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(key);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new(key) : t$3626;
      }
      let numPadKey = keyboard_maps$46g.kMacOsNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      let knownKey = keyboard_maps$46g.kMacOsToLogicalKey[$_get](this.keyCode);
      if (knownKey != null) {
        return knownKey;
      }
      let character = null;
      if (this.keyLabel[$isNotEmpty]) {
        let codePoints = this.keyLabel[$runes][$toList]();
        if (codePoints[$length] === 1 && !keyboard_key$46g.LogicalKeyboardKey.isControlCharacter(this.keyLabel) && !raw_keyboard_macos.RawKeyEventDataMacOs._isUnprintableKey(this.keyLabel)) {
          character = raw_keyboard_macos.runeToLowerCase(codePoints[$_get](0));
        }
      }
      if (character != null) {
        let keyId = (0 | (dart.notNull(character) & 4294967295.0) >>> 0) >>> 0;
        t$3626$ = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t$3626$ == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyId) : t$3626$;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.keyCode | 85899345920.0) >>> 0);
    }
    [_isLeftRightModifierPressed$](side, anyMask, leftMask, rightMask) {
      if ((this.modifiers & anyMask) === 0) {
        return false;
      }
      let anyOnly = (this.modifiers & (leftMask | rightMask | anyMask) >>> 0) >>> 0 === anyMask;
      switch (side) {
        case C[91] || CT.C91:
          {
            return true;
          }
        case C[92] || CT.C92:
          {
            return (this.modifiers & leftMask) !== 0 && (this.modifiers & rightMask) !== 0 || anyOnly;
          }
        case C[93] || CT.C93:
          {
            return (this.modifiers & leftMask) !== 0 || anyOnly;
          }
        case C[94] || CT.C94:
          {
            return (this.modifiers & rightMask) !== 0 || anyOnly;
          }
      }
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      let independentModifier = (this.modifiers & 4294901760.0) >>> 0;
      let result = null;
      switch (key) {
        case C[95] || CT.C95:
          {
            result = this[_isLeftRightModifierPressed$](side, (independentModifier & 262144) >>> 0, 1, 8192);
            break;
          }
        case C[96] || CT.C96:
          {
            result = this[_isLeftRightModifierPressed$](side, (independentModifier & 131072) >>> 0, 2, 4);
            break;
          }
        case C[97] || CT.C97:
          {
            result = this[_isLeftRightModifierPressed$](side, (independentModifier & 524288) >>> 0, 32, 64);
            break;
          }
        case C[98] || CT.C98:
          {
            result = this[_isLeftRightModifierPressed$](side, (independentModifier & 1048576) >>> 0, 8, 16);
            break;
          }
        case C[99] || CT.C99:
          {
            result = (independentModifier & 65536) !== 0;
            break;
          }
        case C[102] || CT.C102:
        case C[101] || CT.C101:
        case C[103] || CT.C103:
        case C[100] || CT.C100:
          {
            result = false;
          }
      }
      if (!(!result || this.getModifierSide(key) != null)) dart.assertFailed(dart.str(dart.runtimeType(this)) + " thinks that a modifier is pressed, but can't figure out what side it's on.", I[27], 193, 12, "!result || getModifierSide(key) != null");
      return result;
    }
    getModifierSide(key) {
      const findSide = (anyMask, leftMask, rightMask) => {
        let combinedMask = (leftMask | rightMask) >>> 0;
        let combined = (this.modifiers & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask || (this.modifiers & (combinedMask | anyMask) >>> 0) >>> 0 === anyMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, T$.intAndintAndintToKeyboardSideN());
      switch (key) {
        case C[95] || CT.C95:
          {
            return findSide(262144, 1, 8192);
          }
        case C[96] || CT.C96:
          {
            return findSide(131072, 2, 4);
          }
        case C[97] || CT.C97:
          {
            return findSide(524288, 32, 64);
          }
        case C[98] || CT.C98:
          {
            return findSide(1048576, 8, 16);
          }
        case C[99] || CT.C99:
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return raw_keyboard.KeyboardSide.all;
          }
      }
    }
    shouldDispatchEvent() {
      return !dart.equals(this.logicalKey, keyboard_key$46g.LogicalKeyboardKey.fn);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("characters", this.characters));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("charactersIgnoringModifiers", this.charactersIgnoringModifiers));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("modifiers", this.modifiers));
      properties.add(new (G.DiagnosticsPropertyOfintN()).new("specifiedLogicalKey", this.specifiedLogicalKey, {defaultValue: null}));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataMacOs()[_is](other) && other.characters === this.characters && other.charactersIgnoringModifiers === this.charactersIgnoringModifiers && other.keyCode === this.keyCode && other.modifiers === this.modifiers;
    }
    get hashCode() {
      return core.Object.hash(this.characters, this.charactersIgnoringModifiers, this.keyCode, this.modifiers);
    }
    static _isUnprintableKey(label) {
      if (label.length !== 1) {
        return false;
      }
      let codeUnit = label[$codeUnitAt](0);
      return codeUnit >= 63232 && codeUnit <= 63743;
    }
  };
  (raw_keyboard_macos.RawKeyEventDataMacOs.new = function(opts) {
    let characters = opts && 'characters' in opts ? opts.characters : "";
    let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    let specifiedLogicalKey = opts && 'specifiedLogicalKey' in opts ? opts.specifiedLogicalKey : null;
    this[characters$] = characters;
    this[charactersIgnoringModifiers$] = charactersIgnoringModifiers;
    this[keyCode$1] = keyCode;
    this[modifiers$0] = modifiers;
    this[specifiedLogicalKey$] = specifiedLogicalKey;
    dart.global.Object.getPrototypeOf(raw_keyboard_macos.RawKeyEventDataMacOs).new.call(this);
    ;
  }).prototype = raw_keyboard_macos.RawKeyEventDataMacOs.prototype;
  dart.addTypeTests(raw_keyboard_macos.RawKeyEventDataMacOs);
  dart.addRtiResources(raw_keyboard_macos.RawKeyEventDataMacOs, ["flutter__src__services__raw_keyboard_macos|RawKeyEventDataMacOs"]);
  dart.addTypeCaches(raw_keyboard_macos.RawKeyEventDataMacOs);
  dart.setMethodSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => dart.global.Object.setPrototypeOf({
    [_isLeftRightModifierPressed$]: T$.KeyboardSideAndintAndint__Tobool(),
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSideN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_macos.RawKeyEventDataMacOs))));
  dart.setStaticMethodSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => ['_isUnprintableKey']);
  dart.setGetterSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_macos.RawKeyEventDataMacOs))));
  dart.setLibraryUri(raw_keyboard_macos.RawKeyEventDataMacOs, I[28]);
  dart.setFieldSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => dart.global.Object.setPrototypeOf({
    characters: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    charactersIgnoringModifiers: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    modifiers: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    specifiedLogicalKey: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_macos.RawKeyEventDataMacOs))));
  dart.setStaticFieldSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => ['modifierCapsLock', 'modifierShift', 'modifierLeftShift', 'modifierRightShift', 'modifierControl', 'modifierLeftControl', 'modifierRightControl', 'modifierOption', 'modifierLeftOption', 'modifierRightOption', 'modifierCommand', 'modifierLeftCommand', 'modifierRightCommand', 'modifierNumericPad', 'modifierHelp', 'modifierFunction', 'deviceIndependentMask']);
  dart.defineExtensionMethods(raw_keyboard_macos.RawKeyEventDataMacOs, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_macos.RawKeyEventDataMacOs, ['hashCode']);
  dart.defineLazy(raw_keyboard_macos.RawKeyEventDataMacOs, {
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierCapsLock*/get modifierCapsLock() {
      return 65536;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierShift*/get modifierShift() {
      return 131072;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierControl*/get modifierControl() {
      return 262144;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftControl*/get modifierLeftControl() {
      return 1;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightControl*/get modifierRightControl() {
      return 8192;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierOption*/get modifierOption() {
      return 524288;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftOption*/get modifierLeftOption() {
      return 32;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightOption*/get modifierRightOption() {
      return 64;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierCommand*/get modifierCommand() {
      return 1048576;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftCommand*/get modifierLeftCommand() {
      return 8;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightCommand*/get modifierRightCommand() {
      return 16;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierNumericPad*/get modifierNumericPad() {
      return 2097152;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierHelp*/get modifierHelp() {
      return 4194304;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierFunction*/get modifierFunction() {
      return 8388608;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.deviceIndependentMask*/get deviceIndependentMask() {
      return 4294901760.0;
    }
  }, false);
  raw_keyboard_macos.runeToLowerCase = function runeToLowerCase(rune) {
    if (rune > 55295) {
      return rune;
    }
    return core.String.fromCharCode(rune)[$toLowerCase]()[$codeUnitAt](0);
  };
  var keyHelper$ = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.keyHelper");
  var unicodeScalarValues$ = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.unicodeScalarValues");
  var scanCode$0 = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.scanCode");
  var keyCode$2 = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.keyCode");
  var modifiers$1 = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.modifiers");
  var isDown$ = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.isDown");
  var specifiedLogicalKey$0 = dart.privateName(raw_keyboard_linux, "RawKeyEventDataLinux.specifiedLogicalKey");
  raw_keyboard_linux.RawKeyEventDataLinux = class RawKeyEventDataLinux extends raw_keyboard.RawKeyEventData {
    get keyHelper() {
      return this[keyHelper$];
    }
    set keyHelper(value) {
      super.keyHelper = value;
    }
    get unicodeScalarValues() {
      return this[unicodeScalarValues$];
    }
    set unicodeScalarValues(value) {
      super.unicodeScalarValues = value;
    }
    get scanCode() {
      return this[scanCode$0];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get keyCode() {
      return this[keyCode$2];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$1];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get isDown() {
      return this[isDown$];
    }
    set isDown(value) {
      super.isDown = value;
    }
    get specifiedLogicalKey() {
      return this[specifiedLogicalKey$0];
    }
    set specifiedLogicalKey(value) {
      super.specifiedLogicalKey = value;
    }
    static ['_#new#tearOff'](opts) {
      let keyHelper = opts && 'keyHelper' in opts ? opts.keyHelper : null;
      let unicodeScalarValues = opts && 'unicodeScalarValues' in opts ? opts.unicodeScalarValues : 0;
      let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
      let isDown = opts && 'isDown' in opts ? opts.isDown : null;
      let specifiedLogicalKey = opts && 'specifiedLogicalKey' in opts ? opts.specifiedLogicalKey : null;
      return new raw_keyboard_linux.RawKeyEventDataLinux.new({keyHelper: keyHelper, unicodeScalarValues: unicodeScalarValues, scanCode: scanCode, keyCode: keyCode, modifiers: modifiers, isDown: isDown, specifiedLogicalKey: specifiedLogicalKey});
    }
    get keyLabel() {
      return this.unicodeScalarValues === 0 ? "" : core.String.fromCharCode(this.unicodeScalarValues);
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kLinuxToPhysicalKey[$_get](this.scanCode);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(98784247808.0 + this.scanCode) : t$3626;
    }
    get logicalKey() {
      let t$3626, t$3626$;
      if (this.specifiedLogicalKey != null) {
        let key = dart.nullCheck(this.specifiedLogicalKey);
        t$3626 = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(key);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new(key) : t$3626;
      }
      let numPadKey = this.keyHelper.numpadKey(this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel[$isNotEmpty] && !keyboard_key$46g.LogicalKeyboardKey.isControlCharacter(this.keyLabel)) {
        let keyId = (0 | (this.unicodeScalarValues & 4294967295.0) >>> 0) >>> 0;
        t$3626$ = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t$3626$ == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyId) : t$3626$;
      }
      let newKey = this.keyHelper.logicalKey(this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.keyCode | this.keyHelper.platformPlane) >>> 0);
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      return this.keyHelper.isModifierPressed(key, this.modifiers, {side: side, keyCode: this.keyCode, isDown: this.isDown});
    }
    getModifierSide(key) {
      return this.keyHelper.getModifierSide(key);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("toolkit", this.keyHelper.debugToolkit));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("unicodeScalarValues", this.unicodeScalarValues));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("scanCode", this.scanCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("modifiers", this.modifiers));
      properties.add(new (G.DiagnosticsPropertyOfbool()).new("isDown", this.isDown));
      properties.add(new (G.DiagnosticsPropertyOfintN()).new("specifiedLogicalKey", this.specifiedLogicalKey, {defaultValue: null}));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataLinux()[_is](other) && dart.equals(dart.runtimeType(other.keyHelper), dart.runtimeType(this.keyHelper)) && other.unicodeScalarValues === this.unicodeScalarValues && other.scanCode === this.scanCode && other.keyCode === this.keyCode && other.modifiers === this.modifiers && other.isDown === this.isDown;
    }
    get hashCode() {
      return core.Object.hash(dart.runtimeType(this.keyHelper), this.unicodeScalarValues, this.scanCode, this.keyCode, this.modifiers, this.isDown);
    }
  };
  (raw_keyboard_linux.RawKeyEventDataLinux.new = function(opts) {
    let keyHelper = opts && 'keyHelper' in opts ? opts.keyHelper : null;
    let unicodeScalarValues = opts && 'unicodeScalarValues' in opts ? opts.unicodeScalarValues : 0;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    let isDown = opts && 'isDown' in opts ? opts.isDown : null;
    let specifiedLogicalKey = opts && 'specifiedLogicalKey' in opts ? opts.specifiedLogicalKey : null;
    this[keyHelper$] = keyHelper;
    this[unicodeScalarValues$] = unicodeScalarValues;
    this[scanCode$0] = scanCode;
    this[keyCode$2] = keyCode;
    this[modifiers$1] = modifiers;
    this[isDown$] = isDown;
    this[specifiedLogicalKey$0] = specifiedLogicalKey;
    if (!((unicodeScalarValues & ~4294967295.0 >>> 0) === 0)) dart.assertFailed(null, I[29], 43, 15, "(unicodeScalarValues & ~LogicalKeyboardKey.valueMask) == 0");
    dart.global.Object.getPrototypeOf(raw_keyboard_linux.RawKeyEventDataLinux).new.call(this);
    ;
  }).prototype = raw_keyboard_linux.RawKeyEventDataLinux.prototype;
  dart.addTypeTests(raw_keyboard_linux.RawKeyEventDataLinux);
  dart.addRtiResources(raw_keyboard_linux.RawKeyEventDataLinux, ["flutter__src__services__raw_keyboard_linux|RawKeyEventDataLinux"]);
  dart.addTypeCaches(raw_keyboard_linux.RawKeyEventDataLinux);
  dart.setMethodSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => dart.global.Object.setPrototypeOf({
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSide()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_linux.RawKeyEventDataLinux))));
  dart.setGetterSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_linux.RawKeyEventDataLinux))));
  dart.setLibraryUri(raw_keyboard_linux.RawKeyEventDataLinux, I[30]);
  dart.setFieldSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => dart.global.Object.setPrototypeOf({
    keyHelper: {type: T$.KeyHelper(), isConst: false, isFinal: true, libraryUri: I[30]},
    unicodeScalarValues: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    scanCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    modifiers: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    isDown: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    specifiedLogicalKey: {type: T$.intN(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_linux.RawKeyEventDataLinux))));
  dart.defineExtensionMethods(raw_keyboard_linux.RawKeyEventDataLinux, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_linux.RawKeyEventDataLinux, ['hashCode']);
  raw_keyboard_linux.KeyHelper = class KeyHelper extends core.Object {
    static new(toolkit) {
      if (toolkit === "glfw") {
        return new raw_keyboard_linux.GLFWKeyHelper.new();
      } else if (toolkit === "gtk") {
        return new raw_keyboard_linux.GtkKeyHelper.new();
      } else {
        dart.throw(assertions.FlutterError.new("Window toolkit not recognized: " + toolkit));
      }
    }
    static ['_#new#tearOff'](toolkit) {
      return raw_keyboard_linux.KeyHelper.new(toolkit);
    }
  };
  (raw_keyboard_linux.KeyHelper[dart.mixinNew] = function() {
  }).prototype = raw_keyboard_linux.KeyHelper.prototype;
  dart.addTypeTests(raw_keyboard_linux.KeyHelper);
  dart.addRtiResources(raw_keyboard_linux.KeyHelper, ["flutter__src__services__raw_keyboard_linux|KeyHelper"]);
  dart.addTypeCaches(raw_keyboard_linux.KeyHelper);
  dart.setStaticMethodSignature(raw_keyboard_linux.KeyHelper, () => ['new']);
  dart.setLibraryUri(raw_keyboard_linux.KeyHelper, I[30]);
  var _mergeModifiers = dart.privateName(raw_keyboard_linux, "_mergeModifiers");
  raw_keyboard_linux.GLFWKeyHelper = class GLFWKeyHelper extends core.Object {
    get debugToolkit() {
      return "GLFW";
    }
    [_mergeModifiers](opts) {
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : null;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : null;
      let isDown = opts && 'isDown' in opts ? opts.isDown : null;
      let modifierChange = 0;
      switch (keyCode) {
        case 340:
        case 344:
          {
            modifierChange = 1;
            break;
          }
        case 341:
        case 345:
          {
            modifierChange = 2;
            break;
          }
        case 342:
        case 346:
          {
            modifierChange = 4;
            break;
          }
        case 343:
        case 347:
          {
            modifierChange = 8;
            break;
          }
        case 280:
          {
            modifierChange = 16;
            break;
          }
        case 282:
          {
            modifierChange = 32;
            break;
          }
        default:
          {
            break;
          }
      }
      return isDown ? (modifiers | modifierChange) >>> 0 : (modifiers & ~modifierChange >>> 0) >>> 0;
    }
    isModifierPressed(key, modifiers, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : null;
      let isDown = opts && 'isDown' in opts ? opts.isDown : null;
      modifiers = this[_mergeModifiers]({modifiers: modifiers, keyCode: keyCode, isDown: isDown});
      switch (key) {
        case C[95] || CT.C95:
          {
            return (modifiers & 2) !== 0;
          }
        case C[96] || CT.C96:
          {
            return (modifiers & 1) !== 0;
          }
        case C[97] || CT.C97:
          {
            return (modifiers & 4) !== 0;
          }
        case C[98] || CT.C98:
          {
            return (modifiers & 8) !== 0;
          }
        case C[99] || CT.C99:
          {
            return (modifiers & 16) !== 0;
          }
        case C[101] || CT.C101:
          {
            return (modifiers & 32) !== 0;
          }
        case C[102] || CT.C102:
        case C[103] || CT.C103:
        case C[100] || CT.C100:
          {
            return false;
          }
      }
    }
    getModifierSide(key) {
      return raw_keyboard.KeyboardSide.all;
    }
    numpadKey(keyCode) {
      return keyboard_maps$46g.kGlfwNumpadMap[$_get](keyCode);
    }
    logicalKey(keyCode) {
      return keyboard_maps$46g.kGlfwToLogicalKey[$_get](keyCode);
    }
    get platformPlane() {
      return 103079215104.0;
    }
    static ['_#new#tearOff']() {
      return new raw_keyboard_linux.GLFWKeyHelper.new();
    }
  };
  (raw_keyboard_linux.GLFWKeyHelper.new = function() {
    ;
  }).prototype = raw_keyboard_linux.GLFWKeyHelper.prototype;
  dart.addTypeTests(raw_keyboard_linux.GLFWKeyHelper);
  dart.addRtiResources(raw_keyboard_linux.GLFWKeyHelper, ["flutter__src__services__raw_keyboard_linux|GLFWKeyHelper", "flutter__src__services__raw_keyboard_linux|KeyHelper"]);
  dart.addTypeCaches(raw_keyboard_linux.GLFWKeyHelper);
  dart.setMethodSignature(raw_keyboard_linux.GLFWKeyHelper, () => dart.global.Object.setPrototypeOf({
    [_mergeModifiers]: T$.__Toint(),
    isModifierPressed: T$.ModifierKeyAndint__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSide(),
    numpadKey: T$.intToLogicalKeyboardKeyN(),
    logicalKey: T$.intToLogicalKeyboardKeyN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_linux.GLFWKeyHelper))));
  dart.setGetterSignature(raw_keyboard_linux.GLFWKeyHelper, () => dart.global.Object.setPrototypeOf({
    debugToolkit: T$.String(),
    platformPlane: T$.int()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_linux.GLFWKeyHelper))));
  dart.setLibraryUri(raw_keyboard_linux.GLFWKeyHelper, I[30]);
  dart.setStaticFieldSignature(raw_keyboard_linux.GLFWKeyHelper, () => ['modifierCapsLock', 'modifierShift', 'modifierControl', 'modifierAlt', 'modifierMeta', 'modifierNumericPad']);
  dart.defineLazy(raw_keyboard_linux.GLFWKeyHelper, {
    /*raw_keyboard_linux.GLFWKeyHelper.modifierCapsLock*/get modifierCapsLock() {
      return 16;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierControl*/get modifierControl() {
      return 2;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierAlt*/get modifierAlt() {
      return 4;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierMeta*/get modifierMeta() {
      return 8;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierNumericPad*/get modifierNumericPad() {
      return 32;
    }
  }, false);
  raw_keyboard_linux.GtkKeyHelper = class GtkKeyHelper extends core.Object {
    get debugToolkit() {
      return "GTK";
    }
    [_mergeModifiers](opts) {
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : null;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : null;
      let isDown = opts && 'isDown' in opts ? opts.isDown : null;
      let modifierChange = 0;
      switch (keyCode) {
        case 65505:
        case 65506:
          {
            modifierChange = 1;
            break;
          }
        case 65507:
        case 65508:
          {
            modifierChange = 4;
            break;
          }
        case 65513:
        case 65514:
          {
            modifierChange = 8;
            break;
          }
        case 65515:
        case 65516:
          {
            modifierChange = 67108864;
            break;
          }
        case 65509:
        case 65510:
          {
            modifierChange = 2;
            break;
          }
        case 65407:
          {
            modifierChange = 16;
            break;
          }
        default:
          {
            break;
          }
      }
      return isDown ? (modifiers | modifierChange) >>> 0 : (modifiers & ~modifierChange >>> 0) >>> 0;
    }
    isModifierPressed(key, modifiers, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : null;
      let isDown = opts && 'isDown' in opts ? opts.isDown : null;
      modifiers = this[_mergeModifiers]({modifiers: modifiers, keyCode: keyCode, isDown: isDown});
      switch (key) {
        case C[95] || CT.C95:
          {
            return (modifiers & 4) !== 0;
          }
        case C[96] || CT.C96:
          {
            return (modifiers & 1) !== 0;
          }
        case C[97] || CT.C97:
          {
            return (modifiers & 8) !== 0;
          }
        case C[98] || CT.C98:
          {
            return (modifiers & 67108864) !== 0;
          }
        case C[99] || CT.C99:
          {
            return (modifiers & 2) !== 0;
          }
        case C[101] || CT.C101:
          {
            return (modifiers & 16) !== 0;
          }
        case C[102] || CT.C102:
        case C[103] || CT.C103:
        case C[100] || CT.C100:
          {
            return false;
          }
      }
    }
    getModifierSide(key) {
      return raw_keyboard.KeyboardSide.all;
    }
    numpadKey(keyCode) {
      return keyboard_maps$46g.kGtkNumpadMap[$_get](keyCode);
    }
    logicalKey(keyCode) {
      return keyboard_maps$46g.kGtkToLogicalKey[$_get](keyCode);
    }
    get platformPlane() {
      return 90194313216.0;
    }
    static ['_#new#tearOff']() {
      return new raw_keyboard_linux.GtkKeyHelper.new();
    }
  };
  (raw_keyboard_linux.GtkKeyHelper.new = function() {
    ;
  }).prototype = raw_keyboard_linux.GtkKeyHelper.prototype;
  dart.addTypeTests(raw_keyboard_linux.GtkKeyHelper);
  dart.addRtiResources(raw_keyboard_linux.GtkKeyHelper, ["flutter__src__services__raw_keyboard_linux|GtkKeyHelper", "flutter__src__services__raw_keyboard_linux|KeyHelper"]);
  dart.addTypeCaches(raw_keyboard_linux.GtkKeyHelper);
  dart.setMethodSignature(raw_keyboard_linux.GtkKeyHelper, () => dart.global.Object.setPrototypeOf({
    [_mergeModifiers]: T$.__Toint(),
    isModifierPressed: T$.ModifierKeyAndint__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSide(),
    numpadKey: T$.intToLogicalKeyboardKeyN(),
    logicalKey: T$.intToLogicalKeyboardKeyN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_linux.GtkKeyHelper))));
  dart.setGetterSignature(raw_keyboard_linux.GtkKeyHelper, () => dart.global.Object.setPrototypeOf({
    debugToolkit: T$.String(),
    platformPlane: T$.int()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_linux.GtkKeyHelper))));
  dart.setLibraryUri(raw_keyboard_linux.GtkKeyHelper, I[30]);
  dart.setStaticFieldSignature(raw_keyboard_linux.GtkKeyHelper, () => ['modifierShift', 'modifierCapsLock', 'modifierControl', 'modifierMod1', 'modifierMod2', 'modifierMeta']);
  dart.defineLazy(raw_keyboard_linux.GtkKeyHelper, {
    /*raw_keyboard_linux.GtkKeyHelper.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_linux.GtkKeyHelper.modifierCapsLock*/get modifierCapsLock() {
      return 2;
    },
    /*raw_keyboard_linux.GtkKeyHelper.modifierControl*/get modifierControl() {
      return 4;
    },
    /*raw_keyboard_linux.GtkKeyHelper.modifierMod1*/get modifierMod1() {
      return 8;
    },
    /*raw_keyboard_linux.GtkKeyHelper.modifierMod2*/get modifierMod2() {
      return 16;
    },
    /*raw_keyboard_linux.GtkKeyHelper.modifierMeta*/get modifierMeta() {
      return 67108864;
    }
  }, false);
  var characters$0 = dart.privateName(raw_keyboard_ios, "RawKeyEventDataIos.characters");
  var charactersIgnoringModifiers$0 = dart.privateName(raw_keyboard_ios, "RawKeyEventDataIos.charactersIgnoringModifiers");
  var keyCode$3 = dart.privateName(raw_keyboard_ios, "RawKeyEventDataIos.keyCode");
  var modifiers$2 = dart.privateName(raw_keyboard_ios, "RawKeyEventDataIos.modifiers");
  var _isLeftRightModifierPressed$0 = dart.privateName(raw_keyboard_ios, "_isLeftRightModifierPressed");
  raw_keyboard_ios.RawKeyEventDataIos = class RawKeyEventDataIos extends raw_keyboard.RawKeyEventData {
    get characters() {
      return this[characters$0];
    }
    set characters(value) {
      super.characters = value;
    }
    get charactersIgnoringModifiers() {
      return this[charactersIgnoringModifiers$0];
    }
    set charactersIgnoringModifiers(value) {
      super.charactersIgnoringModifiers = value;
    }
    get keyCode() {
      return this[keyCode$3];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$2];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    static ['_#new#tearOff'](opts) {
      let characters = opts && 'characters' in opts ? opts.characters : "";
      let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
      return new raw_keyboard_ios.RawKeyEventDataIos.new({characters: characters, charactersIgnoringModifiers: charactersIgnoringModifiers, keyCode: keyCode, modifiers: modifiers});
    }
    get keyLabel() {
      return this.charactersIgnoringModifiers;
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kIosToPhysicalKey[$_get](this.keyCode);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(81604378624.0 + this.keyCode) : t$3626;
    }
    get logicalKey() {
      let t$3626;
      let numPadKey = keyboard_maps$46g.kIosNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      let specialKey = keyboard_maps$46g.kIosSpecialLogicalMap[$_get](this.keyLabel);
      if (specialKey != null) {
        return specialKey;
      }
      let knownKey = keyboard_maps$46g.kIosToLogicalKey[$_get](this.keyCode);
      if (knownKey != null) {
        return knownKey;
      }
      if (this.keyLabel[$isNotEmpty] && !keyboard_key$46g.LogicalKeyboardKey.isControlCharacter(this.keyLabel) && !raw_keyboard_ios.RawKeyEventDataIos._isUnprintableKey(this.keyLabel)) {
        if (!(this.charactersIgnoringModifiers.length <= 2)) dart.assertFailed(null, I[31], 111, 14, "charactersIgnoringModifiers.length <= 2");
        let codeUnit = this.charactersIgnoringModifiers[$codeUnitAt](0);
        if (this.charactersIgnoringModifiers.length === 2) {
          let secondCode = this.charactersIgnoringModifiers[$codeUnitAt](1);
          codeUnit = (codeUnit << 16 | secondCode) >>> 0;
        }
        let keyId = (0 | (codeUnit & 4294967295.0) >>> 0) >>> 0;
        t$3626 = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyId) : t$3626;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.keyCode | 81604378624.0) >>> 0);
    }
    static _isUnprintableKey(label) {
      if (label.length !== 1) {
        return false;
      }
      let codeUnit = label[$codeUnitAt](0);
      return codeUnit >= 63232 && codeUnit <= 63743;
    }
    [_isLeftRightModifierPressed$0](side, anyMask, leftMask, rightMask) {
      if ((this.modifiers & anyMask) === 0) {
        return false;
      }
      let anyOnly = (this.modifiers & (leftMask | rightMask | anyMask) >>> 0) >>> 0 === anyMask;
      switch (side) {
        case C[91] || CT.C91:
          {
            return true;
          }
        case C[92] || CT.C92:
          {
            return (this.modifiers & leftMask) !== 0 && (this.modifiers & rightMask) !== 0 || anyOnly;
          }
        case C[93] || CT.C93:
          {
            return (this.modifiers & leftMask) !== 0 || anyOnly;
          }
        case C[94] || CT.C94:
          {
            return (this.modifiers & rightMask) !== 0 || anyOnly;
          }
      }
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      let independentModifier = (this.modifiers & 4294901760.0) >>> 0;
      let result = null;
      switch (key) {
        case C[95] || CT.C95:
          {
            result = this[_isLeftRightModifierPressed$0](side, (independentModifier & 262144) >>> 0, 1, 8192);
            break;
          }
        case C[96] || CT.C96:
          {
            result = this[_isLeftRightModifierPressed$0](side, (independentModifier & 131072) >>> 0, 2, 4);
            break;
          }
        case C[97] || CT.C97:
          {
            result = this[_isLeftRightModifierPressed$0](side, (independentModifier & 524288) >>> 0, 32, 64);
            break;
          }
        case C[98] || CT.C98:
          {
            result = this[_isLeftRightModifierPressed$0](side, (independentModifier & 1048576) >>> 0, 8, 16);
            break;
          }
        case C[99] || CT.C99:
          {
            result = (independentModifier & 65536) !== 0;
            break;
          }
        case C[102] || CT.C102:
        case C[101] || CT.C101:
        case C[103] || CT.C103:
        case C[100] || CT.C100:
          {
            result = false;
          }
      }
      if (!(!result || this.getModifierSide(key) != null)) dart.assertFailed(dart.str(dart.runtimeType(this)) + " thinks that a modifier is pressed, but can't figure out what side it's on.", I[31], 191, 12, "!result || getModifierSide(key) != null");
      return result;
    }
    getModifierSide(key) {
      const findSide = (anyMask, leftMask, rightMask) => {
        let combinedMask = (leftMask | rightMask) >>> 0;
        let combined = (this.modifiers & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask || (this.modifiers & (combinedMask | anyMask) >>> 0) >>> 0 === anyMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, T$.intAndintAndintToKeyboardSideN());
      switch (key) {
        case C[95] || CT.C95:
          {
            return findSide(262144, 1, 8192);
          }
        case C[96] || CT.C96:
          {
            return findSide(131072, 2, 4);
          }
        case C[97] || CT.C97:
          {
            return findSide(524288, 32, 64);
          }
        case C[98] || CT.C98:
          {
            return findSide(1048576, 8, 16);
          }
        case C[99] || CT.C99:
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return raw_keyboard.KeyboardSide.all;
          }
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfString()).new("characters", this.characters));
      properties.add(new (G.DiagnosticsPropertyOfString()).new("charactersIgnoringModifiers", this.charactersIgnoringModifiers));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("modifiers", this.modifiers));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataIos()[_is](other) && other.characters === this.characters && other.charactersIgnoringModifiers === this.charactersIgnoringModifiers && other.keyCode === this.keyCode && other.modifiers === this.modifiers;
    }
    get hashCode() {
      return core.Object.hash(this.characters, this.charactersIgnoringModifiers, this.keyCode, this.modifiers);
    }
  };
  (raw_keyboard_ios.RawKeyEventDataIos.new = function(opts) {
    let characters = opts && 'characters' in opts ? opts.characters : "";
    let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[characters$0] = characters;
    this[charactersIgnoringModifiers$0] = charactersIgnoringModifiers;
    this[keyCode$3] = keyCode;
    this[modifiers$2] = modifiers;
    dart.global.Object.getPrototypeOf(raw_keyboard_ios.RawKeyEventDataIos).new.call(this);
    ;
  }).prototype = raw_keyboard_ios.RawKeyEventDataIos.prototype;
  dart.addTypeTests(raw_keyboard_ios.RawKeyEventDataIos);
  dart.addRtiResources(raw_keyboard_ios.RawKeyEventDataIos, ["flutter__src__services__raw_keyboard_ios|RawKeyEventDataIos"]);
  dart.addTypeCaches(raw_keyboard_ios.RawKeyEventDataIos);
  dart.setMethodSignature(raw_keyboard_ios.RawKeyEventDataIos, () => dart.global.Object.setPrototypeOf({
    [_isLeftRightModifierPressed$0]: T$.KeyboardSideAndintAndint__Tobool(),
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSideN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_ios.RawKeyEventDataIos))));
  dart.setStaticMethodSignature(raw_keyboard_ios.RawKeyEventDataIos, () => ['_isUnprintableKey']);
  dart.setGetterSignature(raw_keyboard_ios.RawKeyEventDataIos, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_ios.RawKeyEventDataIos))));
  dart.setLibraryUri(raw_keyboard_ios.RawKeyEventDataIos, I[32]);
  dart.setFieldSignature(raw_keyboard_ios.RawKeyEventDataIos, () => dart.global.Object.setPrototypeOf({
    characters: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    charactersIgnoringModifiers: {type: T$.String(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    modifiers: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_ios.RawKeyEventDataIos))));
  dart.setStaticFieldSignature(raw_keyboard_ios.RawKeyEventDataIos, () => ['modifierCapsLock', 'modifierShift', 'modifierLeftShift', 'modifierRightShift', 'modifierControl', 'modifierLeftControl', 'modifierRightControl', 'modifierOption', 'modifierLeftOption', 'modifierRightOption', 'modifierCommand', 'modifierLeftCommand', 'modifierRightCommand', 'modifierNumericPad', 'modifierHelp', 'modifierFunction', 'deviceIndependentMask']);
  dart.defineExtensionMethods(raw_keyboard_ios.RawKeyEventDataIos, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_ios.RawKeyEventDataIos, ['hashCode']);
  dart.defineLazy(raw_keyboard_ios.RawKeyEventDataIos, {
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierCapsLock*/get modifierCapsLock() {
      return 65536;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierShift*/get modifierShift() {
      return 131072;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierControl*/get modifierControl() {
      return 262144;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierLeftControl*/get modifierLeftControl() {
      return 1;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierRightControl*/get modifierRightControl() {
      return 8192;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierOption*/get modifierOption() {
      return 524288;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierLeftOption*/get modifierLeftOption() {
      return 32;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierRightOption*/get modifierRightOption() {
      return 64;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierCommand*/get modifierCommand() {
      return 1048576;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierLeftCommand*/get modifierLeftCommand() {
      return 8;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierRightCommand*/get modifierRightCommand() {
      return 16;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierNumericPad*/get modifierNumericPad() {
      return 2097152;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierHelp*/get modifierHelp() {
      return 4194304;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.modifierFunction*/get modifierFunction() {
      return 8388608;
    },
    /*raw_keyboard_ios.RawKeyEventDataIos.deviceIndependentMask*/get deviceIndependentMask() {
      return 4294901760.0;
    }
  }, false);
  var hidUsage$ = dart.privateName(raw_keyboard_fuchsia, "RawKeyEventDataFuchsia.hidUsage");
  var codePoint$ = dart.privateName(raw_keyboard_fuchsia, "RawKeyEventDataFuchsia.codePoint");
  var modifiers$3 = dart.privateName(raw_keyboard_fuchsia, "RawKeyEventDataFuchsia.modifiers");
  var _isLeftRightModifierPressed$1 = dart.privateName(raw_keyboard_fuchsia, "_isLeftRightModifierPressed");
  raw_keyboard_fuchsia.RawKeyEventDataFuchsia = class RawKeyEventDataFuchsia extends raw_keyboard.RawKeyEventData {
    get hidUsage() {
      return this[hidUsage$];
    }
    set hidUsage(value) {
      super.hidUsage = value;
    }
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get modifiers() {
      return this[modifiers$3];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    static ['_#new#tearOff'](opts) {
      let hidUsage = opts && 'hidUsage' in opts ? opts.hidUsage : 0;
      let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
      let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
      return new raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new({hidUsage: hidUsage, codePoint: codePoint, modifiers: modifiers});
    }
    get keyLabel() {
      return this.codePoint === 0 ? "" : core.String.fromCharCode(this.codePoint);
    }
    get logicalKey() {
      let t$3626;
      if (this.codePoint !== 0) {
        let flutterId = (0 | (this.codePoint & 4294967295.0) >>> 0) >>> 0;
        t$3626 = keyboard_maps$46g.kFuchsiaToLogicalKey[$_get](flutterId);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new((0 | (this.codePoint & 4294967295.0) >>> 0) >>> 0) : t$3626;
      }
      let newKey = keyboard_maps$46g.kFuchsiaToLogicalKey[$_get]((this.hidUsage | 77309411328.0) >>> 0);
      if (newKey != null) {
        return newKey;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.hidUsage | 77309411328.0) >>> 0);
    }
    get physicalKey() {
      let t$3626;
      t$3626 = keyboard_maps$46g.kFuchsiaToPhysicalKey[$_get](this.hidUsage);
      return t$3626 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(77309411328.0 + this.hidUsage) : t$3626;
    }
    [_isLeftRightModifierPressed$1](side, anyMask, leftMask, rightMask) {
      if ((this.modifiers & anyMask) === 0) {
        return false;
      }
      switch (side) {
        case C[91] || CT.C91:
          {
            return true;
          }
        case C[92] || CT.C92:
          {
            return (this.modifiers & leftMask) !== 0 && (this.modifiers & rightMask) !== 0;
          }
        case C[93] || CT.C93:
          {
            return (this.modifiers & leftMask) !== 0;
          }
        case C[94] || CT.C94:
          {
            return (this.modifiers & rightMask) !== 0;
          }
      }
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      switch (key) {
        case C[95] || CT.C95:
          {
            return this[_isLeftRightModifierPressed$1](side, 24, 8, 16);
          }
        case C[96] || CT.C96:
          {
            return this[_isLeftRightModifierPressed$1](side, 6, 2, 4);
          }
        case C[97] || CT.C97:
          {
            return this[_isLeftRightModifierPressed$1](side, 96, 32, 64);
          }
        case C[98] || CT.C98:
          {
            return this[_isLeftRightModifierPressed$1](side, 384, 128, 256);
          }
        case C[99] || CT.C99:
          {
            return (this.modifiers & 1) !== 0;
          }
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return false;
          }
      }
    }
    getModifierSide(key) {
      const findSide = (anyMask, leftMask, rightMask) => {
        let combined = (this.modifiers & anyMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === anyMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, T$.intAndintAndintToKeyboardSideN());
      switch (key) {
        case C[95] || CT.C95:
          {
            return findSide(24, 8, 16);
          }
        case C[96] || CT.C96:
          {
            return findSide(6, 2, 4);
          }
        case C[97] || CT.C97:
          {
            return findSide(96, 32, 64);
          }
        case C[98] || CT.C98:
          {
            return findSide(384, 128, 256);
          }
        case C[99] || CT.C99:
          {
            return (this.modifiers & 1) === 0 ? null : raw_keyboard.KeyboardSide.all;
          }
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return null;
          }
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfint()).new("hidUsage", this.hidUsage));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("codePoint", this.codePoint));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("modifiers", this.modifiers));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataFuchsia()[_is](other) && other.hidUsage === this.hidUsage && other.codePoint === this.codePoint && other.modifiers === this.modifiers;
    }
    get hashCode() {
      return core.Object.hash(this.hidUsage, this.codePoint, this.modifiers);
    }
  };
  (raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new = function(opts) {
    let hidUsage = opts && 'hidUsage' in opts ? opts.hidUsage : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[hidUsage$] = hidUsage;
    this[codePoint$] = codePoint;
    this[modifiers$3] = modifiers;
    dart.global.Object.getPrototypeOf(raw_keyboard_fuchsia.RawKeyEventDataFuchsia).new.call(this);
    ;
  }).prototype = raw_keyboard_fuchsia.RawKeyEventDataFuchsia.prototype;
  dart.addTypeTests(raw_keyboard_fuchsia.RawKeyEventDataFuchsia);
  dart.addRtiResources(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, ["flutter__src__services__raw_keyboard_fuchsia|RawKeyEventDataFuchsia"]);
  dart.addTypeCaches(raw_keyboard_fuchsia.RawKeyEventDataFuchsia);
  dart.setMethodSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => dart.global.Object.setPrototypeOf({
    [_isLeftRightModifierPressed$1]: T$.KeyboardSideAndintAndint__Tobool(),
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSideN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_fuchsia.RawKeyEventDataFuchsia))));
  dart.setGetterSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    logicalKey: T$.LogicalKeyboardKey(),
    physicalKey: T$.PhysicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_fuchsia.RawKeyEventDataFuchsia))));
  dart.setLibraryUri(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, I[33]);
  dart.setFieldSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => dart.global.Object.setPrototypeOf({
    hidUsage: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    codePoint: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    modifiers: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_fuchsia.RawKeyEventDataFuchsia))));
  dart.setStaticFieldSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ['modifierNone', 'modifierCapsLock', 'modifierLeftShift', 'modifierRightShift', 'modifierShift', 'modifierLeftControl', 'modifierRightControl', 'modifierControl', 'modifierLeftAlt', 'modifierRightAlt', 'modifierAlt', 'modifierLeftMeta', 'modifierRightMeta', 'modifierMeta']);
  dart.defineExtensionMethods(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, ['hashCode']);
  dart.defineLazy(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, {
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierNone*/get modifierNone() {
      return 0;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierCapsLock*/get modifierCapsLock() {
      return 1;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierShift*/get modifierShift() {
      return 6;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl*/get modifierLeftControl() {
      return 8;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl*/get modifierRightControl() {
      return 16;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierControl*/get modifierControl() {
      return 24;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt*/get modifierLeftAlt() {
      return 32;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt*/get modifierRightAlt() {
      return 64;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierAlt*/get modifierAlt() {
      return 96;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta*/get modifierLeftMeta() {
      return 128;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta*/get modifierRightMeta() {
      return 256;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierMeta*/get modifierMeta() {
      return 384;
    }
  }, false);
  var flags$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.flags");
  var codePoint$0 = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.codePoint");
  var plainCodePoint$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.plainCodePoint");
  var keyCode$4 = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.keyCode");
  var scanCode$1 = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.scanCode");
  var metaState$0 = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.metaState");
  var eventSource$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.eventSource");
  var vendorId$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.vendorId");
  var productId$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.productId");
  var deviceId$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.deviceId");
  var repeatCount$ = dart.privateName(raw_keyboard_android, "RawKeyEventDataAndroid.repeatCount");
  var _isLeftRightModifierPressed$2 = dart.privateName(raw_keyboard_android, "_isLeftRightModifierPressed");
  raw_keyboard_android.RawKeyEventDataAndroid = class RawKeyEventDataAndroid extends raw_keyboard.RawKeyEventData {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get codePoint() {
      return this[codePoint$0];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get plainCodePoint() {
      return this[plainCodePoint$];
    }
    set plainCodePoint(value) {
      super.plainCodePoint = value;
    }
    get keyCode() {
      return this[keyCode$4];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get scanCode() {
      return this[scanCode$1];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get metaState() {
      return this[metaState$0];
    }
    set metaState(value) {
      super.metaState = value;
    }
    get eventSource() {
      return this[eventSource$];
    }
    set eventSource(value) {
      super.eventSource = value;
    }
    get vendorId() {
      return this[vendorId$];
    }
    set vendorId(value) {
      super.vendorId = value;
    }
    get productId() {
      return this[productId$];
    }
    set productId(value) {
      super.productId = value;
    }
    get deviceId() {
      return this[deviceId$];
    }
    set deviceId(value) {
      super.deviceId = value;
    }
    get repeatCount() {
      return this[repeatCount$];
    }
    set repeatCount(value) {
      super.repeatCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let flags = opts && 'flags' in opts ? opts.flags : 0;
      let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
      let plainCodePoint = opts && 'plainCodePoint' in opts ? opts.plainCodePoint : 0;
      let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
      let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
      let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
      let eventSource = opts && 'eventSource' in opts ? opts.eventSource : 0;
      let vendorId = opts && 'vendorId' in opts ? opts.vendorId : 0;
      let productId = opts && 'productId' in opts ? opts.productId : 0;
      let deviceId = opts && 'deviceId' in opts ? opts.deviceId : 0;
      let repeatCount = opts && 'repeatCount' in opts ? opts.repeatCount : 0;
      return new raw_keyboard_android.RawKeyEventDataAndroid.new({flags: flags, codePoint: codePoint, plainCodePoint: plainCodePoint, keyCode: keyCode, scanCode: scanCode, metaState: metaState, eventSource: eventSource, vendorId: vendorId, productId: productId, deviceId: deviceId, repeatCount: repeatCount});
    }
    get keyLabel() {
      return this.plainCodePoint === 0 ? "" : core.String.fromCharCode((this.plainCodePoint & 2147483647) >>> 0);
    }
    get physicalKey() {
      if (keyboard_maps$46g.kAndroidToPhysicalKey[$containsKey](this.scanCode)) {
        return dart.nullCheck(keyboard_maps$46g.kAndroidToPhysicalKey[$_get](this.scanCode));
      }
      if ((this.eventSource & 16777232) >>> 0 === 16777232) {
        let foundKey = keyboard_maps$46g.kAndroidToLogicalKey[$_get](this.keyCode);
        if (dart.equals(foundKey, keyboard_key$46g.LogicalKeyboardKey.arrowUp)) {
          return keyboard_key$46g.PhysicalKeyboardKey.arrowUp;
        }
        if (dart.equals(foundKey, keyboard_key$46g.LogicalKeyboardKey.arrowDown)) {
          return keyboard_key$46g.PhysicalKeyboardKey.arrowDown;
        }
        if (dart.equals(foundKey, keyboard_key$46g.LogicalKeyboardKey.arrowLeft)) {
          return keyboard_key$46g.PhysicalKeyboardKey.arrowLeft;
        }
        if (dart.equals(foundKey, keyboard_key$46g.LogicalKeyboardKey.arrowRight)) {
          return keyboard_key$46g.PhysicalKeyboardKey.arrowRight;
        }
      }
      return new keyboard_key$46g.PhysicalKeyboardKey.new(73014444032.0 + this.scanCode);
    }
    get logicalKey() {
      let t$3626;
      let numPadKey = keyboard_maps$46g.kAndroidNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel[$isNotEmpty] && !keyboard_key$46g.LogicalKeyboardKey.isControlCharacter(this.keyLabel)) {
        let combinedCodePoint = (this.plainCodePoint & 2147483647) >>> 0;
        let keyId = (0 | (combinedCodePoint & 4294967295.0) >>> 0) >>> 0;
        t$3626 = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t$3626 == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyId) : t$3626;
      }
      let newKey = keyboard_maps$46g.kAndroidToLogicalKey[$_get](this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      return new keyboard_key$46g.LogicalKeyboardKey.new((this.keyCode | 73014444032.0) >>> 0);
    }
    [_isLeftRightModifierPressed$2](side, anyMask, leftMask, rightMask) {
      if ((this.metaState & anyMask) === 0) {
        return false;
      }
      switch (side) {
        case C[91] || CT.C91:
          {
            return true;
          }
        case C[92] || CT.C92:
          {
            return (this.metaState & leftMask) !== 0 && (this.metaState & rightMask) !== 0;
          }
        case C[93] || CT.C93:
          {
            return (this.metaState & leftMask) !== 0;
          }
        case C[94] || CT.C94:
          {
            return (this.metaState & rightMask) !== 0;
          }
      }
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C[91] || CT.C91;
      switch (key) {
        case C[95] || CT.C95:
          {
            return this[_isLeftRightModifierPressed$2](side, 4096, 8192, 16384);
          }
        case C[96] || CT.C96:
          {
            return this[_isLeftRightModifierPressed$2](side, 1, 64, 128);
          }
        case C[97] || CT.C97:
          {
            return this[_isLeftRightModifierPressed$2](side, 2, 16, 32);
          }
        case C[98] || CT.C98:
          {
            return this[_isLeftRightModifierPressed$2](side, 65536, 131072, 262144);
          }
        case C[99] || CT.C99:
          {
            return (this.metaState & 1048576) !== 0;
          }
        case C[101] || CT.C101:
          {
            return (this.metaState & 2097152) !== 0;
          }
        case C[100] || CT.C100:
          {
            return (this.metaState & 4194304) !== 0;
          }
        case C[102] || CT.C102:
          {
            return (this.metaState & 8) !== 0;
          }
        case C[103] || CT.C103:
          {
            return (this.metaState & 4) !== 0;
          }
      }
    }
    getModifierSide(key) {
      const findSide = (anyMask, leftMask, rightMask) => {
        let combinedMask = (leftMask | rightMask) >>> 0;
        let combined = (this.metaState & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        if ((this.metaState & anyMask) !== 0) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, T$.intAndintAndintToKeyboardSideN());
      switch (key) {
        case C[95] || CT.C95:
          {
            return findSide(4096, 8192, 16384);
          }
        case C[96] || CT.C96:
          {
            return findSide(1, 64, 128);
          }
        case C[97] || CT.C97:
          {
            return findSide(2, 16, 32);
          }
        case C[98] || CT.C98:
          {
            return findSide(65536, 131072, 262144);
          }
        case C[99] || CT.C99:
        case C[101] || CT.C101:
        case C[100] || CT.C100:
        case C[102] || CT.C102:
        case C[103] || CT.C103:
          {
            return raw_keyboard.KeyboardSide.all;
          }
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfint()).new("flags", this.flags));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("codePoint", this.codePoint));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("plainCodePoint", this.plainCodePoint));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("keyCode", this.keyCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("scanCode", this.scanCode));
      properties.add(new (G.DiagnosticsPropertyOfint()).new("metaState", this.metaState));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$.RawKeyEventDataAndroid()[_is](other) && other.flags === this.flags && other.codePoint === this.codePoint && other.plainCodePoint === this.plainCodePoint && other.keyCode === this.keyCode && other.scanCode === this.scanCode && other.metaState === this.metaState;
    }
    get hashCode() {
      return core.Object.hash(this.flags, this.codePoint, this.plainCodePoint, this.keyCode, this.scanCode, this.metaState);
    }
  };
  (raw_keyboard_android.RawKeyEventDataAndroid.new = function(opts) {
    let flags = opts && 'flags' in opts ? opts.flags : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let plainCodePoint = opts && 'plainCodePoint' in opts ? opts.plainCodePoint : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
    let eventSource = opts && 'eventSource' in opts ? opts.eventSource : 0;
    let vendorId = opts && 'vendorId' in opts ? opts.vendorId : 0;
    let productId = opts && 'productId' in opts ? opts.productId : 0;
    let deviceId = opts && 'deviceId' in opts ? opts.deviceId : 0;
    let repeatCount = opts && 'repeatCount' in opts ? opts.repeatCount : 0;
    this[flags$] = flags;
    this[codePoint$0] = codePoint;
    this[plainCodePoint$] = plainCodePoint;
    this[keyCode$4] = keyCode;
    this[scanCode$1] = scanCode;
    this[metaState$0] = metaState;
    this[eventSource$] = eventSource;
    this[vendorId$] = vendorId;
    this[productId$] = productId;
    this[deviceId$] = deviceId;
    this[repeatCount$] = repeatCount;
    dart.global.Object.getPrototypeOf(raw_keyboard_android.RawKeyEventDataAndroid).new.call(this);
    ;
  }).prototype = raw_keyboard_android.RawKeyEventDataAndroid.prototype;
  dart.addTypeTests(raw_keyboard_android.RawKeyEventDataAndroid);
  dart.addRtiResources(raw_keyboard_android.RawKeyEventDataAndroid, ["flutter__src__services__raw_keyboard_android|RawKeyEventDataAndroid"]);
  dart.addTypeCaches(raw_keyboard_android.RawKeyEventDataAndroid);
  dart.setMethodSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => dart.global.Object.setPrototypeOf({
    [_isLeftRightModifierPressed$2]: T$.KeyboardSideAndintAndint__Tobool(),
    isModifierPressed: T$.ModifierKey__Tobool(),
    getModifierSide: T$.ModifierKeyToKeyboardSideN()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard_android.RawKeyEventDataAndroid))));
  dart.setGetterSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => dart.global.Object.setPrototypeOf({
    keyLabel: T$.String(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard_android.RawKeyEventDataAndroid))));
  dart.setLibraryUri(raw_keyboard_android.RawKeyEventDataAndroid, I[34]);
  dart.setFieldSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => dart.global.Object.setPrototypeOf({
    flags: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    codePoint: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    plainCodePoint: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    scanCode: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    metaState: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    eventSource: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    vendorId: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    productId: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    deviceId: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]},
    repeatCount: {type: T$.int(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard_android.RawKeyEventDataAndroid))));
  dart.setStaticFieldSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => ['_sourceJoystick', 'modifierNone', 'modifierAlt', 'modifierLeftAlt', 'modifierRightAlt', 'modifierShift', 'modifierLeftShift', 'modifierRightShift', 'modifierSym', 'modifierFunction', 'modifierControl', 'modifierLeftControl', 'modifierRightControl', 'modifierMeta', 'modifierLeftMeta', 'modifierRightMeta', 'modifierCapsLock', 'modifierNumLock', 'modifierScrollLock']);
  dart.defineExtensionMethods(raw_keyboard_android.RawKeyEventDataAndroid, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard_android.RawKeyEventDataAndroid, ['hashCode']);
  dart.defineLazy(raw_keyboard_android.RawKeyEventDataAndroid, {
    /*raw_keyboard_android.RawKeyEventDataAndroid._sourceJoystick*/get _sourceJoystick() {
      return 16777232;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierNone*/get modifierNone() {
      return 0;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierAlt*/get modifierAlt() {
      return 2;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftAlt*/get modifierLeftAlt() {
      return 16;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightAlt*/get modifierRightAlt() {
      return 32;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftShift*/get modifierLeftShift() {
      return 64;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightShift*/get modifierRightShift() {
      return 128;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierSym*/get modifierSym() {
      return 4;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierFunction*/get modifierFunction() {
      return 8;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierControl*/get modifierControl() {
      return 4096;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftControl*/get modifierLeftControl() {
      return 8192;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightControl*/get modifierRightControl() {
      return 16384;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierMeta*/get modifierMeta() {
      return 65536;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftMeta*/get modifierLeftMeta() {
      return 131072;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightMeta*/get modifierRightMeta() {
      return 262144;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierCapsLock*/get modifierCapsLock() {
      return 1048576;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierNumLock*/get modifierNumLock() {
      return 2097152;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierScrollLock*/get modifierScrollLock() {
      return 4194304;
    }
  }, false);
  dart.defineLazy(raw_keyboard_android, {
    /*raw_keyboard_android._kCombiningCharacterMask*/get _kCombiningCharacterMask() {
      return 2147483647;
    }
  }, false);
  raw_keyboard.KeyboardSide = class KeyboardSide extends core._Enum {
    [_enumToString]() {
      return "KeyboardSide." + this[_name];
    }
  };
  (raw_keyboard.KeyboardSide.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(raw_keyboard.KeyboardSide).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = raw_keyboard.KeyboardSide.prototype;
  dart.addTypeTests(raw_keyboard.KeyboardSide);
  dart.addRtiResources(raw_keyboard.KeyboardSide, ["flutter__src__services__raw_keyboard|KeyboardSide"]);
  dart.addTypeCaches(raw_keyboard.KeyboardSide);
  dart.setMethodSignature(raw_keyboard.KeyboardSide, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard.KeyboardSide))));
  dart.setLibraryUri(raw_keyboard.KeyboardSide, I[24]);
  dart.setStaticFieldSignature(raw_keyboard.KeyboardSide, () => ['values', 'any', 'left', 'right', 'all']);
  dart.defineLazy(raw_keyboard.KeyboardSide, {
    /*raw_keyboard.KeyboardSide.values*/get values() {
      return C[104] || CT.C104;
    },
    /*raw_keyboard.KeyboardSide.any*/get any() {
      return C[91] || CT.C91;
    },
    /*raw_keyboard.KeyboardSide.left*/get left() {
      return C[93] || CT.C93;
    },
    /*raw_keyboard.KeyboardSide.right*/get right() {
      return C[94] || CT.C94;
    },
    /*raw_keyboard.KeyboardSide.all*/get all() {
      return C[92] || CT.C92;
    }
  }, false);
  raw_keyboard.ModifierKey = class ModifierKey extends core._Enum {
    [_enumToString]() {
      return "ModifierKey." + this[_name];
    }
  };
  (raw_keyboard.ModifierKey.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(raw_keyboard.ModifierKey).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = raw_keyboard.ModifierKey.prototype;
  dart.addTypeTests(raw_keyboard.ModifierKey);
  dart.addRtiResources(raw_keyboard.ModifierKey, ["flutter__src__services__raw_keyboard|ModifierKey"]);
  dart.addTypeCaches(raw_keyboard.ModifierKey);
  dart.setMethodSignature(raw_keyboard.ModifierKey, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard.ModifierKey))));
  dart.setLibraryUri(raw_keyboard.ModifierKey, I[24]);
  dart.setStaticFieldSignature(raw_keyboard.ModifierKey, () => ['values', 'controlModifier', 'shiftModifier', 'altModifier', 'metaModifier', 'capsLockModifier', 'numLockModifier', 'scrollLockModifier', 'functionModifier', 'symbolModifier']);
  dart.defineLazy(raw_keyboard.ModifierKey, {
    /*raw_keyboard.ModifierKey.values*/get values() {
      return C[105] || CT.C105;
    },
    /*raw_keyboard.ModifierKey.controlModifier*/get controlModifier() {
      return C[95] || CT.C95;
    },
    /*raw_keyboard.ModifierKey.shiftModifier*/get shiftModifier() {
      return C[96] || CT.C96;
    },
    /*raw_keyboard.ModifierKey.altModifier*/get altModifier() {
      return C[97] || CT.C97;
    },
    /*raw_keyboard.ModifierKey.metaModifier*/get metaModifier() {
      return C[98] || CT.C98;
    },
    /*raw_keyboard.ModifierKey.capsLockModifier*/get capsLockModifier() {
      return C[99] || CT.C99;
    },
    /*raw_keyboard.ModifierKey.numLockModifier*/get numLockModifier() {
      return C[101] || CT.C101;
    },
    /*raw_keyboard.ModifierKey.scrollLockModifier*/get scrollLockModifier() {
      return C[100] || CT.C100;
    },
    /*raw_keyboard.ModifierKey.functionModifier*/get functionModifier() {
      return C[102] || CT.C102;
    },
    /*raw_keyboard.ModifierKey.symbolModifier*/get symbolModifier() {
      return C[103] || CT.C103;
    }
  }, false);
  var character$ = dart.privateName(raw_keyboard, "RawKeyEvent.character");
  var repeat$ = dart.privateName(raw_keyboard, "RawKeyEvent.repeat");
  var data$ = dart.privateName(raw_keyboard, "RawKeyEvent.data");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  raw_keyboard.RawKeyEvent = class RawKeyEvent extends Object_Diagnosticable$36$0 {
    get character() {
      return this[character$];
    }
    set character(value) {
      super.character = value;
    }
    get repeat() {
      return this[repeat$];
    }
    set repeat(value) {
      super.repeat = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static fromMessage(message) {
      let character = null;
      function dataFromWeb() {
        let t$3630, t$3630$, t$3630$0, t$3630$1, t$3630$2;
        let key = T$.StringN()[_as](message[$_get]("key"));
        if (key != null && key[$isNotEmpty] && key.length === 1) {
          character = key;
        }
        return new raw_keyboard_web.RawKeyEventDataWeb.new({code: (t$3630 = T$.StringN()[_as](message[$_get]("code")), t$3630 == null ? "" : t$3630), key: (t$3630$ = key, t$3630$ == null ? "" : t$3630$), location: (t$3630$0 = T$.intN()[_as](message[$_get]("location")), t$3630$0 == null ? 0 : t$3630$0), metaState: (t$3630$1 = T$.intN()[_as](message[$_get]("metaState")), t$3630$1 == null ? 0 : t$3630$1), keyCode: (t$3630$2 = T$.intN()[_as](message[$_get]("keyCode")), t$3630$2 == null ? 0 : t$3630$2)});
      }
      dart.fn(dataFromWeb, T$.VoidToRawKeyEventData());
      let data = null;
      {
        data = dataFromWeb();
      }
      let repeat = raw_keyboard.RawKeyboard.instance.physicalKeysPressed.contains(data.physicalKey);
      let type = T$.String()[_as](dart.nullCheck(message[$_get]("type")));
      switch (type) {
        case "keydown":
          {
            return new raw_keyboard.RawKeyDownEvent.new({data: data, character: character, repeat: repeat});
          }
        case "keyup":
          {
            return new raw_keyboard.RawKeyUpEvent.new({data: data});
          }
        default:
          {
            dart.throw(assertions.FlutterError.new("Unknown key event type: " + type));
          }
      }
    }
    static ['_#fromMessage#tearOff'](message) {
      return raw_keyboard.RawKeyEvent.fromMessage(message);
    }
    isKeyPressed(key) {
      return raw_keyboard.RawKeyboard.instance.keysPressed.contains(key);
    }
    get isControlPressed() {
      return this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.controlLeft) || this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.controlRight);
    }
    get isShiftPressed() {
      return this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.shiftLeft) || this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.shiftRight);
    }
    get isAltPressed() {
      return this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.altLeft) || this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.altRight);
    }
    get isMetaPressed() {
      return this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.metaLeft) || this.isKeyPressed(keyboard_key$46g.LogicalKeyboardKey.metaRight);
    }
    get physicalKey() {
      return this.data.physicalKey;
    }
    get logicalKey() {
      return this.data.logicalKey;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfLogicalKeyboardKey()).new("logicalKey", this.logicalKey));
      properties.add(new (G.DiagnosticsPropertyOfPhysicalKeyboardKey()).new("physicalKey", this.physicalKey));
      if (T$.RawKeyDownEvent()[_is](this)) {
        properties.add(new (G.DiagnosticsPropertyOfbool()).new("repeat", this.repeat));
      }
    }
  };
  (raw_keyboard.RawKeyEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    let repeat = opts && 'repeat' in opts ? opts.repeat : false;
    this[data$] = data;
    this[character$] = character;
    this[repeat$] = repeat;
    ;
  }).prototype = raw_keyboard.RawKeyEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyEvent);
  dart.addRtiResources(raw_keyboard.RawKeyEvent, ["flutter__src__services__raw_keyboard|RawKeyEvent"]);
  dart.addTypeCaches(raw_keyboard.RawKeyEvent);
  dart.setMethodSignature(raw_keyboard.RawKeyEvent, () => dart.global.Object.setPrototypeOf({isKeyPressed: T$.LogicalKeyboardKeyTobool()}, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyEvent))));
  dart.setStaticMethodSignature(raw_keyboard.RawKeyEvent, () => ['fromMessage']);
  dart.setGetterSignature(raw_keyboard.RawKeyEvent, () => dart.global.Object.setPrototypeOf({
    isControlPressed: T$.bool(),
    isShiftPressed: T$.bool(),
    isAltPressed: T$.bool(),
    isMetaPressed: T$.bool(),
    physicalKey: T$.PhysicalKeyboardKey(),
    logicalKey: T$.LogicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyEvent))));
  dart.setLibraryUri(raw_keyboard.RawKeyEvent, I[24]);
  dart.setFieldSignature(raw_keyboard.RawKeyEvent, () => dart.global.Object.setPrototypeOf({
    character: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]},
    repeat: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]},
    data: {type: T$.RawKeyEventData(), isConst: false, isFinal: true, libraryUri: I[24]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyEvent))));
  raw_keyboard.RawKeyDownEvent = class RawKeyDownEvent extends raw_keyboard.RawKeyEvent {
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let character = opts && 'character' in opts ? opts.character : null;
      let repeat = opts && 'repeat' in opts ? opts.repeat : false;
      return new raw_keyboard.RawKeyDownEvent.new({data: data, character: character, repeat: repeat});
    }
  };
  (raw_keyboard.RawKeyDownEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    let repeat = opts && 'repeat' in opts ? opts.repeat : false;
    dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyDownEvent).new.call(this, {data: data, character: character, repeat: repeat});
    ;
  }).prototype = raw_keyboard.RawKeyDownEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyDownEvent);
  dart.addRtiResources(raw_keyboard.RawKeyDownEvent, ["flutter__src__services__raw_keyboard|RawKeyDownEvent"]);
  dart.addTypeCaches(raw_keyboard.RawKeyDownEvent);
  dart.setLibraryUri(raw_keyboard.RawKeyDownEvent, I[24]);
  raw_keyboard.RawKeyUpEvent = class RawKeyUpEvent extends raw_keyboard.RawKeyEvent {
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let character = opts && 'character' in opts ? opts.character : null;
      return new raw_keyboard.RawKeyUpEvent.new({data: data, character: character});
    }
  };
  (raw_keyboard.RawKeyUpEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyUpEvent).new.call(this, {repeat: false, data: data, character: character});
    ;
  }).prototype = raw_keyboard.RawKeyUpEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyUpEvent);
  dart.addRtiResources(raw_keyboard.RawKeyUpEvent, ["flutter__src__services__raw_keyboard|RawKeyUpEvent"]);
  dart.addTypeCaches(raw_keyboard.RawKeyUpEvent);
  dart.setLibraryUri(raw_keyboard.RawKeyUpEvent, I[24]);
  var _listeners = dart.privateName(raw_keyboard, "_listeners");
  var _cachedKeyEventHandler = dart.privateName(raw_keyboard, "_cachedKeyEventHandler");
  var _cachedKeyMessageHandler = dart.privateName(raw_keyboard, "_cachedKeyMessageHandler");
  var _keysPressed = dart.privateName(raw_keyboard, "_keysPressed");
  var _synchronizeModifiers = dart.privateName(raw_keyboard, "_synchronizeModifiers");
  var _ModifierSidePair_side = dart.privateName(raw_keyboard, "_ModifierSidePair.side");
  var _ModifierSidePair_modifier = dart.privateName(raw_keyboard, "_ModifierSidePair.modifier");
  raw_keyboard.RawKeyboard = class RawKeyboard extends core.Object {
    static ['_#_#tearOff']() {
      return new raw_keyboard.RawKeyboard.__();
    }
    addListener(listener) {
      this[_listeners][$add](listener);
    }
    removeListener(listener) {
      this[_listeners][$remove](listener);
    }
    get keyEventHandler() {
      if (!dart.equals(binding$0.ServicesBinding.instance.keyEventManager.keyMessageHandler, this[_cachedKeyMessageHandler])) {
        this[_cachedKeyMessageHandler] = binding$0.ServicesBinding.instance.keyEventManager.keyMessageHandler;
        this[_cachedKeyEventHandler] = this[_cachedKeyMessageHandler] == null ? null : dart.fn(event => {
          if (!false) dart.assertFailed("The RawKeyboard.instance.keyEventHandler assigned by Flutter is a dummy callback kept for compatibility and should not be directly called. Use ServicesBinding.instance!.keyMessageHandler instead.", I[23], 826, 18, "false");
          return true;
        }, T$.RawKeyEventTobool());
      }
      return this[_cachedKeyEventHandler];
    }
    set keyEventHandler(handler) {
      this[_cachedKeyEventHandler] = handler;
      this[_cachedKeyMessageHandler] = handler == null ? null : dart.fn(message => {
        if (message.rawEvent != null) {
          return handler(dart.nullCheck(message.rawEvent));
        }
        return false;
      }, T$.KeyMessageTobool());
      binding$0.ServicesBinding.instance.keyEventManager.keyMessageHandler = this[_cachedKeyMessageHandler];
    }
    handleRawKeyEvent(event) {
      if (T$.RawKeyDownEvent()[_is](event)) {
        this[_keysPressed][$_set](event.physicalKey, event.logicalKey);
      } else if (T$.RawKeyUpEvent()[_is](event)) {
        this[_keysPressed][$remove](event.physicalKey);
      }
      this[_synchronizeModifiers](event);
      if (!(!T$.RawKeyDownEvent()[_is](event) || this[_keysPressed][$isNotEmpty])) dart.assertFailed("Attempted to send a key down event when no keys are in keysPressed. " + "This state can occur if the key event being sent doesn't properly " + "set its modifier flags. This was the event: " + dart.str(event) + " and its data: " + dart.str(event.data), I[23], 865, 7, "event is! RawKeyDownEvent || _keysPressed.isNotEmpty");
      for (let listener of G.ListOfRawKeyEventTovoid().of(this[_listeners])) {
        try {
          if (this[_listeners][$contains](listener)) {
            listener(event);
          }
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfRawKeyEvent()).new("Event", event)]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[23], 879, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<RawKeyEvent>('Event', event),\r\n          ];\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while processing a raw key listener"), informationCollector: collector}));
          } else
            throw t$36$35e;
        }
      }
      return false;
    }
    [_synchronizeModifiers](event) {
      let modifiersPressed = event.data.modifiersPressed;
      let modifierKeys = new (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey()).new();
      let anySideKeys = G.LinkedHashSetOfPhysicalKeyboardKey().new();
      let keysPressedAfterEvent = (() => {
        let t$3631 = G.LinkedHashSetOfPhysicalKeyboardKey().of(this[_keysPressed][$keys]);
        if (T$.RawKeyDownEvent()[_is](event)) t$3631.add(event.physicalKey);
        return t$3631;
      })();
      let thisKeyModifier = null;
      for (let key of raw_keyboard.ModifierKey.values) {
        let thisModifierKeys = raw_keyboard.RawKeyboard._modifierKeyMap[$_get](new raw_keyboard._ModifierSidePair.new(key, raw_keyboard.KeyboardSide.all));
        if (thisModifierKeys == null) {
          continue;
        }
        if (thisModifierKeys.contains(event.physicalKey)) {
          thisKeyModifier = key;
        }
        if (modifiersPressed[$_get](key) === raw_keyboard.KeyboardSide.any) {
          anySideKeys.addAll(thisModifierKeys);
          if (thisModifierKeys[$any](dart.bind(keysPressedAfterEvent, 'contains'))) {
            continue;
          }
        }
        let mappedKeys = modifiersPressed[$_get](key) == null ? G.LinkedHashSetOfPhysicalKeyboardKey().new() : raw_keyboard.RawKeyboard._modifierKeyMap[$_get](new raw_keyboard._ModifierSidePair.new(key, modifiersPressed[$_get](key)));
        if (!dart.fn(() => {
          if (mappedKeys == null) {
            print.debugPrint("Platform key support for " + io.Platform.operatingSystem + " is " + "producing unsupported modifier combinations for " + "modifier " + dart.str(key) + " on side " + dart.str(modifiersPressed[$_get](key)) + ".");
            if (T$.RawKeyEventDataAndroid()[_is](event.data)) {
              print.debugPrint("Android raw key metaState: " + dart.strSafe(T$.RawKeyEventDataAndroid()[_as](event.data).metaState));
            }
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[23], 989, 14, "() {\r\n        if (mappedKeys == null) {\r\n          debugPrint(\r\n            'Platform key support for ${Platform.operatingSystem} is '\r\n            'producing unsupported modifier combinations for '\r\n            'modifier $key on side ${modifiersPressed[key]}.',\r\n          );\r\n          if (event.data is RawKeyEventDataAndroid) {\r\n            debugPrint('Android raw key metaState: ${(event.data as RawKeyEventDataAndroid).metaState}');\r\n          }\r\n        }\r\n        return true;\r\n      }()");
        if (mappedKeys == null) {
          continue;
        }
        for (let physicalModifier of mappedKeys) {
          modifierKeys[$_set](physicalModifier, dart.nullCheck(raw_keyboard.RawKeyboard._allModifiers[$_get](physicalModifier)));
        }
      }
      let nonModifierCapsLock = (T$.RawKeyEventDataLinux()[_is](event.data) || T$.RawKeyEventDataWeb()[_is](event.data)) && this[_keysPressed][$_get](keyboard_key$46g.PhysicalKeyboardKey.capsLock) != null && !dart.equals(this[_keysPressed][$_get](keyboard_key$46g.PhysicalKeyboardKey.capsLock), keyboard_key$46g.LogicalKeyboardKey.capsLock);
      for (let physicalKey of raw_keyboard.RawKeyboard._allModifiersExceptFn[$keys]) {
        let skipReleasingKey = nonModifierCapsLock && dart.equals(physicalKey, keyboard_key$46g.PhysicalKeyboardKey.capsLock);
        if (!anySideKeys.contains(physicalKey) && !skipReleasingKey) {
          this[_keysPressed][$remove](physicalKey);
        }
      }
      if (!T$.RawKeyEventDataFuchsia()[_is](event.data) && !T$.RawKeyEventDataMacOs()[_is](event.data)) {
        this[_keysPressed][$remove](keyboard_key$46g.PhysicalKeyboardKey.fn);
      }
      this[_keysPressed][$addAll](modifierKeys);
      if (T$.RawKeyDownEvent()[_is](event) && thisKeyModifier != null && !this[_keysPressed][$containsKey](event.physicalKey)) {
        if (T$.RawKeyEventDataLinux()[_is](event.data) && dart.equals(event.physicalKey, keyboard_key$46g.PhysicalKeyboardKey.altRight) || T$.RawKeyEventDataIos()[_is](event.data) || T$.RawKeyEventDataAndroid()[_is](event.data)) {
          let logicalKey = raw_keyboard.RawKeyboard._allModifiersExceptFn[$_get](event.physicalKey);
          if (logicalKey != null) {
            this[_keysPressed][$_set](event.physicalKey, logicalKey);
          }
        }
        if (T$.RawKeyEventDataWeb()[_is](event.data) && dart.equals(event.physicalKey, keyboard_key$46g.PhysicalKeyboardKey.altRight)) {
          this[_keysPressed][$_set](event.physicalKey, event.logicalKey);
        }
      }
    }
    get keysPressed() {
      return this[_keysPressed][$values][$toSet]();
    }
    get physicalKeysPressed() {
      return this[_keysPressed][$keys][$toSet]();
    }
    lookUpLayout(physicalKey) {
      return this[_keysPressed][$_get](physicalKey);
    }
    clearKeysPressed() {
      return this[_keysPressed][$clear]();
    }
  };
  (raw_keyboard.RawKeyboard.__ = function() {
    this[_listeners] = G.JSArrayOfRawKeyEventTovoid().of([]);
    this[_cachedKeyEventHandler] = null;
    this[_cachedKeyMessageHandler] = null;
    this[_keysPressed] = new (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey()).new();
    ;
  }).prototype = raw_keyboard.RawKeyboard.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyboard);
  dart.addRtiResources(raw_keyboard.RawKeyboard, ["flutter__src__services__raw_keyboard|RawKeyboard"]);
  dart.addTypeCaches(raw_keyboard.RawKeyboard);
  dart.setMethodSignature(raw_keyboard.RawKeyboard, () => dart.global.Object.setPrototypeOf({
    addListener: T$.FnTovoid$1(),
    removeListener: T$.FnTovoid$1(),
    handleRawKeyEvent: T$.RawKeyEventTobool(),
    [_synchronizeModifiers]: T$.RawKeyEventTovoid(),
    lookUpLayout: T$.PhysicalKeyboardKeyToLogicalKeyboardKeyN(),
    clearKeysPressed: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyboard))));
  dart.setGetterSignature(raw_keyboard.RawKeyboard, () => dart.global.Object.setPrototypeOf({
    keyEventHandler: T$.RawKeyEventToNbool(),
    keysPressed: T$.SetOfLogicalKeyboardKey(),
    physicalKeysPressed: T$.SetOfPhysicalKeyboardKey()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyboard))));
  dart.setSetterSignature(raw_keyboard.RawKeyboard, () => dart.global.Object.setPrototypeOf({keyEventHandler: T$.RawKeyEventToNbool()}, dart.getSetters(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyboard))));
  dart.setLibraryUri(raw_keyboard.RawKeyboard, I[24]);
  dart.setFieldSignature(raw_keyboard.RawKeyboard, () => dart.global.Object.setPrototypeOf({
    [_listeners]: {type: T$.ListOfRawKeyEventTovoid(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_cachedKeyEventHandler]: {type: T$.RawKeyEventToNbool(), isConst: false, isFinal: false},
    [_cachedKeyMessageHandler]: {type: T$.KeyMessageToNbool(), isConst: false, isFinal: false},
    [_keysPressed]: {type: T$.MapOfPhysicalKeyboardKey$LogicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard.RawKeyboard))));
  dart.setStaticFieldSignature(raw_keyboard.RawKeyboard, () => ['instance', '_modifierKeyMap', '_allModifiersExceptFn', '_allModifiers']);
  dart.defineLazy(raw_keyboard.RawKeyboard, {
    /*raw_keyboard.RawKeyboard.instance*/get instance() {
      return new raw_keyboard.RawKeyboard.__();
    },
    /*raw_keyboard.RawKeyboard._modifierKeyMap*/get _modifierKeyMap() {
      return new (G.LinkedMapOf_ModifierSidePair$SetOfPhysicalKeyboardKey()).from([C[106] || CT.C106, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.altLeft]), C[107] || CT.C107, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.altRight]), C[108] || CT.C108, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.altLeft, keyboard_key$46g.PhysicalKeyboardKey.altRight]), C[109] || CT.C109, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.altLeft]), C[110] || CT.C110, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.shiftLeft]), C[111] || CT.C111, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.shiftRight]), C[112] || CT.C112, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.shiftLeft, keyboard_key$46g.PhysicalKeyboardKey.shiftRight]), C[113] || CT.C113, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.shiftLeft]), C[114] || CT.C114, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.controlLeft]), C[115] || CT.C115, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.controlRight]), C[116] || CT.C116, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.controlLeft, keyboard_key$46g.PhysicalKeyboardKey.controlRight]), C[117] || CT.C117, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.controlLeft]), C[118] || CT.C118, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.metaLeft]), C[119] || CT.C119, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.metaRight]), C[120] || CT.C120, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.metaLeft, keyboard_key$46g.PhysicalKeyboardKey.metaRight]), C[121] || CT.C121, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.metaLeft]), C[122] || CT.C122, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.capsLock]), C[123] || CT.C123, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.numLock]), C[124] || CT.C124, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.scrollLock]), C[125] || CT.C125, G.LinkedHashSetOfPhysicalKeyboardKey().from([keyboard_key$46g.PhysicalKeyboardKey.fn])]);
    },
    /*raw_keyboard.RawKeyboard._allModifiersExceptFn*/get _allModifiersExceptFn() {
      return new (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey()).from([keyboard_key$46g.PhysicalKeyboardKey.altLeft, keyboard_key$46g.LogicalKeyboardKey.altLeft, keyboard_key$46g.PhysicalKeyboardKey.altRight, keyboard_key$46g.LogicalKeyboardKey.altRight, keyboard_key$46g.PhysicalKeyboardKey.shiftLeft, keyboard_key$46g.LogicalKeyboardKey.shiftLeft, keyboard_key$46g.PhysicalKeyboardKey.shiftRight, keyboard_key$46g.LogicalKeyboardKey.shiftRight, keyboard_key$46g.PhysicalKeyboardKey.controlLeft, keyboard_key$46g.LogicalKeyboardKey.controlLeft, keyboard_key$46g.PhysicalKeyboardKey.controlRight, keyboard_key$46g.LogicalKeyboardKey.controlRight, keyboard_key$46g.PhysicalKeyboardKey.metaLeft, keyboard_key$46g.LogicalKeyboardKey.metaLeft, keyboard_key$46g.PhysicalKeyboardKey.metaRight, keyboard_key$46g.LogicalKeyboardKey.metaRight, keyboard_key$46g.PhysicalKeyboardKey.capsLock, keyboard_key$46g.LogicalKeyboardKey.capsLock, keyboard_key$46g.PhysicalKeyboardKey.numLock, keyboard_key$46g.LogicalKeyboardKey.numLock, keyboard_key$46g.PhysicalKeyboardKey.scrollLock, keyboard_key$46g.LogicalKeyboardKey.scrollLock]);
    },
    /*raw_keyboard.RawKeyboard._allModifiers*/get _allModifiers() {
      return (() => {
        let t$3632 = new (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey()).new();
        t$3632[$_set](keyboard_key$46g.PhysicalKeyboardKey.fn, keyboard_key$46g.LogicalKeyboardKey.fn);
        t$3632[$addAll](raw_keyboard.RawKeyboard._allModifiersExceptFn);
        return t$3632;
      })();
    }
  }, false);
  const modifier$ = _ModifierSidePair_modifier;
  const side$ = _ModifierSidePair_side;
  raw_keyboard._ModifierSidePair = class _ModifierSidePair extends core.Object {
    get modifier() {
      return this[modifier$];
    }
    set modifier(value) {
      super.modifier = value;
    }
    get side() {
      return this[side$];
    }
    set side(value) {
      super.side = value;
    }
    static ['_#new#tearOff'](modifier, side) {
      return new raw_keyboard._ModifierSidePair.new(modifier, side);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return T$._ModifierSidePair()[_is](other) && other.modifier === this.modifier && other.side == this.side;
    }
    get hashCode() {
      return core.Object.hash(this.modifier, this.side);
    }
  };
  (raw_keyboard._ModifierSidePair.new = function(modifier, side) {
    this[modifier$] = modifier;
    this[side$] = side;
    ;
  }).prototype = raw_keyboard._ModifierSidePair.prototype;
  dart.addTypeTests(raw_keyboard._ModifierSidePair);
  dart.addRtiResources(raw_keyboard._ModifierSidePair, ["flutter__src__services__raw_keyboard|_ModifierSidePair"]);
  dart.addTypeCaches(raw_keyboard._ModifierSidePair);
  dart.setLibraryUri(raw_keyboard._ModifierSidePair, I[24]);
  dart.setFieldSignature(raw_keyboard._ModifierSidePair, () => dart.global.Object.setPrototypeOf({
    modifier: {type: T$.ModifierKey(), isConst: false, isFinal: true, libraryUri: I[24]},
    side: {type: T$.KeyboardSideN(), isConst: false, isFinal: true, libraryUri: I[24]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(raw_keyboard._ModifierSidePair))));
  dart.defineExtensionMethods(raw_keyboard._ModifierSidePair, ['_equals']);
  dart.defineExtensionAccessors(raw_keyboard._ModifierSidePair, ['hashCode']);
  var LogicalKeyboardKey_keyId = dart.privateName(keyboard_key$46g, "LogicalKeyboardKey.keyId");
  hardware_keyboard.KeyboardLockMode = class KeyboardLockMode extends core._Enum {
    [_enumToString]() {
      return "KeyboardLockMode." + this[_name];
    }
    static ['_#_#tearOff'](t$36$35index, t$36$35name, logicalKey) {
      return new hardware_keyboard.KeyboardLockMode.__(t$36$35index, t$36$35name, logicalKey);
    }
    static findLockByLogicalKey(logicalKey) {
      return hardware_keyboard.KeyboardLockMode._knownLockModes[$_get](logicalKey.keyId);
    }
  };
  (hardware_keyboard.KeyboardLockMode.__ = function(t$36$35index, t$36$35name, logicalKey) {
    this.logicalKey = logicalKey;
    dart.global.Object.getPrototypeOf(hardware_keyboard.KeyboardLockMode).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = hardware_keyboard.KeyboardLockMode.prototype;
  dart.addTypeTests(hardware_keyboard.KeyboardLockMode);
  dart.addRtiResources(hardware_keyboard.KeyboardLockMode, ["flutter__src__services__hardware_keyboard|KeyboardLockMode"]);
  dart.addTypeCaches(hardware_keyboard.KeyboardLockMode);
  dart.setMethodSignature(hardware_keyboard.KeyboardLockMode, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyboardLockMode))));
  dart.setStaticMethodSignature(hardware_keyboard.KeyboardLockMode, () => ['findLockByLogicalKey']);
  dart.setLibraryUri(hardware_keyboard.KeyboardLockMode, I[35]);
  dart.setFieldSignature(hardware_keyboard.KeyboardLockMode, () => dart.global.Object.setPrototypeOf({logicalKey: {type: T$.LogicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[36]}}, dart.getFields(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyboardLockMode))));
  dart.setStaticFieldSignature(hardware_keyboard.KeyboardLockMode, () => ['values', '_knownLockModes', 'numLock', 'scrollLock', 'capsLock']);
  dart.defineLazy(hardware_keyboard.KeyboardLockMode, {
    /*hardware_keyboard.KeyboardLockMode.values*/get values() {
      return C[126] || CT.C126;
    },
    /*hardware_keyboard.KeyboardLockMode._knownLockModes*/get _knownLockModes() {
      return new (G.IdentityMapOfint$KeyboardLockMode()).from([hardware_keyboard.KeyboardLockMode.numLock.logicalKey.keyId, hardware_keyboard.KeyboardLockMode.numLock, hardware_keyboard.KeyboardLockMode.scrollLock.logicalKey.keyId, hardware_keyboard.KeyboardLockMode.scrollLock, hardware_keyboard.KeyboardLockMode.capsLock.logicalKey.keyId, hardware_keyboard.KeyboardLockMode.capsLock]);
    },
    /*hardware_keyboard.KeyboardLockMode.numLock*/get numLock() {
      return C[127] || CT.C127;
    },
    /*hardware_keyboard.KeyboardLockMode.scrollLock*/get scrollLock() {
      return C[129] || CT.C129;
    },
    /*hardware_keyboard.KeyboardLockMode.capsLock*/get capsLock() {
      return C[131] || CT.C131;
    }
  }, false);
  var physicalKey$ = dart.privateName(hardware_keyboard, "KeyEvent.physicalKey");
  var logicalKey$ = dart.privateName(hardware_keyboard, "KeyEvent.logicalKey");
  var character$0 = dart.privateName(hardware_keyboard, "KeyEvent.character");
  var timeStamp$ = dart.privateName(hardware_keyboard, "KeyEvent.timeStamp");
  var deviceType$ = dart.privateName(hardware_keyboard, "KeyEvent.deviceType");
  var synthesized$ = dart.privateName(hardware_keyboard, "KeyEvent.synthesized");
  const Object_Diagnosticable$36$1 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$1.new = function() {
  }).prototype = Object_Diagnosticable$36$1.prototype;
  dart.applyMixin(Object_Diagnosticable$36$1, diagnostics.Diagnosticable);
  hardware_keyboard.KeyEvent = class KeyEvent extends Object_Diagnosticable$36$1 {
    get physicalKey() {
      return this[physicalKey$];
    }
    set physicalKey(value) {
      super.physicalKey = value;
    }
    get logicalKey() {
      return this[logicalKey$];
    }
    set logicalKey(value) {
      super.logicalKey = value;
    }
    get character() {
      return this[character$0];
    }
    set character(value) {
      super.character = value;
    }
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get deviceType() {
      return this[deviceType$];
    }
    set deviceType(value) {
      super.deviceType = value;
    }
    get synthesized() {
      return this[synthesized$];
    }
    set synthesized(value) {
      super.synthesized = value;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (G.DiagnosticsPropertyOfPhysicalKeyboardKey()).new("physicalKey", this.physicalKey));
      properties.add(new (G.DiagnosticsPropertyOfLogicalKeyboardKey()).new("logicalKey", this.logicalKey));
      properties.add(new diagnostics.StringProperty.new("character", this.character));
      properties.add(new (G.DiagnosticsPropertyOfDuration()).new("timeStamp", this.timeStamp));
      properties.add(new diagnostics.FlagProperty.new("synthesized", {value: this.synthesized, ifTrue: "synthesized"}));
    }
  };
  (hardware_keyboard.KeyEvent.new = function(opts) {
    let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
    let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
    let character = opts && 'character' in opts ? opts.character : null;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
    let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    this[physicalKey$] = physicalKey;
    this[logicalKey$] = logicalKey;
    this[character$0] = character;
    this[timeStamp$] = timeStamp;
    this[deviceType$] = deviceType;
    this[synthesized$] = synthesized;
    ;
  }).prototype = hardware_keyboard.KeyEvent.prototype;
  dart.addTypeTests(hardware_keyboard.KeyEvent);
  dart.addRtiResources(hardware_keyboard.KeyEvent, ["flutter__src__services__hardware_keyboard|KeyEvent"]);
  dart.addTypeCaches(hardware_keyboard.KeyEvent);
  dart.setLibraryUri(hardware_keyboard.KeyEvent, I[35]);
  dart.setFieldSignature(hardware_keyboard.KeyEvent, () => dart.global.Object.setPrototypeOf({
    physicalKey: {type: T$.PhysicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[36]},
    logicalKey: {type: T$.LogicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[36]},
    character: {type: T$.StringN(), isConst: false, isFinal: true, libraryUri: I[2]},
    timeStamp: {type: T$.Duration(), isConst: false, isFinal: true, libraryUri: I[2]},
    deviceType: {type: T$.KeyEventDeviceType(), isConst: false, isFinal: true, libraryUri: I[4]},
    synthesized: {type: T$.bool(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyEvent))));
  hardware_keyboard.KeyDownEvent = class KeyDownEvent extends hardware_keyboard.KeyEvent {
    static ['_#new#tearOff'](opts) {
      let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
      let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
      let character = opts && 'character' in opts ? opts.character : null;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
      let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
      return new hardware_keyboard.KeyDownEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, character: character, timeStamp: timeStamp, synthesized: synthesized, deviceType: deviceType});
    }
  };
  (hardware_keyboard.KeyDownEvent.new = function(opts) {
    let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
    let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
    let character = opts && 'character' in opts ? opts.character : null;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
    dart.global.Object.getPrototypeOf(hardware_keyboard.KeyDownEvent).new.call(this, {physicalKey: physicalKey, logicalKey: logicalKey, character: character, timeStamp: timeStamp, synthesized: synthesized, deviceType: deviceType});
    ;
  }).prototype = hardware_keyboard.KeyDownEvent.prototype;
  dart.addTypeTests(hardware_keyboard.KeyDownEvent);
  dart.addRtiResources(hardware_keyboard.KeyDownEvent, ["flutter__src__services__hardware_keyboard|KeyDownEvent"]);
  dart.addTypeCaches(hardware_keyboard.KeyDownEvent);
  dart.setLibraryUri(hardware_keyboard.KeyDownEvent, I[35]);
  hardware_keyboard.KeyUpEvent = class KeyUpEvent extends hardware_keyboard.KeyEvent {
    static ['_#new#tearOff'](opts) {
      let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
      let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
      let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
      return new hardware_keyboard.KeyUpEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, timeStamp: timeStamp, synthesized: synthesized, deviceType: deviceType});
    }
  };
  (hardware_keyboard.KeyUpEvent.new = function(opts) {
    let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
    let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
    dart.global.Object.getPrototypeOf(hardware_keyboard.KeyUpEvent).new.call(this, {physicalKey: physicalKey, logicalKey: logicalKey, timeStamp: timeStamp, synthesized: synthesized, deviceType: deviceType});
    ;
  }).prototype = hardware_keyboard.KeyUpEvent.prototype;
  dart.addTypeTests(hardware_keyboard.KeyUpEvent);
  dart.addRtiResources(hardware_keyboard.KeyUpEvent, ["flutter__src__services__hardware_keyboard|KeyUpEvent"]);
  dart.addTypeCaches(hardware_keyboard.KeyUpEvent);
  dart.setLibraryUri(hardware_keyboard.KeyUpEvent, I[35]);
  hardware_keyboard.KeyRepeatEvent = class KeyRepeatEvent extends hardware_keyboard.KeyEvent {
    static ['_#new#tearOff'](opts) {
      let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
      let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
      let character = opts && 'character' in opts ? opts.character : null;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
      return new hardware_keyboard.KeyRepeatEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, character: character, timeStamp: timeStamp, deviceType: deviceType});
    }
  };
  (hardware_keyboard.KeyRepeatEvent.new = function(opts) {
    let physicalKey = opts && 'physicalKey' in opts ? opts.physicalKey : null;
    let logicalKey = opts && 'logicalKey' in opts ? opts.logicalKey : null;
    let character = opts && 'character' in opts ? opts.character : null;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
    let deviceType = opts && 'deviceType' in opts ? opts.deviceType : C[133] || CT.C133;
    dart.global.Object.getPrototypeOf(hardware_keyboard.KeyRepeatEvent).new.call(this, {physicalKey: physicalKey, logicalKey: logicalKey, character: character, timeStamp: timeStamp, deviceType: deviceType});
    ;
  }).prototype = hardware_keyboard.KeyRepeatEvent.prototype;
  dart.addTypeTests(hardware_keyboard.KeyRepeatEvent);
  dart.addRtiResources(hardware_keyboard.KeyRepeatEvent, ["flutter__src__services__hardware_keyboard|KeyRepeatEvent"]);
  dart.addTypeCaches(hardware_keyboard.KeyRepeatEvent);
  dart.setLibraryUri(hardware_keyboard.KeyRepeatEvent, I[35]);
  var _pressedKeys = dart.privateName(hardware_keyboard, "_pressedKeys");
  var _lockModes = dart.privateName(hardware_keyboard, "_lockModes");
  var _handlers = dart.privateName(hardware_keyboard, "_handlers");
  var _duringDispatch = dart.privateName(hardware_keyboard, "_duringDispatch");
  var _modifiedHandlers = dart.privateName(hardware_keyboard, "_modifiedHandlers");
  var _assertEventIsRegular = dart.privateName(hardware_keyboard, "_assertEventIsRegular");
  var _dispatchKeyEvent = dart.privateName(hardware_keyboard, "_dispatchKeyEvent");
  var _debugPressedKeysDetails = dart.privateName(hardware_keyboard, "_debugPressedKeysDetails");
  hardware_keyboard.HardwareKeyboard = class HardwareKeyboard extends core.Object {
    static get instance() {
      return binding$0.ServicesBinding.instance.keyboard;
    }
    get physicalKeysPressed() {
      return this[_pressedKeys][$keys][$toSet]();
    }
    get logicalKeysPressed() {
      return this[_pressedKeys][$values][$toSet]();
    }
    lookUpLayout(physicalKey) {
      return this[_pressedKeys][$_get](physicalKey);
    }
    get lockModesEnabled() {
      return this[_lockModes];
    }
    isLogicalKeyPressed(key) {
      return this[_pressedKeys][$values][$contains](key);
    }
    isPhysicalKeyPressed(key) {
      return this[_pressedKeys][$containsKey](key);
    }
    get isControlPressed() {
      return this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.controlLeft) || this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.controlRight);
    }
    get isShiftPressed() {
      return this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.shiftLeft) || this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.shiftRight);
    }
    get isAltPressed() {
      return this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.altLeft) || this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.altRight);
    }
    get isMetaPressed() {
      return this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.metaLeft) || this.isLogicalKeyPressed(keyboard_key$46g.LogicalKeyboardKey.metaRight);
    }
    [_assertEventIsRegular](event) {
      if (!dart.fn(() => {
        let common = "If this occurs in real application, please report this bug to Flutter. If this occurs in unit tests, please ensure that simulated events follow Flutter's event model as documented in `HardwareKeyboard`. This was the event: ";
        if (T$.KeyDownEvent()[_is](event)) {
          if (!!this[_pressedKeys][$containsKey](event.physicalKey)) dart.assertFailed("A " + dart.str(dart.runtimeType(event)) + " is dispatched, but the state shows that the physical " + "key is already pressed. " + common + dart.str(event), I[37], 505, 16, "!_pressedKeys.containsKey(event.physicalKey)");
        } else if (T$.KeyRepeatEvent()[_is](event) || T$.KeyUpEvent()[_is](event)) {
          if (!this[_pressedKeys][$containsKey](event.physicalKey)) dart.assertFailed("A " + dart.str(dart.runtimeType(event)) + " is dispatched, but the state shows that the physical " + "key is not pressed. " + common + dart.str(event), I[37], 509, 16, "_pressedKeys.containsKey(event.physicalKey)");
          if (!dart.equals(this[_pressedKeys][$_get](event.physicalKey), event.logicalKey)) dart.assertFailed("A " + dart.str(dart.runtimeType(event)) + " is dispatched, but the state shows that the physical " + "key is pressed on a different logical key. " + common + dart.str(event) + " " + "and the recorded logical key " + dart.str(this[_pressedKeys][$_get](event.physicalKey)), I[37], 512, 16, "_pressedKeys[event.physicalKey] == event.logicalKey");
        } else {
          if (!false) dart.assertFailed("Unexpected key event class " + dart.str(dart.runtimeType(event)), I[37], 517, 16, "false");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[37], 499, 12, "() {\r\n      const String common = 'If this occurs in real application, please report this '\r\n        'bug to Flutter. If this occurs in unit tests, please ensure that '\r\n        \"simulated events follow Flutter's event model as documented in \"\r\n        '`HardwareKeyboard`. This was the event: ';\r\n      if (event is KeyDownEvent) {\r\n        assert(!_pressedKeys.containsKey(event.physicalKey),\r\n          'A ${event.runtimeType} is dispatched, but the state shows that the physical '\r\n          'key is already pressed. $common$event');\r\n      } else if (event is KeyRepeatEvent || event is KeyUpEvent) {\r\n        assert(_pressedKeys.containsKey(event.physicalKey),\r\n          'A ${event.runtimeType} is dispatched, but the state shows that the physical '\r\n          'key is not pressed. $common$event');\r\n        assert(_pressedKeys[event.physicalKey] == event.logicalKey,\r\n          'A ${event.runtimeType} is dispatched, but the state shows that the physical '\r\n          'key is pressed on a different logical key. $common$event '\r\n          'and the recorded logical key ${_pressedKeys[event.physicalKey]}');\r\n      } else {\r\n        assert(false, 'Unexpected key event class ${event.runtimeType}');\r\n      }\r\n      return true;\r\n    }()");
    }
    addHandler(handler) {
      if (this[_duringDispatch]) {
        this[_modifiedHandlers] == null ? this[_modifiedHandlers] = (() => {
          let t$3637 = G.ListOfKeyEventTobool().of(this[_handlers]);
          return t$3637;
        })() : null;
        dart.nullCheck(this[_modifiedHandlers])[$add](handler);
      } else {
        this[_handlers][$add](handler);
      }
    }
    removeHandler(handler) {
      if (this[_duringDispatch]) {
        this[_modifiedHandlers] == null ? this[_modifiedHandlers] = (() => {
          let t$3638 = G.ListOfKeyEventTobool().of(this[_handlers]);
          return t$3638;
        })() : null;
        dart.nullCheck(this[_modifiedHandlers])[$remove](handler);
      } else {
        this[_handlers][$remove](handler);
      }
    }
    syncKeyboardState() {
      return async.async(T$.void(), (function* syncKeyboardState() {
        let keyboardState = (yield system_channels.SystemChannels.keyboard.invokeMapMethod(T$.int(), T$.int(), "getKeyboardState"));
        if (keyboardState != null) {
          for (let key of keyboardState[$keys]) {
            let physicalKey = new keyboard_key$46g.PhysicalKeyboardKey.new(key);
            let logicalKey = new keyboard_key$46g.LogicalKeyboardKey.new(dart.nullCheck(keyboardState[$_get](key)));
            this[_pressedKeys][$_set](physicalKey, logicalKey);
          }
        }
      }).bind(this));
    }
    [_dispatchKeyEvent](event) {
      if (!!this[_duringDispatch]) dart.assertFailed("Nested keyboard dispatching is not supported", I[37], 595, 12, "!_duringDispatch");
      this[_duringDispatch] = true;
      let handled = false;
      for (let handler of this[_handlers]) {
        try {
          let thisResult = handler(event);
          handled = handled || thisResult;
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfKeyEvent()).new("Event", event)]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[37], 604, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<KeyEvent>('Event', event),\r\n          ];\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while processing a key handler"), informationCollector: collector}));
          } else
            throw t$36$35e;
        }
      }
      this[_duringDispatch] = false;
      if (this[_modifiedHandlers] != null) {
        this[_handlers] = dart.nullCheck(this[_modifiedHandlers]);
        this[_modifiedHandlers] = null;
      }
      return handled;
    }
    [_debugPressedKeysDetails]() {
      if (this[_pressedKeys][$isEmpty]) {
        return G.JSArrayOfString().of(["Empty"]);
      }
      let details = G.JSArrayOfString().of([]);
      for (let physicalKey of this[_pressedKeys][$keys]) {
        details[$add](dart.str(physicalKey) + ": " + dart.str(this[_pressedKeys][$_get](physicalKey)));
      }
      return details;
    }
    handleKeyEvent(event) {
      if (!hardware_keyboard._keyboardDebug(dart.fn(() => "Key event received: " + dart.str(event), T$.VoidToString()))) dart.assertFailed(null, I[37], 641, 12, "_keyboardDebug(() => 'Key event received: $event')");
      if (!hardware_keyboard._keyboardDebug(dart.fn(() => "Pressed state before processing the event:", T$.VoidToString()), dart.bind(this, _debugPressedKeysDetails))) dart.assertFailed(null, I[37], 642, 12, "_keyboardDebug(() => 'Pressed state before processing the event:', _debugPressedKeysDetails)");
      this[_assertEventIsRegular](event);
      let physicalKey = event.physicalKey;
      let logicalKey = event.logicalKey;
      if (T$.KeyDownEvent()[_is](event)) {
        this[_pressedKeys][$_set](physicalKey, logicalKey);
        let lockMode = hardware_keyboard.KeyboardLockMode.findLockByLogicalKey(event.logicalKey);
        if (lockMode != null) {
          if (this[_lockModes].contains(lockMode)) {
            this[_lockModes].remove(lockMode);
          } else {
            this[_lockModes].add(lockMode);
          }
        }
      } else if (T$.KeyUpEvent()[_is](event)) {
        this[_pressedKeys][$remove](physicalKey);
      } else if (T$.KeyRepeatEvent()[_is](event)) {
      }
      if (!hardware_keyboard._keyboardDebug(dart.fn(() => "Pressed state after processing the event:", T$.VoidToString()), dart.bind(this, _debugPressedKeysDetails))) dart.assertFailed(null, I[37], 662, 12, "_keyboardDebug(() => 'Pressed state after processing the event:', _debugPressedKeysDetails)");
      return this[_dispatchKeyEvent](event);
    }
    clearState() {
      this[_pressedKeys][$clear]();
      this[_lockModes].clear();
      this[_handlers][$clear]();
      if (!(this[_modifiedHandlers] == null)) dart.assertFailed(null, I[37], 677, 12, "_modifiedHandlers == null");
    }
    static ['_#new#tearOff']() {
      return new hardware_keyboard.HardwareKeyboard.new();
    }
  };
  (hardware_keyboard.HardwareKeyboard.new = function() {
    this[_pressedKeys] = new (G.LinkedMapOfPhysicalKeyboardKey$LogicalKeyboardKey()).new();
    this[_lockModes] = G.LinkedHashSetOfKeyboardLockMode().new();
    this[_handlers] = G.JSArrayOfKeyEventTobool().of([]);
    this[_duringDispatch] = false;
    this[_modifiedHandlers] = null;
    ;
  }).prototype = hardware_keyboard.HardwareKeyboard.prototype;
  dart.addTypeTests(hardware_keyboard.HardwareKeyboard);
  dart.addRtiResources(hardware_keyboard.HardwareKeyboard, ["flutter__src__services__hardware_keyboard|HardwareKeyboard"]);
  dart.addTypeCaches(hardware_keyboard.HardwareKeyboard);
  dart.setMethodSignature(hardware_keyboard.HardwareKeyboard, () => dart.global.Object.setPrototypeOf({
    lookUpLayout: T$.PhysicalKeyboardKeyToLogicalKeyboardKeyN(),
    isLogicalKeyPressed: T$.LogicalKeyboardKeyTobool(),
    isPhysicalKeyPressed: T$.PhysicalKeyboardKeyTobool(),
    [_assertEventIsRegular]: T$.KeyEventTovoid(),
    addHandler: T$.FnTovoid$2(),
    removeHandler: T$.FnTovoid$2(),
    syncKeyboardState: T$.VoidToFutureOfvoid(),
    [_dispatchKeyEvent]: T$.KeyEventTobool(),
    [_debugPressedKeysDetails]: T$.VoidToListOfString(),
    handleKeyEvent: T$.KeyEventTobool(),
    clearState: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(hardware_keyboard.HardwareKeyboard))));
  dart.setGetterSignature(hardware_keyboard.HardwareKeyboard, () => dart.global.Object.setPrototypeOf({
    physicalKeysPressed: T$.SetOfPhysicalKeyboardKey(),
    logicalKeysPressed: T$.SetOfLogicalKeyboardKey(),
    lockModesEnabled: T$.SetOfKeyboardLockMode(),
    isControlPressed: T$.bool(),
    isShiftPressed: T$.bool(),
    isAltPressed: T$.bool(),
    isMetaPressed: T$.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(hardware_keyboard.HardwareKeyboard))));
  dart.setStaticGetterSignature(hardware_keyboard.HardwareKeyboard, () => ['instance']);
  dart.setLibraryUri(hardware_keyboard.HardwareKeyboard, I[35]);
  dart.setFieldSignature(hardware_keyboard.HardwareKeyboard, () => dart.global.Object.setPrototypeOf({
    [_pressedKeys]: {type: T$.MapOfPhysicalKeyboardKey$LogicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_lockModes]: {type: T$.SetOfKeyboardLockMode(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_handlers]: {type: T$.ListOfKeyEventTobool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_duringDispatch]: {type: T$.bool(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_modifiedHandlers]: {type: T$.ListNOfKeyEventTobool(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(hardware_keyboard.HardwareKeyboard))));
  hardware_keyboard.KeyDataTransitMode = class KeyDataTransitMode extends core._Enum {
    [_enumToString]() {
      return "KeyDataTransitMode." + this[_name];
    }
  };
  (hardware_keyboard.KeyDataTransitMode.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(hardware_keyboard.KeyDataTransitMode).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = hardware_keyboard.KeyDataTransitMode.prototype;
  dart.addTypeTests(hardware_keyboard.KeyDataTransitMode);
  dart.addRtiResources(hardware_keyboard.KeyDataTransitMode, ["flutter__src__services__hardware_keyboard|KeyDataTransitMode"]);
  dart.addTypeCaches(hardware_keyboard.KeyDataTransitMode);
  dart.setMethodSignature(hardware_keyboard.KeyDataTransitMode, () => dart.global.Object.setPrototypeOf({[_enumToString]: T$.VoidToString()}, dart.getMethods(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyDataTransitMode))));
  dart.setLibraryUri(hardware_keyboard.KeyDataTransitMode, I[35]);
  dart.setStaticFieldSignature(hardware_keyboard.KeyDataTransitMode, () => ['values', 'rawKeyData', 'keyDataThenRawKeyData']);
  dart.defineLazy(hardware_keyboard.KeyDataTransitMode, {
    /*hardware_keyboard.KeyDataTransitMode.values*/get values() {
      return C[134] || CT.C134;
    },
    /*hardware_keyboard.KeyDataTransitMode.rawKeyData*/get rawKeyData() {
      return C[135] || CT.C135;
    },
    /*hardware_keyboard.KeyDataTransitMode.keyDataThenRawKeyData*/get keyDataThenRawKeyData() {
      return C[136] || CT.C136;
    }
  }, false);
  var events$ = dart.privateName(hardware_keyboard, "KeyMessage.events");
  var rawEvent$ = dart.privateName(hardware_keyboard, "KeyMessage.rawEvent");
  hardware_keyboard.KeyMessage = class KeyMessage extends core.Object {
    get events() {
      return this[events$];
    }
    set events(value) {
      super.events = value;
    }
    get rawEvent() {
      return this[rawEvent$];
    }
    set rawEvent(value) {
      super.rawEvent = value;
    }
    static ['_#new#tearOff'](events, rawEvent) {
      return new hardware_keyboard.KeyMessage.new(events, rawEvent);
    }
    toString() {
      return "KeyMessage(" + dart.str(this.events) + ")";
    }
  };
  (hardware_keyboard.KeyMessage.new = function(events, rawEvent) {
    this[events$] = events;
    this[rawEvent$] = rawEvent;
    ;
  }).prototype = hardware_keyboard.KeyMessage.prototype;
  dart.addTypeTests(hardware_keyboard.KeyMessage);
  dart.addRtiResources(hardware_keyboard.KeyMessage, ["flutter__src__services__hardware_keyboard|KeyMessage"]);
  dart.addTypeCaches(hardware_keyboard.KeyMessage);
  dart.setLibraryUri(hardware_keyboard.KeyMessage, I[35]);
  dart.setFieldSignature(hardware_keyboard.KeyMessage, () => dart.global.Object.setPrototypeOf({
    events: {type: T$.ListOfKeyEvent(), isConst: false, isFinal: true, libraryUri: I[2]},
    rawEvent: {type: T$.RawKeyEventN(), isConst: false, isFinal: true, libraryUri: I[24]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyMessage))));
  dart.defineExtensionMethods(hardware_keyboard.KeyMessage, ['toString']);
  var keyMessageHandler = dart.privateName(hardware_keyboard, "KeyEventManager.keyMessageHandler");
  var _transitMode = dart.privateName(hardware_keyboard, "_transitMode");
  var _keyEventsSinceLastMessage = dart.privateName(hardware_keyboard, "_keyEventsSinceLastMessage");
  var _skippedRawKeysPressed = dart.privateName(hardware_keyboard, "_skippedRawKeysPressed");
  var _hardwareKeyboard$ = dart.privateName(hardware_keyboard, "_hardwareKeyboard");
  var _rawKeyboard$ = dart.privateName(hardware_keyboard, "_rawKeyboard");
  var _dispatchKeyMessage = dart.privateName(hardware_keyboard, "_dispatchKeyMessage");
  var _convertRawEventAndStore = dart.privateName(hardware_keyboard, "_convertRawEventAndStore");
  var _convertDeviceType = dart.privateName(hardware_keyboard, "_convertDeviceType");
  hardware_keyboard.KeyEventManager = class KeyEventManager extends core.Object {
    get keyMessageHandler() {
      return this[keyMessageHandler];
    }
    set keyMessageHandler(value) {
      this[keyMessageHandler] = value;
    }
    static ['_#new#tearOff'](_hardwareKeyboard, _rawKeyboard) {
      return new hardware_keyboard.KeyEventManager.new(_hardwareKeyboard, _rawKeyboard);
    }
    handleKeyData(data) {
      this[_transitMode] == null ? this[_transitMode] = hardware_keyboard.KeyDataTransitMode.keyDataThenRawKeyData : null;
      switch (dart.nullCheck(this[_transitMode])) {
        case C[135] || CT.C135:
          {
            if (!false) dart.assertFailed("Should never encounter KeyData when transitMode is rawKeyData.", I[37], 1067, 16, "false");
            return false;
          }
        case C[136] || CT.C136:
          {
            if (data.physical === 0 && data.logical === 0) {
              return false;
            }
            if (!(data.physical !== 0 && data.logical !== 0)) dart.assertFailed(null, I[37], 1077, 16, "data.physical != 0 && data.logical != 0");
            let event = hardware_keyboard.KeyEventManager._eventFromData(data);
            if (data.synthesized && this[_keyEventsSinceLastMessage][$isEmpty]) {
              this[_hardwareKeyboard$].handleKeyEvent(event);
              this[_dispatchKeyMessage](G.JSArrayOfKeyEvent().of([event]), null);
            } else {
              this[_keyEventsSinceLastMessage][$add](event);
            }
            return false;
          }
      }
    }
    [_dispatchKeyMessage](keyEvents, rawEvent) {
      if (this.keyMessageHandler != null) {
        let message = new hardware_keyboard.KeyMessage.new(keyEvents, rawEvent);
        try {
          return dart.nullCheck(this.keyMessageHandler)(message);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => G.JSArrayOfDiagnosticsNode().of([new (G.DiagnosticsPropertyOfKeyMessage()).new("KeyMessage", message)]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[37], 1106, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<KeyMessage>('KeyMessage', message),\r\n          ];\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while processing the key message handler"), informationCollector: collector}));
          } else
            throw t$36$35e;
        }
      }
      return false;
    }
    handleRawKeyMessage(message) {
      return async.async(T$.MapOfString$dynamic(), (function* handleRawKeyMessage() {
        if (this[_transitMode] == null) {
          this[_transitMode] = hardware_keyboard.KeyDataTransitMode.rawKeyData;
          this[_rawKeyboard$].addListener(dart.bind(this, _convertRawEventAndStore));
        }
        let rawEvent = raw_keyboard.RawKeyEvent.fromMessage(T$.MapOfString$dynamic()[_as](message));
        let shouldDispatch = true;
        if (T$.RawKeyDownEvent()[_is](rawEvent)) {
          if (!rawEvent.data.shouldDispatchEvent()) {
            shouldDispatch = false;
            this[_skippedRawKeysPressed].add(rawEvent.physicalKey);
          } else {
            this[_skippedRawKeysPressed].remove(rawEvent.physicalKey);
          }
        } else if (T$.RawKeyUpEvent()[_is](rawEvent)) {
          if (this[_skippedRawKeysPressed].contains(rawEvent.physicalKey)) {
            this[_skippedRawKeysPressed].remove(rawEvent.physicalKey);
            shouldDispatch = false;
          }
        }
        let handled = true;
        if (shouldDispatch) {
          handled = this[_rawKeyboard$].handleRawKeyEvent(rawEvent);
          for (let event of this[_keyEventsSinceLastMessage]) {
            handled = this[_hardwareKeyboard$].handleKeyEvent(event) || handled;
          }
          if (this[_transitMode] === hardware_keyboard.KeyDataTransitMode.rawKeyData) {
            if (!collections.setEquals(T$.PhysicalKeyboardKey(), this[_rawKeyboard$].physicalKeysPressed, this[_hardwareKeyboard$].physicalKeysPressed)) dart.assertFailed("RawKeyboard reported " + dart.str(this[_rawKeyboard$].physicalKeysPressed) + ", " + "while HardwareKeyboard reported " + dart.str(this[_hardwareKeyboard$].physicalKeysPressed), I[37], 1170, 16, "setEquals(_rawKeyboard.physicalKeysPressed, _hardwareKeyboard.physicalKeysPressed)");
          }
          handled = this[_dispatchKeyMessage](this[_keyEventsSinceLastMessage], rawEvent) || handled;
          this[_keyEventsSinceLastMessage][$clear]();
        }
        return new (G.IdentityMapOfString$dynamic()).from(["handled", handled]);
      }).bind(this));
    }
    [_convertDeviceType](rawEvent) {
      let data = rawEvent.data;
      if (!T$.RawKeyEventDataAndroid()[_is](data)) {
        return ui.KeyEventDeviceType.keyboard;
      }
      switch (data.eventSource) {
        case 257:
          {
            return ui.KeyEventDeviceType.keyboard;
          }
        case 513:
          {
            return ui.KeyEventDeviceType.directionalPad;
          }
        case 1025:
          {
            return ui.KeyEventDeviceType.gamepad;
          }
        case 16777232:
          {
            return ui.KeyEventDeviceType.joystick;
          }
        case 33554433:
          {
            return ui.KeyEventDeviceType.hdmi;
          }
      }
      return ui.KeyEventDeviceType.keyboard;
    }
    [_convertRawEventAndStore](rawEvent) {
      let physicalKey = rawEvent.physicalKey;
      let logicalKey = rawEvent.logicalKey;
      let physicalKeysPressed = this[_hardwareKeyboard$].physicalKeysPressed;
      let eventAfterwards = G.JSArrayOfKeyEvent().of([]);
      let mainEvent = null;
      let recordedLogicalMain = this[_hardwareKeyboard$].lookUpLayout(physicalKey);
      let timeStamp = binding$0.ServicesBinding.instance.currentSystemFrameTimeStamp;
      let character = rawEvent.character === "" ? null : rawEvent.character;
      let deviceType = this[_convertDeviceType](rawEvent);
      if (T$.RawKeyDownEvent()[_is](rawEvent)) {
        if (recordedLogicalMain == null) {
          mainEvent = new hardware_keyboard.KeyDownEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, character: character, timeStamp: timeStamp, deviceType: deviceType});
          physicalKeysPressed.add(physicalKey);
        } else {
          if (!physicalKeysPressed.contains(physicalKey)) dart.assertFailed(null, I[37], 1235, 16, "physicalKeysPressed.contains(physicalKey)");
          mainEvent = new hardware_keyboard.KeyRepeatEvent.new({physicalKey: physicalKey, logicalKey: recordedLogicalMain, character: character, timeStamp: timeStamp, deviceType: deviceType});
        }
      } else {
        if (!T$.RawKeyUpEvent()[_is](rawEvent)) dart.assertFailed("Unexpected subclass of RawKeyEvent: " + dart.str(dart.runtimeType(rawEvent)), I[37], 1245, 14, "rawEvent is RawKeyUpEvent");
        if (recordedLogicalMain == null) {
          mainEvent = null;
        } else {
          mainEvent = new hardware_keyboard.KeyUpEvent.new({logicalKey: recordedLogicalMain, physicalKey: physicalKey, timeStamp: timeStamp, deviceType: deviceType});
          physicalKeysPressed.remove(physicalKey);
        }
      }
      for (let key of physicalKeysPressed.difference(this[_rawKeyboard$].physicalKeysPressed)) {
        if (dart.equals(key, physicalKey)) {
          eventAfterwards[$add](new hardware_keyboard.KeyUpEvent.new({physicalKey: key, logicalKey: logicalKey, timeStamp: timeStamp, synthesized: true, deviceType: deviceType}));
        } else {
          this[_keyEventsSinceLastMessage][$add](new hardware_keyboard.KeyUpEvent.new({physicalKey: key, logicalKey: dart.nullCheck(this[_hardwareKeyboard$].lookUpLayout(key)), timeStamp: timeStamp, synthesized: true, deviceType: deviceType}));
        }
      }
      for (let key of this[_rawKeyboard$].physicalKeysPressed.difference(physicalKeysPressed)) {
        this[_keyEventsSinceLastMessage][$add](new hardware_keyboard.KeyDownEvent.new({physicalKey: key, logicalKey: dart.nullCheck(this[_rawKeyboard$].lookUpLayout(key)), timeStamp: timeStamp, synthesized: true, deviceType: deviceType}));
      }
      if (mainEvent != null) {
        this[_keyEventsSinceLastMessage][$add](mainEvent);
      }
      this[_keyEventsSinceLastMessage][$addAll](eventAfterwards);
    }
    clearState() {
      if (!dart.fn(() => {
        this[_transitMode] = null;
        this[_rawKeyboard$].removeListener(dart.bind(this, _convertRawEventAndStore));
        this[_keyEventsSinceLastMessage][$clear]();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[37], 1300, 12, "() {\r\n      _transitMode = null;\r\n      _rawKeyboard.removeListener(_convertRawEventAndStore);\r\n      _keyEventsSinceLastMessage.clear();\r\n      return true;\r\n    }()");
    }
    static _eventFromData(keyData) {
      let t$3643, t$3643$;
      let physicalKey = (t$3643 = keyboard_key$46g.PhysicalKeyboardKey.findKeyByCode(keyData.physical), t$3643 == null ? new keyboard_key$46g.PhysicalKeyboardKey.new(keyData.physical) : t$3643);
      let logicalKey = (t$3643$ = keyboard_key$46g.LogicalKeyboardKey.findKeyByKeyId(keyData.logical), t$3643$ == null ? new keyboard_key$46g.LogicalKeyboardKey.new(keyData.logical) : t$3643$);
      let timeStamp = keyData.timeStamp;
      switch (keyData.type) {
        case C[137] || CT.C137:
          {
            return new hardware_keyboard.KeyDownEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, timeStamp: timeStamp, character: keyData.character, synthesized: keyData.synthesized, deviceType: keyData.deviceType});
          }
        case C[138] || CT.C138:
          {
            if (!(keyData.character == null)) dart.assertFailed(null, I[37], 1327, 16, "keyData.character == null");
            return new hardware_keyboard.KeyUpEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, timeStamp: timeStamp, synthesized: keyData.synthesized, deviceType: keyData.deviceType});
          }
        case C[139] || CT.C139:
          {
            return new hardware_keyboard.KeyRepeatEvent.new({physicalKey: physicalKey, logicalKey: logicalKey, timeStamp: timeStamp, character: keyData.character, deviceType: keyData.deviceType});
          }
      }
    }
  };
  (hardware_keyboard.KeyEventManager.new = function(_hardwareKeyboard, _rawKeyboard) {
    this[keyMessageHandler] = null;
    this[_transitMode] = null;
    this[_keyEventsSinceLastMessage] = G.JSArrayOfKeyEvent().of([]);
    this[_skippedRawKeysPressed] = G.LinkedHashSetOfPhysicalKeyboardKey().new();
    this[_hardwareKeyboard$] = _hardwareKeyboard;
    this[_rawKeyboard$] = _rawKeyboard;
    ;
  }).prototype = hardware_keyboard.KeyEventManager.prototype;
  dart.addTypeTests(hardware_keyboard.KeyEventManager);
  dart.addRtiResources(hardware_keyboard.KeyEventManager, ["flutter__src__services__hardware_keyboard|KeyEventManager"]);
  dart.addTypeCaches(hardware_keyboard.KeyEventManager);
  dart.setMethodSignature(hardware_keyboard.KeyEventManager, () => dart.global.Object.setPrototypeOf({
    handleKeyData: T$.KeyDataTobool(),
    [_dispatchKeyMessage]: T$.ListOfKeyEventAndRawKeyEventNTobool(),
    handleRawKeyMessage: T$.dynamicToFutureOfMapOfString$dynamic(),
    [_convertDeviceType]: T$.RawKeyEventToKeyEventDeviceType(),
    [_convertRawEventAndStore]: T$.RawKeyEventTovoid(),
    clearState: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyEventManager))));
  dart.setStaticMethodSignature(hardware_keyboard.KeyEventManager, () => ['_eventFromData']);
  dart.setLibraryUri(hardware_keyboard.KeyEventManager, I[35]);
  dart.setFieldSignature(hardware_keyboard.KeyEventManager, () => dart.global.Object.setPrototypeOf({
    keyMessageHandler: {type: T$.KeyMessageToNbool(), isConst: false, isFinal: false},
    [_hardwareKeyboard$]: {type: T$.HardwareKeyboard(), isConst: false, isFinal: true, libraryUri: I[35]},
    [_rawKeyboard$]: {type: T$.RawKeyboard(), isConst: false, isFinal: true, libraryUri: I[24]},
    [_transitMode]: {type: T$.KeyDataTransitModeN(), isConst: false, isFinal: false, libraryUri: I[35]},
    [_keyEventsSinceLastMessage]: {type: T$.ListOfKeyEvent(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_skippedRawKeysPressed]: {type: T$.SetOfPhysicalKeyboardKey(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(hardware_keyboard.KeyEventManager))));
  hardware_keyboard._keyboardDebug = function _keyboardDebug(messageFunc, detailsFunc = null) {
    let t$3643, t$3643$;
    ;
    if (!debug.debugPrintKeyboardEvents) {
      return true;
    }
    print.debugPrint("KEYBOARD: " + messageFunc());
    let details = (t$3643$ = (t$3643 = detailsFunc, t$3643 == null ? null : t$3643()), t$3643$ == null ? C[140] || CT.C140 : t$3643$);
    if (details[$isNotEmpty]) {
      for (let detail of details) {
        print.debugPrint("    " + dart.str(detail));
      }
    }
    return true;
  };
  debug.debugAssertAllServicesVarsUnset = function debugAssertAllServicesVarsUnset(reason) {
    if (!dart.fn(() => {
      if (debug.debugKeyEventSimulatorTransitModeOverride != null) {
        dart.throw(assertions.FlutterError.new(reason));
      }
      if (debug.debugPrintKeyboardEvents) {
        dart.throw(assertions.FlutterError.new(reason));
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[38], 39, 10, "() {\r\n    if (debugKeyEventSimulatorTransitModeOverride != null) {\r\n      throw FlutterError(reason);\r\n    }\r\n    if (debugPrintKeyboardEvents) {\r\n      throw FlutterError(reason);\r\n    }\r\n    return true;\r\n  }()");
    return true;
  };
  dart.defineLazy(debug, {
    /*debug.debugKeyEventSimulatorTransitModeOverride*/get debugKeyEventSimulatorTransitModeOverride() {
      return null;
    },
    set debugKeyEventSimulatorTransitModeOverride(value) {},
    /*debug.debugPrintKeyboardEvents*/get debugPrintKeyboardEvents() {
      return false;
    },
    set debugPrintKeyboardEvents(value) {},
    /*debug.debugProfilePlatformChannels*/get debugProfilePlatformChannels() {
      return false;
    },
    set debugProfilePlatformChannels(value) {}
  }, false);
  var accessibilityFocus = dart.privateName(binding$0, "ServicesBinding.accessibilityFocus");
  var __ServicesBinding__keyboard = dart.privateName(binding$0, "_#ServicesBinding#_keyboard");
  var __ServicesBinding__keyEventManager = dart.privateName(binding$0, "_#ServicesBinding#_keyEventManager");
  var __ServicesBinding__defaultBinaryMessenger = dart.privateName(binding$0, "_#ServicesBinding#_defaultBinaryMessenger");
  var __ServicesBinding__restorationManager = dart.privateName(binding$0, "_#ServicesBinding#_restorationManager");
  var _systemUiChangeCallback = dart.privateName(binding$0, "_systemUiChangeCallback");
  var _defaultBinaryMessenger = dart.privateName(binding$0, "_defaultBinaryMessenger");
  var _restorationManager = dart.privateName(binding$0, "_restorationManager");
  var _initKeyboard = dart.privateName(binding$0, "_initKeyboard");
  var _handleAccessibilityMessage = dart.privateName(binding$0, "_handleAccessibilityMessage");
  var _handleLifecycleMessage = dart.privateName(binding$0, "_handleLifecycleMessage");
  var _handlePlatformMessage = dart.privateName(binding$0, "_handlePlatformMessage");
  var _keyboard = dart.privateName(binding$0, "_keyboard");
  var _keyEventManager = dart.privateName(binding$0, "_keyEventManager");
  var _addLicenses = dart.privateName(binding$0, "_addLicenses");
  var _generateStateTransitions = dart.privateName(binding$0, "_generateStateTransitions");
  binding$0.ServicesBinding = class ServicesBinding extends core.Object {
    static get instance() {
      return binding$.BindingBase.checkInstance(T$.ServicesBinding(), binding$0.ServicesBinding._instance);
    }
    static get rootIsolateToken() {
      return ui.RootIsolateToken.instance;
    }
    static _parseLicenses(rawLicenses) {
      let licenseSeparator = "\n" + "-"[$times](80) + "\n";
      let result = G.JSArrayOfLicenseEntry().of([]);
      let licenses = rawLicenses[$split](licenseSeparator);
      for (let license of licenses) {
        let split = license[$indexOf]("\n\n");
        if (split >= 0) {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(license[$substring](0, split)[$split]("\n"), license[$substring](split + 2)));
        } else {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(C[0] || CT.C0, license));
        }
      }
      return result;
    }
    static _debugVerifyLifecycleChange(starting, ending) {
      if (starting == null) {
        return true;
      }
      if (starting === ending) {
        return false;
      }
      switch (starting) {
        case C[145] || CT.C145:
          {
            if (ending === ui.AppLifecycleState.resumed || ending === ui.AppLifecycleState.paused) {
              return true;
            }
            break;
          }
        case C[146] || CT.C146:
          {
            if (ending === ui.AppLifecycleState.inactive) {
              return true;
            }
            break;
          }
        case C[147] || CT.C147:
          {
            if (ending === ui.AppLifecycleState.resumed || ending === ui.AppLifecycleState.hidden) {
              return true;
            }
            break;
          }
        case C[148] || CT.C148:
          {
            if (ending === ui.AppLifecycleState.inactive || ending === ui.AppLifecycleState.paused) {
              return true;
            }
            break;
          }
        case C[149] || CT.C149:
          {
            if (ending === ui.AppLifecycleState.hidden || ending === ui.AppLifecycleState.detached) {
              return true;
            }
          }
      }
      return false;
    }
    static _parseAppLifecycleMessage(message) {
      switch (message) {
        case "AppLifecycleState.resumed":
          {
            return ui.AppLifecycleState.resumed;
          }
        case "AppLifecycleState.inactive":
          {
            return ui.AppLifecycleState.inactive;
          }
        case "AppLifecycleState.hidden":
          {
            return ui.AppLifecycleState.hidden;
          }
        case "AppLifecycleState.paused":
          {
            return ui.AppLifecycleState.paused;
          }
        case "AppLifecycleState.detached":
          {
            return ui.AppLifecycleState.detached;
          }
      }
      return null;
    }
  };
  binding$0.ServicesBinding[dart.mixinOn] = _ServicesBinding$36BindingBase$36SchedulerBinding => class ServicesBinding extends _ServicesBinding$36BindingBase$36SchedulerBinding {
    get accessibilityFocus() {
      return this[accessibilityFocus];
    }
    set accessibilityFocus(value) {
      super.accessibilityFocus = value;
    }
    initInstances() {
      super.initInstances();
      binding$0.ServicesBinding._instance = this;
      this[_defaultBinaryMessenger] = this.createBinaryMessenger();
      this[_restorationManager] = this.createRestorationManager();
      this[_initKeyboard]();
      this.initLicenses();
      system_channels.SystemChannels.system.setMessageHandler(dart.fn(message => this.handleSystemMessage(T$.Object()[_as](message)), T$.dynamicToFutureOfvoid()));
      system_channels.SystemChannels.accessibility.setMessageHandler(dart.fn(message => this[_handleAccessibilityMessage](T$.Object()[_as](message)), T$.dynamicToFutureOfvoid()));
      system_channels.SystemChannels.lifecycle.setMessageHandler(dart.bind(this, _handleLifecycleMessage));
      system_channels.SystemChannels.platform.setMethodCallHandler(dart.bind(this, _handlePlatformMessage));
      text_input.TextInput.ensureInitialized();
      this.readInitialLifecycleStateFromNativeWindow();
      this.initializationComplete();
    }
    get keyboard() {
      return this[_keyboard];
    }
    get [_keyboard]() {
      let t$3643;
      t$3643 = this[__ServicesBinding__keyboard];
      return t$3643 == null ? dart.throw(new _internal.LateError.fieldNI("_keyboard")) : t$3643;
    }
    set [_keyboard](_keyboard$35param) {
      if (this[__ServicesBinding__keyboard] == null)
        this[__ServicesBinding__keyboard] = _keyboard$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_keyboard"));
    }
    get keyEventManager() {
      return this[_keyEventManager];
    }
    get [_keyEventManager]() {
      let t$3643;
      t$3643 = this[__ServicesBinding__keyEventManager];
      return t$3643 == null ? dart.throw(new _internal.LateError.fieldNI("_keyEventManager")) : t$3643;
    }
    set [_keyEventManager](_keyEventManager$35param) {
      if (this[__ServicesBinding__keyEventManager] == null)
        this[__ServicesBinding__keyEventManager] = _keyEventManager$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_keyEventManager"));
    }
    [_initKeyboard]() {
      this[_keyboard] = new hardware_keyboard.HardwareKeyboard.new();
      this[_keyEventManager] = new hardware_keyboard.KeyEventManager.new(this[_keyboard], raw_keyboard.RawKeyboard.instance);
      this[_keyboard].syncKeyboardState().then(T$.Null(), dart.fn(_ => {
        this.platformDispatcher.onKeyData = dart.bind(this[_keyEventManager], 'handleKeyData');
        system_channels.SystemChannels.keyEvent.setMessageHandler(dart.bind(this[_keyEventManager], 'handleRawKeyMessage'));
      }, T$.voidToNull()));
    }
    get defaultBinaryMessenger() {
      return this[_defaultBinaryMessenger];
    }
    get [_defaultBinaryMessenger]() {
      let t$3643;
      t$3643 = this[__ServicesBinding__defaultBinaryMessenger];
      return t$3643 == null ? dart.throw(new _internal.LateError.fieldNI("_defaultBinaryMessenger")) : t$3643;
    }
    set [_defaultBinaryMessenger](_defaultBinaryMessenger$35param) {
      if (this[__ServicesBinding__defaultBinaryMessenger] == null)
        this[__ServicesBinding__defaultBinaryMessenger] = _defaultBinaryMessenger$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_defaultBinaryMessenger"));
    }
    get channelBuffers() {
      return ui.channelBuffers;
    }
    createBinaryMessenger() {
      return C[141] || CT.C141;
    }
    handleMemoryPressure() {
      asset_bundle.rootBundle.clear();
    }
    handleSystemMessage(systemMessage) {
      return async.async(T$.void(), (function* handleSystemMessage() {
        let message = T$.MapOfString$dynamic()[_as](systemMessage);
        let type = T$.String()[_as](message[$_get]("type"));
        switch (type) {
          case "memoryPressure":
            {
              this.handleMemoryPressure();
            }
        }
        return;
      }).bind(this));
    }
    initLicenses() {
      licenses$.LicenseRegistry.addLicense(dart.bind(this, _addLicenses));
    }
    [_addLicenses]() {
      let t$36$35controller = null;
      function t$36$35controller$35get() {
        let t$3644;
        t$3644 = t$36$35controller;
        return t$3644 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t$3644;
      }
      function t$36$35controller$35set(controller$35param) {
        if (t$36$35controller == null)
          return t$36$35controller = controller$35param;
        else
          dart.throw(new _internal.LateError.localAI("controller"));
      }
      t$36$35controller$35set(G.StreamControllerOfLicenseEntry().new({onListen: dart.fn(() => async.async(T$.void(), function*() {
          let t$36$35rawLicenses = null;
          function t$36$35rawLicenses$35get() {
            let t$3647;
            t$3647 = t$36$35rawLicenses;
            return t$3647 == null ? dart.throw(new _internal.LateError.localNI("rawLicenses")) : t$3647;
          }
          function t$36$35rawLicenses$35set(rawLicenses$35param) {
            if (t$36$35rawLicenses == null)
              return t$36$35rawLicenses = rawLicenses$35param;
            else
              dart.throw(new _internal.LateError.localAI("rawLicenses"));
          }
          {
            t$36$35rawLicenses$35set(yield asset_bundle.rootBundle.loadString("NOTICES", {cache: false}));
          }
          let licenses = (yield isolates.compute(T$.String(), T$.ListOfLicenseEntry(), C[142] || CT.C142, t$36$35rawLicenses$35get(), {debugLabel: "parseLicenses"}));
          licenses[$forEach](T$.LicenseEntryTovoid()[_as](dart.bind(t$36$35controller$35get(), 'add')));
          yield t$36$35controller$35get().close();
        }), T$.VoidToFutureOfvoid())}));
      return t$36$35controller$35get().stream;
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      if (!dart.fn(() => {
        this.registerStringServiceExtension({name: core['EnumName|get#name'](service_extensions.ServicesServiceExtensions.evict), getter: dart.fn(() => async.async(T$.String(), function*() {
            return "";
          }), T$.VoidToFutureOfString()), setter: dart.fn(value => async.async(T$.void(), (function*() {
            this.evict(value);
          }).bind(this)), T$.StringToFutureOfvoid())});
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[39], 228, 12, "() {\r\n      registerStringServiceExtension(\r\n        name: ServicesServiceExtensions.evict.name,\r\n        getter: () async => '',\r\n        setter: (String value) async {\r\n          evict(value);\r\n        },\r\n      );\r\n      return true;\r\n    }()");
      {
        this.registerBoolServiceExtension({name: core['EnumName|get#name'](service_extensions.ServicesServiceExtensions.profilePlatformChannels), getter: dart.fn(() => async.async(T$.bool(), function*() {
            return debug.debugProfilePlatformChannels;
          }), T$.VoidToFutureOfbool()), setter: dart.fn(value => async.async(T$.void(), function*() {
            debug.debugProfilePlatformChannels = value;
          }), T$.boolToFutureOfvoid())});
      }
    }
    evict(asset) {
      asset_bundle.rootBundle.evict(asset);
    }
    readInitialLifecycleStateFromNativeWindow() {
      if (this.lifecycleState != null || this.platformDispatcher.initialLifecycleState[$isEmpty]) {
        return;
      }
      this[_handleLifecycleMessage](this.platformDispatcher.initialLifecycleState);
    }
    [_handleLifecycleMessage](message) {
      return async.async(T$.StringN(), (function* _handleLifecycleMessage() {
        let state = binding$0.ServicesBinding._parseAppLifecycleMessage(dart.nullCheck(message));
        let generated = this[_generateStateTransitions](this.lifecycleState, dart.nullCheck(state));
        generated[$forEach](dart.bind(this, 'handleAppLifecycleStateChanged'));
        return null;
      }).bind(this));
    }
    [_generateStateTransitions](previousState, state) {
      if (previousState === state) {
        return C[143] || CT.C143;
      }
      if (previousState === ui.AppLifecycleState.paused && state === ui.AppLifecycleState.detached) {
        return C[144] || CT.C144;
      }
      let stateChanges = G.JSArrayOfAppLifecycleState().of([]);
      if (previousState == null) {
        stateChanges[$add](state);
      } else {
        let previousStateIndex = ui.AppLifecycleState.values[$indexOf](previousState);
        let stateIndex = ui.AppLifecycleState.values[$indexOf](state);
        if (!(previousStateIndex !== -1)) dart.assertFailed("State " + dart.str(previousState) + " missing in stateOrder array", I[39], 305, 14, "previousStateIndex != -1");
        if (!(stateIndex !== -1)) dart.assertFailed("State " + dart.str(state) + " missing in stateOrder array", I[39], 306, 14, "stateIndex != -1");
        if (previousStateIndex > stateIndex) {
          for (let i = stateIndex; i < previousStateIndex; i = i + 1) {
            stateChanges[$insert](0, ui.AppLifecycleState.values[$_get](i));
          }
        } else {
          for (let i = previousStateIndex + 1; i <= stateIndex; i = i + 1) {
            stateChanges[$add](ui.AppLifecycleState.values[$_get](i));
          }
        }
      }
      if (!dart.fn(() => {
        let starting = previousState;
        for (let ending of stateChanges) {
          if (!binding$0.ServicesBinding._debugVerifyLifecycleChange(starting, ending)) {
            return false;
          }
          starting = ending;
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed("Invalid lifecycle state transition generated from " + dart.str(previousState) + " to " + dart.str(state) + " (generated " + dart.str(stateChanges) + ")", I[39], 317, 12, "(){\r\n      AppLifecycleState? starting = previousState;\r\n      for (final AppLifecycleState ending in stateChanges) {\r\n        if (!_debugVerifyLifecycleChange(starting, ending)) {\r\n          return false;\r\n        }\r\n        starting = ending;\r\n      }\r\n      return true;\r\n    }()");
      return stateChanges;
    }
    [_handleAccessibilityMessage](accessibilityMessage) {
      return async.async(T$.void(), (function* _handleAccessibilityMessage() {
        let message = T$.MapOfObjectN$ObjectN()[_as](accessibilityMessage)[$cast](T$.String(), T$.dynamic());
        let type = T$.String()[_as](message[$_get]("type"));
        switch (type) {
          case "didGainFocus":
            {
              this.accessibilityFocus.value = T$.int()[_as](message[$_get]("nodeId"));
            }
        }
        return;
      }).bind(this));
    }
    [_handlePlatformMessage](methodCall) {
      return async.async(T$.dynamic(), (function* _handlePlatformMessage() {
        let method = methodCall.method;
        if (!(method === "SystemChrome.systemUIChange" || method === "System.requestAppExit")) dart.assertFailed(null, I[39], 382, 12, "method == 'SystemChrome.systemUIChange' || method == 'System.requestAppExit'");
        switch (method) {
          case "SystemChrome.systemUIChange":
            {
              let args = T$.List()[_as](methodCall.arguments);
              if (this[_systemUiChangeCallback] != null) {
                yield dart.nullCheck(this[_systemUiChangeCallback])(T$.bool()[_as](args[$_get](0)));
              }
              break;
            }
          case "System.requestAppExit":
            {
              return new (G.IdentityMapOfString$dynamic()).from(["response", core['EnumName|get#name'](yield this.handleRequestAppExit())]);
            }
        }
      }).bind(this));
    }
    handleRequestAppExit() {
      return async.async(T$.AppExitResponse(), function* handleRequestAppExit() {
        return ui.AppExitResponse.exit;
      });
    }
    exitApplication(exitType, exitCode = 0) {
      return async.async(T$.AppExitResponse(), function* exitApplication() {
        let result = (yield system_channels.SystemChannels.platform.invokeMethod(T$.MapOfString$ObjectN(), "System.exitApplication", new (G.IdentityMapOfString$ObjectN()).from(["type", core['EnumName|get#name'](exitType), "exitCode", exitCode])));
        if (result == null) {
          return ui.AppExitResponse.cancel;
        }
        switch (result[$_get]("response")) {
          case "cancel":
            {
              return ui.AppExitResponse.cancel;
            }
          case "exit":
          default:
            {
              return ui.AppExitResponse.exit;
            }
        }
      });
    }
    get restorationManager() {
      return this[_restorationManager];
    }
    get [_restorationManager]() {
      let t$3649;
      t$3649 = this[__ServicesBinding__restorationManager];
      return t$3649 == null ? dart.throw(new _internal.LateError.fieldNI("_restorationManager")) : t$3649;
    }
    set [_restorationManager](_restorationManager$35param) {
      this[__ServicesBinding__restorationManager] = _restorationManager$35param;
    }
    createRestorationManager() {
      return new restoration.RestorationManager.new();
    }
    setSystemUiChangeCallback(callback) {
      this[_systemUiChangeCallback] = callback;
    }
    initializationComplete() {
      return async.async(T$.void(), function* initializationComplete() {
        yield system_channels.SystemChannels.platform.invokeMethod(T$.dynamic(), "System.initializationComplete");
      });
    }
  };
  (binding$0.ServicesBinding[dart.mixinNew] = function() {
    this[__ServicesBinding__keyboard] = null;
    this[__ServicesBinding__keyEventManager] = null;
    this[__ServicesBinding__defaultBinaryMessenger] = null;
    this[accessibilityFocus] = new (G.ValueNotifierOfintN()).new(null);
    this[__ServicesBinding__restorationManager] = null;
    this[_systemUiChangeCallback] = null;
  }).prototype = binding$0.ServicesBinding.prototype;
  dart.addTypeTests(binding$0.ServicesBinding);
  dart.addRtiResources(binding$0.ServicesBinding, ["flutter__src__services__binding|ServicesBinding"]);
  dart.addTypeCaches(binding$0.ServicesBinding);
  dart.setMethodSignature(binding$0.ServicesBinding, () => dart.global.Object.setPrototypeOf({
    initInstances: T$.VoidTovoid(),
    [_initKeyboard]: T$.VoidTovoid(),
    createBinaryMessenger: T$.VoidToBinaryMessenger(),
    handleMemoryPressure: T$.VoidTovoid(),
    handleSystemMessage: T$.ObjectToFutureOfvoid(),
    initLicenses: T$.VoidTovoid(),
    [_addLicenses]: T$.VoidToStreamOfLicenseEntry(),
    initServiceExtensions: T$.VoidTovoid(),
    evict: T$.StringTovoid(),
    readInitialLifecycleStateFromNativeWindow: T$.VoidTovoid(),
    [_handleLifecycleMessage]: T$.StringNToFutureOfStringN(),
    [_generateStateTransitions]: T$.AppLifecycleStateNAndAppLifecycleStateToListOfAppLifecycleState(),
    [_handleAccessibilityMessage]: T$.ObjectToFutureOfvoid(),
    [_handlePlatformMessage]: T$.MethodCallToFuture(),
    handleRequestAppExit: T$.VoidToFutureOfAppExitResponse(),
    exitApplication: T$.AppExitTypeAndintToFutureOfAppExitResponse(),
    createRestorationManager: T$.VoidToRestorationManager(),
    setSystemUiChangeCallback: T$.FnTovoid$3(),
    initializationComplete: T$.VoidToFutureOfvoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$0.ServicesBinding))));
  dart.setStaticMethodSignature(binding$0.ServicesBinding, () => ['_parseLicenses', '_debugVerifyLifecycleChange', '_parseAppLifecycleMessage']);
  dart.setGetterSignature(binding$0.ServicesBinding, () => dart.global.Object.setPrototypeOf({
    keyboard: T$.HardwareKeyboard(),
    [_keyboard]: T$.HardwareKeyboard(),
    keyEventManager: T$.KeyEventManager(),
    [_keyEventManager]: T$.KeyEventManager(),
    defaultBinaryMessenger: T$.BinaryMessenger(),
    [_defaultBinaryMessenger]: T$.BinaryMessenger(),
    channelBuffers: T$.ChannelBuffers(),
    restorationManager: T$.RestorationManager(),
    [_restorationManager]: T$.RestorationManager()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$0.ServicesBinding))));
  dart.setSetterSignature(binding$0.ServicesBinding, () => dart.global.Object.setPrototypeOf({
    [_keyboard]: T$.HardwareKeyboard(),
    [_keyEventManager]: T$.KeyEventManager(),
    [_defaultBinaryMessenger]: T$.BinaryMessenger(),
    [_restorationManager]: T$.RestorationManager()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(binding$0.ServicesBinding))));
  dart.setStaticGetterSignature(binding$0.ServicesBinding, () => ['instance', 'rootIsolateToken']);
  dart.setLibraryUri(binding$0.ServicesBinding, I[40]);
  dart.setFieldSignature(binding$0.ServicesBinding, () => dart.global.Object.setPrototypeOf({
    [__ServicesBinding__keyboard]: {type: T$.HardwareKeyboardN(), isConst: false, isFinal: false, libraryUri: I[35]},
    [__ServicesBinding__keyEventManager]: {type: T$.KeyEventManagerN(), isConst: false, isFinal: false, libraryUri: I[35]},
    [__ServicesBinding__defaultBinaryMessenger]: {type: T$.BinaryMessengerN(), isConst: false, isFinal: false, libraryUri: I[16]},
    accessibilityFocus: {type: T$.ValueNotifierOfintN(), isConst: false, isFinal: true, libraryUri: I[41]},
    [__ServicesBinding__restorationManager]: {type: T$.RestorationManagerN(), isConst: false, isFinal: false, libraryUri: I[13]},
    [_systemUiChangeCallback]: {type: T$.boolToNFutureOfvoid(), isConst: false, isFinal: false}
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$0.ServicesBinding))));
  dart.setStaticFieldSignature(binding$0.ServicesBinding, () => ['_instance']);
  dart.defineLazy(binding$0.ServicesBinding, {
    /*binding$0.ServicesBinding._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  binding$0._DefaultBinaryMessenger = class _DefaultBinaryMessenger extends binary_messenger.BinaryMessenger {
    static ['_#_#tearOff']() {
      return new binding$0._DefaultBinaryMessenger.__();
    }
    handlePlatformMessage(channel, message, callback) {
      return async.async(T$.void(), function* handlePlatformMessage() {
        ui.channelBuffers.push(channel, message, dart.fn(data => {
          if (callback != null) {
            callback(data);
          }
        }, T$.ByteDataNTovoid()));
      });
    }
    send(channel, message) {
      let completer = G.CompleterOfByteDataN().new();
      ui.PlatformDispatcher.instance.sendPlatformMessage(channel, message, dart.fn(reply => {
        try {
          completer.complete(reply);
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (T$.Object()[_is](exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message response callback")}));
          } else
            throw t$36$35e;
        }
      }, T$.ByteDataNTovoid()));
      return completer.future;
    }
    setMessageHandler(channel, handler) {
      if (handler == null) {
        ui.channelBuffers.clearListener(channel);
      } else {
        ui.channelBuffers.setListener(channel, dart.fn((data, callback) => async.async(T$.void(), function*() {
          let response = null;
          try {
            response = (yield async.awaitWithTypeCheck(T$.FutureOfByteDataN(), handler(data)));
          } catch (t$36$35e) {
            let exception = dart.getThrown(t$36$35e);
            let stack = dart.stackTrace(t$36$35e);
            if (T$.Object()[_is](exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message callback")}));
            } else
              throw t$36$35e;
          } finally {
            callback(response);
          }
        }), T$.ByteDataNAndFnToFutureOfvoid()));
      }
    }
  };
  (binding$0._DefaultBinaryMessenger.__ = function() {
    dart.global.Object.getPrototypeOf(binding$0._DefaultBinaryMessenger).new.call(this);
    ;
  }).prototype = binding$0._DefaultBinaryMessenger.prototype;
  dart.addTypeTests(binding$0._DefaultBinaryMessenger);
  dart.addRtiResources(binding$0._DefaultBinaryMessenger, ["flutter__src__services__binding|_DefaultBinaryMessenger"]);
  dart.addTypeCaches(binding$0._DefaultBinaryMessenger);
  dart.setMethodSignature(binding$0._DefaultBinaryMessenger, () => dart.global.Object.setPrototypeOf({
    handlePlatformMessage: T$.StringAndByteDataNAndFnToFutureOfvoid(),
    send: T$.StringAndByteDataNToFutureOfByteDataN(),
    setMessageHandler: T$.StringAndFnTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$0._DefaultBinaryMessenger))));
  dart.setLibraryUri(binding$0._DefaultBinaryMessenger, I[40]);
  asset_bundle.AssetBundle = class AssetBundle extends core.Object {
    loadBuffer(key) {
      return async.async(T$.ImmutableBuffer(), (function* loadBuffer() {
        let data = (yield this.load(key));
        return ui.ImmutableBuffer.fromUint8List(typed_data.Uint8List.sublistView(data));
      }).bind(this));
    }
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      return async.async(T$.String(), (function* loadString() {
        let data = (yield this.load(key));
        if (data[$lengthInBytes] < 50 * 1024 || true) {
          return convert.utf8.decode(typed_data.Uint8List.sublistView(data));
        }
        return isolates.compute(T$.ByteData(), T$.String(), C[150] || CT.C150, data, {debugLabel: "UTF8 decode for \"" + key + "\""});
      }).bind(this));
    }
    static _utf8decode(data) {
      return convert.utf8.decode(typed_data.Uint8List.sublistView(data));
    }
    loadStructuredData(T, key, parser) {
      return async.async(T, (function* loadStructuredData() {
        return parser(yield this.loadString(key));
      }).bind(this));
    }
    loadStructuredBinaryData(T, key, parser) {
      return async.async(T, (function* loadStructuredBinaryData() {
        return parser(yield this.load(key));
      }).bind(this));
    }
    evict(key) {
    }
    clear() {
    }
    toString() {
      return diagnostics.describeIdentity(this) + "()";
    }
  };
  (asset_bundle.AssetBundle.new = function() {
    ;
  }).prototype = asset_bundle.AssetBundle.prototype;
  dart.addTypeTests(asset_bundle.AssetBundle);
  dart.addRtiResources(asset_bundle.AssetBundle, ["flutter__src__services__asset_bundle|AssetBundle"]);
  dart.addTypeCaches(asset_bundle.AssetBundle);
  dart.setMethodSignature(asset_bundle.AssetBundle, () => dart.global.Object.setPrototypeOf({
    loadBuffer: T$.StringToFutureOfImmutableBuffer(),
    loadString: T$.String__ToFutureOfString(),
    loadStructuredData: T$.StringAndFnToFutureOfT(),
    loadStructuredBinaryData: T$.StringAndFnToFutureOfT$1(),
    evict: T$.StringTovoid(),
    clear: T$.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(asset_bundle.AssetBundle))));
  dart.setMethodsDefaultTypeArgSignature(asset_bundle.AssetBundle, () => dart.global.Object.setPrototypeOf({
    loadStructuredData: [T$.dynamic()],
    loadStructuredBinaryData: [T$.dynamic()]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(asset_bundle.AssetBundle))));
  dart.setStaticMethodSignature(asset_bundle.AssetBundle, () => ['_utf8decode']);
  dart.setLibraryUri(asset_bundle.AssetBundle, I[42]);
  dart.defineExtensionMethods(asset_bundle.AssetBundle, ['toString']);
  var _baseUrl = dart.privateName(asset_bundle, "_baseUrl");
  var _httpClient = dart.privateName(asset_bundle, "_httpClient");
  var _urlFromKey = dart.privateName(asset_bundle, "_urlFromKey");
  asset_bundle.NetworkAssetBundle = class NetworkAssetBundle extends asset_bundle.AssetBundle {
    static ['_#new#tearOff'](baseUrl) {
      return new asset_bundle.NetworkAssetBundle.new(baseUrl);
    }
    [_urlFromKey](key) {
      return this[_baseUrl].resolve(key);
    }
    load(key) {
      return async.async(T$.ByteData(), (function* load() {
        let request = (yield this[_httpClient].getUrl(this[_urlFromKey](key)));
        let response = (yield request.close());
        if (response.statusCode !== 200) {
          dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([asset_bundle._errorSummaryWithKey(key), new diagnostics.IntProperty.new("HTTP status code", response.statusCode)])));
        }
        let bytes = (yield consolidate_response.consolidateHttpClientResponseBytes(response));
        return typed_data.ByteData.sublistView(bytes);
      }).bind(this));
    }
    toString() {
      return diagnostics.describeIdentity(this) + "(" + dart.str(this[_baseUrl]) + ")";
    }
  };
  (asset_bundle.NetworkAssetBundle.new = function(baseUrl) {
    this[_baseUrl] = baseUrl;
    this[_httpClient] = _http.HttpClient.new();
    ;
  }).prototype = asset_bundle.NetworkAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.NetworkAssetBundle);
  dart.addRtiResources(asset_bundle.NetworkAssetBundle, ["flutter__src__services__asset_bundle|NetworkAssetBundle"]);
  dart.addTypeCaches(asset_bundle.NetworkAssetBundle);
  dart.setMethodSignature(asset_bundle.NetworkAssetBundle, () => dart.global.Object.setPrototypeOf({
    [_urlFromKey]: T$.StringToUri(),
    load: T$.StringToFutureOfByteData()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(asset_bundle.NetworkAssetBundle))));
  dart.setLibraryUri(asset_bundle.NetworkAssetBundle, I[42]);
  dart.setFieldSignature(asset_bundle.NetworkAssetBundle, () => dart.global.Object.setPrototypeOf({
    [_baseUrl]: {type: T$.Uri(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_httpClient]: {type: T$.HttpClient(), isConst: false, isFinal: true, libraryUri: I[43]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(asset_bundle.NetworkAssetBundle))));
  dart.defineExtensionMethods(asset_bundle.NetworkAssetBundle, ['toString']);
  var _stringCache = dart.privateName(asset_bundle, "_stringCache");
  var _structuredDataCache = dart.privateName(asset_bundle, "_structuredDataCache");
  var _structuredBinaryDataCache = dart.privateName(asset_bundle, "_structuredBinaryDataCache");
  asset_bundle.CachingAssetBundle = class CachingAssetBundle extends asset_bundle.AssetBundle {
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      if (cache) {
        return this[_stringCache][$putIfAbsent](key, dart.fn(() => super.loadString(key), T$.VoidToFutureOfString()));
      }
      return super.loadString(key);
    }
    loadStructuredData(T, key, parser) {
      if (this[_structuredDataCache][$containsKey](key)) {
        return T[_eval]("async|Future<0>")[_as](dart.nullCheck(this[_structuredDataCache][$_get](key)));
      }
      let completer = null;
      let synchronousResult = null;
      this.loadString(key, {cache: false}).then(T, parser).then(T$.void(), dart.fn(value => {
        synchronousResult = new (synchronous_future.SynchronousFuture$(T)).new(value);
        this[_structuredDataCache][$_set](key, dart.nullCheck(synchronousResult));
        if (completer != null) {
          completer.complete(value);
        }
      }, T[_eval]("core|Null(0)")), {onError: dart.fn((error, stack) => {
          if (!(completer != null)) dart.assertFailed("unexpected synchronous failure", I[44], 226, 14, "completer != null");
          this[_structuredDataCache][$remove](key);
          dart.nullCheck(completer).completeError(error, stack);
        }, T$.ObjectAndStackTraceToNull())});
      if (synchronousResult != null) {
        return dart.nullCheck(synchronousResult);
      }
      completer = async.Completer$(T).new();
      this[_structuredDataCache][$_set](key, completer.future);
      return completer.future;
    }
    loadStructuredBinaryData(T, key, parser) {
      if (this[_structuredBinaryDataCache][$containsKey](key)) {
        return T[_eval]("async|Future<0>")[_as](dart.nullCheck(this[_structuredBinaryDataCache][$_get](key)));
      }
      let completer = null;
      let synchronousResult = null;
      this.load(key).then(T, parser).then(T$.void(), dart.fn(value => {
        synchronousResult = new (synchronous_future.SynchronousFuture$(T)).new(value);
        this[_structuredBinaryDataCache][$_set](key, dart.nullCheck(synchronousResult));
        if (completer != null) {
          completer.complete(value);
        }
      }, T[_eval]("core|Null(0)")), {onError: dart.fn((error, stack) => {
          if (!(completer != null)) dart.assertFailed("unexpected synchronous failure", I[44], 274, 14, "completer != null");
          this[_structuredBinaryDataCache][$remove](key);
          dart.nullCheck(completer).completeError(error, stack);
        }, T$.ObjectAndStackTraceToNull())});
      if (synchronousResult != null) {
        return dart.nullCheck(synchronousResult);
      }
      completer = async.Completer$(T).new();
      this[_structuredBinaryDataCache][$_set](key, completer.future);
      return completer.future;
    }
    evict(key) {
      this[_stringCache][$remove](key);
      this[_structuredDataCache][$remove](key);
      this[_structuredBinaryDataCache][$remove](key);
    }
    clear() {
      this[_stringCache][$clear]();
      this[_structuredDataCache][$clear]();
      this[_structuredBinaryDataCache][$clear]();
    }
    loadBuffer(key) {
      return async.async(T$.ImmutableBuffer(), (function* loadBuffer() {
        let data = (yield this.load(key));
        return ui.ImmutableBuffer.fromUint8List(typed_data.Uint8List.sublistView(data));
      }).bind(this));
    }
  };
  (asset_bundle.CachingAssetBundle.new = function() {
    this[_stringCache] = new (G.IdentityMapOfString$FutureOfString()).new();
    this[_structuredDataCache] = new (G.IdentityMapOfString$Future()).new();
    this[_structuredBinaryDataCache] = new (G.IdentityMapOfString$Future()).new();
    ;
  }).prototype = asset_bundle.CachingAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.CachingAssetBundle);
  dart.addRtiResources(asset_bundle.CachingAssetBundle, ["flutter__src__services__asset_bundle|CachingAssetBundle"]);
  dart.addTypeCaches(asset_bundle.CachingAssetBundle);
  dart.setLibraryUri(asset_bundle.CachingAssetBundle, I[42]);
  dart.setFieldSignature(asset_bundle.CachingAssetBundle, () => dart.global.Object.setPrototypeOf({
    [_stringCache]: {type: T$.MapOfString$FutureOfString(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_structuredDataCache]: {type: T$.MapOfString$Future(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_structuredBinaryDataCache]: {type: T$.MapOfString$Future(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(asset_bundle.CachingAssetBundle))));
  asset_bundle.PlatformAssetBundle = class PlatformAssetBundle extends asset_bundle.CachingAssetBundle {
    load(key) {
      let t$3651;
      let encoded = convert.utf8.encode(core._Uri.new({path: core.Uri.encodeFull(key)}).path);
      let future = (t$3651 = binding$0.ServicesBinding.instance.defaultBinaryMessenger.send("flutter/assets", typed_data.ByteData.sublistView(encoded)), t$3651 == null ? null : t$3651.then(T$.ByteData(), dart.fn(asset => {
        if (asset == null) {
          dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([asset_bundle._errorSummaryWithKey(key), new assertions.ErrorDescription.new("The asset does not exist or has empty data.")])));
        }
        return asset;
      }, T$.ByteDataNToByteData())));
      if (future == null) {
        dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([asset_bundle._errorSummaryWithKey(key), new assertions.ErrorDescription.new("The asset does not exist or has empty data.")])));
      }
      return future;
    }
    loadBuffer(key) {
      return async.async(T$.ImmutableBuffer(), (function* loadBuffer() {
        {
          let bytes = (yield this.load(key));
          return ui.ImmutableBuffer.fromUint8List(typed_data.Uint8List.sublistView(bytes));
        }
        let debugUsePlatformChannel = false;
        if (!dart.fn(() => {
          if (io.Platform.environment[$containsKey]("UNIT_TEST_ASSETS")) {
            debugUsePlatformChannel = true;
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[44], 347, 12, "() {\r\n      // dart:io is safe to use here since we early return for web\r\n      // above. If that code is changed, this needs to be guarded on\r\n      // web presence. Override how assets are loaded in tests so that\r\n      // the old loader behavior that allows tests to load assets from\r\n      // the current package using the package prefix.\r\n      if (Platform.environment.containsKey('UNIT_TEST_ASSETS')) {\r\n        debugUsePlatformChannel = true;\r\n      }\r\n      return true;\r\n    }()");
        if (debugUsePlatformChannel) {
          let bytes = (yield this.load(key));
          return ui.ImmutableBuffer.fromUint8List(typed_data.Uint8List.sublistView(bytes));
        }
        try {
          return yield ui.ImmutableBuffer.fromAsset(key);
        } catch (t$36$35e) {
          let e = dart.getThrown(t$36$35e);
          if (T$.Exception()[_is](e)) {
            dart.throw(new assertions.FlutterError.fromParts(G.JSArrayOfDiagnosticsNode().of([asset_bundle._errorSummaryWithKey(key), new assertions.ErrorDescription.new(dart.toString(e))])));
          } else
            throw t$36$35e;
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new asset_bundle.PlatformAssetBundle.new();
    }
  };
  (asset_bundle.PlatformAssetBundle.new = function() {
    dart.global.Object.getPrototypeOf(asset_bundle.PlatformAssetBundle).new.call(this);
    ;
  }).prototype = asset_bundle.PlatformAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.PlatformAssetBundle);
  dart.addRtiResources(asset_bundle.PlatformAssetBundle, ["flutter__src__services__asset_bundle|PlatformAssetBundle"]);
  dart.addTypeCaches(asset_bundle.PlatformAssetBundle);
  dart.setMethodSignature(asset_bundle.PlatformAssetBundle, () => dart.global.Object.setPrototypeOf({load: T$.StringToFutureOfByteData()}, dart.getMethods(dart.global.Object.getPrototypeOf(asset_bundle.PlatformAssetBundle))));
  dart.setLibraryUri(asset_bundle.PlatformAssetBundle, I[42]);
  asset_bundle._initRootBundle = function _initRootBundle() {
    return new asset_bundle.PlatformAssetBundle.new();
  };
  asset_bundle._errorSummaryWithKey = function _errorSummaryWithKey(key) {
    return new assertions.ErrorSummary.new("Unable to load asset: \"" + key + "\".");
  };
  dart.defineLazy(asset_bundle, {
    /*asset_bundle.rootBundle*/get rootBundle() {
      return asset_bundle._initRootBundle();
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/services/text_editing_delta.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__services__text_editing_delta|TextEditingDelta":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__services__text_editing|TextSelection":{"ui|TextRange":[]},"async|Future":{"Future.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__services__text_input|TextInputAction":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"ui|Brightness":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__text_input|SmartDashesType":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__text_input|SmartQuotesType":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__text_input|TextCapitalization":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__text_input|FloatingCursorDragState":{"core|_Enum":[],"core|Enum":[]},"ui|Offset":{"ui|OffsetBase":[]},"flutter__src__services__text_input|SelectionChangedCause":{"core|_Enum":[],"core|Enum":[]},"ui|Size":{"ui|OffsetBase":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|TextAlign":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__text_input|DeltaTextInputClient":{"flutter__src__services__text_input|TextInputClient":[]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"flutter__src__services__text_input|_PlatformTextInputControl":{"flutter__src__services__text_input|TextInputControl":[]},"typed_data|Uint8List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"async|Completer":{"Completer.T":"1"},"flutter__src__foundation__assertions|ErrorDescription":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|_ErrorDiagnostic":{"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__services__restoration|RestorationManager":{"flutter__src__foundation__change_notifier|ChangeNotifier":[],"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ChangeNotifier":{"flutter__src__foundation__change_notifier|Listenable":[]},"typed_data|ByteData":{"typed_data|TypedData":[]},"flutter__src__services__platform_channel|BasicMessageChannel":{"BasicMessageChannel.T":"1"},"flutter__src__services__message_codec|MessageCodec":{"MessageCodec.T":"1"},"flutter__src__services__platform_channel|_ProfiledBinaryMessenger":{"flutter__src__services__binary_messenger|BinaryMessenger":[]},"flutter__src__services__message_codec|MissingPluginException":{"core|Exception":[]},"flutter__src__services__message_codec|PlatformException":{"core|Exception":[]},"async|Stream":{"Stream.T":"1"},"typed_data|Int32List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|Int64List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|Float32List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"typed_data|_TypedFloatList":{"typed_data|TypedData":[]},"typed_data|Float64List":{"List.E":"core|double","core|List":["core|double"],"typed_data|_TypedFloatList":[],"Iterable.E":"core|double","core|Iterable":["core|double"],"_ListIterable.E":"core|double","core|_ListIterable":["core|double"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|double","_internal|EfficientLengthIterable":["core|double"],"HideEfficientLengthIterable.T":"core|double","_internal|HideEfficientLengthIterable":["core|double"]},"flutter__src__services__message_codecs|StandardMessageCodec":{"MessageCodec.T":"core|Object?","flutter__src__services__message_codec|MessageCodec":["core|Object?"]},"flutter__src__services__raw_keyboard|KeyboardSide":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__raw_keyboard_windows|RawKeyEventDataWindows":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard|RawKeyEventData":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard|ModifierKey":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__raw_keyboard_android|RawKeyEventDataAndroid":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__keyboard_key$46g|PhysicalKeyboardKey":{"flutter__src__services__keyboard_key$46g|KeyboardKey":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__keyboard_key$46g|KeyboardKey":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__keyboard_key$46g|LogicalKeyboardKey":{"flutter__src__services__keyboard_key$46g|KeyboardKey":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard_web|RawKeyEventDataWeb":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard_macos|RawKeyEventDataMacOs":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard_linux|RawKeyEventDataLinux":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard_ios|RawKeyEventDataIos":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard_fuchsia|RawKeyEventDataFuchsia":{"flutter__src__services__raw_keyboard|RawKeyEventData":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard|RawKeyDownEvent":{"flutter__src__services__raw_keyboard|RawKeyEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard|RawKeyEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__raw_keyboard|RawKeyUpEvent":{"flutter__src__services__raw_keyboard|RawKeyEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__hardware_keyboard|KeyboardLockMode":{"core|_Enum":[],"core|Enum":[]},"ui|KeyEventDeviceType":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__hardware_keyboard|KeyEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__hardware_keyboard|KeyDownEvent":{"flutter__src__services__hardware_keyboard|KeyEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__hardware_keyboard|KeyRepeatEvent":{"flutter__src__services__hardware_keyboard|KeyEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__hardware_keyboard|KeyUpEvent":{"flutter__src__services__hardware_keyboard|KeyEvent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__hardware_keyboard|KeyDataTransitMode":{"core|_Enum":[],"core|Enum":[]},"flutter__src__services__binding|ServicesBinding":{"flutter__src__foundation__binding|BindingBase":[],"flutter__src__scheduler__binding|SchedulerBinding":[]},"flutter__src__scheduler__binding|SchedulerBinding":{"flutter__src__foundation__binding|BindingBase":[]},"ui|AppLifecycleState":{"core|_Enum":[],"core|Enum":[]},"ui|AppExitResponse":{"core|_Enum":[],"core|Enum":[]},"ui|AppExitType":{"core|_Enum":[],"core|Enum":[]},"flutter__src__foundation__change_notifier|ValueNotifier":{"ValueNotifier.T":"1","flutter__src__foundation__change_notifier|ChangeNotifier":[],"ValueListenable.T":"1","flutter__src__foundation__change_notifier|ValueListenable":["1"],"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__change_notifier|ValueListenable":{"ValueListenable.T":"1","flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__services__text_editing_delta|TextEditingDeltaInsertion":{"flutter__src__services__text_editing_delta|TextEditingDelta":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__text_editing_delta|TextEditingDeltaDeletion":{"flutter__src__services__text_editing_delta|TextEditingDelta":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__text_editing_delta|TextEditingDeltaReplacement":{"flutter__src__services__text_editing_delta|TextEditingDelta":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__text_editing_delta|TextEditingDeltaNonTextUpdate":{"flutter__src__services__text_editing_delta|TextEditingDelta":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__services__autofill|_AutofillScopeTextInputConfiguration":{"flutter__src__services__text_input|TextInputConfiguration":[]},"flutter__src__services__autofill|AutofillScopeMixin":{"flutter__src__services__autofill|AutofillScope":[]},"flutter__src__services__platform_channel|OptionalMethodChannel":{"flutter__src__services__platform_channel|MethodChannel":[]},"flutter__src__services__message_codecs|BinaryCodec":{"MessageCodec.T":"typed_data|ByteData","flutter__src__services__message_codec|MessageCodec":["typed_data|ByteData"]},"flutter__src__services__message_codecs|StringCodec":{"MessageCodec.T":"core|String","flutter__src__services__message_codec|MessageCodec":["core|String"]},"flutter__src__services__message_codecs|JSONMessageCodec":{"MessageCodec.T":"core|Object?","flutter__src__services__message_codec|MessageCodec":["core|Object?"]},"flutter__src__services__message_codecs|JSONMethodCodec":{"flutter__src__services__message_codec|MethodCodec":[]},"flutter__src__services__message_codecs|StandardMethodCodec":{"flutter__src__services__message_codec|MethodCodec":[]},"flutter__src__services__raw_keyboard_linux|GLFWKeyHelper":{"flutter__src__services__raw_keyboard_linux|KeyHelper":[]},"flutter__src__services__raw_keyboard_linux|GtkKeyHelper":{"flutter__src__services__raw_keyboard_linux|KeyHelper":[]},"flutter__src__services__binding|_DefaultBinaryMessenger":{"flutter__src__services__binary_messenger|BinaryMessenger":[]},"flutter__src__services__asset_bundle|NetworkAssetBundle":{"flutter__src__services__asset_bundle|AssetBundle":[]},"flutter__src__services__asset_bundle|CachingAssetBundle":{"flutter__src__services__asset_bundle|AssetBundle":[]},"flutter__src__services__asset_bundle|PlatformAssetBundle":{"flutter__src__services__asset_bundle|CachingAssetBundle":[],"flutter__src__services__asset_bundle|AssetBundle":[]}}'));
  dart.trackLibraries("packages/flutter/src/services/text_editing_delta.dart", {
    "package:flutter/src/services/text_editing_delta.dart": text_editing_delta,
    "package:flutter/src/services/clipboard.dart": clipboard,
    "package:flutter/src/services/autofill.dart": autofill,
    "package:flutter/src/services/text_input.dart": text_input,
    "package:flutter/src/services/restoration.dart": restoration,
    "package:flutter/src/services/_background_isolate_binary_messenger_web.dart": _background_isolate_binary_messenger_web,
    "package:flutter/src/services/platform_channel.dart": platform_channel,
    "package:flutter/src/services/message_codec.dart": message_codec,
    "package:flutter/src/services/message_codecs.dart": message_codecs,
    "package:flutter/src/services/system_channels.dart": system_channels,
    "package:flutter/src/services/raw_keyboard_windows.dart": raw_keyboard_windows,
    "package:flutter/src/services/raw_keyboard_web.dart": raw_keyboard_web,
    "package:flutter/src/services/raw_keyboard_macos.dart": raw_keyboard_macos,
    "package:flutter/src/services/raw_keyboard_linux.dart": raw_keyboard_linux,
    "package:flutter/src/services/raw_keyboard_ios.dart": raw_keyboard_ios,
    "package:flutter/src/services/raw_keyboard_fuchsia.dart": raw_keyboard_fuchsia,
    "package:flutter/src/services/raw_keyboard_android.dart": raw_keyboard_android,
    "package:flutter/src/services/raw_keyboard.dart": raw_keyboard,
    "package:flutter/src/services/hardware_keyboard.dart": hardware_keyboard,
    "package:flutter/src/services/debug.dart": debug,
    "package:flutter/src/services/binding.dart": binding$0,
    "package:flutter/src/services/asset_bundle.dart": asset_bundle
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_editing_delta.dart","clipboard.dart","autofill.dart","text_input.dart","restoration.dart","_background_isolate_binary_messenger_web.dart","platform_channel.dart","message_codec.dart","message_codecs.dart","system_channels.dart","raw_keyboard.dart","raw_keyboard_windows.dart","raw_keyboard_web.dart","raw_keyboard_macos.dart","raw_keyboard_linux.dart","raw_keyboard_ios.dart","raw_keyboard_fuchsia.dart","raw_keyboard_android.dart","hardware_keyboard.dart","debug.dart","binding.dart","asset_bundle.dart"],"names":[],"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","file":"../../../../../../../../F:/packages/flutter/src/services/text_editing_delta.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_editing_delta: text_editing_delta,
    src__services__clipboard: clipboard,
    src__services__autofill: autofill,
    src__services__text_input: text_input,
    src__services__restoration: restoration,
    src__services___background_isolate_binary_messenger_web: _background_isolate_binary_messenger_web,
    src__services__platform_channel: platform_channel,
    src__services__message_codec: message_codec,
    src__services__message_codecs: message_codecs,
    src__services__system_channels: system_channels,
    src__services__raw_keyboard_windows: raw_keyboard_windows,
    src__services__raw_keyboard_web: raw_keyboard_web,
    src__services__raw_keyboard_macos: raw_keyboard_macos,
    src__services__raw_keyboard_linux: raw_keyboard_linux,
    src__services__raw_keyboard_ios: raw_keyboard_ios,
    src__services__raw_keyboard_fuchsia: raw_keyboard_fuchsia,
    src__services__raw_keyboard_android: raw_keyboard_android,
    src__services__raw_keyboard: raw_keyboard,
    src__services__hardware_keyboard: hardware_keyboard,
    src__services__debug: debug,
    src__services__binding: binding$0,
    src__services__asset_bundle: asset_bundle
  };
}));

//# sourceMappingURL=text_editing_delta.dart.lib.js.map

// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/text_scaler.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__painting__text_scaler_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var text_scaler = Object.create(dart.library);
  var $isNaN = dartx.isNaN;
  var $isFinite = dartx.isFinite;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    doubleToTextScaler: () => (T.doubleToTextScaler = dart.constFn(dart_rti.findType("flutter__src__painting__text_scaler|TextScaler(core|double)")))(),
    __ToTextScaler: () => (T.__ToTextScaler = dart.constFn(dart_rti.findType("flutter__src__painting__text_scaler|TextScaler({maxScaleFactor:core|double,minScaleFactor:core|double})")))(),
    TextScaler: () => (T.TextScaler = dart.constFn(dart_rti.findType("flutter__src__painting__text_scaler|TextScaler")))(),
    _LinearTextScaler: () => (T._LinearTextScaler = dart.constFn(dart_rti.findType("flutter__src__painting__text_scaler|_LinearTextScaler")))(),
    doubleTodouble: () => (T.doubleTodouble = dart.constFn(dart_rti.findType("core|double(core|double)")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    _ClampedTextScaler: () => (T._ClampedTextScaler = dart.constFn(dart_rti.findType("flutter__src__painting__text_scaler|_ClampedTextScaler")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [_LinearTextScaler_textScaleFactor]: 1
      }, text_scaler._LinearTextScaler.prototype));
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/text_scaler.dart",
    "package:flutter/src/painting/text_scaler.dart",
    "dart:core"
  ];
  var _LinearTextScaler_textScaleFactor = dart.privateName(text_scaler, "_LinearTextScaler.textScaleFactor");
  text_scaler.TextScaler = class TextScaler extends core.Object {
    static ['_#linear#tearOff'](textScaleFactor) {
      return new text_scaler._LinearTextScaler.new(textScaleFactor);
    }
    clamp(opts) {
      let minScaleFactor = opts && 'minScaleFactor' in opts ? opts.minScaleFactor : 0;
      let maxScaleFactor = opts && 'maxScaleFactor' in opts ? opts.maxScaleFactor : 1 / 0;
      if (!(maxScaleFactor >= minScaleFactor)) dart.assertFailed(null, I[0], 63, 12, "maxScaleFactor >= minScaleFactor");
      if (!!maxScaleFactor[$isNaN]) dart.assertFailed(null, I[0], 64, 12, "!maxScaleFactor.isNaN");
      if (!minScaleFactor[$isFinite]) dart.assertFailed(null, I[0], 65, 12, "minScaleFactor.isFinite");
      if (!(minScaleFactor >= 0)) dart.assertFailed(null, I[0], 66, 12, "minScaleFactor >= 0");
      return minScaleFactor === maxScaleFactor ? new text_scaler._LinearTextScaler.new(minScaleFactor) : new text_scaler._ClampedTextScaler.new(this, minScaleFactor, maxScaleFactor);
    }
  };
  (text_scaler.TextScaler.new = function() {
    ;
  }).prototype = text_scaler.TextScaler.prototype;
  dart.addTypeTests(text_scaler.TextScaler);
  dart.addRtiResources(text_scaler.TextScaler, ["flutter__src__painting__text_scaler|TextScaler"]);
  dart.addTypeCaches(text_scaler.TextScaler);
  dart.setMethodSignature(text_scaler.TextScaler, () => dart.global.Object.setPrototypeOf({clamp: T.__ToTextScaler()}, dart.getMethods(dart.global.Object.getPrototypeOf(text_scaler.TextScaler))));
  dart.setStaticMethodSignature(text_scaler.TextScaler, () => ['linear']);
  dart.setLibraryUri(text_scaler.TextScaler, I[1]);
  dart.setStaticFieldSignature(text_scaler.TextScaler, () => ['noScaling']);
  dart.defineLazy(text_scaler.TextScaler, {
    /*text_scaler.TextScaler.noScaling*/get noScaling() {
      return C[0] || CT.C0;
    }
  }, false);
  var _is = dart.privateName(dart_rti, "_is");
  const textScaleFactor$ = _LinearTextScaler_textScaleFactor;
  text_scaler._LinearTextScaler = class _LinearTextScaler extends core.Object {
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    static ['_#new#tearOff'](textScaleFactor) {
      return new text_scaler._LinearTextScaler.new(textScaleFactor);
    }
    scale(fontSize) {
      if (!(fontSize >= 0)) dart.assertFailed(null, I[0], 82, 12, "fontSize >= 0");
      if (!fontSize[$isFinite]) dart.assertFailed(null, I[0], 83, 12, "fontSize.isFinite");
      return fontSize * this.textScaleFactor;
    }
    clamp(opts) {
      let minScaleFactor = opts && 'minScaleFactor' in opts ? opts.minScaleFactor : 0;
      let maxScaleFactor = opts && 'maxScaleFactor' in opts ? opts.maxScaleFactor : 1 / 0;
      if (!(maxScaleFactor >= minScaleFactor)) dart.assertFailed(null, I[0], 89, 12, "maxScaleFactor >= minScaleFactor");
      if (!!maxScaleFactor[$isNaN]) dart.assertFailed(null, I[0], 90, 12, "!maxScaleFactor.isNaN");
      if (!minScaleFactor[$isFinite]) dart.assertFailed(null, I[0], 91, 12, "minScaleFactor.isFinite");
      if (!(minScaleFactor >= 0)) dart.assertFailed(null, I[0], 92, 12, "minScaleFactor >= 0");
      let newScaleFactor = ui.clampDouble(this.textScaleFactor, minScaleFactor, maxScaleFactor);
      return newScaleFactor === this.textScaleFactor ? this : new text_scaler._LinearTextScaler.new(newScaleFactor);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T._LinearTextScaler()[_is](other) && other.textScaleFactor === this.textScaleFactor;
    }
    get hashCode() {
      return this.textScaleFactor[$hashCode];
    }
    toString() {
      return this.textScaleFactor === 1.0 ? "no scaling" : "linear (" + dart.strSafe(this.textScaleFactor) + "x)";
    }
  };
  (text_scaler._LinearTextScaler.new = function(textScaleFactor) {
    this[textScaleFactor$] = textScaleFactor;
    if (!(textScaleFactor >= 0)) dart.assertFailed(null, I[0], 75, 58, "textScaleFactor >= 0");
    ;
  }).prototype = text_scaler._LinearTextScaler.prototype;
  dart.addTypeTests(text_scaler._LinearTextScaler);
  dart.addRtiResources(text_scaler._LinearTextScaler, ["flutter__src__painting__text_scaler|_LinearTextScaler", "flutter__src__painting__text_scaler|TextScaler"]);
  dart.addTypeCaches(text_scaler._LinearTextScaler);
  dart.setMethodSignature(text_scaler._LinearTextScaler, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleTodouble(),
    clamp: T.__ToTextScaler()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_scaler._LinearTextScaler))));
  dart.setLibraryUri(text_scaler._LinearTextScaler, I[1]);
  dart.setFieldSignature(text_scaler._LinearTextScaler, () => dart.global.Object.setPrototypeOf({textScaleFactor: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(text_scaler._LinearTextScaler))));
  dart.defineExtensionMethods(text_scaler._LinearTextScaler, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_scaler._LinearTextScaler, ['hashCode']);
  var scaler$ = dart.privateName(text_scaler, "_ClampedTextScaler.scaler");
  var minScale$ = dart.privateName(text_scaler, "_ClampedTextScaler.minScale");
  var maxScale$ = dart.privateName(text_scaler, "_ClampedTextScaler.maxScale");
  text_scaler._ClampedTextScaler = class _ClampedTextScaler extends core.Object {
    get scaler() {
      return this[scaler$];
    }
    set scaler(value) {
      super.scaler = value;
    }
    get minScale() {
      return this[minScale$];
    }
    set minScale(value) {
      super.minScale = value;
    }
    get maxScale() {
      return this[maxScale$];
    }
    set maxScale(value) {
      super.maxScale = value;
    }
    static ['_#new#tearOff'](scaler, minScale, maxScale) {
      return new text_scaler._ClampedTextScaler.new(scaler, minScale, maxScale);
    }
    get textScaleFactor() {
      return ui.clampDouble(this.scaler.textScaleFactor, this.minScale, this.maxScale);
    }
    scale(fontSize) {
      if (!(fontSize >= 0)) dart.assertFailed(null, I[0], 124, 12, "fontSize >= 0");
      if (!fontSize[$isFinite]) dart.assertFailed(null, I[0], 125, 12, "fontSize.isFinite");
      return this.minScale === this.maxScale ? this.minScale * fontSize : ui.clampDouble(this.scaler.scale(fontSize), this.minScale * fontSize, this.maxScale * fontSize);
    }
    clamp(opts) {
      let minScaleFactor = opts && 'minScaleFactor' in opts ? opts.minScaleFactor : 0;
      let maxScaleFactor = opts && 'maxScaleFactor' in opts ? opts.maxScaleFactor : 1 / 0;
      return minScaleFactor === maxScaleFactor ? new text_scaler._LinearTextScaler.new(minScaleFactor) : new text_scaler._ClampedTextScaler.new(this.scaler, math.max(T.double(), minScaleFactor, this.minScale), math.min(T.double(), maxScaleFactor, this.maxScale));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T._ClampedTextScaler()[_is](other) && this.minScale === other.minScale && this.maxScale === other.maxScale && (this.minScale === this.maxScale || dart.equals(this.scaler, other.scaler));
    }
    get hashCode() {
      return this.minScale === this.maxScale ? this.minScale[$hashCode] : core.Object.hash(this.scaler, this.minScale, this.maxScale);
    }
  };
  (text_scaler._ClampedTextScaler.new = function(scaler, minScale, maxScale) {
    this[scaler$] = scaler;
    this[minScale$] = minScale;
    this[maxScale$] = maxScale;
    if (!(maxScale > minScale)) dart.assertFailed(null, I[0], 114, 80, "maxScale > minScale");
    ;
  }).prototype = text_scaler._ClampedTextScaler.prototype;
  dart.addTypeTests(text_scaler._ClampedTextScaler);
  dart.addRtiResources(text_scaler._ClampedTextScaler, ["flutter__src__painting__text_scaler|_ClampedTextScaler", "flutter__src__painting__text_scaler|TextScaler"]);
  dart.addTypeCaches(text_scaler._ClampedTextScaler);
  dart.setMethodSignature(text_scaler._ClampedTextScaler, () => dart.global.Object.setPrototypeOf({
    scale: T.doubleTodouble(),
    clamp: T.__ToTextScaler()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_scaler._ClampedTextScaler))));
  dart.setGetterSignature(text_scaler._ClampedTextScaler, () => dart.global.Object.setPrototypeOf({textScaleFactor: T.double()}, dart.getGetters(dart.global.Object.getPrototypeOf(text_scaler._ClampedTextScaler))));
  dart.setLibraryUri(text_scaler._ClampedTextScaler, I[1]);
  dart.setFieldSignature(text_scaler._ClampedTextScaler, () => dart.global.Object.setPrototypeOf({
    scaler: {type: T.TextScaler(), isConst: false, isFinal: true, libraryUri: I[1]},
    minScale: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    maxScale: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_scaler._ClampedTextScaler))));
  dart.defineExtensionMethods(text_scaler._ClampedTextScaler, ['_equals']);
  dart.defineExtensionAccessors(text_scaler._ClampedTextScaler, ['hashCode']);
  dart.moduleConstCaches.set("packages/flutter/src/painting/text_scaler.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__text_scaler|_LinearTextScaler":{"flutter__src__painting__text_scaler|TextScaler":[]},"flutter__src__painting__text_scaler|_ClampedTextScaler":{"flutter__src__painting__text_scaler|TextScaler":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/text_scaler.dart", {
    "package:flutter/src/painting/text_scaler.dart": text_scaler
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_scaler.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6D4B;UAA2B;AACnD,YAAO,AAAe,cAAD,IAAI,cAAc;AACvC,YAAQ,AAAe,cAAD;AACtB,WAAO,AAAe,cAAD;AACrB,YAAO,AAAe,cAAD,IAAI;AAEzB,YAAO,AAAe,eAAD,KAAI,cAAc,GACxB,sCAAO,cAAc,IAChC,uCAAmB,MAAM,cAAc,EAAE,cAAc;IAC7D;;;;EAjDkB;;;;;;;;;MAUM,gCAAS;;;;;;;IA8CpB;;;;;;;;;UAGO;AAClB,YAAO,AAAS,QAAD,IAAI;AACnB,WAAO,AAAS,QAAD;AACf,YAAO,AAAS,SAAD,GAAG;IACpB;;UAG0B;UAA2B;AACnD,YAAO,AAAe,cAAD,IAAI,cAAc;AACvC,YAAQ,AAAe,cAAD;AACtB,WAAO,AAAe,cAAD;AACrB,YAAO,AAAe,cAAD,IAAI;AAEZ,2BAAiB,eAAY,sBAAiB,cAAc,EAAE,cAAc;AACzF,YAAO,AAAe,eAAD,KAAI,uBAAkB,OAAO,sCAAkB,cAAc;IACpF;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,YAAa,AAAqB,4BAA3B,KAAK,KAAyB,AAAM,AAAgB,KAAjB,qBAAoB;IAChE;;AAGoB,YAAA,AAAgB;IAAQ;;AAGvB,YAAA,AAAgB,0BAAG,MAAM,eAAe,AAA8B,0BAAnB,wBAAgB;IAAG;;;IAnC9D;UAA0B,AAAgB,eAAD,IAAI;;EAAE;;;;;;;;;;;;;;;;IAwC3D;;;;;;IACJ;;;;;;IACA;;;;;;;;;;AAGiB,4BAAY,AAAO,6BAAiB,eAAU;IAAS;UAGjE;AAClB,YAAO,AAAS,QAAD,IAAI;AACnB,WAAO,AAAS,QAAD;AACf,YAAO,AAAS,mBAAG,gBACf,AAAS,gBAAE,QAAQ,GACnB,eAAY,AAAO,kBAAM,QAAQ,GAAG,AAAS,gBAAE,QAAQ,EAAE,AAAS,gBAAE,QAAQ;IAClF;;UAG0B;UAA2B;AACnD,YAAO,AAAe,eAAD,KAAI,cAAc,GACnC,sCAAkB,cAAc,IAChC,uCAAmB,aAAQ,qBAAI,cAAc,EAAE,gBAAW,qBAAI,cAAc,EAAE;IACpF;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,YAAa,AAGT,6BAHG,KAAK,KACL,AAAS,kBAAG,AAAM,KAAD,aACjB,AAAS,kBAAG,AAAM,KAAD,cAChB,AAAS,kBAAG,iBAAmB,YAAP,aAAU,AAAM,KAAD;IACjD;;AAGoB,YAAA,AAAS,mBAAG,gBAAW,AAAS,2BAAkB,iBAAK,aAAQ,eAAU;IAAS;;iDApCxE,QAAa,UAAe;IAA5B;IAAa;IAAe;UAAmB,AAAS,QAAD,GAAG,QAAQ;;EAAC","file":"../../../../../../../../F:/packages/flutter/src/painting/text_scaler.dart.lib.js"}');
  // Exports:
  return {
    src__painting__text_scaler: text_scaler
  };
}));

//# sourceMappingURL=text_scaler.dart.lib.js.map

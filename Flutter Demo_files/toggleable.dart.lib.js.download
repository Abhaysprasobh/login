// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/material/toggleable.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/widgets/unique_widget.dart', 'packages/flutter/src/material/constants.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/change_notifier.dart'], (function load__packages__flutter__src__material__toggleable_dart(dart_sdk, packages__flutter__src__widgets__unique_widget$46dart, packages__flutter__src__material__constants$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__change_notifier$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const actions = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__actions;
  const animation_controller = packages__flutter__src__widgets__unique_widget$46dart.src__animation__animation_controller;
  const animations = packages__flutter__src__widgets__unique_widget$46dart.src__animation__animations;
  const curves = packages__flutter__src__widgets__unique_widget$46dart.src__animation__curves;
  const gesture_detector = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__gesture_detector;
  const basic = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__ticker_provider;
  const tween = packages__flutter__src__widgets__unique_widget$46dart.src__animation__tween;
  const constants = packages__flutter__src__material__constants$46dart.src__material__constants;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  var toggleable = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    ActivateIntent: () => (T.ActivateIntent = dart.constFn(dart_rti.findType("flutter__src__widgets__actions|ActivateIntent")))(),
    Type: () => (T.Type = dart.constFn(dart_rti.findType("core|Type")))(),
    ActionOfIntent: () => (T.ActionOfIntent = dart.constFn(dart_rti.findType("flutter__src__widgets__actions|Action<flutter__src__widgets__actions|Intent>")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    MaterialState: () => (T.MaterialState = dart.constFn(dart_rti.findType("flutter__src__material__material_state|MaterialState")))(),
    AnimationController: () => (T.AnimationController = dart.constFn(dart_rti.findType("flutter__src__animation__animation_controller|AnimationController")))(),
    CurvedAnimation: () => (T.CurvedAnimation = dart.constFn(dart_rti.findType("flutter__src__animation__animations|CurvedAnimation")))(),
    AnimationOfdouble: () => (T.AnimationOfdouble = dart.constFn(dart_rti.findType("flutter__src__animation__animation|Animation<core|double>")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    MapOfType$ActionOfIntent: () => (T.MapOfType$ActionOfIntent = dart.constFn(dart_rti.findType("core|Map<core|Type,flutter__src__widgets__actions|Action<flutter__src__widgets__actions|Intent>>")))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart_rti.findType("ui|Offset?")))(),
    TapDownDetailsTovoid: () => (T.TapDownDetailsTovoid = dart.constFn(dart_rti.findType("~(flutter__src__gestures__tap|TapDownDetails)")))(),
    IntentNTovoid: () => (T.IntentNTovoid = dart.constFn(dart_rti.findType("~([flutter__src__widgets__actions|Intent?])")))(),
    TapUpDetailsNTovoid: () => (T.TapUpDetailsNTovoid = dart.constFn(dart_rti.findType("~([flutter__src__gestures__tap|TapUpDetails?])")))(),
    boolTovoid: () => (T.boolTovoid = dart.constFn(dart_rti.findType("~(core|bool)")))(),
    SetOfMaterialState: () => (T.SetOfMaterialState = dart.constFn(dart_rti.findType("core|Set<flutter__src__material__material_state|MaterialState>")))(),
    __ToWidget: () => (T.__ToWidget = dart.constFn(dart_rti.findType("flutter__src__widgets__framework|Widget({autofocus:core|bool,focusNode:flutter__src__widgets__focus_manager|FocusNode?,mouseCursor!flutter__src__material__material_state|MaterialStateProperty<flutter__src__services__mouse_cursor|MouseCursor>,onFocusChange:~(core|bool)?,painter!flutter__src__rendering__custom_paint|CustomPainter,size!ui|Size})")))(),
    AnimationControllerN: () => (T.AnimationControllerN = dart.constFn(dart_rti.findType("flutter__src__animation__animation_controller|AnimationController?")))(),
    CurvedAnimationN: () => (T.CurvedAnimationN = dart.constFn(dart_rti.findType("flutter__src__animation__animations|CurvedAnimation?")))(),
    AnimationNOfdouble: () => (T.AnimationNOfdouble = dart.constFn(dart_rti.findType("flutter__src__animation__animation|Animation<core|double>?")))(),
    MapNOfType$ActionOfIntent: () => (T.MapNOfType$ActionOfIntent = dart.constFn(dart_rti.findType("core|Map<core|Type,flutter__src__widgets__actions|Action<flutter__src__widgets__actions|Intent>>?")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    CustomPainter: () => (T.CustomPainter = dart.constFn(dart_rti.findType("flutter__src__rendering__custom_paint|CustomPainter")))(),
    Color: () => (T.Color = dart.constFn(dart_rti.findType("ui|Color")))(),
    boolN: () => (T.boolN = dart.constFn(dart_rti.findType("core|bool?")))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti.findType("~({canvas!ui|Canvas,offset:ui|Offset,origin!ui|Offset})")))(),
    ObjectNTobool: () => (T.ObjectNTobool = dart.constFn(dart_rti.findType("core|bool(core|Object?)")))(),
    OffsetToboolN: () => (T.OffsetToboolN = dart.constFn(dart_rti.findType("core|bool?(ui|Offset)")))(),
    SizeToNListOfCustomPainterSemantics: () => (T.SizeToNListOfCustomPainterSemantics = dart.constFn(dart_rti.findType("core|List<flutter__src__rendering__custom_paint|CustomPainterSemantics>(ui|Size)?")))(),
    ColorN: () => (T.ColorN = dart.constFn(dart_rti.findType("ui|Color?")))(),
    doubleN: () => (T.doubleN = dart.constFn(dart_rti.findType("core|double?")))()
  };
  var G = {
    CallbackActionOfActivateIntent: () => (G.CallbackActionOfActivateIntent = dart.constFn(actions.CallbackAction$(T.ActivateIntent())))(),
    LinkedMapOfType$ActionOfIntent: () => (G.LinkedMapOfType$ActionOfIntent = dart.constFn(_js_helper.LinkedMap$(T.Type(), T.ActionOfIntent())))(),
    LinkedHashSetOfMaterialState: () => (G.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(T.MaterialState())))(),
    TweenOfdouble: () => (G.TweenOfdouble = dart.constFn(tween.Tween$(T.double())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [SemanticsEvent_type]: "tap"
      }, semantics_event.TapSemanticEvent.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Location_name]: "CustomPaint",
        [_Location_column]: 18,
        [_Location_line]: 328,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      }, widget_inspector._Location.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Location_name]: "Semantics",
        [_Location_column]: 16,
        [_Location_line]: 326,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      }, widget_inspector._Location.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Location_name]: "GestureDetector",
        [_Location_column]: 14,
        [_Location_line]: 320,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      }, widget_inspector._Location.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Location_name]: "FocusableActionDetector",
        [_Location_column]: 12,
        [_Location_line]: 311,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      }, widget_inspector._Location.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Offset.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 200000
      }, core.Duration.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 50000
      }, core.Duration.prototype));
    }
  }, false);
  var C = Array(8).fill(void 0);
  var I = [
    "package:flutter/src/material/toggleable.dart",
    "package:flutter/src/animation/animation_controller.dart",
    "package:flutter/src/animation/animations.dart",
    "package:flutter/src/animation/animation.dart",
    "dart:core",
    "dart:ui"
  ];
  var __ToggleableStateMixin__positionController = dart.privateName(toggleable, "_#ToggleableStateMixin#_positionController");
  var __ToggleableStateMixin__position = dart.privateName(toggleable, "_#ToggleableStateMixin#_position");
  var __ToggleableStateMixin__reactionController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionController");
  var __ToggleableStateMixin__reaction = dart.privateName(toggleable, "_#ToggleableStateMixin#_reaction");
  var __ToggleableStateMixin__reactionHoverFade = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFade");
  var __ToggleableStateMixin__reactionHoverFadeController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFadeController");
  var __ToggleableStateMixin__reactionFocusFade = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFade");
  var __ToggleableStateMixin__reactionFocusFadeController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFadeController");
  var __ToggleableStateMixin__actionMap = dart.privateName(toggleable, "_#ToggleableStateMixin#_actionMap");
  var _downPosition = dart.privateName(toggleable, "_downPosition");
  var _focused = dart.privateName(toggleable, "_focused");
  var _hovering = dart.privateName(toggleable, "_hovering");
  var _positionController = dart.privateName(toggleable, "_positionController");
  var _position = dart.privateName(toggleable, "_position");
  var _reactionController = dart.privateName(toggleable, "_reactionController");
  var _reaction = dart.privateName(toggleable, "_reaction");
  var _reactionHoverFade = dart.privateName(toggleable, "_reactionHoverFade");
  var _reactionHoverFadeController = dart.privateName(toggleable, "_reactionHoverFadeController");
  var _reactionFocusFade = dart.privateName(toggleable, "_reactionFocusFade");
  var _reactionFocusFadeController = dart.privateName(toggleable, "_reactionFocusFadeController");
  var _handleTap = dart.privateName(toggleable, "_handleTap");
  var _actionMap = dart.privateName(toggleable, "_actionMap");
  var _handleTapDown = dart.privateName(toggleable, "_handleTapDown");
  var SemanticsEvent_type = dart.privateName(semantics_event, "SemanticsEvent.type");
  var _handleTapEnd = dart.privateName(toggleable, "_handleTapEnd");
  var _handleFocusHighlightChanged = dart.privateName(toggleable, "_handleFocusHighlightChanged");
  var _handleHoverChanged = dart.privateName(toggleable, "_handleHoverChanged");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const _is_ToggleableStateMixin_default = Symbol('_is_ToggleableStateMixin_default');
  toggleable.ToggleableStateMixin$ = dart.generic(S => {
    class ToggleableStateMixin extends ticker_provider.TickerProviderStateMixin$(S) {}
    ToggleableStateMixin[dart.mixinOn] = TickerProviderStateMixin => class ToggleableStateMixin extends TickerProviderStateMixin {
      get positionController() {
        return this[_positionController];
      }
      get [_positionController]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__positionController];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_positionController")) : t$360;
      }
      set [_positionController](_positionController$35param) {
        this[__ToggleableStateMixin__positionController] = _positionController$35param;
      }
      get position() {
        return this[_position];
      }
      get [_position]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__position];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_position")) : t$360;
      }
      set [_position](_position$35param) {
        this[__ToggleableStateMixin__position] = _position$35param;
      }
      get reactionController() {
        return this[_reactionController];
      }
      get [_reactionController]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reactionController];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionController")) : t$360;
      }
      set [_reactionController](_reactionController$35param) {
        this[__ToggleableStateMixin__reactionController] = _reactionController$35param;
      }
      get reaction() {
        return this[_reaction];
      }
      get [_reaction]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reaction];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reaction")) : t$360;
      }
      set [_reaction](_reaction$35param) {
        this[__ToggleableStateMixin__reaction] = _reaction$35param;
      }
      get reactionHoverFade() {
        return this[_reactionHoverFade];
      }
      get [_reactionHoverFade]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reactionHoverFade];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionHoverFade")) : t$360;
      }
      set [_reactionHoverFade](_reactionHoverFade$35param) {
        this[__ToggleableStateMixin__reactionHoverFade] = _reactionHoverFade$35param;
      }
      get [_reactionHoverFadeController]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reactionHoverFadeController];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionHoverFadeController")) : t$360;
      }
      set [_reactionHoverFadeController](_reactionHoverFadeController$35param) {
        this[__ToggleableStateMixin__reactionHoverFadeController] = _reactionHoverFadeController$35param;
      }
      get reactionFocusFade() {
        return this[_reactionFocusFade];
      }
      get [_reactionFocusFade]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reactionFocusFade];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionFocusFade")) : t$360;
      }
      set [_reactionFocusFade](_reactionFocusFade$35param) {
        this[__ToggleableStateMixin__reactionFocusFade] = _reactionFocusFade$35param;
      }
      get [_reactionFocusFadeController]() {
        let t$360;
        t$360 = this[__ToggleableStateMixin__reactionFocusFadeController];
        return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionFocusFadeController")) : t$360;
      }
      set [_reactionFocusFadeController](_reactionFocusFadeController$35param) {
        this[__ToggleableStateMixin__reactionFocusFadeController] = _reactionFocusFadeController$35param;
      }
      get isInteractive() {
        return this.onChanged != null;
      }
      get [_actionMap]() {
        let t$361, t$360;
        t$360 = this[__ToggleableStateMixin__actionMap];
        return t$360 == null ? (t$361 = new (G.LinkedMapOfType$ActionOfIntent()).from([dart_rti.createRuntimeType(T.ActivateIntent()), new (G.CallbackActionOfActivateIntent()).new({onInvoke: dart.bind(this, _handleTap)})]), this[__ToggleableStateMixin__actionMap] == null ? this[__ToggleableStateMixin__actionMap] = t$361 : dart.throw(new _internal.LateError.fieldADI("_actionMap"))) : t$360;
      }
      initState() {
        super.initState();
        this[_positionController] = new animation_controller.AnimationController.new({duration: toggleable._kToggleDuration, value: this.value === false ? 0.0 : 1.0, vsync: this});
        this[_position] = new animations.CurvedAnimation.new({parent: this[_positionController], curve: curves.Curves.easeIn, reverseCurve: curves.Curves.easeOut});
        this[_reactionController] = new animation_controller.AnimationController.new({duration: constants.kRadialReactionDuration, vsync: this});
        this[_reaction] = new animations.CurvedAnimation.new({parent: this[_reactionController], curve: curves.Curves.fastOutSlowIn});
        this[_reactionHoverFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: this[_hovering] || this[_focused] ? 1.0 : 0.0, vsync: this});
        this[_reactionHoverFade] = new animations.CurvedAnimation.new({parent: this[_reactionHoverFadeController], curve: curves.Curves.fastOutSlowIn});
        this[_reactionFocusFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: this[_hovering] || this[_focused] ? 1.0 : 0.0, vsync: this});
        this[_reactionFocusFade] = new animations.CurvedAnimation.new({parent: this[_reactionFocusFadeController], curve: curves.Curves.fastOutSlowIn});
      }
      animateToValue() {
        let t$360, t$360$;
        if (this.tristate) {
          if (this.value == null) {
            this[_positionController].value = 0.0;
          }
          if (dart.test((t$360 = this.value, t$360 == null ? true : t$360))) {
            this[_positionController].forward();
          } else {
            this[_positionController].reverse();
          }
        } else {
          if (dart.test((t$360$ = this.value, t$360$ == null ? false : t$360$))) {
            this[_positionController].forward();
          } else {
            this[_positionController].reverse();
          }
        }
      }
      dispose() {
        this[_positionController].dispose();
        this[_reactionController].dispose();
        this[_reactionHoverFadeController].dispose();
        this[_reactionFocusFadeController].dispose();
        super.dispose();
      }
      get downPosition() {
        return this[_downPosition];
      }
      [_handleTapDown](details) {
        if (this.isInteractive) {
          this.setState(dart.fn(() => {
            this[_downPosition] = details.localPosition;
          }, T.VoidTovoid()));
          this[_reactionController].forward();
        }
      }
      [_handleTap](_ = null) {
        if (!this.isInteractive) {
          return;
        }
        switch (this.value) {
          case false:
            {
              dart.nullCheck(this.onChanged)(true);
              break;
            }
          case true:
            {
              dart.nullCheck(this.onChanged)(this.tristate ? null : false);
              break;
            }
          case void 0:
          case null:
            {
              dart.nullCheck(this.onChanged)(false);
            }
        }
        dart.nullCheck(this.context.findRenderObject()).sendSemanticsEvent(C[0] || CT.C0);
      }
      [_handleTapEnd](_ = null) {
        if (this[_downPosition] != null) {
          this.setState(dart.fn(() => {
            this[_downPosition] = null;
          }, T.VoidTovoid()));
        }
        this[_reactionController].reverse();
      }
      [_handleFocusHighlightChanged](focused) {
        if (focused !== this[_focused]) {
          this.setState(dart.fn(() => {
            this[_focused] = focused;
          }, T.VoidTovoid()));
          if (focused) {
            this[_reactionFocusFadeController].forward();
          } else {
            this[_reactionFocusFadeController].reverse();
          }
        }
      }
      [_handleHoverChanged](hovering) {
        if (hovering !== this[_hovering]) {
          this.setState(dart.fn(() => {
            this[_hovering] = hovering;
          }, T.VoidTovoid()));
          if (hovering) {
            this[_reactionHoverFadeController].forward();
          } else {
            this[_reactionHoverFadeController].reverse();
          }
        }
      }
      get states() {
        let t$361;
        return (() => {
          let t$360 = G.LinkedHashSetOfMaterialState().new();
          if (!this.isInteractive) t$360.add(material_state.MaterialState.disabled);
          if (this[_hovering]) t$360.add(material_state.MaterialState.hovered);
          if (this[_focused]) t$360.add(material_state.MaterialState.focused);
          if (dart.test((t$361 = this.value, t$361 == null ? true : t$361))) t$360.add(material_state.MaterialState.selected);
          return t$360;
        })();
      }
      buildToggleable(opts) {
        let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
        let onFocusChange = opts && 'onFocusChange' in opts ? opts.onFocusChange : null;
        let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
        let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
        let size = opts && 'size' in opts ? opts.size : null;
        let painter = opts && 'painter' in opts ? opts.painter : null;
        return new actions.FocusableActionDetector.new({actions: this[_actionMap], focusNode: focusNode, autofocus: autofocus, onFocusChange: onFocusChange, enabled: this.isInteractive, onShowFocusHighlight: dart.bind(this, _handleFocusHighlightChanged), onShowHoverHighlight: dart.bind(this, _handleHoverChanged), mouseCursor: mouseCursor.resolve(this.states), child: new gesture_detector.GestureDetector.new({excludeFromSemantics: !this.isInteractive, onTapDown: this.isInteractive ? dart.bind(this, _handleTapDown) : null, onTap: this.isInteractive ? dart.bind(this, _handleTap) : null, onTapUp: this.isInteractive ? dart.bind(this, _handleTapEnd) : null, onTapCancel: this.isInteractive ? dart.bind(this, _handleTapEnd) : null, child: new basic.Semantics.new({enabled: this.isInteractive, child: new basic.CustomPaint.new({size: size, painter: painter, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1}), $creationLocationd_0dea112b090073317d4: C[2] || CT.C2}), $creationLocationd_0dea112b090073317d4: C[3] || CT.C3}), $creationLocationd_0dea112b090073317d4: C[4] || CT.C4});
      }
    };
    (ToggleableStateMixin[dart.mixinNew] = function() {
      this[__ToggleableStateMixin__positionController] = null;
      this[__ToggleableStateMixin__position] = null;
      this[__ToggleableStateMixin__reactionController] = null;
      this[__ToggleableStateMixin__reaction] = null;
      this[__ToggleableStateMixin__reactionHoverFade] = null;
      this[__ToggleableStateMixin__reactionHoverFadeController] = null;
      this[__ToggleableStateMixin__reactionFocusFade] = null;
      this[__ToggleableStateMixin__reactionFocusFadeController] = null;
      this[__ToggleableStateMixin__actionMap] = null;
      this[_downPosition] = null;
      this[_focused] = false;
      this[_hovering] = false;
    }).prototype = ToggleableStateMixin.prototype;
    dart.addTypeTests(ToggleableStateMixin);
    ToggleableStateMixin.prototype[_is_ToggleableStateMixin_default] = true;
    dart.addRtiResources(ToggleableStateMixin, ["flutter__src__material__toggleable|ToggleableStateMixin"]);
    dart.addTypeCaches(ToggleableStateMixin);
    dart.setMethodSignature(ToggleableStateMixin, () => dart.global.Object.setPrototypeOf({
      animateToValue: T.VoidTovoid(),
      [_handleTapDown]: T.TapDownDetailsTovoid(),
      [_handleTap]: T.IntentNTovoid(),
      [_handleTapEnd]: T.TapUpDetailsNTovoid(),
      [_handleFocusHighlightChanged]: T.boolTovoid(),
      [_handleHoverChanged]: T.boolTovoid(),
      buildToggleable: T.__ToWidget()
    }, dart.getMethods(dart.global.Object.getPrototypeOf(ToggleableStateMixin))));
    dart.setGetterSignature(ToggleableStateMixin, () => dart.global.Object.setPrototypeOf({
      positionController: T.AnimationController(),
      [_positionController]: T.AnimationController(),
      position: T.CurvedAnimation(),
      [_position]: T.CurvedAnimation(),
      reactionController: T.AnimationController(),
      [_reactionController]: T.AnimationController(),
      reaction: T.AnimationOfdouble(),
      [_reaction]: T.AnimationOfdouble(),
      reactionHoverFade: T.AnimationOfdouble(),
      [_reactionHoverFade]: T.AnimationOfdouble(),
      [_reactionHoverFadeController]: T.AnimationController(),
      reactionFocusFade: T.AnimationOfdouble(),
      [_reactionFocusFade]: T.AnimationOfdouble(),
      [_reactionFocusFadeController]: T.AnimationController(),
      isInteractive: T.bool(),
      [_actionMap]: T.MapOfType$ActionOfIntent(),
      downPosition: T.OffsetN(),
      states: T.SetOfMaterialState()
    }, dart.getGetters(dart.global.Object.getPrototypeOf(ToggleableStateMixin))));
    dart.setSetterSignature(ToggleableStateMixin, () => dart.global.Object.setPrototypeOf({
      [_positionController]: T.AnimationController(),
      [_position]: T.CurvedAnimation(),
      [_reactionController]: T.AnimationController(),
      [_reaction]: T.AnimationOfdouble(),
      [_reactionHoverFade]: T.AnimationOfdouble(),
      [_reactionHoverFadeController]: T.AnimationController(),
      [_reactionFocusFade]: T.AnimationOfdouble(),
      [_reactionFocusFadeController]: T.AnimationController()
    }, dart.getSetters(dart.global.Object.getPrototypeOf(ToggleableStateMixin))));
    dart.setLibraryUri(ToggleableStateMixin, I[0]);
    dart.setFieldSignature(ToggleableStateMixin, () => dart.global.Object.setPrototypeOf({
      [__ToggleableStateMixin__positionController]: {type: T.AnimationControllerN(), isConst: false, isFinal: false, libraryUri: I[1]},
      [__ToggleableStateMixin__position]: {type: T.CurvedAnimationN(), isConst: false, isFinal: false, libraryUri: I[2]},
      [__ToggleableStateMixin__reactionController]: {type: T.AnimationControllerN(), isConst: false, isFinal: false, libraryUri: I[1]},
      [__ToggleableStateMixin__reaction]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
      [__ToggleableStateMixin__reactionHoverFade]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
      [__ToggleableStateMixin__reactionHoverFadeController]: {type: T.AnimationControllerN(), isConst: false, isFinal: false, libraryUri: I[1]},
      [__ToggleableStateMixin__reactionFocusFade]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
      [__ToggleableStateMixin__reactionFocusFadeController]: {type: T.AnimationControllerN(), isConst: false, isFinal: false, libraryUri: I[1]},
      [__ToggleableStateMixin__actionMap]: {type: T.MapNOfType$ActionOfIntent(), isConst: false, isFinal: false, libraryUri: I[4]},
      [_downPosition]: {type: T.OffsetN(), isConst: false, isFinal: false, libraryUri: I[5]},
      [_focused]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[4]},
      [_hovering]: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[4]}
    }, dart.getFields(dart.global.Object.getPrototypeOf(ToggleableStateMixin))));
    return ToggleableStateMixin;
  });
  toggleable.ToggleableStateMixin = toggleable.ToggleableStateMixin$();
  dart.addTypeTests(toggleable.ToggleableStateMixin, _is_ToggleableStateMixin_default);
  var _activeColor = dart.privateName(toggleable, "_activeColor");
  var _inactiveColor = dart.privateName(toggleable, "_inactiveColor");
  var _inactiveReactionColor = dart.privateName(toggleable, "_inactiveReactionColor");
  var _reactionColor = dart.privateName(toggleable, "_reactionColor");
  var _hoverColor = dart.privateName(toggleable, "_hoverColor");
  var _focusColor = dart.privateName(toggleable, "_focusColor");
  var _splashRadius = dart.privateName(toggleable, "_splashRadius");
  var _isFocused = dart.privateName(toggleable, "_isFocused");
  var _isHovered = dart.privateName(toggleable, "_isHovered");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _as = dart.privateName(dart_rti, "_as");
  toggleable.ToggleablePainter = class ToggleablePainter extends change_notifier.ChangeNotifier {
    get position() {
      return dart.nullCheck(this[_position]);
    }
    set position(value) {
      let t$361;
      if (dart.equals(value, this[_position])) {
        return;
      }
      t$361 = this[_position];
      t$361 == null ? null : t$361.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_position] = value;
      this.notifyListeners();
    }
    get reaction() {
      return dart.nullCheck(this[_reaction]);
    }
    set reaction(value) {
      let t$361;
      if (dart.equals(value, this[_reaction])) {
        return;
      }
      t$361 = this[_reaction];
      t$361 == null ? null : t$361.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reaction] = value;
      this.notifyListeners();
    }
    get reactionFocusFade() {
      return dart.nullCheck(this[_reactionFocusFade]);
    }
    set reactionFocusFade(value) {
      let t$361;
      if (dart.equals(value, this[_reactionFocusFade])) {
        return;
      }
      t$361 = this[_reactionFocusFade];
      t$361 == null ? null : t$361.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reactionFocusFade] = value;
      this.notifyListeners();
    }
    get reactionHoverFade() {
      return dart.nullCheck(this[_reactionHoverFade]);
    }
    set reactionHoverFade(value) {
      let t$361;
      if (dart.equals(value, this[_reactionHoverFade])) {
        return;
      }
      t$361 = this[_reactionHoverFade];
      t$361 == null ? null : t$361.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reactionHoverFade] = value;
      this.notifyListeners();
    }
    get activeColor() {
      return dart.nullCheck(this[_activeColor]);
    }
    set activeColor(value) {
      if (dart.equals(this[_activeColor], value)) {
        return;
      }
      this[_activeColor] = value;
      this.notifyListeners();
    }
    get inactiveColor() {
      return dart.nullCheck(this[_inactiveColor]);
    }
    set inactiveColor(value) {
      if (dart.equals(this[_inactiveColor], value)) {
        return;
      }
      this[_inactiveColor] = value;
      this.notifyListeners();
    }
    get inactiveReactionColor() {
      return dart.nullCheck(this[_inactiveReactionColor]);
    }
    set inactiveReactionColor(value) {
      if (dart.equals(value, this[_inactiveReactionColor])) {
        return;
      }
      this[_inactiveReactionColor] = value;
      this.notifyListeners();
    }
    get reactionColor() {
      return dart.nullCheck(this[_reactionColor]);
    }
    set reactionColor(value) {
      if (dart.equals(value, this[_reactionColor])) {
        return;
      }
      this[_reactionColor] = value;
      this.notifyListeners();
    }
    get hoverColor() {
      return dart.nullCheck(this[_hoverColor]);
    }
    set hoverColor(value) {
      if (dart.equals(value, this[_hoverColor])) {
        return;
      }
      this[_hoverColor] = value;
      this.notifyListeners();
    }
    get focusColor() {
      return dart.nullCheck(this[_focusColor]);
    }
    set focusColor(value) {
      if (dart.equals(value, this[_focusColor])) {
        return;
      }
      this[_focusColor] = value;
      this.notifyListeners();
    }
    get splashRadius() {
      return dart.nullCheck(this[_splashRadius]);
    }
    set splashRadius(value) {
      if (value === this[_splashRadius]) {
        return;
      }
      this[_splashRadius] = value;
      this.notifyListeners();
    }
    get downPosition() {
      return this[_downPosition];
    }
    set downPosition(value) {
      if (dart.equals(value, this[_downPosition])) {
        return;
      }
      this[_downPosition] = value;
      this.notifyListeners();
    }
    get isFocused() {
      return dart.nullCheck(this[_isFocused]);
    }
    set isFocused(value) {
      if (value == this[_isFocused]) {
        return;
      }
      this[_isFocused] = value;
      this.notifyListeners();
    }
    get isHovered() {
      return dart.nullCheck(this[_isHovered]);
    }
    set isHovered(value) {
      if (value == this[_isHovered]) {
        return;
      }
      this[_isHovered] = value;
      this.notifyListeners();
    }
    paintRadialReaction(opts) {
      let t$361;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let offset = opts && 'offset' in opts ? opts.offset : C[5] || CT.C5;
      let origin = opts && 'origin' in opts ? opts.origin : null;
      if (!this.reaction.isDismissed || !this.reactionFocusFade.isDismissed || !this.reactionHoverFade.isDismissed) {
        let reactionPaint = (t$361 = ui.Paint.new(), (() => {
          t$361.color = dart.nullCheck(ui.Color.lerp(ui.Color.lerp(ui.Color.lerp(this.inactiveReactionColor, this.reactionColor, this.position.value), this.hoverColor, this.reactionHoverFade.value), this.focusColor, this.reactionFocusFade.value));
          return t$361;
        })());
        let radialReactionRadiusTween = new (G.TweenOfdouble()).new({begin: 0.0, end: this.splashRadius});
        let reactionRadius = this.isFocused || this.isHovered ? this.splashRadius : radialReactionRadiusTween.evaluate(this.reaction);
        if (reactionRadius > 0.0) {
          canvas.drawCircle(origin['+'](offset), reactionRadius, reactionPaint);
        }
      }
    }
    dispose() {
      let t$361, t$361$, t$361$0, t$361$1;
      t$361 = this[_position];
      t$361 == null ? null : t$361.removeListener(dart.bind(this, 'notifyListeners'));
      t$361$ = this[_reaction];
      t$361$ == null ? null : t$361$.removeListener(dart.bind(this, 'notifyListeners'));
      t$361$0 = this[_reactionFocusFade];
      t$361$0 == null ? null : t$361$0.removeListener(dart.bind(this, 'notifyListeners'));
      t$361$1 = this[_reactionHoverFade];
      t$361$1 == null ? null : t$361$1.removeListener(dart.bind(this, 'notifyListeners'));
      super.dispose();
    }
    shouldRepaint(oldDelegate) {
      T.CustomPainter()[_as](oldDelegate);
      return true;
    }
    hitTest(position) {
      return null;
    }
    get semanticsBuilder() {
      return null;
    }
    shouldRebuildSemantics(oldDelegate) {
      T.CustomPainter()[_as](oldDelegate);
      return false;
    }
    toString() {
      return diagnostics.describeIdentity(this);
    }
  };
  (toggleable.ToggleablePainter.new = function() {
    this[_position] = null;
    this[_reaction] = null;
    this[_reactionFocusFade] = null;
    this[_reactionHoverFade] = null;
    this[_activeColor] = null;
    this[_inactiveColor] = null;
    this[_inactiveReactionColor] = null;
    this[_reactionColor] = null;
    this[_hoverColor] = null;
    this[_focusColor] = null;
    this[_splashRadius] = null;
    this[_downPosition] = null;
    this[_isFocused] = null;
    this[_isHovered] = null;
    dart.global.Object.getPrototypeOf(toggleable.ToggleablePainter).new.call(this);
    ;
  }).prototype = toggleable.ToggleablePainter.prototype;
  dart.addTypeTests(toggleable.ToggleablePainter);
  dart.addRtiResources(toggleable.ToggleablePainter, ["flutter__src__material__toggleable|ToggleablePainter", "flutter__src__rendering__custom_paint|CustomPainter", "flutter__src__foundation__change_notifier|Listenable"]);
  dart.addTypeCaches(toggleable.ToggleablePainter);
  dart.setMethodSignature(toggleable.ToggleablePainter, () => dart.global.Object.setPrototypeOf({
    paintRadialReaction: T.__Tovoid(),
    shouldRepaint: T.ObjectNTobool(),
    hitTest: T.OffsetToboolN(),
    shouldRebuildSemantics: T.ObjectNTobool()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(toggleable.ToggleablePainter))));
  dart.setGetterSignature(toggleable.ToggleablePainter, () => dart.global.Object.setPrototypeOf({
    position: T.AnimationOfdouble(),
    reaction: T.AnimationOfdouble(),
    reactionFocusFade: T.AnimationOfdouble(),
    reactionHoverFade: T.AnimationOfdouble(),
    activeColor: T.Color(),
    inactiveColor: T.Color(),
    inactiveReactionColor: T.Color(),
    reactionColor: T.Color(),
    hoverColor: T.Color(),
    focusColor: T.Color(),
    splashRadius: T.double(),
    downPosition: T.OffsetN(),
    isFocused: T.bool(),
    isHovered: T.bool(),
    semanticsBuilder: T.SizeToNListOfCustomPainterSemantics()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(toggleable.ToggleablePainter))));
  dart.setSetterSignature(toggleable.ToggleablePainter, () => dart.global.Object.setPrototypeOf({
    position: T.AnimationOfdouble(),
    reaction: T.AnimationOfdouble(),
    reactionFocusFade: T.AnimationOfdouble(),
    reactionHoverFade: T.AnimationOfdouble(),
    activeColor: T.Color(),
    inactiveColor: T.Color(),
    inactiveReactionColor: T.Color(),
    reactionColor: T.Color(),
    hoverColor: T.Color(),
    focusColor: T.Color(),
    splashRadius: T.double(),
    downPosition: T.OffsetN(),
    isFocused: T.boolN(),
    isHovered: T.boolN()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(toggleable.ToggleablePainter))));
  dart.setLibraryUri(toggleable.ToggleablePainter, I[0]);
  dart.setFieldSignature(toggleable.ToggleablePainter, () => dart.global.Object.setPrototypeOf({
    [_position]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_reaction]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_reactionFocusFade]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_reactionHoverFade]: {type: T.AnimationNOfdouble(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_activeColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_inactiveColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_inactiveReactionColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_reactionColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_hoverColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_focusColor]: {type: T.ColorN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_splashRadius]: {type: T.doubleN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_downPosition]: {type: T.OffsetN(), isConst: false, isFinal: false, libraryUri: I[5]},
    [_isFocused]: {type: T.boolN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [_isHovered]: {type: T.boolN(), isConst: false, isFinal: false, libraryUri: I[4]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(toggleable.ToggleablePainter))));
  dart.defineExtensionMethods(toggleable.ToggleablePainter, ['toString']);
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(toggleable, {
    /*toggleable._kToggleDuration*/get _kToggleDuration() {
      return C[6] || CT.C6;
    },
    /*toggleable._kReactionFadeDuration*/get _kReactionFadeDuration() {
      return C[7] || CT.C7;
    }
  }, false);
  dart.moduleConstCaches.set("packages/flutter/src/material/toggleable.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__widgets__actions|ActivateIntent":{"flutter__src__widgets__actions|Intent":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__widgets__actions|Intent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__widgets__actions|Action":{"Action.T":"1","flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__material__material_state|MaterialState":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__animation__animation_controller|AnimationController":{"flutter__src__animation__listener_helpers|AnimationLocalStatusListenersMixin":[],"flutter__src__animation__listener_helpers|AnimationLocalListenersMixin":[],"Animation.T":"core|double","flutter__src__animation__animation|Animation":["core|double"],"flutter__src__animation__listener_helpers|AnimationEagerListenerMixin":[],"flutter__src__foundation__change_notifier|Listenable":[],"ValueListenable.T":"core|double","flutter__src__foundation__change_notifier|ValueListenable":["core|double"]},"flutter__src__animation__animation|Animation":{"Animation.T":"1","flutter__src__foundation__change_notifier|Listenable":[],"ValueListenable.T":"1","flutter__src__foundation__change_notifier|ValueListenable":["1"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"flutter__src__foundation__change_notifier|ValueListenable":{"ValueListenable.T":"1","flutter__src__foundation__change_notifier|Listenable":[]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__animation__animations|CurvedAnimation":{"Animation.T":"core|double","flutter__src__animation__animation|Animation":["core|double"],"AnimationWithParentMixin.T":"core|double","flutter__src__animation__animations|AnimationWithParentMixin":["core|double"],"flutter__src__foundation__change_notifier|Listenable":[],"ValueListenable.T":"core|double","flutter__src__foundation__change_notifier|ValueListenable":["core|double"]},"flutter__src__animation__animations|AnimationWithParentMixin":{"AnimationWithParentMixin.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"ui|Offset":{"ui|OffsetBase":[]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__widgets__framework|Widget":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__widgets__widget_inspector|_HasCreationLocation":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__widgets__focus_manager|FocusNode":{"flutter__src__foundation__change_notifier|ChangeNotifier":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__change_notifier|Listenable":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__change_notifier|ChangeNotifier":{"flutter__src__foundation__change_notifier|Listenable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__material__material_state|MaterialStateProperty":{"MaterialStateProperty.T":"1"},"flutter__src__services__mouse_cursor|MouseCursor":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__rendering__custom_paint|CustomPainter":{"flutter__src__foundation__change_notifier|Listenable":[]},"ui|Size":{"ui|OffsetBase":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"flutter__src__material__toggleable|ToggleableStateMixin":{"ToggleableStateMixin.S":"1","TickerProviderStateMixin.T":"1","flutter__src__widgets__ticker_provider|TickerProviderStateMixin":["1"],"State.T":"1","flutter__src__widgets__framework|State":["1"],"flutter__src__scheduler__ticker|TickerProvider":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__widgets__ticker_provider|TickerProviderStateMixin":{"TickerProviderStateMixin.T":"1","State.T":"1","flutter__src__widgets__framework|State":["1"],"flutter__src__scheduler__ticker|TickerProvider":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__widgets__framework|State":{"State.T":"1","flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__material__toggleable|ToggleablePainter":{"flutter__src__foundation__change_notifier|ChangeNotifier":[],"flutter__src__rendering__custom_paint|CustomPainter":[],"flutter__src__foundation__change_notifier|Listenable":[]}}'));
  dart.trackLibraries("packages/flutter/src/material/toggleable.dart", {
    "package:flutter/src/material/toggleable.dart": toggleable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["toggleable.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/material/toggleable.dart.lib.js"}');
  // Exports:
  return {
    src__material__toggleable: toggleable
  };
}));

//# sourceMappingURL=toggleable.dart.lib.js.map

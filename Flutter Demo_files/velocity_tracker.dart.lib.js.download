// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.3 (stable) (Tue Mar 26 14:21:33 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/velocity_tracker.dart
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/lsq_solver.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__velocity_tracker_dart(dart_sdk, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__lsq_solver$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const lsq_solver = packages__flutter__src__gestures__lsq_solver$46dart.src__gestures__lsq_solver;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var velocity_tracker = Object.create(dart.library);
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $toDouble = dartx.toDouble;
  var $abs = dartx.abs;
  var $add = dartx.add;
  var $modulo = dartx['%'];
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    Velocity: () => (T.Velocity = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|Velocity")))(),
    VoidToVelocity: () => (T.VoidToVelocity = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|Velocity()")))(),
    VelocityToVelocity: () => (T.VelocityToVelocity = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|Velocity(flutter__src__gestures__velocity_tracker|Velocity)")))(),
    doubleAnddoubleToVelocity: () => (T.doubleAnddoubleToVelocity = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|Velocity(core|double,core|double)")))(),
    Offset: () => (T.Offset = dart.constFn(dart_rti.findType("ui|Offset")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    Duration: () => (T.Duration = dart.constFn(dart_rti.findType("core|Duration")))(),
    _PointAtTimeN: () => (T._PointAtTimeN = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|_PointAtTime?")))(),
    Stopwatch: () => (T.Stopwatch = dart.constFn(dart_rti.findType("core|Stopwatch")))(),
    DurationAndOffsetTovoid: () => (T.DurationAndOffsetTovoid = dart.constFn(dart_rti.findType("~(core|Duration,ui|Offset)")))(),
    VoidToVelocityEstimateN: () => (T.VoidToVelocityEstimateN = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|VelocityEstimate?()")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    PointerDeviceKind: () => (T.PointerDeviceKind = dart.constFn(dart_rti.findType("ui|PointerDeviceKind")))(),
    StopwatchN: () => (T.StopwatchN = dart.constFn(dart_rti.findType("core|Stopwatch?")))(),
    ListOf_PointAtTimeN: () => (T.ListOf_PointAtTimeN = dart.constFn(dart_rti.findType("core|List<flutter__src__gestures__velocity_tracker|_PointAtTime?>")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    intToOffset: () => (T.intToOffset = dart.constFn(dart_rti.findType("ui|Offset(core|int)")))(),
    VoidToVelocityEstimate: () => (T.VoidToVelocityEstimate = dart.constFn(dart_rti.findType("flutter__src__gestures__velocity_tracker|VelocityEstimate()")))()
  };
  var G = {
    ListOf_PointAtTimeN: () => (G.ListOf_PointAtTimeN = dart.constFn(core.List$(T._PointAtTimeN())))(),
    JSArrayOfdouble: () => (G.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(T.double())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Offset.prototype));
    },
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [pixelsPerSecond$]: C[1] || CT.C1
      }, velocity_tracker.Velocity.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 0
      }, core.Duration.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [offset$]: C[1] || CT.C1,
        [duration$]: C[3] || CT.C3,
        [confidence$]: 1,
        [pixelsPerSecond$0]: C[1] || CT.C1
      }, velocity_tracker.VelocityEstimate.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [offset$]: C[1] || CT.C1,
        [duration$]: C[3] || CT.C3,
        [confidence$]: 0,
        [pixelsPerSecond$0]: C[1] || CT.C1
      }, velocity_tracker.VelocityEstimate.prototype));
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/gestures/velocity_tracker.dart",
    "package:flutter/src/gestures/velocity_tracker.dart",
    "dart:ui",
    "dart:core"
  ];
  var pixelsPerSecond$ = dart.privateName(velocity_tracker, "Velocity.pixelsPerSecond");
  var _is = dart.privateName(dart_rti, "_is");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  velocity_tracker.Velocity = class Velocity extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    static ['_#new#tearOff'](opts) {
      let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
      return new velocity_tracker.Velocity.new({pixelsPerSecond: pixelsPerSecond});
    }
    _negate() {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond._negate()});
    }
    ['-'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['-'](other.pixelsPerSecond)});
    }
    ['+'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['+'](other.pixelsPerSecond)});
    }
    clampMagnitude(minValue, maxValue) {
      if (!(minValue >= 0.0)) dart.assertFailed(null, I[0], 52, 12, "minValue >= 0.0");
      if (!(maxValue >= 0.0 && maxValue >= minValue)) dart.assertFailed(null, I[0], 53, 12, "maxValue >= 0.0 && maxValue >= minValue");
      let valueSquared = this.pixelsPerSecond.distanceSquared;
      if (valueSquared > maxValue * maxValue) {
        return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](maxValue)});
      }
      if (valueSquared < minValue * minValue) {
        return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](minValue)});
      }
      return this;
    }
    _equals(other) {
      if (other == null) return false;
      return T.Velocity()[_is](other) && dart.equals(other.pixelsPerSecond, this.pixelsPerSecond);
    }
    get hashCode() {
      return dart.hashCode(this.pixelsPerSecond);
    }
    toString() {
      return "Velocity(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.Velocity.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    this[pixelsPerSecond$] = pixelsPerSecond;
    ;
  }).prototype = velocity_tracker.Velocity.prototype;
  dart.addTypeTests(velocity_tracker.Velocity);
  dart.addRtiResources(velocity_tracker.Velocity, ["flutter__src__gestures__velocity_tracker|Velocity"]);
  dart.addTypeCaches(velocity_tracker.Velocity);
  dart.setMethodSignature(velocity_tracker.Velocity, () => dart.global.Object.setPrototypeOf({
    _negate: T.VoidToVelocity(),
    '-': T.VelocityToVelocity(),
    '+': T.VelocityToVelocity(),
    clampMagnitude: T.doubleAnddoubleToVelocity()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(velocity_tracker.Velocity))));
  dart.setLibraryUri(velocity_tracker.Velocity, I[1]);
  dart.setFieldSignature(velocity_tracker.Velocity, () => dart.global.Object.setPrototypeOf({pixelsPerSecond: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(velocity_tracker.Velocity))));
  dart.setStaticFieldSignature(velocity_tracker.Velocity, () => ['zero']);
  dart.defineExtensionMethods(velocity_tracker.Velocity, ['_equals', 'toString']);
  dart.defineExtensionAccessors(velocity_tracker.Velocity, ['hashCode']);
  dart.defineLazy(velocity_tracker.Velocity, {
    /*velocity_tracker.Velocity.zero*/get zero() {
      return C[0] || CT.C0;
    }
  }, false);
  var pixelsPerSecond$0 = dart.privateName(velocity_tracker, "VelocityEstimate.pixelsPerSecond");
  var confidence$ = dart.privateName(velocity_tracker, "VelocityEstimate.confidence");
  var duration$ = dart.privateName(velocity_tracker, "VelocityEstimate.duration");
  var offset$ = dart.privateName(velocity_tracker, "VelocityEstimate.offset");
  velocity_tracker.VelocityEstimate = class VelocityEstimate extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$0];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    get confidence() {
      return this[confidence$];
    }
    set confidence(value) {
      super.confidence = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    static ['_#new#tearOff'](opts) {
      let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
      let confidence = opts && 'confidence' in opts ? opts.confidence : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: pixelsPerSecond, confidence: confidence, duration: duration, offset: offset});
    }
    toString() {
      return "VelocityEstimate(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + "; offset: " + dart.str(this.offset) + ", duration: " + dart.str(this.duration) + ", confidence: " + this.confidence[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.VelocityEstimate.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    let confidence = opts && 'confidence' in opts ? opts.confidence : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[pixelsPerSecond$0] = pixelsPerSecond;
    this[confidence$] = confidence;
    this[duration$] = duration;
    this[offset$] = offset;
    ;
  }).prototype = velocity_tracker.VelocityEstimate.prototype;
  dart.addTypeTests(velocity_tracker.VelocityEstimate);
  dart.addRtiResources(velocity_tracker.VelocityEstimate, ["flutter__src__gestures__velocity_tracker|VelocityEstimate"]);
  dart.addTypeCaches(velocity_tracker.VelocityEstimate);
  dart.setLibraryUri(velocity_tracker.VelocityEstimate, I[1]);
  dart.setFieldSignature(velocity_tracker.VelocityEstimate, () => dart.global.Object.setPrototypeOf({
    pixelsPerSecond: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]},
    confidence: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[3]},
    duration: {type: T.Duration(), isConst: false, isFinal: true, libraryUri: I[3]},
    offset: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(velocity_tracker.VelocityEstimate))));
  dart.defineExtensionMethods(velocity_tracker.VelocityEstimate, ['toString']);
  var time$ = dart.privateName(velocity_tracker, "_PointAtTime.time");
  var point$ = dart.privateName(velocity_tracker, "_PointAtTime.point");
  velocity_tracker._PointAtTime = class _PointAtTime extends core.Object {
    get time() {
      return this[time$];
    }
    set time(value) {
      super.time = value;
    }
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    static ['_#new#tearOff'](point, time) {
      return new velocity_tracker._PointAtTime.new(point, time);
    }
    toString() {
      return "_PointAtTime(" + dart.str(this.point) + " at " + dart.str(this.time) + ")";
    }
  };
  (velocity_tracker._PointAtTime.new = function(point, time) {
    this[point$] = point;
    this[time$] = time;
    ;
  }).prototype = velocity_tracker._PointAtTime.prototype;
  dart.addTypeTests(velocity_tracker._PointAtTime);
  dart.addRtiResources(velocity_tracker._PointAtTime, ["flutter__src__gestures__velocity_tracker|_PointAtTime"]);
  dart.addTypeCaches(velocity_tracker._PointAtTime);
  dart.setLibraryUri(velocity_tracker._PointAtTime, I[1]);
  dart.setFieldSignature(velocity_tracker._PointAtTime, () => dart.global.Object.setPrototypeOf({
    time: {type: T.Duration(), isConst: false, isFinal: true, libraryUri: I[3]},
    point: {type: T.Offset(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(velocity_tracker._PointAtTime))));
  dart.defineExtensionMethods(velocity_tracker._PointAtTime, ['toString']);
  var kind$ = dart.privateName(velocity_tracker, "VelocityTracker.kind");
  var _stopwatch = dart.privateName(velocity_tracker, "_stopwatch");
  var _samples = dart.privateName(velocity_tracker, "_samples");
  var _index = dart.privateName(velocity_tracker, "_index");
  var _sinceLastSample = dart.privateName(velocity_tracker, "_sinceLastSample");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  velocity_tracker.VelocityTracker = class VelocityTracker extends core.Object {
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    static ['_#withKind#tearOff'](kind) {
      return new velocity_tracker.VelocityTracker.withKind(kind);
    }
    get [_sinceLastSample]() {
      this[_stopwatch] == null ? this[_stopwatch] = binding.GestureBinding.instance.samplingClock.stopwatch() : null;
      return dart.nullCheck(this[_stopwatch]);
    }
    addPosition(time, position) {
      this[_sinceLastSample].start();
      this[_sinceLastSample].reset();
      this[_index] = this[_index] + 1;
      if (this[_index] === 20) {
        this[_index] = 0;
      }
      this[_samples][$_set](this[_index], new velocity_tracker._PointAtTime.new(position, time));
    }
    getVelocityEstimate() {
      if (this[_sinceLastSample].elapsedMilliseconds > 40) {
        return C[2] || CT.C2;
      }
      let x = G.JSArrayOfdouble().of([]);
      let y = G.JSArrayOfdouble().of([]);
      let w = G.JSArrayOfdouble().of([]);
      let time = G.JSArrayOfdouble().of([]);
      let sampleCount = 0;
      let index = this[_index];
      let newestSample = this[_samples][$_get](index);
      if (newestSample == null) {
        return null;
      }
      let previousSample = newestSample;
      let oldestSample = newestSample;
      do {
        let sample = this[_samples][$_get](index);
        if (sample == null) {
          break;
        }
        let age = newestSample.time['-'](sample.time).inMicroseconds[$toDouble]() / 1000;
        let delta = sample.time['-'](previousSample.time).inMicroseconds[$abs]()[$toDouble]() / 1000;
        previousSample = sample;
        if (age > 100 || delta > 40) {
          break;
        }
        oldestSample = sample;
        let position = sample.point;
        x[$add](position.dx);
        y[$add](position.dy);
        w[$add](1.0);
        time[$add](-age);
        index = (index === 0 ? 20 : index) - 1;
        sampleCount = sampleCount + 1;
      } while (sampleCount < 20);
      if (sampleCount >= 3) {
        let xSolver = new lsq_solver.LeastSquaresSolver.new(time, x, w);
        let xFit = xSolver.solve(2);
        if (xFit != null) {
          let ySolver = new lsq_solver.LeastSquaresSolver.new(time, y, w);
          let yFit = ySolver.solve(2);
          if (yFit != null) {
            return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: new ui.Offset.new(xFit.coefficients[$_get](1) * 1000, yFit.coefficients[$_get](1) * 1000), confidence: xFit.confidence * yFit.confidence, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
          }
        }
      }
      return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: ui.Offset.zero, confidence: 1.0, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
    }
    getVelocity() {
      let estimate = this.getVelocityEstimate();
      if (estimate == null || dart.equals(estimate.pixelsPerSecond, ui.Offset.zero)) {
        return velocity_tracker.Velocity.zero;
      }
      return new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
    }
  };
  (velocity_tracker.VelocityTracker.withKind = function(kind) {
    this[_stopwatch] = null;
    this[_samples] = G.ListOf_PointAtTimeN().filled(20, null);
    this[_index] = 0;
    this[kind$] = kind;
    ;
  }).prototype = velocity_tracker.VelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.VelocityTracker);
  dart.addRtiResources(velocity_tracker.VelocityTracker, ["flutter__src__gestures__velocity_tracker|VelocityTracker"]);
  dart.addTypeCaches(velocity_tracker.VelocityTracker);
  dart.setMethodSignature(velocity_tracker.VelocityTracker, () => dart.global.Object.setPrototypeOf({
    addPosition: T.DurationAndOffsetTovoid(),
    getVelocityEstimate: T.VoidToVelocityEstimateN(),
    getVelocity: T.VoidToVelocity()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(velocity_tracker.VelocityTracker))));
  dart.setGetterSignature(velocity_tracker.VelocityTracker, () => dart.global.Object.setPrototypeOf({[_sinceLastSample]: T.Stopwatch()}, dart.getGetters(dart.global.Object.getPrototypeOf(velocity_tracker.VelocityTracker))));
  dart.setLibraryUri(velocity_tracker.VelocityTracker, I[1]);
  dart.setFieldSignature(velocity_tracker.VelocityTracker, () => dart.global.Object.setPrototypeOf({
    kind: {type: T.PointerDeviceKind(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_stopwatch]: {type: T.StopwatchN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [_samples]: {type: T.ListOf_PointAtTimeN(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_index]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(velocity_tracker.VelocityTracker))));
  dart.setStaticFieldSignature(velocity_tracker.VelocityTracker, () => ['_assumePointerMoveStoppedMilliseconds', '_historySize', '_horizonMilliseconds', '_minSampleSize']);
  dart.defineLazy(velocity_tracker.VelocityTracker, {
    /*velocity_tracker.VelocityTracker._assumePointerMoveStoppedMilliseconds*/get _assumePointerMoveStoppedMilliseconds() {
      return 40;
    },
    /*velocity_tracker.VelocityTracker._historySize*/get _historySize() {
      return 20;
    },
    /*velocity_tracker.VelocityTracker._horizonMilliseconds*/get _horizonMilliseconds() {
      return 100;
    },
    /*velocity_tracker.VelocityTracker._minSampleSize*/get _minSampleSize() {
      return 3;
    }
  }, false);
  var _touchSamples = dart.privateName(velocity_tracker, "_touchSamples");
  var _previousVelocityAt = dart.privateName(velocity_tracker, "_previousVelocityAt");
  velocity_tracker.IOSScrollViewFlingVelocityTracker = class IOSScrollViewFlingVelocityTracker extends velocity_tracker.VelocityTracker {
    static ['_#new#tearOff'](kind) {
      return new velocity_tracker.IOSScrollViewFlingVelocityTracker.new(kind);
    }
    addPosition(time, position) {
      this[_sinceLastSample].start();
      this[_sinceLastSample].reset();
      if (!dart.fn(() => {
        let previousPoint = this[_touchSamples][$_get](this[_index]);
        if (previousPoint == null || previousPoint.time['<='](time)) {
          return true;
        }
        dart.throw(assertions.FlutterError.new("The position being added (" + dart.str(position) + ") has a smaller timestamp (" + dart.str(time) + ") " + "than its predecessor: " + dart.str(previousPoint) + "."));
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 313, 12, "() {\r\n      final _PointAtTime? previousPoint = _touchSamples[_index];\r\n      if (previousPoint == null || previousPoint.time <= time) {\r\n        return true;\r\n      }\r\n      throw FlutterError(\r\n        'The position being added ($position) has a smaller timestamp ($time) '\r\n        'than its predecessor: $previousPoint.',\r\n      );\r\n    }()");
      this[_index] = (this[_index] + 1)[$modulo](20);
      this[_touchSamples][$_set](this[_index], new velocity_tracker._PointAtTime.new(position, time));
    }
    [_previousVelocityAt](index) {
      let endIndex = (this[_index] + index)[$modulo](20);
      let startIndex = (this[_index] + index - 1)[$modulo](20);
      let end = this[_touchSamples][$_get](endIndex);
      let start = this[_touchSamples][$_get](startIndex);
      if (end == null || start == null) {
        return ui.Offset.zero;
      }
      let dt = end.time['-'](start.time).inMicroseconds;
      if (!(dt >= 0)) dart.assertFailed(null, I[0], 341, 12, "dt >= 0");
      return dt > 0 ? end.point['-'](start.point)['*'](1000.0)['/'](dt[$toDouble]() / 1000) : ui.Offset.zero;
    }
    getVelocityEstimate() {
      if (this[_sinceLastSample].elapsedMilliseconds > 40) {
        return C[2] || CT.C2;
      }
      let estimatedVelocity = this[_previousVelocityAt](-2)['*'](0.6)['+'](this[_previousVelocityAt](-1)['*'](0.35))['+'](this[_previousVelocityAt](0)['*'](0.05));
      let newestSample = this[_touchSamples][$_get](this[_index]);
      let oldestNonNullSample = null;
      for (let i = 1; i <= 20; i = i + 1) {
        oldestNonNullSample = this[_touchSamples][$_get]((this[_index] + i)[$modulo](20));
        if (oldestNonNullSample != null) {
          break;
        }
      }
      if (oldestNonNullSample == null || newestSample == null) {
        if (!false) dart.assertFailed("There must be at least 1 point in _touchSamples: " + dart.str(this[_touchSamples]), I[0], 382, 14, "false");
        return C[4] || CT.C4;
      } else {
        return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: estimatedVelocity, confidence: 1.0, duration: newestSample.time['-'](oldestNonNullSample.time), offset: newestSample.point['-'](oldestNonNullSample.point)});
      }
    }
  };
  (velocity_tracker.IOSScrollViewFlingVelocityTracker.new = function(kind) {
    this[_touchSamples] = G.ListOf_PointAtTimeN().filled(20, null);
    dart.global.Object.getPrototypeOf(velocity_tracker.IOSScrollViewFlingVelocityTracker).withKind.call(this, kind);
    ;
  }).prototype = velocity_tracker.IOSScrollViewFlingVelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.IOSScrollViewFlingVelocityTracker);
  dart.addRtiResources(velocity_tracker.IOSScrollViewFlingVelocityTracker, ["flutter__src__gestures__velocity_tracker|IOSScrollViewFlingVelocityTracker"]);
  dart.addTypeCaches(velocity_tracker.IOSScrollViewFlingVelocityTracker);
  dart.setMethodSignature(velocity_tracker.IOSScrollViewFlingVelocityTracker, () => dart.global.Object.setPrototypeOf({
    [_previousVelocityAt]: T.intToOffset(),
    getVelocityEstimate: T.VoidToVelocityEstimate()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(velocity_tracker.IOSScrollViewFlingVelocityTracker))));
  dart.setLibraryUri(velocity_tracker.IOSScrollViewFlingVelocityTracker, I[1]);
  dart.setFieldSignature(velocity_tracker.IOSScrollViewFlingVelocityTracker, () => dart.global.Object.setPrototypeOf({[_touchSamples]: {type: T.ListOf_PointAtTimeN(), isConst: false, isFinal: true, libraryUri: I[3]}}, dart.getFields(dart.global.Object.getPrototypeOf(velocity_tracker.IOSScrollViewFlingVelocityTracker))));
  dart.setStaticFieldSignature(velocity_tracker.IOSScrollViewFlingVelocityTracker, () => ['_sampleSize']);
  dart.defineLazy(velocity_tracker.IOSScrollViewFlingVelocityTracker, {
    /*velocity_tracker.IOSScrollViewFlingVelocityTracker._sampleSize*/get _sampleSize() {
      return 20;
    }
  }, false);
  velocity_tracker.MacOSScrollViewFlingVelocityTracker = class MacOSScrollViewFlingVelocityTracker extends velocity_tracker.IOSScrollViewFlingVelocityTracker {
    static ['_#new#tearOff'](kind) {
      return new velocity_tracker.MacOSScrollViewFlingVelocityTracker.new(kind);
    }
    getVelocityEstimate() {
      if (this[_sinceLastSample].elapsedMilliseconds > 40) {
        return C[2] || CT.C2;
      }
      let estimatedVelocity = this[_previousVelocityAt](-2)['*'](0.15)['+'](this[_previousVelocityAt](-1)['*'](0.65))['+'](this[_previousVelocityAt](0)['*'](0.2));
      let newestSample = this[_touchSamples][$_get](this[_index]);
      let oldestNonNullSample = null;
      for (let i = 1; i <= 20; i = i + 1) {
        oldestNonNullSample = this[_touchSamples][$_get]((this[_index] + i)[$modulo](20));
        if (oldestNonNullSample != null) {
          break;
        }
      }
      if (oldestNonNullSample == null || newestSample == null) {
        if (!false) dart.assertFailed("There must be at least 1 point in _touchSamples: " + dart.str(this[_touchSamples]), I[0], 450, 14, "false");
        return C[4] || CT.C4;
      } else {
        return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: estimatedVelocity, confidence: 1.0, duration: newestSample.time['-'](oldestNonNullSample.time), offset: newestSample.point['-'](oldestNonNullSample.point)});
      }
    }
  };
  (velocity_tracker.MacOSScrollViewFlingVelocityTracker.new = function(kind) {
    dart.global.Object.getPrototypeOf(velocity_tracker.MacOSScrollViewFlingVelocityTracker).new.call(this, kind);
    ;
  }).prototype = velocity_tracker.MacOSScrollViewFlingVelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.MacOSScrollViewFlingVelocityTracker);
  dart.addRtiResources(velocity_tracker.MacOSScrollViewFlingVelocityTracker, ["flutter__src__gestures__velocity_tracker|MacOSScrollViewFlingVelocityTracker"]);
  dart.addTypeCaches(velocity_tracker.MacOSScrollViewFlingVelocityTracker);
  dart.setLibraryUri(velocity_tracker.MacOSScrollViewFlingVelocityTracker, I[1]);
  dart.moduleConstCaches.set("packages/flutter/src/gestures/velocity_tracker.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"ui|Offset":{"ui|OffsetBase":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"ui|PointerDeviceKind":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__gestures__velocity_tracker|IOSScrollViewFlingVelocityTracker":{"flutter__src__gestures__velocity_tracker|VelocityTracker":[]},"flutter__src__gestures__velocity_tracker|MacOSScrollViewFlingVelocityTracker":{"flutter__src__gestures__velocity_tracker|IOSScrollViewFlingVelocityTracker":[],"flutter__src__gestures__velocity_tracker|VelocityTracker":[]}}'));
  dart.trackLibraries("packages/flutter/src/gestures/velocity_tracker.dart", {
    "package:flutter/src/gestures/velocity_tracker.dart": velocity_tracker
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["velocity_tracker.dart"],"names":[],"mappings":"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","file":"../../../../../../../../F:/packages/flutter/src/gestures/velocity_tracker.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__velocity_tracker: velocity_tracker
  };
}));

//# sourceMappingURL=velocity_tracker.dart.lib.js.map
